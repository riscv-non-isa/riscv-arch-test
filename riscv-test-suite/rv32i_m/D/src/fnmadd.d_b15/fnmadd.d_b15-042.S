
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fnmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31488:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffe0000000000; valaddr_reg:x3; val_offset:94464*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94464*0 + 3*0*FLEN/8, x4, x1, x2)

inst_31489:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fff0000000000; valaddr_reg:x3; val_offset:94467*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94467*0 + 3*1*FLEN/8, x4, x1, x2)

inst_31490:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fff8000000000; valaddr_reg:x3; val_offset:94470*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94470*0 + 3*2*FLEN/8, x4, x1, x2)

inst_31491:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffc000000000; valaddr_reg:x3; val_offset:94473*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94473*0 + 3*3*FLEN/8, x4, x1, x2)

inst_31492:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffe000000000; valaddr_reg:x3; val_offset:94476*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94476*0 + 3*4*FLEN/8, x4, x1, x2)

inst_31493:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffff000000000; valaddr_reg:x3; val_offset:94479*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94479*0 + 3*5*FLEN/8, x4, x1, x2)

inst_31494:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffff800000000; valaddr_reg:x3; val_offset:94482*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94482*0 + 3*6*FLEN/8, x4, x1, x2)

inst_31495:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffc00000000; valaddr_reg:x3; val_offset:94485*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94485*0 + 3*7*FLEN/8, x4, x1, x2)

inst_31496:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffe00000000; valaddr_reg:x3; val_offset:94488*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94488*0 + 3*8*FLEN/8, x4, x1, x2)

inst_31497:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffff00000000; valaddr_reg:x3; val_offset:94491*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94491*0 + 3*9*FLEN/8, x4, x1, x2)

inst_31498:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffff80000000; valaddr_reg:x3; val_offset:94494*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94494*0 + 3*10*FLEN/8, x4, x1, x2)

inst_31499:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffc0000000; valaddr_reg:x3; val_offset:94497*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94497*0 + 3*11*FLEN/8, x4, x1, x2)

inst_31500:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffe0000000; valaddr_reg:x3; val_offset:94500*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94500*0 + 3*12*FLEN/8, x4, x1, x2)

inst_31501:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffff0000000; valaddr_reg:x3; val_offset:94503*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94503*0 + 3*13*FLEN/8, x4, x1, x2)

inst_31502:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffff8000000; valaddr_reg:x3; val_offset:94506*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94506*0 + 3*14*FLEN/8, x4, x1, x2)

inst_31503:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffc000000; valaddr_reg:x3; val_offset:94509*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94509*0 + 3*15*FLEN/8, x4, x1, x2)

inst_31504:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffe000000; valaddr_reg:x3; val_offset:94512*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94512*0 + 3*16*FLEN/8, x4, x1, x2)

inst_31505:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffff000000; valaddr_reg:x3; val_offset:94515*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94515*0 + 3*17*FLEN/8, x4, x1, x2)

inst_31506:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffff800000; valaddr_reg:x3; val_offset:94518*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94518*0 + 3*18*FLEN/8, x4, x1, x2)

inst_31507:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffc00000; valaddr_reg:x3; val_offset:94521*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94521*0 + 3*19*FLEN/8, x4, x1, x2)

inst_31508:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffe00000; valaddr_reg:x3; val_offset:94524*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94524*0 + 3*20*FLEN/8, x4, x1, x2)

inst_31509:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffff00000; valaddr_reg:x3; val_offset:94527*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94527*0 + 3*21*FLEN/8, x4, x1, x2)

inst_31510:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffff80000; valaddr_reg:x3; val_offset:94530*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94530*0 + 3*22*FLEN/8, x4, x1, x2)

inst_31511:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffc0000; valaddr_reg:x3; val_offset:94533*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94533*0 + 3*23*FLEN/8, x4, x1, x2)

inst_31512:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffe0000; valaddr_reg:x3; val_offset:94536*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94536*0 + 3*24*FLEN/8, x4, x1, x2)

inst_31513:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffff0000; valaddr_reg:x3; val_offset:94539*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94539*0 + 3*25*FLEN/8, x4, x1, x2)

inst_31514:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffff8000; valaddr_reg:x3; val_offset:94542*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94542*0 + 3*26*FLEN/8, x4, x1, x2)

inst_31515:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffffc000; valaddr_reg:x3; val_offset:94545*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94545*0 + 3*27*FLEN/8, x4, x1, x2)

inst_31516:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffffe000; valaddr_reg:x3; val_offset:94548*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94548*0 + 3*28*FLEN/8, x4, x1, x2)

inst_31517:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffff000; valaddr_reg:x3; val_offset:94551*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94551*0 + 3*29*FLEN/8, x4, x1, x2)

inst_31518:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffff800; valaddr_reg:x3; val_offset:94554*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94554*0 + 3*30*FLEN/8, x4, x1, x2)

inst_31519:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffffc00; valaddr_reg:x3; val_offset:94557*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94557*0 + 3*31*FLEN/8, x4, x1, x2)

inst_31520:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffffe00; valaddr_reg:x3; val_offset:94560*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94560*0 + 3*32*FLEN/8, x4, x1, x2)

inst_31521:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffffff00; valaddr_reg:x3; val_offset:94563*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94563*0 + 3*33*FLEN/8, x4, x1, x2)

inst_31522:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffffff80; valaddr_reg:x3; val_offset:94566*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94566*0 + 3*34*FLEN/8, x4, x1, x2)

inst_31523:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffffffc0; valaddr_reg:x3; val_offset:94569*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94569*0 + 3*35*FLEN/8, x4, x1, x2)

inst_31524:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffffffe0; valaddr_reg:x3; val_offset:94572*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94572*0 + 3*36*FLEN/8, x4, x1, x2)

inst_31525:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffffff0; valaddr_reg:x3; val_offset:94575*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94575*0 + 3*37*FLEN/8, x4, x1, x2)

inst_31526:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffffff8; valaddr_reg:x3; val_offset:94578*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94578*0 + 3*38*FLEN/8, x4, x1, x2)

inst_31527:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffffffc; valaddr_reg:x3; val_offset:94581*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94581*0 + 3*39*FLEN/8, x4, x1, x2)

inst_31528:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804ffffffffffffe; valaddr_reg:x3; val_offset:94584*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94584*0 + 3*40*FLEN/8, x4, x1, x2)

inst_31529:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3708ca8c0a1b7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93708ca8c0a1b7; op2val:0x8000;
op3val:0x804fffffffffffff; valaddr_reg:x3; val_offset:94587*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94587*0 + 3*41*FLEN/8, x4, x1, x2)

inst_31530:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:94590*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94590*0 + 3*42*FLEN/8, x4, x1, x2)

inst_31531:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:94593*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94593*0 + 3*43*FLEN/8, x4, x1, x2)

inst_31532:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:94596*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94596*0 + 3*44*FLEN/8, x4, x1, x2)

inst_31533:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:94599*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94599*0 + 3*45*FLEN/8, x4, x1, x2)

inst_31534:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:94602*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94602*0 + 3*46*FLEN/8, x4, x1, x2)

inst_31535:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:94605*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94605*0 + 3*47*FLEN/8, x4, x1, x2)

inst_31536:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:94608*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94608*0 + 3*48*FLEN/8, x4, x1, x2)

inst_31537:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:94611*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94611*0 + 3*49*FLEN/8, x4, x1, x2)

inst_31538:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:94614*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94614*0 + 3*50*FLEN/8, x4, x1, x2)

inst_31539:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:94617*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94617*0 + 3*51*FLEN/8, x4, x1, x2)

inst_31540:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:94620*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94620*0 + 3*52*FLEN/8, x4, x1, x2)

inst_31541:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:94623*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94623*0 + 3*53*FLEN/8, x4, x1, x2)

inst_31542:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:94626*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94626*0 + 3*54*FLEN/8, x4, x1, x2)

inst_31543:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:94629*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94629*0 + 3*55*FLEN/8, x4, x1, x2)

inst_31544:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:94632*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94632*0 + 3*56*FLEN/8, x4, x1, x2)

inst_31545:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:94635*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94635*0 + 3*57*FLEN/8, x4, x1, x2)

inst_31546:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:94638*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94638*0 + 3*58*FLEN/8, x4, x1, x2)

inst_31547:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:94641*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94641*0 + 3*59*FLEN/8, x4, x1, x2)

inst_31548:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:94644*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94644*0 + 3*60*FLEN/8, x4, x1, x2)

inst_31549:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:94647*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94647*0 + 3*61*FLEN/8, x4, x1, x2)

inst_31550:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:94650*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94650*0 + 3*62*FLEN/8, x4, x1, x2)

inst_31551:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:94653*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94653*0 + 3*63*FLEN/8, x4, x1, x2)

inst_31552:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000000000; valaddr_reg:x3; val_offset:94656*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94656*0 + 3*64*FLEN/8, x4, x1, x2)

inst_31553:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000000001; valaddr_reg:x3; val_offset:94659*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94659*0 + 3*65*FLEN/8, x4, x1, x2)

inst_31554:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000000003; valaddr_reg:x3; val_offset:94662*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94662*0 + 3*66*FLEN/8, x4, x1, x2)

inst_31555:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000000007; valaddr_reg:x3; val_offset:94665*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94665*0 + 3*67*FLEN/8, x4, x1, x2)

inst_31556:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000000000f; valaddr_reg:x3; val_offset:94668*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94668*0 + 3*68*FLEN/8, x4, x1, x2)

inst_31557:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000000001f; valaddr_reg:x3; val_offset:94671*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94671*0 + 3*69*FLEN/8, x4, x1, x2)

inst_31558:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000000003f; valaddr_reg:x3; val_offset:94674*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94674*0 + 3*70*FLEN/8, x4, x1, x2)

inst_31559:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000000007f; valaddr_reg:x3; val_offset:94677*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94677*0 + 3*71*FLEN/8, x4, x1, x2)

inst_31560:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000000000ff; valaddr_reg:x3; val_offset:94680*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94680*0 + 3*72*FLEN/8, x4, x1, x2)

inst_31561:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000000001ff; valaddr_reg:x3; val_offset:94683*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94683*0 + 3*73*FLEN/8, x4, x1, x2)

inst_31562:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000000003ff; valaddr_reg:x3; val_offset:94686*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94686*0 + 3*74*FLEN/8, x4, x1, x2)

inst_31563:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000000007ff; valaddr_reg:x3; val_offset:94689*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94689*0 + 3*75*FLEN/8, x4, x1, x2)

inst_31564:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000000fff; valaddr_reg:x3; val_offset:94692*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94692*0 + 3*76*FLEN/8, x4, x1, x2)

inst_31565:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000001fff; valaddr_reg:x3; val_offset:94695*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94695*0 + 3*77*FLEN/8, x4, x1, x2)

inst_31566:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000003fff; valaddr_reg:x3; val_offset:94698*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94698*0 + 3*78*FLEN/8, x4, x1, x2)

inst_31567:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000007fff; valaddr_reg:x3; val_offset:94701*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94701*0 + 3*79*FLEN/8, x4, x1, x2)

inst_31568:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000000ffff; valaddr_reg:x3; val_offset:94704*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94704*0 + 3*80*FLEN/8, x4, x1, x2)

inst_31569:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000001ffff; valaddr_reg:x3; val_offset:94707*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94707*0 + 3*81*FLEN/8, x4, x1, x2)

inst_31570:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000003ffff; valaddr_reg:x3; val_offset:94710*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94710*0 + 3*82*FLEN/8, x4, x1, x2)

inst_31571:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000007ffff; valaddr_reg:x3; val_offset:94713*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94713*0 + 3*83*FLEN/8, x4, x1, x2)

inst_31572:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000000fffff; valaddr_reg:x3; val_offset:94716*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94716*0 + 3*84*FLEN/8, x4, x1, x2)

inst_31573:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000001fffff; valaddr_reg:x3; val_offset:94719*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94719*0 + 3*85*FLEN/8, x4, x1, x2)

inst_31574:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000003fffff; valaddr_reg:x3; val_offset:94722*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94722*0 + 3*86*FLEN/8, x4, x1, x2)

inst_31575:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000007fffff; valaddr_reg:x3; val_offset:94725*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94725*0 + 3*87*FLEN/8, x4, x1, x2)

inst_31576:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000000ffffff; valaddr_reg:x3; val_offset:94728*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94728*0 + 3*88*FLEN/8, x4, x1, x2)

inst_31577:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000001ffffff; valaddr_reg:x3; val_offset:94731*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94731*0 + 3*89*FLEN/8, x4, x1, x2)

inst_31578:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000003ffffff; valaddr_reg:x3; val_offset:94734*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94734*0 + 3*90*FLEN/8, x4, x1, x2)

inst_31579:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000007ffffff; valaddr_reg:x3; val_offset:94737*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94737*0 + 3*91*FLEN/8, x4, x1, x2)

inst_31580:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000000fffffff; valaddr_reg:x3; val_offset:94740*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94740*0 + 3*92*FLEN/8, x4, x1, x2)

inst_31581:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000001fffffff; valaddr_reg:x3; val_offset:94743*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94743*0 + 3*93*FLEN/8, x4, x1, x2)

inst_31582:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000003fffffff; valaddr_reg:x3; val_offset:94746*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94746*0 + 3*94*FLEN/8, x4, x1, x2)

inst_31583:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000007fffffff; valaddr_reg:x3; val_offset:94749*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94749*0 + 3*95*FLEN/8, x4, x1, x2)

inst_31584:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100000ffffffff; valaddr_reg:x3; val_offset:94752*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94752*0 + 3*96*FLEN/8, x4, x1, x2)

inst_31585:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100001ffffffff; valaddr_reg:x3; val_offset:94755*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94755*0 + 3*97*FLEN/8, x4, x1, x2)

inst_31586:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100003ffffffff; valaddr_reg:x3; val_offset:94758*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94758*0 + 3*98*FLEN/8, x4, x1, x2)

inst_31587:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100007ffffffff; valaddr_reg:x3; val_offset:94761*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94761*0 + 3*99*FLEN/8, x4, x1, x2)

inst_31588:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210000fffffffff; valaddr_reg:x3; val_offset:94764*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94764*0 + 3*100*FLEN/8, x4, x1, x2)

inst_31589:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210001fffffffff; valaddr_reg:x3; val_offset:94767*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94767*0 + 3*101*FLEN/8, x4, x1, x2)

inst_31590:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210003fffffffff; valaddr_reg:x3; val_offset:94770*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94770*0 + 3*102*FLEN/8, x4, x1, x2)

inst_31591:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210007fffffffff; valaddr_reg:x3; val_offset:94773*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94773*0 + 3*103*FLEN/8, x4, x1, x2)

inst_31592:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21000ffffffffff; valaddr_reg:x3; val_offset:94776*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94776*0 + 3*104*FLEN/8, x4, x1, x2)

inst_31593:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21001ffffffffff; valaddr_reg:x3; val_offset:94779*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94779*0 + 3*105*FLEN/8, x4, x1, x2)

inst_31594:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21003ffffffffff; valaddr_reg:x3; val_offset:94782*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94782*0 + 3*106*FLEN/8, x4, x1, x2)

inst_31595:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21007ffffffffff; valaddr_reg:x3; val_offset:94785*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94785*0 + 3*107*FLEN/8, x4, x1, x2)

inst_31596:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2100fffffffffff; valaddr_reg:x3; val_offset:94788*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94788*0 + 3*108*FLEN/8, x4, x1, x2)

inst_31597:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2101fffffffffff; valaddr_reg:x3; val_offset:94791*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94791*0 + 3*109*FLEN/8, x4, x1, x2)

inst_31598:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2103fffffffffff; valaddr_reg:x3; val_offset:94794*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94794*0 + 3*110*FLEN/8, x4, x1, x2)

inst_31599:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x2107fffffffffff; valaddr_reg:x3; val_offset:94797*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94797*0 + 3*111*FLEN/8, x4, x1, x2)

inst_31600:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x210ffffffffffff; valaddr_reg:x3; val_offset:94800*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94800*0 + 3*112*FLEN/8, x4, x1, x2)

inst_31601:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x211ffffffffffff; valaddr_reg:x3; val_offset:94803*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94803*0 + 3*113*FLEN/8, x4, x1, x2)

inst_31602:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x213ffffffffffff; valaddr_reg:x3; val_offset:94806*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94806*0 + 3*114*FLEN/8, x4, x1, x2)

inst_31603:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x217ffffffffffff; valaddr_reg:x3; val_offset:94809*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94809*0 + 3*115*FLEN/8, x4, x1, x2)

inst_31604:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x218000000000000; valaddr_reg:x3; val_offset:94812*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94812*0 + 3*116*FLEN/8, x4, x1, x2)

inst_31605:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21c000000000000; valaddr_reg:x3; val_offset:94815*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94815*0 + 3*117*FLEN/8, x4, x1, x2)

inst_31606:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21e000000000000; valaddr_reg:x3; val_offset:94818*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94818*0 + 3*118*FLEN/8, x4, x1, x2)

inst_31607:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21f000000000000; valaddr_reg:x3; val_offset:94821*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94821*0 + 3*119*FLEN/8, x4, x1, x2)

inst_31608:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21f800000000000; valaddr_reg:x3; val_offset:94824*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94824*0 + 3*120*FLEN/8, x4, x1, x2)

inst_31609:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fc00000000000; valaddr_reg:x3; val_offset:94827*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94827*0 + 3*121*FLEN/8, x4, x1, x2)

inst_31610:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fe00000000000; valaddr_reg:x3; val_offset:94830*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94830*0 + 3*122*FLEN/8, x4, x1, x2)

inst_31611:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ff00000000000; valaddr_reg:x3; val_offset:94833*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94833*0 + 3*123*FLEN/8, x4, x1, x2)

inst_31612:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ff80000000000; valaddr_reg:x3; val_offset:94836*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94836*0 + 3*124*FLEN/8, x4, x1, x2)

inst_31613:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffc0000000000; valaddr_reg:x3; val_offset:94839*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94839*0 + 3*125*FLEN/8, x4, x1, x2)

inst_31614:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffe0000000000; valaddr_reg:x3; val_offset:94842*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94842*0 + 3*126*FLEN/8, x4, x1, x2)

inst_31615:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fff0000000000; valaddr_reg:x3; val_offset:94845*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94845*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_31616:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fff8000000000; valaddr_reg:x3; val_offset:94848*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94848*0 + 3*128*FLEN/8, x4, x1, x2)

inst_31617:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffc000000000; valaddr_reg:x3; val_offset:94851*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94851*0 + 3*129*FLEN/8, x4, x1, x2)

inst_31618:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffe000000000; valaddr_reg:x3; val_offset:94854*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94854*0 + 3*130*FLEN/8, x4, x1, x2)

inst_31619:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffff000000000; valaddr_reg:x3; val_offset:94857*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94857*0 + 3*131*FLEN/8, x4, x1, x2)

inst_31620:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffff800000000; valaddr_reg:x3; val_offset:94860*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94860*0 + 3*132*FLEN/8, x4, x1, x2)

inst_31621:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffc00000000; valaddr_reg:x3; val_offset:94863*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94863*0 + 3*133*FLEN/8, x4, x1, x2)

inst_31622:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffe00000000; valaddr_reg:x3; val_offset:94866*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94866*0 + 3*134*FLEN/8, x4, x1, x2)

inst_31623:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffff00000000; valaddr_reg:x3; val_offset:94869*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94869*0 + 3*135*FLEN/8, x4, x1, x2)

inst_31624:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffff80000000; valaddr_reg:x3; val_offset:94872*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94872*0 + 3*136*FLEN/8, x4, x1, x2)

inst_31625:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffc0000000; valaddr_reg:x3; val_offset:94875*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94875*0 + 3*137*FLEN/8, x4, x1, x2)

inst_31626:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffe0000000; valaddr_reg:x3; val_offset:94878*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94878*0 + 3*138*FLEN/8, x4, x1, x2)

inst_31627:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffff0000000; valaddr_reg:x3; val_offset:94881*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94881*0 + 3*139*FLEN/8, x4, x1, x2)

inst_31628:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffff8000000; valaddr_reg:x3; val_offset:94884*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94884*0 + 3*140*FLEN/8, x4, x1, x2)

inst_31629:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffc000000; valaddr_reg:x3; val_offset:94887*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94887*0 + 3*141*FLEN/8, x4, x1, x2)

inst_31630:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffe000000; valaddr_reg:x3; val_offset:94890*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94890*0 + 3*142*FLEN/8, x4, x1, x2)

inst_31631:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffff000000; valaddr_reg:x3; val_offset:94893*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94893*0 + 3*143*FLEN/8, x4, x1, x2)

inst_31632:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffff800000; valaddr_reg:x3; val_offset:94896*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94896*0 + 3*144*FLEN/8, x4, x1, x2)

inst_31633:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffc00000; valaddr_reg:x3; val_offset:94899*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94899*0 + 3*145*FLEN/8, x4, x1, x2)

inst_31634:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffe00000; valaddr_reg:x3; val_offset:94902*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94902*0 + 3*146*FLEN/8, x4, x1, x2)

inst_31635:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffff00000; valaddr_reg:x3; val_offset:94905*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94905*0 + 3*147*FLEN/8, x4, x1, x2)

inst_31636:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffff80000; valaddr_reg:x3; val_offset:94908*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94908*0 + 3*148*FLEN/8, x4, x1, x2)

inst_31637:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffc0000; valaddr_reg:x3; val_offset:94911*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94911*0 + 3*149*FLEN/8, x4, x1, x2)

inst_31638:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffe0000; valaddr_reg:x3; val_offset:94914*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94914*0 + 3*150*FLEN/8, x4, x1, x2)

inst_31639:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffff0000; valaddr_reg:x3; val_offset:94917*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94917*0 + 3*151*FLEN/8, x4, x1, x2)

inst_31640:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffff8000; valaddr_reg:x3; val_offset:94920*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94920*0 + 3*152*FLEN/8, x4, x1, x2)

inst_31641:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffffc000; valaddr_reg:x3; val_offset:94923*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94923*0 + 3*153*FLEN/8, x4, x1, x2)

inst_31642:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffffe000; valaddr_reg:x3; val_offset:94926*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94926*0 + 3*154*FLEN/8, x4, x1, x2)

inst_31643:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffff000; valaddr_reg:x3; val_offset:94929*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94929*0 + 3*155*FLEN/8, x4, x1, x2)

inst_31644:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffff800; valaddr_reg:x3; val_offset:94932*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94932*0 + 3*156*FLEN/8, x4, x1, x2)

inst_31645:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffffc00; valaddr_reg:x3; val_offset:94935*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94935*0 + 3*157*FLEN/8, x4, x1, x2)

inst_31646:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffffe00; valaddr_reg:x3; val_offset:94938*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94938*0 + 3*158*FLEN/8, x4, x1, x2)

inst_31647:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffffff00; valaddr_reg:x3; val_offset:94941*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94941*0 + 3*159*FLEN/8, x4, x1, x2)

inst_31648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffffff80; valaddr_reg:x3; val_offset:94944*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94944*0 + 3*160*FLEN/8, x4, x1, x2)

inst_31649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffffffc0; valaddr_reg:x3; val_offset:94947*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94947*0 + 3*161*FLEN/8, x4, x1, x2)

inst_31650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffffffe0; valaddr_reg:x3; val_offset:94950*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94950*0 + 3*162*FLEN/8, x4, x1, x2)

inst_31651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffffff0; valaddr_reg:x3; val_offset:94953*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94953*0 + 3*163*FLEN/8, x4, x1, x2)

inst_31652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffffff8; valaddr_reg:x3; val_offset:94956*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94956*0 + 3*164*FLEN/8, x4, x1, x2)

inst_31653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffffffc; valaddr_reg:x3; val_offset:94959*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94959*0 + 3*165*FLEN/8, x4, x1, x2)

inst_31654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21ffffffffffffe; valaddr_reg:x3; val_offset:94962*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94962*0 + 3*166*FLEN/8, x4, x1, x2)

inst_31655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x37b57e9abce31 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x021 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f937b57e9abce31; op2val:0x0;
op3val:0x21fffffffffffff; valaddr_reg:x3; val_offset:94965*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94965*0 + 3*167*FLEN/8, x4, x1, x2)

inst_31656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:94968*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94968*0 + 3*168*FLEN/8, x4, x1, x2)

inst_31657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:94971*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94971*0 + 3*169*FLEN/8, x4, x1, x2)

inst_31658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:94974*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94974*0 + 3*170*FLEN/8, x4, x1, x2)

inst_31659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:94977*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94977*0 + 3*171*FLEN/8, x4, x1, x2)

inst_31660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:94980*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94980*0 + 3*172*FLEN/8, x4, x1, x2)

inst_31661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:94983*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94983*0 + 3*173*FLEN/8, x4, x1, x2)

inst_31662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:94986*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94986*0 + 3*174*FLEN/8, x4, x1, x2)

inst_31663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:94989*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94989*0 + 3*175*FLEN/8, x4, x1, x2)

inst_31664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:94992*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94992*0 + 3*176*FLEN/8, x4, x1, x2)

inst_31665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:94995*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94995*0 + 3*177*FLEN/8, x4, x1, x2)

inst_31666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:94998*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 94998*0 + 3*178*FLEN/8, x4, x1, x2)

inst_31667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:95001*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95001*0 + 3*179*FLEN/8, x4, x1, x2)

inst_31668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:95004*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95004*0 + 3*180*FLEN/8, x4, x1, x2)

inst_31669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:95007*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95007*0 + 3*181*FLEN/8, x4, x1, x2)

inst_31670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:95010*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95010*0 + 3*182*FLEN/8, x4, x1, x2)

inst_31671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:95013*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95013*0 + 3*183*FLEN/8, x4, x1, x2)

inst_31672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:95016*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95016*0 + 3*184*FLEN/8, x4, x1, x2)

inst_31673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:95019*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95019*0 + 3*185*FLEN/8, x4, x1, x2)

inst_31674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:95022*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95022*0 + 3*186*FLEN/8, x4, x1, x2)

inst_31675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:95025*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95025*0 + 3*187*FLEN/8, x4, x1, x2)

inst_31676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:95028*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95028*0 + 3*188*FLEN/8, x4, x1, x2)

inst_31677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:95031*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95031*0 + 3*189*FLEN/8, x4, x1, x2)

inst_31678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000000000; valaddr_reg:x3; val_offset:95034*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95034*0 + 3*190*FLEN/8, x4, x1, x2)

inst_31679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000000001; valaddr_reg:x3; val_offset:95037*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95037*0 + 3*191*FLEN/8, x4, x1, x2)

inst_31680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000000003; valaddr_reg:x3; val_offset:95040*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95040*0 + 3*192*FLEN/8, x4, x1, x2)

inst_31681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000000007; valaddr_reg:x3; val_offset:95043*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95043*0 + 3*193*FLEN/8, x4, x1, x2)

inst_31682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000000000f; valaddr_reg:x3; val_offset:95046*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95046*0 + 3*194*FLEN/8, x4, x1, x2)

inst_31683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000000001f; valaddr_reg:x3; val_offset:95049*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95049*0 + 3*195*FLEN/8, x4, x1, x2)

inst_31684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000000003f; valaddr_reg:x3; val_offset:95052*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95052*0 + 3*196*FLEN/8, x4, x1, x2)

inst_31685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000000007f; valaddr_reg:x3; val_offset:95055*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95055*0 + 3*197*FLEN/8, x4, x1, x2)

inst_31686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000000000ff; valaddr_reg:x3; val_offset:95058*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95058*0 + 3*198*FLEN/8, x4, x1, x2)

inst_31687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000000001ff; valaddr_reg:x3; val_offset:95061*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95061*0 + 3*199*FLEN/8, x4, x1, x2)

inst_31688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000000003ff; valaddr_reg:x3; val_offset:95064*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95064*0 + 3*200*FLEN/8, x4, x1, x2)

inst_31689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000000007ff; valaddr_reg:x3; val_offset:95067*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95067*0 + 3*201*FLEN/8, x4, x1, x2)

inst_31690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000000fff; valaddr_reg:x3; val_offset:95070*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95070*0 + 3*202*FLEN/8, x4, x1, x2)

inst_31691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000001fff; valaddr_reg:x3; val_offset:95073*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95073*0 + 3*203*FLEN/8, x4, x1, x2)

inst_31692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000003fff; valaddr_reg:x3; val_offset:95076*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95076*0 + 3*204*FLEN/8, x4, x1, x2)

inst_31693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000007fff; valaddr_reg:x3; val_offset:95079*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95079*0 + 3*205*FLEN/8, x4, x1, x2)

inst_31694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000000ffff; valaddr_reg:x3; val_offset:95082*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95082*0 + 3*206*FLEN/8, x4, x1, x2)

inst_31695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000001ffff; valaddr_reg:x3; val_offset:95085*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95085*0 + 3*207*FLEN/8, x4, x1, x2)

inst_31696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000003ffff; valaddr_reg:x3; val_offset:95088*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95088*0 + 3*208*FLEN/8, x4, x1, x2)

inst_31697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000007ffff; valaddr_reg:x3; val_offset:95091*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95091*0 + 3*209*FLEN/8, x4, x1, x2)

inst_31698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000000fffff; valaddr_reg:x3; val_offset:95094*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95094*0 + 3*210*FLEN/8, x4, x1, x2)

inst_31699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000001fffff; valaddr_reg:x3; val_offset:95097*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95097*0 + 3*211*FLEN/8, x4, x1, x2)

inst_31700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000003fffff; valaddr_reg:x3; val_offset:95100*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95100*0 + 3*212*FLEN/8, x4, x1, x2)

inst_31701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000007fffff; valaddr_reg:x3; val_offset:95103*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95103*0 + 3*213*FLEN/8, x4, x1, x2)

inst_31702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000000ffffff; valaddr_reg:x3; val_offset:95106*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95106*0 + 3*214*FLEN/8, x4, x1, x2)

inst_31703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000001ffffff; valaddr_reg:x3; val_offset:95109*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95109*0 + 3*215*FLEN/8, x4, x1, x2)

inst_31704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000003ffffff; valaddr_reg:x3; val_offset:95112*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95112*0 + 3*216*FLEN/8, x4, x1, x2)

inst_31705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000007ffffff; valaddr_reg:x3; val_offset:95115*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95115*0 + 3*217*FLEN/8, x4, x1, x2)

inst_31706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000000fffffff; valaddr_reg:x3; val_offset:95118*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95118*0 + 3*218*FLEN/8, x4, x1, x2)

inst_31707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000001fffffff; valaddr_reg:x3; val_offset:95121*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95121*0 + 3*219*FLEN/8, x4, x1, x2)

inst_31708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000003fffffff; valaddr_reg:x3; val_offset:95124*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95124*0 + 3*220*FLEN/8, x4, x1, x2)

inst_31709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000007fffffff; valaddr_reg:x3; val_offset:95127*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95127*0 + 3*221*FLEN/8, x4, x1, x2)

inst_31710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00000ffffffff; valaddr_reg:x3; val_offset:95130*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95130*0 + 3*222*FLEN/8, x4, x1, x2)

inst_31711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00001ffffffff; valaddr_reg:x3; val_offset:95133*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95133*0 + 3*223*FLEN/8, x4, x1, x2)

inst_31712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00003ffffffff; valaddr_reg:x3; val_offset:95136*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95136*0 + 3*224*FLEN/8, x4, x1, x2)

inst_31713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00007ffffffff; valaddr_reg:x3; val_offset:95139*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95139*0 + 3*225*FLEN/8, x4, x1, x2)

inst_31714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0000fffffffff; valaddr_reg:x3; val_offset:95142*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95142*0 + 3*226*FLEN/8, x4, x1, x2)

inst_31715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0001fffffffff; valaddr_reg:x3; val_offset:95145*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95145*0 + 3*227*FLEN/8, x4, x1, x2)

inst_31716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0003fffffffff; valaddr_reg:x3; val_offset:95148*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95148*0 + 3*228*FLEN/8, x4, x1, x2)

inst_31717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0007fffffffff; valaddr_reg:x3; val_offset:95151*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95151*0 + 3*229*FLEN/8, x4, x1, x2)

inst_31718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f000ffffffffff; valaddr_reg:x3; val_offset:95154*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95154*0 + 3*230*FLEN/8, x4, x1, x2)

inst_31719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f001ffffffffff; valaddr_reg:x3; val_offset:95157*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95157*0 + 3*231*FLEN/8, x4, x1, x2)

inst_31720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f003ffffffffff; valaddr_reg:x3; val_offset:95160*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95160*0 + 3*232*FLEN/8, x4, x1, x2)

inst_31721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f007ffffffffff; valaddr_reg:x3; val_offset:95163*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95163*0 + 3*233*FLEN/8, x4, x1, x2)

inst_31722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f00fffffffffff; valaddr_reg:x3; val_offset:95166*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95166*0 + 3*234*FLEN/8, x4, x1, x2)

inst_31723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f01fffffffffff; valaddr_reg:x3; val_offset:95169*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95169*0 + 3*235*FLEN/8, x4, x1, x2)

inst_31724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f03fffffffffff; valaddr_reg:x3; val_offset:95172*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95172*0 + 3*236*FLEN/8, x4, x1, x2)

inst_31725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f07fffffffffff; valaddr_reg:x3; val_offset:95175*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95175*0 + 3*237*FLEN/8, x4, x1, x2)

inst_31726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f0ffffffffffff; valaddr_reg:x3; val_offset:95178*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95178*0 + 3*238*FLEN/8, x4, x1, x2)

inst_31727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f1ffffffffffff; valaddr_reg:x3; val_offset:95181*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95181*0 + 3*239*FLEN/8, x4, x1, x2)

inst_31728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f3ffffffffffff; valaddr_reg:x3; val_offset:95184*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95184*0 + 3*240*FLEN/8, x4, x1, x2)

inst_31729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f7ffffffffffff; valaddr_reg:x3; val_offset:95187*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95187*0 + 3*241*FLEN/8, x4, x1, x2)

inst_31730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81f8000000000000; valaddr_reg:x3; val_offset:95190*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95190*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fc000000000000; valaddr_reg:x3; val_offset:95193*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95193*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fe000000000000; valaddr_reg:x3; val_offset:95196*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95196*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ff000000000000; valaddr_reg:x3; val_offset:95199*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95199*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ff800000000000; valaddr_reg:x3; val_offset:95202*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95202*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffc00000000000; valaddr_reg:x3; val_offset:95205*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95205*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffe00000000000; valaddr_reg:x3; val_offset:95208*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95208*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fff00000000000; valaddr_reg:x3; val_offset:95211*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95211*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fff80000000000; valaddr_reg:x3; val_offset:95214*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95214*0 + 3*250*FLEN/8, x4, x1, x2)

inst_31739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffc0000000000; valaddr_reg:x3; val_offset:95217*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95217*0 + 3*251*FLEN/8, x4, x1, x2)

inst_31740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffe0000000000; valaddr_reg:x3; val_offset:95220*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95220*0 + 3*252*FLEN/8, x4, x1, x2)

inst_31741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffff0000000000; valaddr_reg:x3; val_offset:95223*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95223*0 + 3*253*FLEN/8, x4, x1, x2)

inst_31742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffff8000000000; valaddr_reg:x3; val_offset:95226*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95226*0 + 3*254*FLEN/8, x4, x1, x2)

inst_31743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffc000000000; valaddr_reg:x3; val_offset:95229*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95229*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_31744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffe000000000; valaddr_reg:x3; val_offset:95232*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95232*0 + 3*256*FLEN/8, x4, x1, x2)

inst_31745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffff000000000; valaddr_reg:x3; val_offset:95235*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95235*0 + 3*257*FLEN/8, x4, x1, x2)

inst_31746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffff800000000; valaddr_reg:x3; val_offset:95238*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95238*0 + 3*258*FLEN/8, x4, x1, x2)

inst_31747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffc00000000; valaddr_reg:x3; val_offset:95241*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95241*0 + 3*259*FLEN/8, x4, x1, x2)

inst_31748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffe00000000; valaddr_reg:x3; val_offset:95244*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95244*0 + 3*260*FLEN/8, x4, x1, x2)

inst_31749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffff00000000; valaddr_reg:x3; val_offset:95247*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95247*0 + 3*261*FLEN/8, x4, x1, x2)

inst_31750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffff80000000; valaddr_reg:x3; val_offset:95250*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95250*0 + 3*262*FLEN/8, x4, x1, x2)

inst_31751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffc0000000; valaddr_reg:x3; val_offset:95253*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95253*0 + 3*263*FLEN/8, x4, x1, x2)

inst_31752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffe0000000; valaddr_reg:x3; val_offset:95256*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95256*0 + 3*264*FLEN/8, x4, x1, x2)

inst_31753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffff0000000; valaddr_reg:x3; val_offset:95259*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95259*0 + 3*265*FLEN/8, x4, x1, x2)

inst_31754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffff8000000; valaddr_reg:x3; val_offset:95262*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95262*0 + 3*266*FLEN/8, x4, x1, x2)

inst_31755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffc000000; valaddr_reg:x3; val_offset:95265*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95265*0 + 3*267*FLEN/8, x4, x1, x2)

inst_31756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffe000000; valaddr_reg:x3; val_offset:95268*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95268*0 + 3*268*FLEN/8, x4, x1, x2)

inst_31757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffff000000; valaddr_reg:x3; val_offset:95271*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95271*0 + 3*269*FLEN/8, x4, x1, x2)

inst_31758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffff800000; valaddr_reg:x3; val_offset:95274*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95274*0 + 3*270*FLEN/8, x4, x1, x2)

inst_31759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffc00000; valaddr_reg:x3; val_offset:95277*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95277*0 + 3*271*FLEN/8, x4, x1, x2)

inst_31760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffe00000; valaddr_reg:x3; val_offset:95280*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95280*0 + 3*272*FLEN/8, x4, x1, x2)

inst_31761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffff00000; valaddr_reg:x3; val_offset:95283*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95283*0 + 3*273*FLEN/8, x4, x1, x2)

inst_31762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffff80000; valaddr_reg:x3; val_offset:95286*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95286*0 + 3*274*FLEN/8, x4, x1, x2)

inst_31763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffc0000; valaddr_reg:x3; val_offset:95289*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95289*0 + 3*275*FLEN/8, x4, x1, x2)

inst_31764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffe0000; valaddr_reg:x3; val_offset:95292*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95292*0 + 3*276*FLEN/8, x4, x1, x2)

inst_31765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffff0000; valaddr_reg:x3; val_offset:95295*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95295*0 + 3*277*FLEN/8, x4, x1, x2)

inst_31766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffff8000; valaddr_reg:x3; val_offset:95298*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95298*0 + 3*278*FLEN/8, x4, x1, x2)

inst_31767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffffc000; valaddr_reg:x3; val_offset:95301*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95301*0 + 3*279*FLEN/8, x4, x1, x2)

inst_31768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffffe000; valaddr_reg:x3; val_offset:95304*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95304*0 + 3*280*FLEN/8, x4, x1, x2)

inst_31769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffff000; valaddr_reg:x3; val_offset:95307*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95307*0 + 3*281*FLEN/8, x4, x1, x2)

inst_31770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffff800; valaddr_reg:x3; val_offset:95310*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95310*0 + 3*282*FLEN/8, x4, x1, x2)

inst_31771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffffc00; valaddr_reg:x3; val_offset:95313*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95313*0 + 3*283*FLEN/8, x4, x1, x2)

inst_31772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffffe00; valaddr_reg:x3; val_offset:95316*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95316*0 + 3*284*FLEN/8, x4, x1, x2)

inst_31773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffffff00; valaddr_reg:x3; val_offset:95319*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95319*0 + 3*285*FLEN/8, x4, x1, x2)

inst_31774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffffff80; valaddr_reg:x3; val_offset:95322*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95322*0 + 3*286*FLEN/8, x4, x1, x2)

inst_31775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffffffc0; valaddr_reg:x3; val_offset:95325*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95325*0 + 3*287*FLEN/8, x4, x1, x2)

inst_31776:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffffffe0; valaddr_reg:x3; val_offset:95328*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95328*0 + 3*288*FLEN/8, x4, x1, x2)

inst_31777:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffffff0; valaddr_reg:x3; val_offset:95331*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95331*0 + 3*289*FLEN/8, x4, x1, x2)

inst_31778:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffffff8; valaddr_reg:x3; val_offset:95334*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95334*0 + 3*290*FLEN/8, x4, x1, x2)

inst_31779:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffffffc; valaddr_reg:x3; val_offset:95337*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95337*0 + 3*291*FLEN/8, x4, x1, x2)

inst_31780:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81fffffffffffffe; valaddr_reg:x3; val_offset:95340*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95340*0 + 3*292*FLEN/8, x4, x1, x2)

inst_31781:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x381d474507a13 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01f and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9381d474507a13; op2val:0x8000;
op3val:0x81ffffffffffffff; valaddr_reg:x3; val_offset:95343*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95343*0 + 3*293*FLEN/8, x4, x1, x2)

inst_31782:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:95346*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95346*0 + 3*294*FLEN/8, x4, x1, x2)

inst_31783:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:95349*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95349*0 + 3*295*FLEN/8, x4, x1, x2)

inst_31784:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:95352*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95352*0 + 3*296*FLEN/8, x4, x1, x2)

inst_31785:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:95355*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95355*0 + 3*297*FLEN/8, x4, x1, x2)

inst_31786:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:95358*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95358*0 + 3*298*FLEN/8, x4, x1, x2)

inst_31787:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:95361*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95361*0 + 3*299*FLEN/8, x4, x1, x2)

inst_31788:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:95364*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95364*0 + 3*300*FLEN/8, x4, x1, x2)

inst_31789:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:95367*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95367*0 + 3*301*FLEN/8, x4, x1, x2)

inst_31790:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:95370*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95370*0 + 3*302*FLEN/8, x4, x1, x2)

inst_31791:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:95373*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95373*0 + 3*303*FLEN/8, x4, x1, x2)

inst_31792:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:95376*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95376*0 + 3*304*FLEN/8, x4, x1, x2)

inst_31793:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:95379*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95379*0 + 3*305*FLEN/8, x4, x1, x2)

inst_31794:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:95382*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95382*0 + 3*306*FLEN/8, x4, x1, x2)

inst_31795:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:95385*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95385*0 + 3*307*FLEN/8, x4, x1, x2)

inst_31796:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:95388*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95388*0 + 3*308*FLEN/8, x4, x1, x2)

inst_31797:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:95391*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95391*0 + 3*309*FLEN/8, x4, x1, x2)

inst_31798:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:95394*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95394*0 + 3*310*FLEN/8, x4, x1, x2)

inst_31799:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:95397*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95397*0 + 3*311*FLEN/8, x4, x1, x2)

inst_31800:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:95400*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95400*0 + 3*312*FLEN/8, x4, x1, x2)

inst_31801:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:95403*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95403*0 + 3*313*FLEN/8, x4, x1, x2)

inst_31802:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:95406*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95406*0 + 3*314*FLEN/8, x4, x1, x2)

inst_31803:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:95409*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95409*0 + 3*315*FLEN/8, x4, x1, x2)

inst_31804:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000000000; valaddr_reg:x3; val_offset:95412*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95412*0 + 3*316*FLEN/8, x4, x1, x2)

inst_31805:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000000001; valaddr_reg:x3; val_offset:95415*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95415*0 + 3*317*FLEN/8, x4, x1, x2)

inst_31806:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000000003; valaddr_reg:x3; val_offset:95418*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95418*0 + 3*318*FLEN/8, x4, x1, x2)

inst_31807:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000000007; valaddr_reg:x3; val_offset:95421*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95421*0 + 3*319*FLEN/8, x4, x1, x2)

inst_31808:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000000000f; valaddr_reg:x3; val_offset:95424*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95424*0 + 3*320*FLEN/8, x4, x1, x2)

inst_31809:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000000001f; valaddr_reg:x3; val_offset:95427*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95427*0 + 3*321*FLEN/8, x4, x1, x2)

inst_31810:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000000003f; valaddr_reg:x3; val_offset:95430*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95430*0 + 3*322*FLEN/8, x4, x1, x2)

inst_31811:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000000007f; valaddr_reg:x3; val_offset:95433*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95433*0 + 3*323*FLEN/8, x4, x1, x2)

inst_31812:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000000000ff; valaddr_reg:x3; val_offset:95436*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95436*0 + 3*324*FLEN/8, x4, x1, x2)

inst_31813:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000000001ff; valaddr_reg:x3; val_offset:95439*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95439*0 + 3*325*FLEN/8, x4, x1, x2)

inst_31814:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000000003ff; valaddr_reg:x3; val_offset:95442*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95442*0 + 3*326*FLEN/8, x4, x1, x2)

inst_31815:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000000007ff; valaddr_reg:x3; val_offset:95445*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95445*0 + 3*327*FLEN/8, x4, x1, x2)

inst_31816:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000000fff; valaddr_reg:x3; val_offset:95448*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95448*0 + 3*328*FLEN/8, x4, x1, x2)

inst_31817:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000001fff; valaddr_reg:x3; val_offset:95451*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95451*0 + 3*329*FLEN/8, x4, x1, x2)

inst_31818:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000003fff; valaddr_reg:x3; val_offset:95454*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95454*0 + 3*330*FLEN/8, x4, x1, x2)

inst_31819:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000007fff; valaddr_reg:x3; val_offset:95457*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95457*0 + 3*331*FLEN/8, x4, x1, x2)

inst_31820:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000000ffff; valaddr_reg:x3; val_offset:95460*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95460*0 + 3*332*FLEN/8, x4, x1, x2)

inst_31821:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000001ffff; valaddr_reg:x3; val_offset:95463*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95463*0 + 3*333*FLEN/8, x4, x1, x2)

inst_31822:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000003ffff; valaddr_reg:x3; val_offset:95466*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95466*0 + 3*334*FLEN/8, x4, x1, x2)

inst_31823:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000007ffff; valaddr_reg:x3; val_offset:95469*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95469*0 + 3*335*FLEN/8, x4, x1, x2)

inst_31824:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000000fffff; valaddr_reg:x3; val_offset:95472*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95472*0 + 3*336*FLEN/8, x4, x1, x2)

inst_31825:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000001fffff; valaddr_reg:x3; val_offset:95475*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95475*0 + 3*337*FLEN/8, x4, x1, x2)

inst_31826:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000003fffff; valaddr_reg:x3; val_offset:95478*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95478*0 + 3*338*FLEN/8, x4, x1, x2)

inst_31827:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000007fffff; valaddr_reg:x3; val_offset:95481*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95481*0 + 3*339*FLEN/8, x4, x1, x2)

inst_31828:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000000ffffff; valaddr_reg:x3; val_offset:95484*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95484*0 + 3*340*FLEN/8, x4, x1, x2)

inst_31829:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000001ffffff; valaddr_reg:x3; val_offset:95487*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95487*0 + 3*341*FLEN/8, x4, x1, x2)

inst_31830:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000003ffffff; valaddr_reg:x3; val_offset:95490*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95490*0 + 3*342*FLEN/8, x4, x1, x2)

inst_31831:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000007ffffff; valaddr_reg:x3; val_offset:95493*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95493*0 + 3*343*FLEN/8, x4, x1, x2)

inst_31832:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000000fffffff; valaddr_reg:x3; val_offset:95496*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95496*0 + 3*344*FLEN/8, x4, x1, x2)

inst_31833:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000001fffffff; valaddr_reg:x3; val_offset:95499*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95499*0 + 3*345*FLEN/8, x4, x1, x2)

inst_31834:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000003fffffff; valaddr_reg:x3; val_offset:95502*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95502*0 + 3*346*FLEN/8, x4, x1, x2)

inst_31835:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000007fffffff; valaddr_reg:x3; val_offset:95505*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95505*0 + 3*347*FLEN/8, x4, x1, x2)

inst_31836:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300000ffffffff; valaddr_reg:x3; val_offset:95508*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95508*0 + 3*348*FLEN/8, x4, x1, x2)

inst_31837:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300001ffffffff; valaddr_reg:x3; val_offset:95511*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95511*0 + 3*349*FLEN/8, x4, x1, x2)

inst_31838:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300003ffffffff; valaddr_reg:x3; val_offset:95514*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95514*0 + 3*350*FLEN/8, x4, x1, x2)

inst_31839:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300007ffffffff; valaddr_reg:x3; val_offset:95517*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95517*0 + 3*351*FLEN/8, x4, x1, x2)

inst_31840:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330000fffffffff; valaddr_reg:x3; val_offset:95520*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95520*0 + 3*352*FLEN/8, x4, x1, x2)

inst_31841:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330001fffffffff; valaddr_reg:x3; val_offset:95523*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95523*0 + 3*353*FLEN/8, x4, x1, x2)

inst_31842:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330003fffffffff; valaddr_reg:x3; val_offset:95526*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95526*0 + 3*354*FLEN/8, x4, x1, x2)

inst_31843:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330007fffffffff; valaddr_reg:x3; val_offset:95529*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95529*0 + 3*355*FLEN/8, x4, x1, x2)

inst_31844:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833000ffffffffff; valaddr_reg:x3; val_offset:95532*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95532*0 + 3*356*FLEN/8, x4, x1, x2)

inst_31845:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833001ffffffffff; valaddr_reg:x3; val_offset:95535*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95535*0 + 3*357*FLEN/8, x4, x1, x2)

inst_31846:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833003ffffffffff; valaddr_reg:x3; val_offset:95538*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95538*0 + 3*358*FLEN/8, x4, x1, x2)

inst_31847:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833007ffffffffff; valaddr_reg:x3; val_offset:95541*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95541*0 + 3*359*FLEN/8, x4, x1, x2)

inst_31848:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83300fffffffffff; valaddr_reg:x3; val_offset:95544*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95544*0 + 3*360*FLEN/8, x4, x1, x2)

inst_31849:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83301fffffffffff; valaddr_reg:x3; val_offset:95547*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95547*0 + 3*361*FLEN/8, x4, x1, x2)

inst_31850:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83303fffffffffff; valaddr_reg:x3; val_offset:95550*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95550*0 + 3*362*FLEN/8, x4, x1, x2)

inst_31851:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x83307fffffffffff; valaddr_reg:x3; val_offset:95553*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95553*0 + 3*363*FLEN/8, x4, x1, x2)

inst_31852:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8330ffffffffffff; valaddr_reg:x3; val_offset:95556*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95556*0 + 3*364*FLEN/8, x4, x1, x2)

inst_31853:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8331ffffffffffff; valaddr_reg:x3; val_offset:95559*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95559*0 + 3*365*FLEN/8, x4, x1, x2)

inst_31854:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8333ffffffffffff; valaddr_reg:x3; val_offset:95562*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95562*0 + 3*366*FLEN/8, x4, x1, x2)

inst_31855:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8337ffffffffffff; valaddr_reg:x3; val_offset:95565*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95565*0 + 3*367*FLEN/8, x4, x1, x2)

inst_31856:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x8338000000000000; valaddr_reg:x3; val_offset:95568*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95568*0 + 3*368*FLEN/8, x4, x1, x2)

inst_31857:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833c000000000000; valaddr_reg:x3; val_offset:95571*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95571*0 + 3*369*FLEN/8, x4, x1, x2)

inst_31858:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833e000000000000; valaddr_reg:x3; val_offset:95574*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95574*0 + 3*370*FLEN/8, x4, x1, x2)

inst_31859:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833f000000000000; valaddr_reg:x3; val_offset:95577*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95577*0 + 3*371*FLEN/8, x4, x1, x2)

inst_31860:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833f800000000000; valaddr_reg:x3; val_offset:95580*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95580*0 + 3*372*FLEN/8, x4, x1, x2)

inst_31861:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fc00000000000; valaddr_reg:x3; val_offset:95583*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95583*0 + 3*373*FLEN/8, x4, x1, x2)

inst_31862:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fe00000000000; valaddr_reg:x3; val_offset:95586*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95586*0 + 3*374*FLEN/8, x4, x1, x2)

inst_31863:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ff00000000000; valaddr_reg:x3; val_offset:95589*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95589*0 + 3*375*FLEN/8, x4, x1, x2)

inst_31864:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ff80000000000; valaddr_reg:x3; val_offset:95592*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95592*0 + 3*376*FLEN/8, x4, x1, x2)

inst_31865:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffc0000000000; valaddr_reg:x3; val_offset:95595*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95595*0 + 3*377*FLEN/8, x4, x1, x2)

inst_31866:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffe0000000000; valaddr_reg:x3; val_offset:95598*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95598*0 + 3*378*FLEN/8, x4, x1, x2)

inst_31867:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fff0000000000; valaddr_reg:x3; val_offset:95601*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95601*0 + 3*379*FLEN/8, x4, x1, x2)

inst_31868:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fff8000000000; valaddr_reg:x3; val_offset:95604*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95604*0 + 3*380*FLEN/8, x4, x1, x2)

inst_31869:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffc000000000; valaddr_reg:x3; val_offset:95607*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95607*0 + 3*381*FLEN/8, x4, x1, x2)

inst_31870:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffe000000000; valaddr_reg:x3; val_offset:95610*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95610*0 + 3*382*FLEN/8, x4, x1, x2)

inst_31871:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffff000000000; valaddr_reg:x3; val_offset:95613*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95613*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_31872:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffff800000000; valaddr_reg:x3; val_offset:95616*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95616*0 + 3*384*FLEN/8, x4, x1, x2)

inst_31873:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffc00000000; valaddr_reg:x3; val_offset:95619*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95619*0 + 3*385*FLEN/8, x4, x1, x2)

inst_31874:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffe00000000; valaddr_reg:x3; val_offset:95622*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95622*0 + 3*386*FLEN/8, x4, x1, x2)

inst_31875:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffff00000000; valaddr_reg:x3; val_offset:95625*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95625*0 + 3*387*FLEN/8, x4, x1, x2)

inst_31876:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffff80000000; valaddr_reg:x3; val_offset:95628*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95628*0 + 3*388*FLEN/8, x4, x1, x2)

inst_31877:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffc0000000; valaddr_reg:x3; val_offset:95631*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95631*0 + 3*389*FLEN/8, x4, x1, x2)

inst_31878:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffe0000000; valaddr_reg:x3; val_offset:95634*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95634*0 + 3*390*FLEN/8, x4, x1, x2)

inst_31879:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffff0000000; valaddr_reg:x3; val_offset:95637*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95637*0 + 3*391*FLEN/8, x4, x1, x2)

inst_31880:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffff8000000; valaddr_reg:x3; val_offset:95640*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95640*0 + 3*392*FLEN/8, x4, x1, x2)

inst_31881:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffc000000; valaddr_reg:x3; val_offset:95643*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95643*0 + 3*393*FLEN/8, x4, x1, x2)

inst_31882:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffe000000; valaddr_reg:x3; val_offset:95646*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95646*0 + 3*394*FLEN/8, x4, x1, x2)

inst_31883:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffff000000; valaddr_reg:x3; val_offset:95649*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95649*0 + 3*395*FLEN/8, x4, x1, x2)

inst_31884:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffff800000; valaddr_reg:x3; val_offset:95652*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95652*0 + 3*396*FLEN/8, x4, x1, x2)

inst_31885:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffc00000; valaddr_reg:x3; val_offset:95655*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95655*0 + 3*397*FLEN/8, x4, x1, x2)

inst_31886:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffe00000; valaddr_reg:x3; val_offset:95658*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95658*0 + 3*398*FLEN/8, x4, x1, x2)

inst_31887:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffff00000; valaddr_reg:x3; val_offset:95661*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95661*0 + 3*399*FLEN/8, x4, x1, x2)

inst_31888:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffff80000; valaddr_reg:x3; val_offset:95664*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95664*0 + 3*400*FLEN/8, x4, x1, x2)

inst_31889:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffc0000; valaddr_reg:x3; val_offset:95667*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95667*0 + 3*401*FLEN/8, x4, x1, x2)

inst_31890:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffe0000; valaddr_reg:x3; val_offset:95670*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95670*0 + 3*402*FLEN/8, x4, x1, x2)

inst_31891:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffff0000; valaddr_reg:x3; val_offset:95673*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95673*0 + 3*403*FLEN/8, x4, x1, x2)

inst_31892:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffff8000; valaddr_reg:x3; val_offset:95676*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95676*0 + 3*404*FLEN/8, x4, x1, x2)

inst_31893:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffffc000; valaddr_reg:x3; val_offset:95679*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95679*0 + 3*405*FLEN/8, x4, x1, x2)

inst_31894:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffffe000; valaddr_reg:x3; val_offset:95682*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95682*0 + 3*406*FLEN/8, x4, x1, x2)

inst_31895:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffff000; valaddr_reg:x3; val_offset:95685*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95685*0 + 3*407*FLEN/8, x4, x1, x2)

inst_31896:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffff800; valaddr_reg:x3; val_offset:95688*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95688*0 + 3*408*FLEN/8, x4, x1, x2)

inst_31897:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffffc00; valaddr_reg:x3; val_offset:95691*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95691*0 + 3*409*FLEN/8, x4, x1, x2)

inst_31898:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffffe00; valaddr_reg:x3; val_offset:95694*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95694*0 + 3*410*FLEN/8, x4, x1, x2)

inst_31899:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffffff00; valaddr_reg:x3; val_offset:95697*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95697*0 + 3*411*FLEN/8, x4, x1, x2)

inst_31900:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffffff80; valaddr_reg:x3; val_offset:95700*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95700*0 + 3*412*FLEN/8, x4, x1, x2)

inst_31901:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffffffc0; valaddr_reg:x3; val_offset:95703*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95703*0 + 3*413*FLEN/8, x4, x1, x2)

inst_31902:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffffffe0; valaddr_reg:x3; val_offset:95706*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95706*0 + 3*414*FLEN/8, x4, x1, x2)

inst_31903:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffffff0; valaddr_reg:x3; val_offset:95709*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95709*0 + 3*415*FLEN/8, x4, x1, x2)

inst_31904:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffffff8; valaddr_reg:x3; val_offset:95712*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95712*0 + 3*416*FLEN/8, x4, x1, x2)

inst_31905:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffffffc; valaddr_reg:x3; val_offset:95715*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95715*0 + 3*417*FLEN/8, x4, x1, x2)

inst_31906:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833ffffffffffffe; valaddr_reg:x3; val_offset:95718*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95718*0 + 3*418*FLEN/8, x4, x1, x2)

inst_31907:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38aa27d9f85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938aa27d9f85c9; op2val:0x8000;
op3val:0x833fffffffffffff; valaddr_reg:x3; val_offset:95721*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95721*0 + 3*419*FLEN/8, x4, x1, x2)

inst_31908:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:95724*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95724*0 + 3*420*FLEN/8, x4, x1, x2)

inst_31909:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:95727*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95727*0 + 3*421*FLEN/8, x4, x1, x2)

inst_31910:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:95730*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95730*0 + 3*422*FLEN/8, x4, x1, x2)

inst_31911:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:95733*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95733*0 + 3*423*FLEN/8, x4, x1, x2)

inst_31912:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:95736*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95736*0 + 3*424*FLEN/8, x4, x1, x2)

inst_31913:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:95739*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95739*0 + 3*425*FLEN/8, x4, x1, x2)

inst_31914:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:95742*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95742*0 + 3*426*FLEN/8, x4, x1, x2)

inst_31915:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:95745*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95745*0 + 3*427*FLEN/8, x4, x1, x2)

inst_31916:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:95748*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95748*0 + 3*428*FLEN/8, x4, x1, x2)

inst_31917:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:95751*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95751*0 + 3*429*FLEN/8, x4, x1, x2)

inst_31918:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:95754*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95754*0 + 3*430*FLEN/8, x4, x1, x2)

inst_31919:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:95757*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95757*0 + 3*431*FLEN/8, x4, x1, x2)

inst_31920:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:95760*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95760*0 + 3*432*FLEN/8, x4, x1, x2)

inst_31921:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:95763*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95763*0 + 3*433*FLEN/8, x4, x1, x2)

inst_31922:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:95766*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95766*0 + 3*434*FLEN/8, x4, x1, x2)

inst_31923:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:95769*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95769*0 + 3*435*FLEN/8, x4, x1, x2)

inst_31924:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:95772*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95772*0 + 3*436*FLEN/8, x4, x1, x2)

inst_31925:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:95775*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95775*0 + 3*437*FLEN/8, x4, x1, x2)

inst_31926:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:95778*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95778*0 + 3*438*FLEN/8, x4, x1, x2)

inst_31927:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:95781*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95781*0 + 3*439*FLEN/8, x4, x1, x2)

inst_31928:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:95784*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95784*0 + 3*440*FLEN/8, x4, x1, x2)

inst_31929:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:95787*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95787*0 + 3*441*FLEN/8, x4, x1, x2)

inst_31930:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000000000; valaddr_reg:x3; val_offset:95790*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95790*0 + 3*442*FLEN/8, x4, x1, x2)

inst_31931:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000000001; valaddr_reg:x3; val_offset:95793*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95793*0 + 3*443*FLEN/8, x4, x1, x2)

inst_31932:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000000003; valaddr_reg:x3; val_offset:95796*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95796*0 + 3*444*FLEN/8, x4, x1, x2)

inst_31933:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000000007; valaddr_reg:x3; val_offset:95799*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95799*0 + 3*445*FLEN/8, x4, x1, x2)

inst_31934:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000000000f; valaddr_reg:x3; val_offset:95802*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95802*0 + 3*446*FLEN/8, x4, x1, x2)

inst_31935:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000000001f; valaddr_reg:x3; val_offset:95805*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95805*0 + 3*447*FLEN/8, x4, x1, x2)

inst_31936:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000000003f; valaddr_reg:x3; val_offset:95808*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95808*0 + 3*448*FLEN/8, x4, x1, x2)

inst_31937:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000000007f; valaddr_reg:x3; val_offset:95811*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95811*0 + 3*449*FLEN/8, x4, x1, x2)

inst_31938:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000000000ff; valaddr_reg:x3; val_offset:95814*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95814*0 + 3*450*FLEN/8, x4, x1, x2)

inst_31939:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000000001ff; valaddr_reg:x3; val_offset:95817*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95817*0 + 3*451*FLEN/8, x4, x1, x2)

inst_31940:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000000003ff; valaddr_reg:x3; val_offset:95820*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95820*0 + 3*452*FLEN/8, x4, x1, x2)

inst_31941:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000000007ff; valaddr_reg:x3; val_offset:95823*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95823*0 + 3*453*FLEN/8, x4, x1, x2)

inst_31942:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000000fff; valaddr_reg:x3; val_offset:95826*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95826*0 + 3*454*FLEN/8, x4, x1, x2)

inst_31943:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000001fff; valaddr_reg:x3; val_offset:95829*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95829*0 + 3*455*FLEN/8, x4, x1, x2)

inst_31944:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000003fff; valaddr_reg:x3; val_offset:95832*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95832*0 + 3*456*FLEN/8, x4, x1, x2)

inst_31945:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000007fff; valaddr_reg:x3; val_offset:95835*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95835*0 + 3*457*FLEN/8, x4, x1, x2)

inst_31946:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000000ffff; valaddr_reg:x3; val_offset:95838*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95838*0 + 3*458*FLEN/8, x4, x1, x2)

inst_31947:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000001ffff; valaddr_reg:x3; val_offset:95841*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95841*0 + 3*459*FLEN/8, x4, x1, x2)

inst_31948:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000003ffff; valaddr_reg:x3; val_offset:95844*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95844*0 + 3*460*FLEN/8, x4, x1, x2)

inst_31949:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000007ffff; valaddr_reg:x3; val_offset:95847*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95847*0 + 3*461*FLEN/8, x4, x1, x2)

inst_31950:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000000fffff; valaddr_reg:x3; val_offset:95850*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95850*0 + 3*462*FLEN/8, x4, x1, x2)

inst_31951:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000001fffff; valaddr_reg:x3; val_offset:95853*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95853*0 + 3*463*FLEN/8, x4, x1, x2)

inst_31952:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000003fffff; valaddr_reg:x3; val_offset:95856*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95856*0 + 3*464*FLEN/8, x4, x1, x2)

inst_31953:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000007fffff; valaddr_reg:x3; val_offset:95859*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95859*0 + 3*465*FLEN/8, x4, x1, x2)

inst_31954:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000000ffffff; valaddr_reg:x3; val_offset:95862*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95862*0 + 3*466*FLEN/8, x4, x1, x2)

inst_31955:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000001ffffff; valaddr_reg:x3; val_offset:95865*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95865*0 + 3*467*FLEN/8, x4, x1, x2)

inst_31956:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000003ffffff; valaddr_reg:x3; val_offset:95868*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95868*0 + 3*468*FLEN/8, x4, x1, x2)

inst_31957:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000007ffffff; valaddr_reg:x3; val_offset:95871*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95871*0 + 3*469*FLEN/8, x4, x1, x2)

inst_31958:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000000fffffff; valaddr_reg:x3; val_offset:95874*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95874*0 + 3*470*FLEN/8, x4, x1, x2)

inst_31959:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000001fffffff; valaddr_reg:x3; val_offset:95877*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95877*0 + 3*471*FLEN/8, x4, x1, x2)

inst_31960:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000003fffffff; valaddr_reg:x3; val_offset:95880*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95880*0 + 3*472*FLEN/8, x4, x1, x2)

inst_31961:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000007fffffff; valaddr_reg:x3; val_offset:95883*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95883*0 + 3*473*FLEN/8, x4, x1, x2)

inst_31962:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100000ffffffff; valaddr_reg:x3; val_offset:95886*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95886*0 + 3*474*FLEN/8, x4, x1, x2)

inst_31963:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100001ffffffff; valaddr_reg:x3; val_offset:95889*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95889*0 + 3*475*FLEN/8, x4, x1, x2)

inst_31964:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100003ffffffff; valaddr_reg:x3; val_offset:95892*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95892*0 + 3*476*FLEN/8, x4, x1, x2)

inst_31965:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100007ffffffff; valaddr_reg:x3; val_offset:95895*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95895*0 + 3*477*FLEN/8, x4, x1, x2)

inst_31966:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110000fffffffff; valaddr_reg:x3; val_offset:95898*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95898*0 + 3*478*FLEN/8, x4, x1, x2)

inst_31967:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110001fffffffff; valaddr_reg:x3; val_offset:95901*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95901*0 + 3*479*FLEN/8, x4, x1, x2)

inst_31968:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110003fffffffff; valaddr_reg:x3; val_offset:95904*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95904*0 + 3*480*FLEN/8, x4, x1, x2)

inst_31969:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110007fffffffff; valaddr_reg:x3; val_offset:95907*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95907*0 + 3*481*FLEN/8, x4, x1, x2)

inst_31970:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811000ffffffffff; valaddr_reg:x3; val_offset:95910*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95910*0 + 3*482*FLEN/8, x4, x1, x2)

inst_31971:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811001ffffffffff; valaddr_reg:x3; val_offset:95913*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95913*0 + 3*483*FLEN/8, x4, x1, x2)

inst_31972:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811003ffffffffff; valaddr_reg:x3; val_offset:95916*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95916*0 + 3*484*FLEN/8, x4, x1, x2)

inst_31973:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811007ffffffffff; valaddr_reg:x3; val_offset:95919*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95919*0 + 3*485*FLEN/8, x4, x1, x2)

inst_31974:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81100fffffffffff; valaddr_reg:x3; val_offset:95922*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95922*0 + 3*486*FLEN/8, x4, x1, x2)

inst_31975:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81101fffffffffff; valaddr_reg:x3; val_offset:95925*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95925*0 + 3*487*FLEN/8, x4, x1, x2)

inst_31976:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81103fffffffffff; valaddr_reg:x3; val_offset:95928*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95928*0 + 3*488*FLEN/8, x4, x1, x2)

inst_31977:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x81107fffffffffff; valaddr_reg:x3; val_offset:95931*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95931*0 + 3*489*FLEN/8, x4, x1, x2)

inst_31978:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8110ffffffffffff; valaddr_reg:x3; val_offset:95934*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95934*0 + 3*490*FLEN/8, x4, x1, x2)

inst_31979:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8111ffffffffffff; valaddr_reg:x3; val_offset:95937*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95937*0 + 3*491*FLEN/8, x4, x1, x2)

inst_31980:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8113ffffffffffff; valaddr_reg:x3; val_offset:95940*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95940*0 + 3*492*FLEN/8, x4, x1, x2)

inst_31981:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8117ffffffffffff; valaddr_reg:x3; val_offset:95943*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95943*0 + 3*493*FLEN/8, x4, x1, x2)

inst_31982:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x8118000000000000; valaddr_reg:x3; val_offset:95946*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95946*0 + 3*494*FLEN/8, x4, x1, x2)

inst_31983:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811c000000000000; valaddr_reg:x3; val_offset:95949*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95949*0 + 3*495*FLEN/8, x4, x1, x2)

inst_31984:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811e000000000000; valaddr_reg:x3; val_offset:95952*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95952*0 + 3*496*FLEN/8, x4, x1, x2)

inst_31985:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811f000000000000; valaddr_reg:x3; val_offset:95955*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95955*0 + 3*497*FLEN/8, x4, x1, x2)

inst_31986:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811f800000000000; valaddr_reg:x3; val_offset:95958*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95958*0 + 3*498*FLEN/8, x4, x1, x2)

inst_31987:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fc00000000000; valaddr_reg:x3; val_offset:95961*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95961*0 + 3*499*FLEN/8, x4, x1, x2)

inst_31988:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fe00000000000; valaddr_reg:x3; val_offset:95964*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95964*0 + 3*500*FLEN/8, x4, x1, x2)

inst_31989:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ff00000000000; valaddr_reg:x3; val_offset:95967*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95967*0 + 3*501*FLEN/8, x4, x1, x2)

inst_31990:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ff80000000000; valaddr_reg:x3; val_offset:95970*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95970*0 + 3*502*FLEN/8, x4, x1, x2)

inst_31991:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffc0000000000; valaddr_reg:x3; val_offset:95973*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95973*0 + 3*503*FLEN/8, x4, x1, x2)

inst_31992:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffe0000000000; valaddr_reg:x3; val_offset:95976*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95976*0 + 3*504*FLEN/8, x4, x1, x2)

inst_31993:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fff0000000000; valaddr_reg:x3; val_offset:95979*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95979*0 + 3*505*FLEN/8, x4, x1, x2)

inst_31994:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fff8000000000; valaddr_reg:x3; val_offset:95982*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95982*0 + 3*506*FLEN/8, x4, x1, x2)

inst_31995:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffc000000000; valaddr_reg:x3; val_offset:95985*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95985*0 + 3*507*FLEN/8, x4, x1, x2)

inst_31996:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffe000000000; valaddr_reg:x3; val_offset:95988*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95988*0 + 3*508*FLEN/8, x4, x1, x2)

inst_31997:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffff000000000; valaddr_reg:x3; val_offset:95991*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95991*0 + 3*509*FLEN/8, x4, x1, x2)

inst_31998:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffff800000000; valaddr_reg:x3; val_offset:95994*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95994*0 + 3*510*FLEN/8, x4, x1, x2)

inst_31999:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffc00000000; valaddr_reg:x3; val_offset:95997*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 95997*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_32000:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffe00000000; valaddr_reg:x3; val_offset:96000*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96000*0 + 3*512*FLEN/8, x4, x1, x2)

inst_32001:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffff00000000; valaddr_reg:x3; val_offset:96003*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96003*0 + 3*513*FLEN/8, x4, x1, x2)

inst_32002:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffff80000000; valaddr_reg:x3; val_offset:96006*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96006*0 + 3*514*FLEN/8, x4, x1, x2)

inst_32003:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffc0000000; valaddr_reg:x3; val_offset:96009*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96009*0 + 3*515*FLEN/8, x4, x1, x2)

inst_32004:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffe0000000; valaddr_reg:x3; val_offset:96012*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96012*0 + 3*516*FLEN/8, x4, x1, x2)

inst_32005:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffff0000000; valaddr_reg:x3; val_offset:96015*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96015*0 + 3*517*FLEN/8, x4, x1, x2)

inst_32006:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffff8000000; valaddr_reg:x3; val_offset:96018*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96018*0 + 3*518*FLEN/8, x4, x1, x2)

inst_32007:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffc000000; valaddr_reg:x3; val_offset:96021*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96021*0 + 3*519*FLEN/8, x4, x1, x2)

inst_32008:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffe000000; valaddr_reg:x3; val_offset:96024*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96024*0 + 3*520*FLEN/8, x4, x1, x2)

inst_32009:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffff000000; valaddr_reg:x3; val_offset:96027*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96027*0 + 3*521*FLEN/8, x4, x1, x2)

inst_32010:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffff800000; valaddr_reg:x3; val_offset:96030*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96030*0 + 3*522*FLEN/8, x4, x1, x2)

inst_32011:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffc00000; valaddr_reg:x3; val_offset:96033*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96033*0 + 3*523*FLEN/8, x4, x1, x2)

inst_32012:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffe00000; valaddr_reg:x3; val_offset:96036*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96036*0 + 3*524*FLEN/8, x4, x1, x2)

inst_32013:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffff00000; valaddr_reg:x3; val_offset:96039*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96039*0 + 3*525*FLEN/8, x4, x1, x2)

inst_32014:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffff80000; valaddr_reg:x3; val_offset:96042*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96042*0 + 3*526*FLEN/8, x4, x1, x2)

inst_32015:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffc0000; valaddr_reg:x3; val_offset:96045*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96045*0 + 3*527*FLEN/8, x4, x1, x2)

inst_32016:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffe0000; valaddr_reg:x3; val_offset:96048*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96048*0 + 3*528*FLEN/8, x4, x1, x2)

inst_32017:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffff0000; valaddr_reg:x3; val_offset:96051*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96051*0 + 3*529*FLEN/8, x4, x1, x2)

inst_32018:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffff8000; valaddr_reg:x3; val_offset:96054*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96054*0 + 3*530*FLEN/8, x4, x1, x2)

inst_32019:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffffc000; valaddr_reg:x3; val_offset:96057*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96057*0 + 3*531*FLEN/8, x4, x1, x2)

inst_32020:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffffe000; valaddr_reg:x3; val_offset:96060*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96060*0 + 3*532*FLEN/8, x4, x1, x2)

inst_32021:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffff000; valaddr_reg:x3; val_offset:96063*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96063*0 + 3*533*FLEN/8, x4, x1, x2)

inst_32022:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffff800; valaddr_reg:x3; val_offset:96066*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96066*0 + 3*534*FLEN/8, x4, x1, x2)

inst_32023:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffffc00; valaddr_reg:x3; val_offset:96069*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96069*0 + 3*535*FLEN/8, x4, x1, x2)

inst_32024:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffffe00; valaddr_reg:x3; val_offset:96072*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96072*0 + 3*536*FLEN/8, x4, x1, x2)

inst_32025:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffffff00; valaddr_reg:x3; val_offset:96075*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96075*0 + 3*537*FLEN/8, x4, x1, x2)

inst_32026:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffffff80; valaddr_reg:x3; val_offset:96078*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96078*0 + 3*538*FLEN/8, x4, x1, x2)

inst_32027:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffffffc0; valaddr_reg:x3; val_offset:96081*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96081*0 + 3*539*FLEN/8, x4, x1, x2)

inst_32028:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffffffe0; valaddr_reg:x3; val_offset:96084*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96084*0 + 3*540*FLEN/8, x4, x1, x2)

inst_32029:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffffff0; valaddr_reg:x3; val_offset:96087*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96087*0 + 3*541*FLEN/8, x4, x1, x2)

inst_32030:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffffff8; valaddr_reg:x3; val_offset:96090*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96090*0 + 3*542*FLEN/8, x4, x1, x2)

inst_32031:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffffffc; valaddr_reg:x3; val_offset:96093*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96093*0 + 3*543*FLEN/8, x4, x1, x2)

inst_32032:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811ffffffffffffe; valaddr_reg:x3; val_offset:96096*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96096*0 + 3*544*FLEN/8, x4, x1, x2)

inst_32033:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38d3e988bba2f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938d3e988bba2f; op2val:0x8000;
op3val:0x811fffffffffffff; valaddr_reg:x3; val_offset:96099*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96099*0 + 3*545*FLEN/8, x4, x1, x2)

inst_32034:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000000000; valaddr_reg:x3; val_offset:96102*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96102*0 + 3*546*FLEN/8, x4, x1, x2)

inst_32035:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000000001; valaddr_reg:x3; val_offset:96105*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96105*0 + 3*547*FLEN/8, x4, x1, x2)

inst_32036:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000000003; valaddr_reg:x3; val_offset:96108*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96108*0 + 3*548*FLEN/8, x4, x1, x2)

inst_32037:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000000007; valaddr_reg:x3; val_offset:96111*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96111*0 + 3*549*FLEN/8, x4, x1, x2)

inst_32038:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000000000f; valaddr_reg:x3; val_offset:96114*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96114*0 + 3*550*FLEN/8, x4, x1, x2)

inst_32039:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000000001f; valaddr_reg:x3; val_offset:96117*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96117*0 + 3*551*FLEN/8, x4, x1, x2)

inst_32040:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000000003f; valaddr_reg:x3; val_offset:96120*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96120*0 + 3*552*FLEN/8, x4, x1, x2)

inst_32041:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000000007f; valaddr_reg:x3; val_offset:96123*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96123*0 + 3*553*FLEN/8, x4, x1, x2)

inst_32042:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000000000ff; valaddr_reg:x3; val_offset:96126*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96126*0 + 3*554*FLEN/8, x4, x1, x2)

inst_32043:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000000001ff; valaddr_reg:x3; val_offset:96129*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96129*0 + 3*555*FLEN/8, x4, x1, x2)

inst_32044:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000000003ff; valaddr_reg:x3; val_offset:96132*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96132*0 + 3*556*FLEN/8, x4, x1, x2)

inst_32045:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000000007ff; valaddr_reg:x3; val_offset:96135*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96135*0 + 3*557*FLEN/8, x4, x1, x2)

inst_32046:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000000fff; valaddr_reg:x3; val_offset:96138*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96138*0 + 3*558*FLEN/8, x4, x1, x2)

inst_32047:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000001fff; valaddr_reg:x3; val_offset:96141*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96141*0 + 3*559*FLEN/8, x4, x1, x2)

inst_32048:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000003fff; valaddr_reg:x3; val_offset:96144*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96144*0 + 3*560*FLEN/8, x4, x1, x2)

inst_32049:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000007fff; valaddr_reg:x3; val_offset:96147*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96147*0 + 3*561*FLEN/8, x4, x1, x2)

inst_32050:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000000ffff; valaddr_reg:x3; val_offset:96150*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96150*0 + 3*562*FLEN/8, x4, x1, x2)

inst_32051:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000001ffff; valaddr_reg:x3; val_offset:96153*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96153*0 + 3*563*FLEN/8, x4, x1, x2)

inst_32052:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000003ffff; valaddr_reg:x3; val_offset:96156*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96156*0 + 3*564*FLEN/8, x4, x1, x2)

inst_32053:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000007ffff; valaddr_reg:x3; val_offset:96159*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96159*0 + 3*565*FLEN/8, x4, x1, x2)

inst_32054:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000000fffff; valaddr_reg:x3; val_offset:96162*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96162*0 + 3*566*FLEN/8, x4, x1, x2)

inst_32055:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000001fffff; valaddr_reg:x3; val_offset:96165*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96165*0 + 3*567*FLEN/8, x4, x1, x2)

inst_32056:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000003fffff; valaddr_reg:x3; val_offset:96168*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96168*0 + 3*568*FLEN/8, x4, x1, x2)

inst_32057:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000007fffff; valaddr_reg:x3; val_offset:96171*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96171*0 + 3*569*FLEN/8, x4, x1, x2)

inst_32058:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000000ffffff; valaddr_reg:x3; val_offset:96174*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96174*0 + 3*570*FLEN/8, x4, x1, x2)

inst_32059:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000001ffffff; valaddr_reg:x3; val_offset:96177*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96177*0 + 3*571*FLEN/8, x4, x1, x2)

inst_32060:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000003ffffff; valaddr_reg:x3; val_offset:96180*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96180*0 + 3*572*FLEN/8, x4, x1, x2)

inst_32061:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000007ffffff; valaddr_reg:x3; val_offset:96183*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96183*0 + 3*573*FLEN/8, x4, x1, x2)

inst_32062:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000000fffffff; valaddr_reg:x3; val_offset:96186*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96186*0 + 3*574*FLEN/8, x4, x1, x2)

inst_32063:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000001fffffff; valaddr_reg:x3; val_offset:96189*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96189*0 + 3*575*FLEN/8, x4, x1, x2)

inst_32064:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000003fffffff; valaddr_reg:x3; val_offset:96192*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96192*0 + 3*576*FLEN/8, x4, x1, x2)

inst_32065:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000007fffffff; valaddr_reg:x3; val_offset:96195*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96195*0 + 3*577*FLEN/8, x4, x1, x2)

inst_32066:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000000ffffffff; valaddr_reg:x3; val_offset:96198*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96198*0 + 3*578*FLEN/8, x4, x1, x2)

inst_32067:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000001ffffffff; valaddr_reg:x3; val_offset:96201*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96201*0 + 3*579*FLEN/8, x4, x1, x2)

inst_32068:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000003ffffffff; valaddr_reg:x3; val_offset:96204*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96204*0 + 3*580*FLEN/8, x4, x1, x2)

inst_32069:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000007ffffffff; valaddr_reg:x3; val_offset:96207*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96207*0 + 3*581*FLEN/8, x4, x1, x2)

inst_32070:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00000fffffffff; valaddr_reg:x3; val_offset:96210*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96210*0 + 3*582*FLEN/8, x4, x1, x2)

inst_32071:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00001fffffffff; valaddr_reg:x3; val_offset:96213*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96213*0 + 3*583*FLEN/8, x4, x1, x2)

inst_32072:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00003fffffffff; valaddr_reg:x3; val_offset:96216*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96216*0 + 3*584*FLEN/8, x4, x1, x2)

inst_32073:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00007fffffffff; valaddr_reg:x3; val_offset:96219*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96219*0 + 3*585*FLEN/8, x4, x1, x2)

inst_32074:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0000ffffffffff; valaddr_reg:x3; val_offset:96222*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96222*0 + 3*586*FLEN/8, x4, x1, x2)

inst_32075:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0001ffffffffff; valaddr_reg:x3; val_offset:96225*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96225*0 + 3*587*FLEN/8, x4, x1, x2)

inst_32076:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0003ffffffffff; valaddr_reg:x3; val_offset:96228*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96228*0 + 3*588*FLEN/8, x4, x1, x2)

inst_32077:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0007ffffffffff; valaddr_reg:x3; val_offset:96231*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96231*0 + 3*589*FLEN/8, x4, x1, x2)

inst_32078:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba000fffffffffff; valaddr_reg:x3; val_offset:96234*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96234*0 + 3*590*FLEN/8, x4, x1, x2)

inst_32079:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba001fffffffffff; valaddr_reg:x3; val_offset:96237*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96237*0 + 3*591*FLEN/8, x4, x1, x2)

inst_32080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba003fffffffffff; valaddr_reg:x3; val_offset:96240*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96240*0 + 3*592*FLEN/8, x4, x1, x2)

inst_32081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba007fffffffffff; valaddr_reg:x3; val_offset:96243*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96243*0 + 3*593*FLEN/8, x4, x1, x2)

inst_32082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba00ffffffffffff; valaddr_reg:x3; val_offset:96246*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96246*0 + 3*594*FLEN/8, x4, x1, x2)

inst_32083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba01ffffffffffff; valaddr_reg:x3; val_offset:96249*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96249*0 + 3*595*FLEN/8, x4, x1, x2)

inst_32084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba03ffffffffffff; valaddr_reg:x3; val_offset:96252*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96252*0 + 3*596*FLEN/8, x4, x1, x2)

inst_32085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba07ffffffffffff; valaddr_reg:x3; val_offset:96255*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96255*0 + 3*597*FLEN/8, x4, x1, x2)

inst_32086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba08000000000000; valaddr_reg:x3; val_offset:96258*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96258*0 + 3*598*FLEN/8, x4, x1, x2)

inst_32087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0c000000000000; valaddr_reg:x3; val_offset:96261*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96261*0 + 3*599*FLEN/8, x4, x1, x2)

inst_32088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0e000000000000; valaddr_reg:x3; val_offset:96264*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96264*0 + 3*600*FLEN/8, x4, x1, x2)

inst_32089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0f000000000000; valaddr_reg:x3; val_offset:96267*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96267*0 + 3*601*FLEN/8, x4, x1, x2)

inst_32090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0f800000000000; valaddr_reg:x3; val_offset:96270*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96270*0 + 3*602*FLEN/8, x4, x1, x2)

inst_32091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fc00000000000; valaddr_reg:x3; val_offset:96273*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96273*0 + 3*603*FLEN/8, x4, x1, x2)

inst_32092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fe00000000000; valaddr_reg:x3; val_offset:96276*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96276*0 + 3*604*FLEN/8, x4, x1, x2)

inst_32093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ff00000000000; valaddr_reg:x3; val_offset:96279*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96279*0 + 3*605*FLEN/8, x4, x1, x2)

inst_32094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ff80000000000; valaddr_reg:x3; val_offset:96282*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96282*0 + 3*606*FLEN/8, x4, x1, x2)

inst_32095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffc0000000000; valaddr_reg:x3; val_offset:96285*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96285*0 + 3*607*FLEN/8, x4, x1, x2)

inst_32096:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffe0000000000; valaddr_reg:x3; val_offset:96288*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96288*0 + 3*608*FLEN/8, x4, x1, x2)

inst_32097:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fff0000000000; valaddr_reg:x3; val_offset:96291*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96291*0 + 3*609*FLEN/8, x4, x1, x2)

inst_32098:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fff8000000000; valaddr_reg:x3; val_offset:96294*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96294*0 + 3*610*FLEN/8, x4, x1, x2)

inst_32099:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffc000000000; valaddr_reg:x3; val_offset:96297*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96297*0 + 3*611*FLEN/8, x4, x1, x2)

inst_32100:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffe000000000; valaddr_reg:x3; val_offset:96300*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96300*0 + 3*612*FLEN/8, x4, x1, x2)

inst_32101:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffff000000000; valaddr_reg:x3; val_offset:96303*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96303*0 + 3*613*FLEN/8, x4, x1, x2)

inst_32102:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffff800000000; valaddr_reg:x3; val_offset:96306*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96306*0 + 3*614*FLEN/8, x4, x1, x2)

inst_32103:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffc00000000; valaddr_reg:x3; val_offset:96309*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96309*0 + 3*615*FLEN/8, x4, x1, x2)

inst_32104:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffe00000000; valaddr_reg:x3; val_offset:96312*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96312*0 + 3*616*FLEN/8, x4, x1, x2)

inst_32105:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffff00000000; valaddr_reg:x3; val_offset:96315*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96315*0 + 3*617*FLEN/8, x4, x1, x2)

inst_32106:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffff80000000; valaddr_reg:x3; val_offset:96318*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96318*0 + 3*618*FLEN/8, x4, x1, x2)

inst_32107:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffc0000000; valaddr_reg:x3; val_offset:96321*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96321*0 + 3*619*FLEN/8, x4, x1, x2)

inst_32108:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffe0000000; valaddr_reg:x3; val_offset:96324*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96324*0 + 3*620*FLEN/8, x4, x1, x2)

inst_32109:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffff0000000; valaddr_reg:x3; val_offset:96327*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96327*0 + 3*621*FLEN/8, x4, x1, x2)

inst_32110:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffff8000000; valaddr_reg:x3; val_offset:96330*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96330*0 + 3*622*FLEN/8, x4, x1, x2)

inst_32111:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffc000000; valaddr_reg:x3; val_offset:96333*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96333*0 + 3*623*FLEN/8, x4, x1, x2)

inst_32112:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffe000000; valaddr_reg:x3; val_offset:96336*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96336*0 + 3*624*FLEN/8, x4, x1, x2)

inst_32113:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffff000000; valaddr_reg:x3; val_offset:96339*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96339*0 + 3*625*FLEN/8, x4, x1, x2)

inst_32114:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffff800000; valaddr_reg:x3; val_offset:96342*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96342*0 + 3*626*FLEN/8, x4, x1, x2)

inst_32115:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffc00000; valaddr_reg:x3; val_offset:96345*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96345*0 + 3*627*FLEN/8, x4, x1, x2)

inst_32116:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffe00000; valaddr_reg:x3; val_offset:96348*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96348*0 + 3*628*FLEN/8, x4, x1, x2)

inst_32117:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffff00000; valaddr_reg:x3; val_offset:96351*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96351*0 + 3*629*FLEN/8, x4, x1, x2)

inst_32118:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffff80000; valaddr_reg:x3; val_offset:96354*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96354*0 + 3*630*FLEN/8, x4, x1, x2)

inst_32119:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffc0000; valaddr_reg:x3; val_offset:96357*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96357*0 + 3*631*FLEN/8, x4, x1, x2)

inst_32120:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffe0000; valaddr_reg:x3; val_offset:96360*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96360*0 + 3*632*FLEN/8, x4, x1, x2)

inst_32121:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffff0000; valaddr_reg:x3; val_offset:96363*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96363*0 + 3*633*FLEN/8, x4, x1, x2)

inst_32122:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffff8000; valaddr_reg:x3; val_offset:96366*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96366*0 + 3*634*FLEN/8, x4, x1, x2)

inst_32123:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffffc000; valaddr_reg:x3; val_offset:96369*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96369*0 + 3*635*FLEN/8, x4, x1, x2)

inst_32124:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffffe000; valaddr_reg:x3; val_offset:96372*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96372*0 + 3*636*FLEN/8, x4, x1, x2)

inst_32125:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffff000; valaddr_reg:x3; val_offset:96375*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96375*0 + 3*637*FLEN/8, x4, x1, x2)

inst_32126:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffff800; valaddr_reg:x3; val_offset:96378*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96378*0 + 3*638*FLEN/8, x4, x1, x2)

inst_32127:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffffc00; valaddr_reg:x3; val_offset:96381*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96381*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_32128:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffffe00; valaddr_reg:x3; val_offset:96384*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96384*0 + 3*640*FLEN/8, x4, x1, x2)

inst_32129:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffffff00; valaddr_reg:x3; val_offset:96387*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96387*0 + 3*641*FLEN/8, x4, x1, x2)

inst_32130:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffffff80; valaddr_reg:x3; val_offset:96390*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96390*0 + 3*642*FLEN/8, x4, x1, x2)

inst_32131:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffffffc0; valaddr_reg:x3; val_offset:96393*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96393*0 + 3*643*FLEN/8, x4, x1, x2)

inst_32132:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffffffe0; valaddr_reg:x3; val_offset:96396*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96396*0 + 3*644*FLEN/8, x4, x1, x2)

inst_32133:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffffff0; valaddr_reg:x3; val_offset:96399*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96399*0 + 3*645*FLEN/8, x4, x1, x2)

inst_32134:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffffff8; valaddr_reg:x3; val_offset:96402*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96402*0 + 3*646*FLEN/8, x4, x1, x2)

inst_32135:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffffffc; valaddr_reg:x3; val_offset:96405*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96405*0 + 3*647*FLEN/8, x4, x1, x2)

inst_32136:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0ffffffffffffe; valaddr_reg:x3; val_offset:96408*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96408*0 + 3*648*FLEN/8, x4, x1, x2)

inst_32137:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3a0 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xba0fffffffffffff; valaddr_reg:x3; val_offset:96411*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96411*0 + 3*649*FLEN/8, x4, x1, x2)

inst_32138:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:96414*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96414*0 + 3*650*FLEN/8, x4, x1, x2)

inst_32139:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:96417*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96417*0 + 3*651*FLEN/8, x4, x1, x2)

inst_32140:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:96420*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96420*0 + 3*652*FLEN/8, x4, x1, x2)

inst_32141:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:96423*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96423*0 + 3*653*FLEN/8, x4, x1, x2)

inst_32142:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:96426*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96426*0 + 3*654*FLEN/8, x4, x1, x2)

inst_32143:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:96429*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96429*0 + 3*655*FLEN/8, x4, x1, x2)

inst_32144:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:96432*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96432*0 + 3*656*FLEN/8, x4, x1, x2)

inst_32145:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:96435*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96435*0 + 3*657*FLEN/8, x4, x1, x2)

inst_32146:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:96438*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96438*0 + 3*658*FLEN/8, x4, x1, x2)

inst_32147:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:96441*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96441*0 + 3*659*FLEN/8, x4, x1, x2)

inst_32148:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:96444*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96444*0 + 3*660*FLEN/8, x4, x1, x2)

inst_32149:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:96447*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96447*0 + 3*661*FLEN/8, x4, x1, x2)

inst_32150:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:96450*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96450*0 + 3*662*FLEN/8, x4, x1, x2)

inst_32151:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:96453*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96453*0 + 3*663*FLEN/8, x4, x1, x2)

inst_32152:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:96456*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96456*0 + 3*664*FLEN/8, x4, x1, x2)

inst_32153:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:96459*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96459*0 + 3*665*FLEN/8, x4, x1, x2)

inst_32154:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:96462*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96462*0 + 3*666*FLEN/8, x4, x1, x2)

inst_32155:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:96465*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96465*0 + 3*667*FLEN/8, x4, x1, x2)

inst_32156:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:96468*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96468*0 + 3*668*FLEN/8, x4, x1, x2)

inst_32157:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:96471*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96471*0 + 3*669*FLEN/8, x4, x1, x2)

inst_32158:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:96474*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96474*0 + 3*670*FLEN/8, x4, x1, x2)

inst_32159:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3a25a98541333 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa13b344e69440 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93a25a98541333; op2val:0x9fda13b344e69440;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:96477*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96477*0 + 3*671*FLEN/8, x4, x1, x2)

inst_32160:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000000000; valaddr_reg:x3; val_offset:96480*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96480*0 + 3*672*FLEN/8, x4, x1, x2)

inst_32161:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000000001; valaddr_reg:x3; val_offset:96483*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96483*0 + 3*673*FLEN/8, x4, x1, x2)

inst_32162:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000000003; valaddr_reg:x3; val_offset:96486*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96486*0 + 3*674*FLEN/8, x4, x1, x2)

inst_32163:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000000007; valaddr_reg:x3; val_offset:96489*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96489*0 + 3*675*FLEN/8, x4, x1, x2)

inst_32164:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000000000f; valaddr_reg:x3; val_offset:96492*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96492*0 + 3*676*FLEN/8, x4, x1, x2)

inst_32165:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000000001f; valaddr_reg:x3; val_offset:96495*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96495*0 + 3*677*FLEN/8, x4, x1, x2)

inst_32166:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000000003f; valaddr_reg:x3; val_offset:96498*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96498*0 + 3*678*FLEN/8, x4, x1, x2)

inst_32167:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000000007f; valaddr_reg:x3; val_offset:96501*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96501*0 + 3*679*FLEN/8, x4, x1, x2)

inst_32168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000000000ff; valaddr_reg:x3; val_offset:96504*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96504*0 + 3*680*FLEN/8, x4, x1, x2)

inst_32169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000000001ff; valaddr_reg:x3; val_offset:96507*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96507*0 + 3*681*FLEN/8, x4, x1, x2)

inst_32170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000000003ff; valaddr_reg:x3; val_offset:96510*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96510*0 + 3*682*FLEN/8, x4, x1, x2)

inst_32171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000000007ff; valaddr_reg:x3; val_offset:96513*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96513*0 + 3*683*FLEN/8, x4, x1, x2)

inst_32172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000000fff; valaddr_reg:x3; val_offset:96516*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96516*0 + 3*684*FLEN/8, x4, x1, x2)

inst_32173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000001fff; valaddr_reg:x3; val_offset:96519*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96519*0 + 3*685*FLEN/8, x4, x1, x2)

inst_32174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000003fff; valaddr_reg:x3; val_offset:96522*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96522*0 + 3*686*FLEN/8, x4, x1, x2)

inst_32175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000007fff; valaddr_reg:x3; val_offset:96525*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96525*0 + 3*687*FLEN/8, x4, x1, x2)

inst_32176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000000ffff; valaddr_reg:x3; val_offset:96528*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96528*0 + 3*688*FLEN/8, x4, x1, x2)

inst_32177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000001ffff; valaddr_reg:x3; val_offset:96531*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96531*0 + 3*689*FLEN/8, x4, x1, x2)

inst_32178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000003ffff; valaddr_reg:x3; val_offset:96534*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96534*0 + 3*690*FLEN/8, x4, x1, x2)

inst_32179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000007ffff; valaddr_reg:x3; val_offset:96537*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96537*0 + 3*691*FLEN/8, x4, x1, x2)

inst_32180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000000fffff; valaddr_reg:x3; val_offset:96540*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96540*0 + 3*692*FLEN/8, x4, x1, x2)

inst_32181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000001fffff; valaddr_reg:x3; val_offset:96543*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96543*0 + 3*693*FLEN/8, x4, x1, x2)

inst_32182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000003fffff; valaddr_reg:x3; val_offset:96546*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96546*0 + 3*694*FLEN/8, x4, x1, x2)

inst_32183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000007fffff; valaddr_reg:x3; val_offset:96549*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96549*0 + 3*695*FLEN/8, x4, x1, x2)

inst_32184:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000000ffffff; valaddr_reg:x3; val_offset:96552*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96552*0 + 3*696*FLEN/8, x4, x1, x2)

inst_32185:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000001ffffff; valaddr_reg:x3; val_offset:96555*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96555*0 + 3*697*FLEN/8, x4, x1, x2)

inst_32186:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000003ffffff; valaddr_reg:x3; val_offset:96558*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96558*0 + 3*698*FLEN/8, x4, x1, x2)

inst_32187:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000007ffffff; valaddr_reg:x3; val_offset:96561*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96561*0 + 3*699*FLEN/8, x4, x1, x2)

inst_32188:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000000fffffff; valaddr_reg:x3; val_offset:96564*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96564*0 + 3*700*FLEN/8, x4, x1, x2)

inst_32189:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000001fffffff; valaddr_reg:x3; val_offset:96567*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96567*0 + 3*701*FLEN/8, x4, x1, x2)

inst_32190:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000003fffffff; valaddr_reg:x3; val_offset:96570*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96570*0 + 3*702*FLEN/8, x4, x1, x2)

inst_32191:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000007fffffff; valaddr_reg:x3; val_offset:96573*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96573*0 + 3*703*FLEN/8, x4, x1, x2)

inst_32192:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600000ffffffff; valaddr_reg:x3; val_offset:96576*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96576*0 + 3*704*FLEN/8, x4, x1, x2)

inst_32193:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600001ffffffff; valaddr_reg:x3; val_offset:96579*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96579*0 + 3*705*FLEN/8, x4, x1, x2)

inst_32194:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600003ffffffff; valaddr_reg:x3; val_offset:96582*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96582*0 + 3*706*FLEN/8, x4, x1, x2)

inst_32195:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600007ffffffff; valaddr_reg:x3; val_offset:96585*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96585*0 + 3*707*FLEN/8, x4, x1, x2)

inst_32196:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960000fffffffff; valaddr_reg:x3; val_offset:96588*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96588*0 + 3*708*FLEN/8, x4, x1, x2)

inst_32197:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960001fffffffff; valaddr_reg:x3; val_offset:96591*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96591*0 + 3*709*FLEN/8, x4, x1, x2)

inst_32198:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960003fffffffff; valaddr_reg:x3; val_offset:96594*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96594*0 + 3*710*FLEN/8, x4, x1, x2)

inst_32199:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960007fffffffff; valaddr_reg:x3; val_offset:96597*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96597*0 + 3*711*FLEN/8, x4, x1, x2)

inst_32200:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96000ffffffffff; valaddr_reg:x3; val_offset:96600*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96600*0 + 3*712*FLEN/8, x4, x1, x2)

inst_32201:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96001ffffffffff; valaddr_reg:x3; val_offset:96603*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96603*0 + 3*713*FLEN/8, x4, x1, x2)

inst_32202:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96003ffffffffff; valaddr_reg:x3; val_offset:96606*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96606*0 + 3*714*FLEN/8, x4, x1, x2)

inst_32203:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96007ffffffffff; valaddr_reg:x3; val_offset:96609*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96609*0 + 3*715*FLEN/8, x4, x1, x2)

inst_32204:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9600fffffffffff; valaddr_reg:x3; val_offset:96612*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96612*0 + 3*716*FLEN/8, x4, x1, x2)

inst_32205:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9601fffffffffff; valaddr_reg:x3; val_offset:96615*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96615*0 + 3*717*FLEN/8, x4, x1, x2)

inst_32206:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9603fffffffffff; valaddr_reg:x3; val_offset:96618*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96618*0 + 3*718*FLEN/8, x4, x1, x2)

inst_32207:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb9607fffffffffff; valaddr_reg:x3; val_offset:96621*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96621*0 + 3*719*FLEN/8, x4, x1, x2)

inst_32208:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb960ffffffffffff; valaddr_reg:x3; val_offset:96624*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96624*0 + 3*720*FLEN/8, x4, x1, x2)

inst_32209:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb961ffffffffffff; valaddr_reg:x3; val_offset:96627*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96627*0 + 3*721*FLEN/8, x4, x1, x2)

inst_32210:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb963ffffffffffff; valaddr_reg:x3; val_offset:96630*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96630*0 + 3*722*FLEN/8, x4, x1, x2)

inst_32211:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb967ffffffffffff; valaddr_reg:x3; val_offset:96633*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96633*0 + 3*723*FLEN/8, x4, x1, x2)

inst_32212:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb968000000000000; valaddr_reg:x3; val_offset:96636*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96636*0 + 3*724*FLEN/8, x4, x1, x2)

inst_32213:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96c000000000000; valaddr_reg:x3; val_offset:96639*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96639*0 + 3*725*FLEN/8, x4, x1, x2)

inst_32214:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96e000000000000; valaddr_reg:x3; val_offset:96642*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96642*0 + 3*726*FLEN/8, x4, x1, x2)

inst_32215:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96f000000000000; valaddr_reg:x3; val_offset:96645*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96645*0 + 3*727*FLEN/8, x4, x1, x2)

inst_32216:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96f800000000000; valaddr_reg:x3; val_offset:96648*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96648*0 + 3*728*FLEN/8, x4, x1, x2)

inst_32217:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fc00000000000; valaddr_reg:x3; val_offset:96651*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96651*0 + 3*729*FLEN/8, x4, x1, x2)

inst_32218:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fe00000000000; valaddr_reg:x3; val_offset:96654*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96654*0 + 3*730*FLEN/8, x4, x1, x2)

inst_32219:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ff00000000000; valaddr_reg:x3; val_offset:96657*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96657*0 + 3*731*FLEN/8, x4, x1, x2)

inst_32220:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ff80000000000; valaddr_reg:x3; val_offset:96660*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96660*0 + 3*732*FLEN/8, x4, x1, x2)

inst_32221:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffc0000000000; valaddr_reg:x3; val_offset:96663*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96663*0 + 3*733*FLEN/8, x4, x1, x2)

inst_32222:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffe0000000000; valaddr_reg:x3; val_offset:96666*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96666*0 + 3*734*FLEN/8, x4, x1, x2)

inst_32223:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fff0000000000; valaddr_reg:x3; val_offset:96669*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96669*0 + 3*735*FLEN/8, x4, x1, x2)

inst_32224:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fff8000000000; valaddr_reg:x3; val_offset:96672*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96672*0 + 3*736*FLEN/8, x4, x1, x2)

inst_32225:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffc000000000; valaddr_reg:x3; val_offset:96675*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96675*0 + 3*737*FLEN/8, x4, x1, x2)

inst_32226:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffe000000000; valaddr_reg:x3; val_offset:96678*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96678*0 + 3*738*FLEN/8, x4, x1, x2)

inst_32227:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffff000000000; valaddr_reg:x3; val_offset:96681*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96681*0 + 3*739*FLEN/8, x4, x1, x2)

inst_32228:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffff800000000; valaddr_reg:x3; val_offset:96684*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96684*0 + 3*740*FLEN/8, x4, x1, x2)

inst_32229:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffc00000000; valaddr_reg:x3; val_offset:96687*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96687*0 + 3*741*FLEN/8, x4, x1, x2)

inst_32230:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffe00000000; valaddr_reg:x3; val_offset:96690*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96690*0 + 3*742*FLEN/8, x4, x1, x2)

inst_32231:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffff00000000; valaddr_reg:x3; val_offset:96693*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96693*0 + 3*743*FLEN/8, x4, x1, x2)

inst_32232:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffff80000000; valaddr_reg:x3; val_offset:96696*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96696*0 + 3*744*FLEN/8, x4, x1, x2)

inst_32233:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffc0000000; valaddr_reg:x3; val_offset:96699*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96699*0 + 3*745*FLEN/8, x4, x1, x2)

inst_32234:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffe0000000; valaddr_reg:x3; val_offset:96702*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96702*0 + 3*746*FLEN/8, x4, x1, x2)

inst_32235:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffff0000000; valaddr_reg:x3; val_offset:96705*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96705*0 + 3*747*FLEN/8, x4, x1, x2)

inst_32236:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffff8000000; valaddr_reg:x3; val_offset:96708*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96708*0 + 3*748*FLEN/8, x4, x1, x2)

inst_32237:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffc000000; valaddr_reg:x3; val_offset:96711*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96711*0 + 3*749*FLEN/8, x4, x1, x2)

inst_32238:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffe000000; valaddr_reg:x3; val_offset:96714*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96714*0 + 3*750*FLEN/8, x4, x1, x2)

inst_32239:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffff000000; valaddr_reg:x3; val_offset:96717*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96717*0 + 3*751*FLEN/8, x4, x1, x2)

inst_32240:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffff800000; valaddr_reg:x3; val_offset:96720*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96720*0 + 3*752*FLEN/8, x4, x1, x2)

inst_32241:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffffc00000; valaddr_reg:x3; val_offset:96723*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96723*0 + 3*753*FLEN/8, x4, x1, x2)

inst_32242:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffffe00000; valaddr_reg:x3; val_offset:96726*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96726*0 + 3*754*FLEN/8, x4, x1, x2)

inst_32243:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffff00000; valaddr_reg:x3; val_offset:96729*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96729*0 + 3*755*FLEN/8, x4, x1, x2)

inst_32244:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffff80000; valaddr_reg:x3; val_offset:96732*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96732*0 + 3*756*FLEN/8, x4, x1, x2)

inst_32245:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffffc0000; valaddr_reg:x3; val_offset:96735*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96735*0 + 3*757*FLEN/8, x4, x1, x2)

inst_32246:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffffe0000; valaddr_reg:x3; val_offset:96738*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96738*0 + 3*758*FLEN/8, x4, x1, x2)

inst_32247:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffffff0000; valaddr_reg:x3; val_offset:96741*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96741*0 + 3*759*FLEN/8, x4, x1, x2)

inst_32248:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffffff8000; valaddr_reg:x3; val_offset:96744*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96744*0 + 3*760*FLEN/8, x4, x1, x2)

inst_32249:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffffffc000; valaddr_reg:x3; val_offset:96747*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96747*0 + 3*761*FLEN/8, x4, x1, x2)

inst_32250:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffffffe000; valaddr_reg:x3; val_offset:96750*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96750*0 + 3*762*FLEN/8, x4, x1, x2)

inst_32251:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffffff000; valaddr_reg:x3; val_offset:96753*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96753*0 + 3*763*FLEN/8, x4, x1, x2)

inst_32252:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffffff800; valaddr_reg:x3; val_offset:96756*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96756*0 + 3*764*FLEN/8, x4, x1, x2)

inst_32253:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffffffc00; valaddr_reg:x3; val_offset:96759*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96759*0 + 3*765*FLEN/8, x4, x1, x2)

inst_32254:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96ffffffffffe00; valaddr_reg:x3; val_offset:96762*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96762*0 + 3*766*FLEN/8, x4, x1, x2)

inst_32255:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x3ab263197fe7f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0xa080a0e1c2297 and fs3 == 1 and fe3 == 0x396 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f93ab263197fe7f; op2val:0x9fda080a0e1c2297;
op3val:0xb96fffffffffff00; valaddr_reg:x3; val_offset:96765*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96765*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245887835968372736,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245888935480000512,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889485235814400,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889760113721344,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889897552674816,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889966272151552,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890000631889920,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890017811759104,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890026401693696,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890030696660992,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890032844144640,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890033917886464,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034454757376,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034723192832,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034857410560,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034924519424,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034958073856,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034974851072,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034983239680,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034987433984,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034989531136,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034990579712,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991104000,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991366144,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991497216,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991562752,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991595520,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991611904,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991620096,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991624192,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991626240,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991627264,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991627776,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628032,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628160,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628224,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628256,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628272,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628280,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628284,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628286,64,FLEN)
NAN_BOXED(6886972004608549303,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628287,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226368,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226369,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226371,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226375,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226383,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226399,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226431,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226495,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226623,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703226879,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703227391,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703228415,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703230463,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703234559,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703242751,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703259135,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703291903,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703357439,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703488511,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787703750655,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787704274943,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787705323519,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787707420671,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787711614975,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787720003583,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787736780799,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787770335231,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787837444095,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618787971661823,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618788240097279,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618788776968191,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618789850710015,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618791998193663,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618796293160959,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618804883095551,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618822062964735,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618856422703103,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148618925142179839,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148619062581133311,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148619337459040255,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148619887214854143,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148620986726481919,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148623185749737471,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148627583796248575,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148636379889270783,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148653972075315199,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148689156447404031,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148759525191581695,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(148900262679937023,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(149181737656647679,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(149744687610068991,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(150870587516911615,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(150870587516911616,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(151996487423754240,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(152559437377175552,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(152840912353886208,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(152981649842241536,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153052018586419200,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153087202958508032,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153104795144552448,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153113591237574656,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153117989284085760,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153120188307341312,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153121287818969088,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153121837574782976,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122112452689920,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122249891643392,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122318611120128,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122352970858496,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122370150727680,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122378740662272,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122383035629568,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122385183113216,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122386256855040,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122386793725952,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387062161408,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387196379136,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387263488000,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387297042432,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387313819648,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387322208256,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387326402560,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387328499712,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387329548288,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330072576,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330334720,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330465792,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330531328,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330564096,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330580480,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330588672,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330592768,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330594816,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330595840,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596352,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596608,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596736,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596800,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596832,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596848,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596856,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596860,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596862,64,FLEN)
NAN_BOXED(6886983872692342321,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(153122387330596863,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261184,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261185,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261187,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261191,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261199,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261215,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261247,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261311,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261439,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261695,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303262207,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303263231,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303265279,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303269375,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303277567,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303293951,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303326719,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303392255,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303523327,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303785471,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625304309759,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625305358335,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625307455487,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625311649791,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625320038399,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625336815615,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625370370047,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625437478911,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625571696639,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625840132095,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983626377003007,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983627450744831,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983629598228479,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983633893195775,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983642483130367,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983659662999551,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983694022737919,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983762742214655,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983900181168127,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362984175059075071,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362984724814888959,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362985824326516735,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362988023349772287,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362992421396283391,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9363001217489305599,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9363018809675350015,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9363053994047438847,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9363124362791616511,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9363265100279971839,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9363546575256682495,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9364109525210103807,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9365235425116946431,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9365235425116946432,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9366361325023789056,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9366924274977210368,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367205749953921024,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367346487442276352,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367416856186454016,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367452040558542848,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367469632744587264,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367478428837609472,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367482826884120576,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367485025907376128,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367486125419003904,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367486675174817792,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367486950052724736,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487087491678208,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487156211154944,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487190570893312,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487207750762496,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487216340697088,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487220635664384,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487222783148032,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487223856889856,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224393760768,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224662196224,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224796413952,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224863522816,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224897077248,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224913854464,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224922243072,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224926437376,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224928534528,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224929583104,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930107392,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930369536,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930500608,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930566144,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930598912,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930615296,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930623488,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930627584,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930629632,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930630656,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631168,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631424,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631552,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631616,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631648,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631664,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631672,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631676,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631678,64,FLEN)
NAN_BOXED(6886991004664101395,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9367487224930631679,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671104,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671105,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671107,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671111,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671119,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671135,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671167,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671231,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671359,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671615,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850672127,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850673151,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850675199,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850679295,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850687487,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850703871,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850736639,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850802175,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850933247,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617851195391,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617851719679,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617852768255,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617854865407,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617859059711,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617867448319,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617884225535,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617917779967,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617984888831,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055618119106559,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055618387542015,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055618924412927,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055619998154751,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055622145638399,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055626440605695,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055635030540287,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055652210409471,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055686570147839,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055755289624575,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055892728578047,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453056167606484991,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453056717362298879,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453057816873926655,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453060015897182207,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453064413943693311,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453073210036715519,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453090802222759935,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453125986594848767,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453196355339026431,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453337092827381759,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453618567804092415,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9454181517757513727,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9455307417664356351,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9455307417664356352,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9456433317571198976,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9456996267524620288,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457277742501330944,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457418479989686272,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457488848733863936,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457524033105952768,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457541625291997184,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457550421385019392,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457554819431530496,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457557018454786048,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457558117966413824,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457558667722227712,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457558942600134656,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559080039088128,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559148758564864,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559183118303232,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559200298172416,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559208888107008,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559213183074304,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559215330557952,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559216404299776,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559216941170688,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217209606144,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217343823872,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217410932736,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217444487168,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217461264384,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217469652992,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217473847296,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217475944448,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217476993024,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217477517312,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217477779456,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217477910528,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217477976064,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478008832,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478025216,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478033408,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478037504,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478039552,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478040576,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041088,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041344,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041472,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041536,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041568,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041584,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041592,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041596,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041598,64,FLEN)
NAN_BOXED(6887000685676561865,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041599,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074240,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074241,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074243,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074247,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074255,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074271,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074303,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074367,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074495,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074751,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520075263,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520076287,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520078335,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520082431,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520090623,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520107007,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520139775,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520205311,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520336383,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520598527,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230521122815,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230522171391,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230524268543,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230528462847,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230536851455,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230553628671,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230587183103,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230654291967,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230788509695,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933231056945151,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933231593816063,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933232667557887,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933234815041535,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933239110008831,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933247699943423,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933264879812607,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933299239550975,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933367959027711,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933505397981183,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933780275888127,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299934330031702015,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299935429543329791,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299937628566585343,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299942026613096447,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299950822706118655,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299968414892163071,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300003599264251903,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300073968008429567,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300214705496784895,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300496180473495551,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9301059130426916863,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9302185030333759487,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9302185030333759488,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9303310930240602112,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9303873880194023424,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304155355170734080,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304296092659089408,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304366461403267072,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304401645775355904,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304419237961400320,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304428034054422528,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304432432100933632,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304434631124189184,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304435730635816960,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436280391630848,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436555269537792,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436692708491264,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436761427968000,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436795787706368,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436812967575552,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436821557510144,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436825852477440,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436827999961088,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829073702912,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829610573824,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829879009280,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830013227008,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830080335872,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830113890304,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830130667520,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830139056128,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830143250432,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830145347584,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830146396160,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830146920448,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147182592,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147313664,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147379200,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147411968,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147428352,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147436544,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147440640,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147442688,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147443712,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444224,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444480,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444608,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444672,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444704,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444720,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444728,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444732,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444734,64,FLEN)
NAN_BOXED(6887003555166403119,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444735,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596096,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596097,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596099,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596103,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596111,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596127,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596159,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596223,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596351,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054596607,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054597119,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054598143,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054600191,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054604287,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054612479,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054628863,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054661631,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054727167,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491054858239,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491055120383,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491055644671,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491056693247,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491058790399,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491062984703,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491071373311,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491088150527,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491121704959,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491188813823,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491323031551,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712491591467007,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712492128337919,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712493202079743,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712495349563391,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712499644530687,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712508234465279,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712525414334463,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712559774072831,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712628493549567,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402712765932503039,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402713040810409983,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402713590566223871,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402714690077851647,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402716889101107199,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402721287147618303,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402730083240640511,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402747675426684927,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402782859798773759,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402853228542951423,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13402993966031306751,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13403275441008017407,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13403838390961438719,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13404964290868281343,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13404964290868281344,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13406090190775123968,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13406653140728545280,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13406934615705255936,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407075353193611264,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407145721937788928,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407180906309877760,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407198498495922176,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407207294588944384,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407211692635455488,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407213891658711040,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407214991170338816,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407215540926152704,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407215815804059648,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407215953243013120,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216021962489856,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216056322228224,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216073502097408,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216082092032000,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216086386999296,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216088534482944,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216089608224768,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090145095680,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090413531136,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090547748864,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090614857728,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090648412160,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090665189376,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090673577984,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090677772288,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090679869440,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090680918016,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681442304,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681704448,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681835520,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681901056,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681933824,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681950208,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681958400,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681962496,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681964544,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681965568,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966080,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966336,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966464,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966528,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966560,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966576,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966584,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966588,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966590,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13407216090681966591,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6887026765166023475,64,FLEN)
NAN_BOXED(11518540657629500480,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891136,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891137,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891139,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891143,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891151,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891167,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891199,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891263,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891391,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780891647,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780892159,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780893183,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780895231,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780899327,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780907519,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780923903,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494780956671,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494781022207,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494781153279,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494781415423,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494781939711,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494782988287,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494785085439,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494789279743,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494797668351,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494814445567,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494847999999,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676494915108863,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676495049326591,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676495317762047,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676495854632959,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676496928374783,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676499075858431,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676503370825727,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676511960760319,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676529140629503,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676563500367871,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676632219844607,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357676769658798079,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357677044536705023,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357677594292518911,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357678693804146687,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357680892827402239,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357685290873913343,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357694086966935551,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357711679152979967,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357746863525068799,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357817232269246463,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13357957969757601791,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13358239444734312447,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13358802394687733759,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13359928294594576383,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13359928294594576384,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13361054194501419008,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13361617144454840320,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13361898619431550976,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362039356919906304,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362109725664083968,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362144910036172800,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362162502222217216,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362171298315239424,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362175696361750528,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362177895385006080,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362178994896633856,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362179544652447744,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362179819530354688,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362179956969308160,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180025688784896,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180060048523264,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180077228392448,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180085818327040,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180090113294336,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180092260777984,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180093334519808,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180093871390720,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094139826176,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094274043904,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094341152768,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094374707200,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094391484416,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094399873024,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094404067328,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094406164480,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094407213056,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094407737344,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094407999488,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408130560,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408196096,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408228864,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408245248,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408253440,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408257536,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408259584,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408260608,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408261120,64,FLEN)
NAN_BOXED(6887036435708771967,64,FLEN)
NAN_BOXED(11518527836232884887,64,FLEN)
NAN_BOXED(13362180094408261376,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
