
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b17 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b17)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f22, rs2==f19, rs3==f13, rd==f22,fs1 == 0 and fe1 == 0x5ee and fm1 == 0xf8c6f685f5fff and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x74ac1f4d6cd77 and fs3 == 1 and fe3 == 0x7e8 and fm3 == 0x6f6a40d086e42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f22; op2:f19; op3:f13; dest:f22; op1val:0x5eef8c6f685f5fff; op2val:0x5f874ac1f4d6cd77;
op3val:0xfe86f6a40d086e42; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f22, f22, f19, f13, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f6, rs2==f30, rs3==f15, rd==f12,fs1 == 0 and fe1 == 0x5f1 and fm1 == 0x8f90cc1b18bff and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x89d995b2d6507 and fs3 == 1 and fe3 == 0x7eb and fm3 == 0x335c725c81f87 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f6; op2:f30; op3:f15; dest:f12; op1val:0x5f18f90cc1b18bff; op2val:0x5f889d995b2d6507;
op3val:0xfeb335c725c81f87; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f12, f6, f30, f15, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f14, rs2==f14, rs3==f25, rd==f14,fs1 == 0 and fe1 == 0x5f2 and fm1 == 0x3502bebc53fff and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xa53d0d2b3faec and fs3 == 1 and fe3 == 0x7ed and fm3 == 0xfc77353881082 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f14; op2:f14; op3:f25; dest:f14; op1val:0x5f23502bebc53fff; op2val:0x5f23502bebc53fff;
op3val:0xfedfc77353881082; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f14, f14, f14, f25, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rs2 == rs3 == rd, rs1==f26, rs2==f26, rs3==f26, rd==f26,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x75450c5a9817f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xb3d56c4f6fd1d and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x3dbdc22f16309 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f26; op2:f26; op3:f26; dest:f26; op1val:0x5f575450c5a9817f; op2val:0x5f575450c5a9817f;
op3val:0x5f575450c5a9817f; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f26, f26, f26, f26, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f7, rs2==f7, rs3==f11, rd==f10,fs1 == 0 and fe1 == 0x5f5 and fm1 == 0xb56678fedc57f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x451eb54c10b8b and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x15bfc7b09311c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f7; op2:f7; op3:f11; dest:f10; op1val:0x5f5b56678fedc57f; op2val:0x5f5b56678fedc57f;
op3val:0xff115bfc7b09311c; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f10, f7, f7, f11, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f15, rs2==f25, rs3==f4, rd==f25,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x09f50264a8d1f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3c1be8887e304 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x48676d5f586e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f15; op2:f25; op3:f4; dest:f25; op1val:0x5f609f50264a8d1f; op2val:0x5fa3c1be8887e304;
op3val:0xff148676d5f586e3; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f25, f15, f25, f4, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f5, rs2==f12, rs3==f12, rd==f0,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x2fdaf9dfde227 and fs3 == 1 and fe3 == 0x7ef and fm3 == 0x58df00b847dd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f5; op2:f12; op3:f12; dest:f0; op1val:0x5f6228e5619b5bff; op2val:0x5f82fdaf9dfde227;
op3val:0x5f82fdaf9dfde227; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f0, f5, f12, f12, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f20, rs2==f0, rs3==f20, rd==f3,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42972262ccf0f and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x9d5f97660dadf and fs3 == 1 and fe3 == 0x7ef and fm3 == 0x047323ab7303d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f20; op2:f0; op3:f20; dest:f3; op1val:0x5f642972262ccf0f; op2val:0x5f79d5f97660dadf;
op3val:0x5f642972262ccf0f; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f3, f20, f0, f20, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f29, rs2==f31, rs3==f1, rd==f1,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x4d1d10d2ac62f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5cab9bd09e6c4 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xc5b2d008ae01b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f29; op2:f31; op3:f1; dest:f1; op1val:0x5f64d1d10d2ac62f; op2val:0x5fa5cab9bd09e6c4;
op3val:0xff1c5b2d008ae01b; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f1, f29, f31, f1, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rd == rs2 == rs3 != rs1, rs1==f11, rs2==f24, rs3==f24, rd==f24,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5188d91417d2f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x4f961e264020f and fs3 == 1 and fe3 == 0x7ef and fm3 == 0xba780200f5413 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f11; op2:f24; op3:f24; dest:f24; op1val:0x5f65188d91417d2f; op2val:0x5f84f961e264020f;
op3val:0x5f84f961e264020f; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f24, f11, f24, f24, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rd == rs3 != rs2, rs1==f23, rs2==f27, rs3==f23, rd==f23,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5819e362ac2bf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7f8e997d84592 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x01c733ee77e03 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f23; op2:f27; op3:f23; dest:f23; op1val:0x5f65819e362ac2bf; op2val:0x5fa7f8e997d84592;
op3val:0x5f65819e362ac2bf; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f23, f23, f27, f23, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 != rd, rs1==f21, rs2==f21, rs3==f21, rd==f8,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe55b30b309254 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x46f270bef90e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f21; op2:f21; op3:f21; dest:f8; op1val:0x5f658e517fcf82df; op2val:0x5f658e517fcf82df;
op3val:0x5f658e517fcf82df; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f8, f21, f21, f21, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f30, rs2==f13, rs3==f14, rd==f7,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x814b2c67ea80f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xe230c7e39a5d7 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x6adc7a45fc41e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f13; op3:f14; dest:f7; op1val:0x5f6814b2c67ea80f; op2val:0x5f9e230c7e39a5d7;
op3val:0xff16adc7a45fc41e; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f7, f30, f13, f14, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f27, rs2==f16, rs3==f5, rd==f2,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x6fcb3adb66bfb and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x1bf96c139c28c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f27; op2:f16; op3:f5; dest:f2; op1val:0x5f68b50ed3b44d4f; op2val:0x5f86fcb3adb66bfb;
op3val:0xff01bf96c139c28c; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f2, f27, f16, f5, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f2, rs2==f4, rs3==f19, rd==f16,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xc6e0a7c4777ef and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x265eb5ece1e0f and fs3 == 1 and fe3 == 0x7ee and fm3 == 0x058725357d39b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f2; op2:f4; op3:f19; dest:f16; op1val:0x5f6c6e0a7c4777ef; op2val:0x5f6265eb5ece1e0f;
op3val:0xfee058725357d39b; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f16, f2, f4, f19, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f3, rs2==f18, rs3==f29, rd==f9,fs1 == 0 and fe1 == 0x5f6 and fm1 == 0xf4fdc18a0c20f and fs2 == 0 and fe2 == 0x5f4 and fm2 == 0x01430191b8abf and fs3 == 1 and fe3 == 0x7eb and fm3 == 0xf775e0c768314 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f3; op2:f18; op3:f29; dest:f9; op1val:0x5f6f4fdc18a0c20f; op2val:0x5f401430191b8abf;
op3val:0xfebf775e0c768314; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f9, f3, f18, f29, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f25, rs2==f2, rs3==f8, rd==f6,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x058fe9a4daa6f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xba2704f6953c8 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xc3c257656a0d3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f25; op2:f2; op3:f8; dest:f6; op1val:0x5f7058fe9a4daa6f; op2val:0x5faba2704f6953c8;
op3val:0xff2c3c257656a0d3; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f6, f25, f2, f8, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f10, rs2==f17, rs3==f3, rd==f30,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x5ace7a656588f and fs3 == 1 and fe3 == 0x7ef and fm3 == 0x6d4f73e4a6a78 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f10; op2:f17; op3:f3; dest:f30; op1val:0x5f70da8a99d945d7; op2val:0x5f75ace7a656588f;
op3val:0xfef6d4f73e4a6a78; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f30, f10, f17, f3, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f12, rs2==f1, rs3==f27, rd==f21,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x6fe019d88c167 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x9df5ad95772f2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f12; op2:f1; op3:f27; dest:f21; op1val:0x5f72011ca3e25417; op2val:0x5f96fe019d88c167;
op3val:0xff19df5ad95772f2; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f21, f12, f1, f27, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f19, rs2==f15, rs3==f10, rd==f11,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x22411e9af7a5f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x9cd85f6af39ef and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xd4162062a6da3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f19; op2:f15; op3:f10; dest:f11; op1val:0x5f722411e9af7a5f; op2val:0x5f99cd85f6af39ef;
op3val:0xff1d4162062a6da3; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f11, f19, f15, f10, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f9, rs2==f6, rs3==f0, rd==f28,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2bdf74439828f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xae513826524d3 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xf81078c317f9f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f9; op2:f6; op3:f0; dest:f28; op1val:0x5f72bdf74439828f; op2val:0x5f9ae513826524d3;
op3val:0xff1f81078c317f9f; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f28, f9, f6, f0, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f17, rs2==f9, rs3==f6, rd==f19,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x349747e9ba0b7 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x6db2c39b92e2f and fs3 == 1 and fe3 == 0x7ee and fm3 == 0xb8d32e8303351 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f17; op2:f9; op3:f6; dest:f19; op1val:0x5f7349747e9ba0b7; op2val:0x5f66db2c39b92e2f;
op3val:0xfeeb8d32e8303351; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f19, f17, f9, f6, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f4, rs2==f3, rs3==f28, rd==f17,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4d30da0b2f54f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x194e95f4fa0e5 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x6e20e764fd495 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f4; op2:f3; op3:f28; dest:f17; op1val:0x5f74d30da0b2f54f; op2val:0x5f9194e95f4fa0e5;
op3val:0xff16e20e764fd495; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f17, f4, f3, f28, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f24, rs2==f5, rs3==f30, rd==f15,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x5ab2c30876547 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xbcdfd8ba97c91 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x2d3e98bf0ccd1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f24; op2:f5; op3:f30; dest:f15; op1val:0x5f75ab2c30876547; op2val:0x5fabcdfd8ba97c91;
op3val:0xff32d3e98bf0ccd1; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f15, f24, f5, f30, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f31, rs2==f20, rs3==f7, rd==f27,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x6febab5b81b47 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x83e4a9485598d and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x16bcf29d3dffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f31; op2:f20; op3:f7; dest:f27; op1val:0x5f76febab5b81b47; op2val:0x5fa83e4a9485598d;
op3val:0xff316bcf29d3dffe; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f27, f31, f20, f7, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f8, rs2==f22, rs3==f9, rd==f29,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x7ee0eb8d7cc7f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xa387a3789eb22 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x39ba7f5133cd6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f8; op2:f22; op3:f9; dest:f29; op1val:0x5f77ee0eb8d7cc7f; op2val:0x5faa387a3789eb22;
op3val:0xff339ba7f5133cd6; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f29, f8, f22, f9, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f28, rs2==f29, rs3==f16, rd==f5,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x9086506183f67 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xe707c5377ae9f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x7cfdd591eedc6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f28; op2:f29; op3:f16; dest:f5; op1val:0x5f79086506183f67; op2val:0x5f7e707c5377ae9f;
op3val:0xff07cfdd591eedc6; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f5, f28, f29, f16, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f13, rs2==f23, rs3==f31, rd==f4,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x9a5710f3828f7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb537603b0ea8b and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x5e67b171d10da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f13; op2:f23; op3:f31; dest:f4; op1val:0x5f79a5710f3828f7; op2val:0x5fab537603b0ea8b;
op3val:0xff35e67b171d10da; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f4, f13, f23, f31, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f18, rs2==f11, rs3==f2, rd==f31,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xa42b6311033e7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x29651713b2616 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xe81c40ed0c5e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f18; op2:f11; op3:f2; dest:f31; op1val:0x5f7a42b6311033e7; op2val:0x5fa29651713b2616;
op3val:0xff2e81c40ed0c5e9; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f18, f11, f2, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f16, rs2==f8, rs3==f18, rd==f13,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xaf47876670d7f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x19295f298916c and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xd9ab3665a5ec6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f16; op2:f8; op3:f18; dest:f13; op1val:0x5f7af47876670d7f; op2val:0x5fa19295f298916c;
op3val:0xff2d9ab3665a5ec6; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f13, f16, f8, f18, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f0, rs2==f28, rs3==f22, rd==f18,fs1 == 0 and fe1 == 0x5f7 and fm1 == 0xe70e78fe823f7 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x97812620d4535 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x83a6dc991a86f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f0; op2:f28; op3:f22; dest:f18; op1val:0x5f7e70e78fe823f7; op2val:0x5f997812620d4535;
op3val:0xff283a6dc991a86f; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f18, f0, f28, f22, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f1, rs2==f10, rs3==f17, rd==f20,fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x0451c9f55e3a7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd2d54358cf2fc and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xdab5be2965552 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f1; op2:f10; op3:f17; dest:f20; op1val:0x5f80451c9f55e3a7; op2val:0x5fad2d54358cf2fc;
op3val:0xff3dab5be2965552; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f20, f1, f10, f17, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x04c0c63d2bf03 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x25fa7c5d5ea39 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x2b6fc5d21579d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f804c0c63d2bf03; op2val:0x5f925fa7c5d5ea39;
op3val:0xff22b6fc5d21579d; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x0ed09999e8c7f and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x50af5b268139f and fs3 == 1 and fe3 == 0x7ee and fm3 == 0x642b4a9fe4017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f80ed09999e8c7f; op2val:0x5f550af5b268139f;
op3val:0xfee642b4a9fe4017; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x2bbbe71ac902b and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x957151755a3ab and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xdab4f1ee3d78e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f82bbbe71ac902b; op2val:0x5f8957151755a3ab;
op3val:0xff1dab4f1ee3d78e; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x30c845de62d3f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x4fea329d7caef and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x8fece6c07d834 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f830c845de62d3f; op2val:0x5fa4fea329d7caef;
op3val:0xff38fece6c07d834; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x354ba34578ba7 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x5569022b338ff and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x9c7c9f204a95d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8354ba34578ba7; op2val:0x5f95569022b338ff;
op3val:0xff29c7c9f204a95d; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x3ff0da6c98f6f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x699f5f701628b and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xc3f1d1e14346a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f83ff0da6c98f6f; op2val:0x5fa699f5f701628b;
op3val:0xff3c3f1d1e14346a; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x6607c20361523 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xe2f1c5d734347 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x51b65ea47a1f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f86607c20361523; op2val:0x5f9e2f1c5d734347;
op3val:0xff351b65ea47a1f7; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x83554309c673f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9071429916f5c and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x2ef04b12bcb04 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f883554309c673f; op2val:0x5fa9071429916f5c;
op3val:0xff42ef04b12bcb04; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0x9847d9429817b and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x6f291ef3c3557 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x24c84aaab9723 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f89847d9429817b; op2val:0x5f96f291ef3c3557;
op3val:0xff324c84aaab9723; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xa10df54b7350b and fs2 == 0 and fe2 == 0x5f1 and fm2 == 0xe32c6a43223ff and fs3 == 1 and fe3 == 0x7eb and fm3 == 0x8992d8a854c6c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8a10df54b7350b; op2val:0x5f1e32c6a43223ff;
op3val:0xfeb8992d8a854c6c; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xa9aa2b6025f07 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2c9bb6d2a0534 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xf3d654da22af7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8a9aa2b6025f07; op2val:0x5fa2c9bb6d2a0534;
op3val:0xff3f3d654da22af7; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xa9f06400d3d17 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xa3695ba8b56f7 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x5ce9dfe3c31a8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8a9f06400d3d17; op2val:0x5f8a3695ba8b56f7;
op3val:0xff25ce9dfe3c31a8; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xaf42bcba26d83 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x99fb7503e8d08 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x59549d8a44684 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8af42bcba26d83; op2val:0x5fa99fb7503e8d08;
op3val:0xff459549d8a44684; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc380d05f3f55f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x96d3944ae92c5 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x66c1b996b1f29 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c380d05f3f55f; op2val:0x5fa96d3944ae92c5;
op3val:0xff466c1b996b1f29; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x4cdb8933a8b6f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x2bb14803ad518 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x5f64cdb8933a8b6f;
op3val:0xff02bb14803ad518; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xe8af77cda8053 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xef616f891ea0b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xd8d2a406710fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8e8af77cda8053; op2val:0x5faef616f891ea0b;
op3val:0xff4d8d2a406710fa; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xea52ea391cf03 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x465936dcae3fb and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x38883b16298e5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ea52ea391cf03; op2val:0x5fa465936dcae3fb;
op3val:0xff438883b16298e5; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xebc97dc31d5a7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe800919ed6413 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xd4bc97bd1911a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ebc97dc31d5a7; op2val:0x5fae800919ed6413;
op3val:0xff4d4bc97bd1911a; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xf1bca90426463 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7685c15158af8 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x6c16d6e6a1cf1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8f1bca90426463; op2val:0x5fa7685c15158af8;
op3val:0xff46c16d6e6a1cf1; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0084bbfe5e825 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd1ca42e21585b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xd2bbc53a2397b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90084bbfe5e825; op2val:0x5fad1ca42e21585b;
op3val:0xff4d2bbc53a2397b; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x00b42e8f00d47 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x318ea43af884c and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x3265b418c3296 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f900b42e8f00d47; op2val:0x5fa318ea43af884c;
op3val:0xff43265b418c3296; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0491012a9572d and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x0cc870fcad57f and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x1193d1821d684 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90491012a9572d; op2val:0x5f70cc870fcad57f;
op3val:0xff11193d1821d684; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x092178fb945a5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x05c5ccdf19706 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x0f1bfb4852c2c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9092178fb945a5; op2val:0x5fa05c5ccdf19706;
op3val:0xff40f1bfb4852c2c; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0972c859cb481 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x42f12d7244f4f and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x4edc742f380e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90972c859cb481; op2val:0x5f842f12d7244f4f;
op3val:0xff24edc742f380e8; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x0a287088f5e69 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xc44223126cbc7 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xd634299584c22 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f90a287088f5e69; op2val:0x5f8c44223126cbc7;
op3val:0xff2d634299584c22; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x1b9e168e5b379 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x1dc9fa26c1435 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x3c9ec35f82eda and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f91b9e168e5b379; op2val:0x5fa1dc9fa26c1435;
op3val:0xff43c9ec35f82eda; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x209a1991e3307 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x82f8c4c611b4f and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xb440cdac049cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9209a1991e3307; op2val:0x5fa82f8c4c611b4f;
op3val:0xff4b440cdac049cd; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x26c977d632159 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x6fd2704b8e37f and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xa78d255f84ba0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f926c977d632159; op2val:0x5f96fd2704b8e37f;
op3val:0xff3a78d255f84ba0; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x287ac6ae322ff and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x9444597ea17b3 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xd430e9cd03fd3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9287ac6ae322ff; op2val:0x5f99444597ea17b3;
op3val:0xff3d430e9cd03fd3; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x294c231789029 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x83df99d24bacb and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xc271c501deeef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9294c231789029; op2val:0x5f883df99d24bacb;
op3val:0xff2c271c501deeef; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2a0b81afacd4f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xaddc37d4e3971 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xf475ab372af59 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92a0b81afacd4f; op2val:0x5f9addc37d4e3971;
op3val:0xff3f475ab372af59; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2ba7b825eeafb and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdfcf16f837dfc and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x18d09c87eafdb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92ba7b825eeafb; op2val:0x5fadfcf16f837dfc;
op3val:0xff518d09c87eafdb; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x2c72e28eb4ecd and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xe989c8dd81bc5 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x1f4493fdc7339 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f92c72e28eb4ecd; op2val:0x5f9e989c8dd81bc5;
op3val:0xff41f4493fdc7339; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x38a399f905ab9 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xd0ab984a97eef and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x1bbd0b2bb7f03 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f938a399f905ab9; op2val:0x5f7d0ab984a97eef;
op3val:0xff21bbd0b2bb7f03; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x43790a4111099 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xf155693c9590b and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x3a34f488f61ed and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f943790a4111099; op2val:0x5f8f155693c9590b;
op3val:0xff33a34f488f61ed; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x43c3f0806f2cd and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xb54c6b03a8983 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x14870f8714f98 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f943c3f0806f2cd; op2val:0x5f8b54c6b03a8983;
op3val:0xff314870f8714f98; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x485dfab87c6eb and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xa1c5a75f20f3f and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x0bef4e33e32d9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9485dfab87c6eb; op2val:0x5f8a1c5a75f20f3f;
op3val:0xff30bef4e33e32d9; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x57fa825e98147 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x76587e2d6216f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0xf6fee21d49b25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f957fa825e98147; op2val:0x5f676587e2d6216f;
op3val:0xff0f6fee21d49b25; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x5fe6340fe9dff and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xea95a80ed95a1 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x512e2bd31f388 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f95fe6340fe9dff; op2val:0x5f9ea95a80ed95a1;
op3val:0xff4512e2bd31f388; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x60b765da8eb85 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xeb18879086a84 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x5250c629c9d02 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f960b765da8eb85; op2val:0x5faeb18879086a84;
op3val:0xff55250c629c9d02; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x643a0f16c5ad9 and fs2 == 0 and fe2 == 0x5f4 and fm2 == 0x46821d48c93bf and fs3 == 1 and fe3 == 0x7ee and fm3 == 0xc656fd72855a3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9643a0f16c5ad9; op2val:0x5f446821d48c93bf;
op3val:0xfeec656fd72855a3; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x66b37637d118d and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x714a830fa079f and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x02b88a752db26 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f966b37637d118d; op2val:0x5f8714a830fa079f;
op3val:0xff302b88a752db26; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x6db92bb1bf075 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xace1ecea16623 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x325a2ba0d90e9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f96db92bb1bf075; op2val:0x5faace1ecea16623;
op3val:0xff5325a2ba0d90e9; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x792be19c2d7a1 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xfa174e3ff15ce and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x74d18914c5885 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9792be19c2d7a1; op2val:0x5fafa174e3ff15ce;
op3val:0xff574d18914c5885; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x79fd40d8406ff and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0x93dda7765991f and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x2a2879fc2e34b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f979fd40d8406ff; op2val:0x5f593dda7765991f;
op3val:0xff02a2879fc2e34b; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7a1e41518aac9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe5da67e1de883 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x66cef479725bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97a1e41518aac9; op2val:0x5fae5da67e1de883;
op3val:0xff566cef479725bd; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xf2f998bf74bb4 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x76cd298da03ec and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x5faf2f998bf74bb4;
op3val:0xff576cd298da03ec; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x889db2e44701b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x8d86e8b1c1eba and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x30d5baeb97155 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9889db2e44701b; op2val:0x5fa8d86e8b1c1eba;
op3val:0xff530d5baeb97155; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8d5463dfce629 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xa85d306a197c5 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x4952341bbaad6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98d5463dfce629; op2val:0x5f9a85d306a197c5;
op3val:0xff44952341bbaad6; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9bebe66f937a7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x6756366451777 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x211944758791d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99bebe66f937a7; op2val:0x5fa6756366451777;
op3val:0xff5211944758791d; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa26ee9811427d and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xab3d27fb21645 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x5d297aa0a7a31 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a26ee9811427d; op2val:0x5f9ab3d27fb21645;
op3val:0xff45d297aa0a7a31; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa501ef8480c55 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x393a07ddd783a and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x018f669c940df and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a501ef8480c55; op2val:0x5fa393a07ddd783a;
op3val:0xff5018f669c940df; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa8acc80de84a1 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x9724cf1f251b7 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x51b3e0f8cf403 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a8acc80de84a1; op2val:0x5f79724cf1f251b7;
op3val:0xff251b3e0f8cf403; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x965e42d4900a7 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x51ce863caff95 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x5f7965e42d4900a7;
op3val:0xff251ce863caff95; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xb4c5ad04d76dd and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x3526172ae3f6b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x07b9cb5abb54c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9b4c5ad04d76dd; op2val:0x5f93526172ae3f6b;
op3val:0xff407b9cb5abb54c; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcab8890bacf6d and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x49818dfc8788f and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x2737a6c49a153 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cab8890bacf6d; op2val:0x5f749818dfc8788f;
op3val:0xff22737a6c49a153; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xd0546b2b91d49 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdfcc2e217e8b4 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xb32025bbec1f6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9d0546b2b91d49; op2val:0x5fadfcc2e217e8b4;
op3val:0xff5b32025bbec1f6; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xd988a750d58bd and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x464ca5c58934b and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x2dc8e62289dd7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9d988a750d58bd; op2val:0x5fa464ca5c58934b;
op3val:0xff52dc8e62289dd7; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xde18ff8661b6b and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9e3b4234a7716 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x82cd8c517ed44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9de18ff8661b6b; op2val:0x5fa9e3b4234a7716;
op3val:0xff582cd8c517ed44; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe230580ba7bd1 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe689920bde8c0 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xca35730d9612e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e230580ba7bd1; op2val:0x5fae689920bde8c0;
op3val:0xff5ca35730d9612e; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe3796147a7f97 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x9c78deb52422f and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x857dcf0723ac9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e3796147a7f97; op2val:0x5f79c78deb52422f;
op3val:0xff2857dcf0723ac9; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe56179ab25747 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xae83ac33105f8 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x9821b0de85599 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e56179ab25747; op2val:0x5faae83ac33105f8;
op3val:0xff59821b0de85599; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xe8754038aa2cf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xbb09e7215ddb9 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xa6aae5a163cfd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9e8754038aa2cf; op2val:0x5fabb09e7215ddb9;
op3val:0xff5a6aae5a163cfd; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xf1d543a0b07fb and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcd593b01b4bb4 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xc09548562c4a5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9f1d543a0b07fb; op2val:0x5facd593b01b4bb4;
op3val:0xff5c09548562c4a5; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xf21e6dcb25437 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x42a2ac1575123 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x39e3661898bda and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9f21e6dcb25437; op2val:0x5fa42a2ac1575123;
op3val:0xff539e3661898bda; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xf2f5c0f43aa65 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x1f707766a790b and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x181e5bc744e77 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9f2f5c0f43aa65; op2val:0x5fa1f707766a790b;
op3val:0xff5181e5bc744e77; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xf7a288f1ea41f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xba05c226869f4 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xb2ccfa49a8f7c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9f7a288f1ea41f; op2val:0x5faba05c226869f4;
op3val:0xff5b2ccfa49a8f7c; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xfe9d365149cd7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x57132c37fb117 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x562570d24fe72 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9fe9d365149cd7; op2val:0x5fa57132c37fb117;
op3val:0xff5562570d24fe72; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x028f51d8767f7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcd5bbb21e85e5 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xd1f8bc55d5497 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa028f51d8767f7; op2val:0x5facd5bbb21e85e5;
op3val:0xff5d1f8bc55d5497; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0410cbbfdec45 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xdd9c651f50797 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xe5322c9b1b2b8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0410cbbfdec45; op2val:0x5fadd9c651f50797;
op3val:0xff5e5322c9b1b2b8; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x09badb528c6c8 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xcb4f3175c7901 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xdcc43b3db5c6b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa09badb528c6c8; op2val:0x5f9cb4f3175c7901;
op3val:0xff4dcc43b3db5c6b; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x0aaee2f44e344 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x4d3375e946b52 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x5b1b18e3f0f44 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa0aaee2f44e344; op2val:0x5fa4d3375e946b52;
op3val:0xff55b1b18e3f0f44; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x17c09874ed591 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x35eecb1ad0a6b and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x52b06b05e5a80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa17c09874ed591; op2val:0x5f835eecb1ad0a6b;
op3val:0xff352b06b05e5a80; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x1a3fb352a13ab and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x69c26ac7fce60 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x8eda2de04892d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa1a3fb352a13ab; op2val:0x5fa69c26ac7fce60;
op3val:0xff58eda2de04892d; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x1f06fdec36709 and fs2 == 0 and fe2 == 0x5f4 and fm2 == 0x97836753c7c7f and fs3 == 1 and fe3 == 0x7ef and fm3 == 0xc8e7722039d9d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa1f06fdec36709; op2val:0x5f497836753c7c7f;
op3val:0xfefc8e7722039d9d; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x21cc73db02f94 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd883cdc560c7e and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x0b7315159f9c4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa21cc73db02f94; op2val:0x5fad883cdc560c7e;
op3val:0xff60b7315159f9c4; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2362beb7fcccc and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x04673c7ab8808 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x2865cb446c89f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2362beb7fcccc; op2val:0x5fa04673c7ab8808;
op3val:0xff52865cb446c89f; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x25d29d05cd288 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5b6db472d3462 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x8ec2649f993d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa25d29d05cd288; op2val:0x5fa5b6db472d3462;
op3val:0xff58ec2649f993d5; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x26e34e07a9172 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x9099330bb750b and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xcd73a29262418 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa26e34e07a9172; op2val:0x5f99099330bb750b;
op3val:0xff4cd73a29262418; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2ab10cf910f7c and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd0f42c0dfaf72 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x0f3ee5d545177 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2ab10cf910f7c; op2val:0x5fad0f42c0dfaf72;
op3val:0xff60f3ee5d545177; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x2b76882db8d56 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5bcd8bcde77b5 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x96da1c0b3eca5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa2b76882db8d56; op2val:0x5fa5bcd8bcde77b5;
op3val:0xff596da1c0b3eca5; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x314c82f3115df and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x8a2386a894fd9 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xd60a1f971865c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa314c82f3115df; op2val:0x5f98a2386a894fd9;
op3val:0xff4d60a1f971865c; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x327d919abde6a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xa6c1b4fe3e3c0 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xfa22e760882ce and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa327d919abde6a; op2val:0x5faa6c1b4fe3e3c0;
op3val:0xff5fa22e760882ce; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x34d4bf2305d15 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x2cdc24d268f9f and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x6af2e33d0cf3f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa34d4bf2305d15; op2val:0x5fa2cdc24d268f9f;
op3val:0xff56af2e33d0cf3f; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x3833da7b9aa37 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xc00c1c027c00f and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x1134c1779ff86 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa3833da7b9aa37; op2val:0x5f8c00c1c027c00f;
op3val:0xff41134c1779ff86; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x38c62d68fcb25 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd3762f4d1629c and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x1d90f4fd0231e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa38c62d68fcb25; op2val:0x5fad3762f4d1629c;
op3val:0xff61d90f4fd0231e; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x39bd67fecd9d5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5035a8d0a4c2b and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x9c0a5b98f5aeb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa39bd67fecd9d5; op2val:0x5fa5035a8d0a4c2b;
op3val:0xff59c0a5b98f5aeb; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x3ccae6dd9195e and fs2 == 0 and fe2 == 0x5f3 and fm2 == 0xfda686ffdecff and fs3 == 1 and fe3 == 0x7ef and fm3 == 0x3b56bfd38a685 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa3ccae6dd9195e; op2val:0x5f3fda686ffdecff;
op3val:0xfef3b56bfd38a685; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x43be7b7bc5458 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x59f961d342ac1 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xb58714663f57f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa43be7b7bc5458; op2val:0x5f959f961d342ac1;
op3val:0xff4b58714663f57f; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x442435bea0eb5 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x55e18bacc608f and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xb0e1d0449526d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa442435bea0eb5; op2val:0x5f755e18bacc608f;
op3val:0xff2b0e1d0449526d; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x447a9936a43d3 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3dfdc8c878541 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x930d7b5ff45e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa447a9936a43d3; op2val:0x5fa3dfdc8c878541;
op3val:0xff5930d7b5ff45e8; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4596be54ed4ed and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x78ecdf97d01e3 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xdf62aae3973da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4596be54ed4ed; op2val:0x5f878ecdf97d01e3;
op3val:0xff3df62aae3973da; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x46206996b12da and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x5a57127f0185f and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xb936bb49a11fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa46206996b12da; op2val:0x5f75a57127f0185f;
op3val:0xff2b936bb49a11fa; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x47c0965bde424 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x7d6356ef8a62f and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xe848ce8e3fcb4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa47c0965bde424; op2val:0x5f97d6356ef8a62f;
op3val:0xff4e848ce8e3fcb4; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x4f8b971fa5a72 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x6cba246939a56 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xde0e760659984 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa4f8b971fa5a72; op2val:0x5fa6cba246939a56;
op3val:0xff5de0e760659984; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x520baea9095e5 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xfe1581ecd07ea and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x50c7d63d56d04 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa520baea9095e5; op2val:0x5fafe1581ecd07ea;
op3val:0xff650c7d63d56d04; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x530b56ed605ac and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x7f381ca9a6b2f and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xfb88477e13d99 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa530b56ed605ac; op2val:0x5f67f381ca9a6b2f;
op3val:0xff1fb88477e13d99; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5540f3246eb3d and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x24c28db80e5f8 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x86416d77efa3b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5540f3246eb3d; op2val:0x5fa24c28db80e5f8;
op3val:0xff586416d77efa3b; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x56182d28045ae and fs2 == 0 and fe2 == 0x5f1 and fm2 == 0x2b954e52a4bff and fs3 == 1 and fe3 == 0x7ec and fm3 == 0x9055c179d3095 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa56182d28045ae; op2val:0x5f12b954e52a4bff;
op3val:0xfec9055c179d3095; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5864580d04bef and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xeedf7f711c3c2 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x4cdf2661e23a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5864580d04bef; op2val:0x5faeedf7f711c3c2;
op3val:0xff64cdf2661e23a6; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58dabbecb7711 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x360373cf6f10f and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xa19d86228ad00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58dabbecb7711; op2val:0x5f8360373cf6f10f;
op3val:0xff3a19d86228ad00; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a371eca20170 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb0db7e0a5d748 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x24b2edc8c9614 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a371eca20170; op2val:0x5fab0db7e0a5d748;
op3val:0xff624b2edc8c9614; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b3a3e9fd9fb7 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x852a7ebd7fae8 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x07ec924f6f3b3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b3a3e9fd9fb7; op2val:0x5fa852a7ebd7fae8;
op3val:0xff607ec924f6f3b3; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5c1fb79b16587 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xc15c34215bcf5 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x318881a866144 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5c1fb79b16587; op2val:0x5fac15c34215bcf5;
op3val:0xff6318881a866144; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5d7485adabe61 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3e7bb112f7fe8 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xb2bf96c16b1eb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5d7485adabe61; op2val:0x5fa3e7bb112f7fe8;
op3val:0xff5b2bf96c16b1eb; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5f72319ab0728 and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0xedb823f91667f and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x52e5da7e8f4c2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5f72319ab0728; op2val:0x5f5edb823f91667f;
op3val:0xff152e5da7e8f4c2; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x728eb744bb2ef and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x0286ee85a9301 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x5f6728eb744bb2ef;
op3val:0xff20286ee85a9301; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x691ae7e1929e8 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x1a3fd4c2ca047 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x8e21ad2a9765b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa691ae7e1929e8; op2val:0x5f91a3fd4c2ca047;
op3val:0xff48e21ad2a9765b; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6faef3ad3537e and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x9d365cde1b8c2 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x28bda9b3db1f5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6faef3ad3537e; op2val:0x5fa9d365cde1b8c2;
op3val:0xff628bda9b3db1f5; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6fdf2805ff4db and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x5a5fc5e3c3eed and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xf1bd3c45fb840 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6fdf2805ff4db; op2val:0x5f95a5fc5e3c3eed;
op3val:0xff4f1bd3c45fb840; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x707d21f5c40de and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x986532dae9957 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x25ec8c58d0eb3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa707d21f5c40de; op2val:0x5f9986532dae9957;
op3val:0xff525ec8c58d0eb3; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x75ac81c4b8321 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcc3488366e29b and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x4fdf538577882 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa75ac81c4b8321; op2val:0x5facc3488366e29b;
op3val:0xff64fdf538577882; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x77f3763d1768f and fs2 == 0 and fe2 == 0x5f5 and fm2 == 0xf700ae54ab8df and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x71582eaaed97d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa77f3763d1768f; op2val:0x5f5f700ae54ab8df;
op3val:0xff171582eaaed97d; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7b5477fb4a141 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x2365849750ca3 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xafc7712dbfbf6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7b5477fb4a141; op2val:0x5f82365849750ca3;
op3val:0xff3afc7712dbfbf6; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x8363338c30c8b and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xd266ca2da38e1 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x60e30fa688a25 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa8363338c30c8b; op2val:0x5f9d266ca2da38e1;
op3val:0xff560e30fa688a25; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x840470e668bb1 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xfb271584e30d0 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x80580471a61a9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa840470e668bb1; op2val:0x5fafb271584e30d0;
op3val:0xff680580471a61a9; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x862435d9f084c and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x1ecf7d50e7867 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xb518aa6c00619 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa862435d9f084c; op2val:0x5f91ecf7d50e7867;
op3val:0xff4b518aa6c00619; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x8908351afd340 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xba13e3965dc9d and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x535b5a5ad6084 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa8908351afd340; op2val:0x5f9ba13e3965dc9d;
op3val:0xff5535b5a5ad6084; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x898a6dfea4b33 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x4201da1346303 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xef02f7223bfef and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa898a6dfea4b33; op2val:0x5fa4201da1346303;
op3val:0xff5ef02f7223bfef; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x8de0124aa943c and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xb992011891a75 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x5724f5808dcf2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa8de0124aa943c; op2val:0x5f9b992011891a75;
op3val:0xff55724f5808dcf2; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x8f0cf46027883 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x65a21c61847d5 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x16bce19d14918 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa8f0cf46027883; op2val:0x5fa65a21c61847d5;
op3val:0xff616bce19d14918; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x914e0c751c4f4 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x36979c7be0deb and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xe6e22d6ce9f46 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa914e0c751c4f4; op2val:0x5f936979c7be0deb;
op3val:0xff4e6e22d6ce9f46; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x917e47c9fa5a6 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xaf465058419e9 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x5230f0b3473d1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa917e47c9fa5a6; op2val:0x5faaf465058419e9;
op3val:0xff65230f0b3473d1; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x950338fe39141 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x8de500cdc0435 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x3ac02644ded76 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa950338fe39141; op2val:0x5f98de500cdc0435;
op3val:0xff53ac02644ded76; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x95adca0768ede and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xb9042a506a4fd and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x5d6f7d65eee62 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa95adca0768ede; op2val:0x5fab9042a506a4fd;
op3val:0xff65d6f7d65eee62; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x516656a60de77 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x0baaede8dc6a2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa962eb496df1c1; op2val:0x5f7516656a60de77;
op3val:0xff30baaede8dc6a2; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x97605fecf75de and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xc8df50f6d17e1 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x6b83845444ffa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa97605fecf75de; op2val:0x5f9c8df50f6d17e1;
op3val:0xff56b83845444ffa; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c2c9b7ac820e and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x18ef1d7a9fa74 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xc451c729ee70d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c2c9b7ac820e; op2val:0x5fa18ef1d7a9fa74;
op3val:0xff5c451c729ee70d; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ebd3d588e341 and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0xfe0614a7b9fbf and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x9d236d0e2f75f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ebd3d588e341; op2val:0x5f6fe0614a7b9fbf;
op3val:0xff29d236d0e2f75f; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ed4cb2685903 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcde8b20967d0b and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x763f2195d631b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ed4cb2685903; op2val:0x5facde8b20967d0b;
op3val:0xff6763f2195d631b; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ed93307c783a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x09bb537711521 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xae9e65bcb2c9a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ed93307c783a; op2val:0x5fa09bb537711521;
op3val:0xff5ae9e65bcb2c9a; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ff4d99a919c7 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x8106d28c6e8ff and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x38cd288ccb544 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ff4d99a919c7; op2val:0x5f88106d28c6e8ff;
op3val:0xff438cd288ccb544; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa101ccfb0623a and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x14a00d8d01424 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xc29aa83186f5d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa101ccfb0623a; op2val:0x5fa14a00d8d01424;
op3val:0xff5c29aa83186f5d; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa1bf5c83faf60 and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x9c16a190f4e87 and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0x503a737e1fda2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa1bf5c83faf60; op2val:0x5f79c16a190f4e87;
op3val:0xff3503a737e1fda2; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xa354d897694eb and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x20d71331741df and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0xd91fbf5c8b262 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faa354d897694eb; op2val:0x5f720d71331741df;
op3val:0xff2d91fbf5c8b262; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xad3923b9bf5a2 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd64347e477166 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x8a3bdb0aa3320 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faad3923b9bf5a2; op2val:0x5fad64347e477166;
op3val:0xff68a3bdb0aa3320; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb01ad41cb5aef and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x5287546e52d99 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x1db3ec5b63fe9 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab01ad41cb5aef; op2val:0x5f95287546e52d99;
op3val:0xff51db3ec5b63fe9; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb0580f98a7dbd and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x84129978f9c19 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x47b27082b3c58 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab0580f98a7dbd; op2val:0x5fa84129978f9c19;
op3val:0xff647b27082b3c58; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xca428c2b7c81f and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x85490fc80b626 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x5faca428c2b7c81f;
op3val:0xff685490fc80b626; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x989b40414f92c and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x5bda7c19e1151 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x5fa989b40414f92c;
op3val:0xff65bda7c19e1151; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb7e5dd8914aef and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x7ef581743c7e7 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x49076f0110e5b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab7e5dd8914aef; op2val:0x5f87ef581743c7e7;
op3val:0xff449076f0110e5b; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xbc366e555215f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xf3878bbaf3893 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xb164a61d3904a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fabc366e555215f; op2val:0x5f8f3878bbaf3893;
op3val:0xff4b164a61d3904a; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xbdae67c407ef2 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x874e2eeac1c13 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x549ebea7079cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fabdae67c407ef2; op2val:0x5f8874e2eeac1c13;
op3val:0xff4549ebea7079cc; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xbe64efc9e258d and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x1d17766cf56c7 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xf11f4885d1302 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fabe64efc9e258d; op2val:0x5f91d17766cf56c7;
op3val:0xff4f11f4885d1302; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xbf4f8dd35ac8c and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x1eb3cbd822141 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0xf4f509400656a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fabf4f8dd35ac8c; op2val:0x5f91eb3cbd822141;
op3val:0xff4f4f509400656a; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc0377eab1f21f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x22e4be37f86cb and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xfd4f5bf5d88f7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac0377eab1f21f; op2val:0x5fa22e4be37f86cb;
op3val:0xff5fd4f5bf5d88f7; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc336b043d9acb and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x38619d6cda314 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x134b5a01f05fa and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac336b043d9acb; op2val:0x5fa38619d6cda314;
op3val:0xff6134b5a01f05fa; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc48b48c27d811 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xfa73e129b8879 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xbfa4133523727 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac48b48c27d811; op2val:0x5f9fa73e129b8879;
op3val:0xff5bfa4133523727; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xc9eec489f6667 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xd6e174caa8db2 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xa527d44d5e91f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fac9eec489f6667; op2val:0x5fad6e174caa8db2;
op3val:0xff6a527d44d5e91f; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xcb9c1949673fd and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe42ff54803ddc and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xb2a49cea8d5cf and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5facb9c1949673fd; op2val:0x5fae42ff54803ddc;
op3val:0xff6b2a49cea8d5cf; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xce576b61a6f6e and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xce7352604fe6b and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xa19904eab4d55 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5face576b61a6f6e; op2val:0x5f9ce7352604fe6b;
op3val:0xff5a19904eab4d55; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xcfc27db04baa5 and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0xa61a4a4a276db and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x7e551dc2f74e8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5facfc27db04baa5; op2val:0x5f8a61a4a4a276db;
op3val:0xff47e551dc2f74e8; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd1ed9e7beff05 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x1182656689f60 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xf1cbb93a051b1 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad1ed9e7beff05; op2val:0x5fa1182656689f60;
op3val:0xff5f1cbb93a051b1; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd572442fbaed2 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xbebcdefd48729 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x999bb5cf644fb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad572442fbaed2; op2val:0x5fabebcdefd48729;
op3val:0xff6999bb5cf644fb; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd5872438d16b0 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x4a33096ab139b and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x2ecee7f172467 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad5872438d16b0; op2val:0x5f94a33096ab139b;
op3val:0xff52ecee7f172467; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd89e42f5143f8 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x14c9836bbe6ff and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0xfefea712b23ee and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad89e42f5143f8; op2val:0x5fa14c9836bbe6ff;
op3val:0xff5fefea712b23ee; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xd8c56582791a6 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xaf56f24522c9c and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x8e4a73d085905 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fad8c56582791a6; op2val:0x5faaf56f24522c9c;
op3val:0xff68e4a73d085905; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe063e979a868f and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0xf8941b7ef6d0f and fs3 == 1 and fe3 == 0x7f3 and fm3 == 0xd96d5081a3ec6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae063e979a868f; op2val:0x5f7f8941b7ef6d0f;
op3val:0xff3d96d5081a3ec6; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe2c9f3b4cd220 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x36127b62e0a11 and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x2461b400ca12a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae2c9f3b4cd220; op2val:0x5f936127b62e0a11;
op3val:0xff52461b400ca12a; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe49bfb977b300 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe07b0ce451645 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xc6c6b38ab6c65 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae49bfb977b300; op2val:0x5fae07b0ce451645;
op3val:0xff6c6c6b38ab6c65; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xe64794dad7d48 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x28cdc8d19d0dc and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x19e4d472a9ee0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fae64794dad7d48; op2val:0x5fa28cdc8d19d0dc;
op3val:0xff619e4d472a9ee0; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xec0c4abe1fd0e and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x7ad291b7d6463 and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x6c0f70432cf47 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faec0c4abe1fd0e; op2val:0x5f87ad291b7d6463;
op3val:0xff46c0f70432cf47; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xecab0c14c497e and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x71f120502a5e1 and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0x63f94bcffbb5c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faecab0c14c497e; op2val:0x5fa71f120502a5e1;
op3val:0xff663f94bcffbb5c; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xecd582efcf7c1 and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xcc4ac8145e5cc and fs3 == 1 and fe3 == 0x7f6 and fm3 == 0xbb0fcf166363b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faecd582efcf7c1; op2val:0x5facc4ac8145e5cc;
op3val:0xff6bb0fcf166363b; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xeedb9ccd51d70 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x72ef022ae1b5f and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x6683b5ec5fc42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faeedb9ccd51d70; op2val:0x5f972ef022ae1b5f;
op3val:0xff56683b5ec5fc42; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x5f6 and fm2 == 0x2a1fa26c0948f and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x2450ac1fce6c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x5f62a1fa26c0948f;
op3val:0xff22450ac1fce6c0; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x2fed65905c04f and fs3 == 1 and fe3 == 0x7f4 and fm3 == 0x2ac1dd922d091 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x5f82fed65905c04f;
op3val:0xff42ac1dd922d091; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf940aa40f1530 and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0x9b75de798ac5f and fs3 == 1 and fe3 == 0x7f5 and fm3 == 0x9609b97d041b7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf940aa40f1530; op2val:0x5f99b75de798ac5f;
op3val:0xff59609b97d041b7; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x5ee and fm1 == 0xf8c6f685f5fff and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x74ac1f4d6cd77 and fs3 == 1 and fe3 == 0x7e8 and fm3 == 0x6f6a40d086e42 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5eef8c6f685f5fff; op2val:0x5f874ac1f4d6cd77;
op3val:0xfe86f6a40d086e42; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x5f2 and fm1 == 0x3502bebc53fff and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xa53d0d2b3faec and fs3 == 1 and fe3 == 0x7ed and fm3 == 0xfc77353881082 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f23502bebc53fff; op2val:0x5faa53d0d2b3faec;
op3val:0xfedfc77353881082; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0x75450c5a9817f and fs2 == 0 and fe2 == 0x5f9 and fm2 == 0xb3d56c4f6fd1d and fs3 == 1 and fe3 == 0x7f0 and fm3 == 0x3dbdc22f16309 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f575450c5a9817f; op2val:0x5f9b3d56c4f6fd1d;
op3val:0xff03dbdc22f16309; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x5f5 and fm1 == 0xb56678fedc57f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x451eb54c10b8b and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x15bfc7b09311c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f5b56678fedc57f; op2val:0x5fa451eb54c10b8b;
op3val:0xff115bfc7b09311c; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x09f50264a8d1f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x3c1be8887e304 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0x48676d5f586e3 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f609f50264a8d1f; op2val:0x5fa3c1be8887e304;
op3val:0xff148676d5f586e3; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x2fdaf9dfde227 and fs3 == 1 and fe3 == 0x7ef and fm3 == 0x58df00b847dd8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0x5f82fdaf9dfde227;
op3val:0xfef58df00b847dd8; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42972262ccf0f and fs2 == 0 and fe2 == 0x5f7 and fm2 == 0x9d5f97660dadf and fs3 == 1 and fe3 == 0x7ef and fm3 == 0x047323ab7303d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642972262ccf0f; op2val:0x5f79d5f97660dadf;
op3val:0xfef047323ab7303d; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x4d1d10d2ac62f and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x5cab9bd09e6c4 and fs3 == 1 and fe3 == 0x7f1 and fm3 == 0xc5b2d008ae01b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f64d1d10d2ac62f; op2val:0x5fa5cab9bd09e6c4;
op3val:0xff1c5b2d008ae01b; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5188d91417d2f and fs2 == 0 and fe2 == 0x5f8 and fm2 == 0x4f961e264020f and fs3 == 1 and fe3 == 0x7ef and fm3 == 0xba780200f5413 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65188d91417d2f; op2val:0x5f84f961e264020f;
op3val:0xfefba780200f5413; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5819e362ac2bf and fs2 == 0 and fe2 == 0x5fa and fm2 == 0x7f8e997d84592 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x01c733ee77e03 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65819e362ac2bf; op2val:0x5fa7f8e997d84592;
op3val:0xff201c733ee77e03; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 0 and fe2 == 0x5fa and fm2 == 0xe55b30b309254 and fs3 == 1 and fe3 == 0x7f2 and fm3 == 0x46f270bef90e6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0x5fae55b30b309254;
op3val:0xff246f270bef90e6; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6840840769119412223,64,FLEN)
NAN_BOXED(6883552752355954039,64,FLEN)
NAN_BOXED(18340617716966649410,64,FLEN)
NAN_BOXED(6852500666228771839,64,FLEN)
NAN_BOXED(6883925312421061895,64,FLEN)
NAN_BOXED(18353072035913539463,64,FLEN)
NAN_BOXED(6855411207357415423,64,FLEN)
NAN_BOXED(6855411207357415423,64,FLEN)
NAN_BOXED(18365617103576764546,64,FLEN)
NAN_BOXED(6870052462467318143,64,FLEN)
NAN_BOXED(6870052462467318143,64,FLEN)
NAN_BOXED(6870052462467318143,64,FLEN)
NAN_BOXED(6871180659280168319,64,FLEN)
NAN_BOXED(6871180659280168319,64,FLEN)
NAN_BOXED(18379572694229791004,64,FLEN)
NAN_BOXED(6872668197955996959,64,FLEN)
NAN_BOXED(6891564878885544708,64,FLEN)
NAN_BOXED(18380463824159737571,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(6882342111287304743,64,FLEN)
NAN_BOXED(6882342111287304743,64,FLEN)
NAN_BOXED(6873664501517700879,64,FLEN)
NAN_BOXED(6879765173194775263,64,FLEN)
NAN_BOXED(6873664501517700879,64,FLEN)
NAN_BOXED(6873849627073496623,64,FLEN)
NAN_BOXED(6892137703849715396,64,FLEN)
NAN_BOXED(18382668027860279323,64,FLEN)
NAN_BOXED(6873927402557373743,64,FLEN)
NAN_BOXED(6882900329334309391,64,FLEN)
NAN_BOXED(6882900329334309391,64,FLEN)
NAN_BOXED(6874042922764518079,64,FLEN)
NAN_BOXED(6892751436872435090,64,FLEN)
NAN_BOXED(6874042922764518079,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(6874767589247985679,64,FLEN)
NAN_BOXED(6889983016487724503,64,FLEN)
NAN_BOXED(18381070002127094814,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(6883466929126140923,64,FLEN)
NAN_BOXED(18375178608856121996,64,FLEN)
NAN_BOXED(6875991722401691631,64,FLEN)
NAN_BOXED(6873168042903084559,64,FLEN)
NAN_BOXED(18365776528464663451,64,FLEN)
NAN_BOXED(6876802962742624783,64,FLEN)
NAN_BOXED(6863508028924857023,64,FLEN)
NAN_BOXED(18356521852005155604,64,FLEN)
NAN_BOXED(6877094481528466031,64,FLEN)
NAN_BOXED(6893782257873015752,64,FLEN)
NAN_BOXED(18387137510243737811,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(6878594116806400143,64,FLEN)
NAN_BOXED(18372105888271592056,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(6887971963001160039,64,FLEN)
NAN_BOXED(18381968935375827698,64,FLEN)
NAN_BOXED(6877599240301804127,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(18382921143262277027,64,FLEN)
NAN_BOXED(6877768450647360143,64,FLEN)
NAN_BOXED(6889070451971400915,64,FLEN)
NAN_BOXED(18383554073366462367,64,FLEN)
NAN_BOXED(6877921820614041783,64,FLEN)
NAN_BOXED(6874422864221122095,64,FLEN)
NAN_BOXED(18368930754944054097,64,FLEN)
NAN_BOXED(6878354586385708367,64,FLEN)
NAN_BOXED(6886449035273543909,64,FLEN)
NAN_BOXED(18381127480901620885,64,FLEN)
NAN_BOXED(6878592212159391047,64,FLEN)
NAN_BOXED(6893830143474236561,64,FLEN)
NAN_BOXED(18388993228535811281,64,FLEN)
NAN_BOXED(6878965558721125191,64,FLEN)
NAN_BOXED(6892827719730813325,64,FLEN)
NAN_BOXED(18388597291034599422,64,FLEN)
NAN_BOXED(6879228702829825151,64,FLEN)
NAN_BOXED(6893384277212916514,64,FLEN)
NAN_BOXED(18389212849157389526,64,FLEN)
NAN_BOXED(6879539135772114791,64,FLEN)
NAN_BOXED(6881060959947304607,64,FLEN)
NAN_BOXED(18376885354098519494,64,FLEN)
NAN_BOXED(6879711810790369527,64,FLEN)
NAN_BOXED(6893695420953848459,64,FLEN)
NAN_BOXED(18389858069780435162,64,FLEN)
NAN_BOXED(6879884731036480487,64,FLEN)
NAN_BOXED(6891235656366499350,64,FLEN)
NAN_BOXED(18387777007662450153,64,FLEN)
NAN_BOXED(6880080178981571967,64,FLEN)
NAN_BOXED(6890950077571436908,64,FLEN)
NAN_BOXED(18387522948930625222,64,FLEN)
NAN_BOXED(6881061420522808311,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(18386009721947662447,64,FLEN)
NAN_BOXED(6881576219856724903,64,FLEN)
NAN_BOXED(6894216444273029884,64,FLEN)
NAN_BOXED(18392044864382850386,64,FLEN)
NAN_BOXED(6881583846720192259,64,FLEN)
NAN_BOXED(6886671954386217529,64,FLEN)
NAN_BOXED(18384457823890266013,64,FLEN)
NAN_BOXED(6881760856109911167,64,FLEN)
NAN_BOXED(6869408856999990175,64,FLEN)
NAN_BOXED(18367441473990705175,64,FLEN)
NAN_BOXED(6882269607200854059,64,FLEN)
NAN_BOXED(6884129253509931947,64,FLEN)
NAN_BOXED(18383037610305247118,64,FLEN)
NAN_BOXED(6882358418202832191,64,FLEN)
NAN_BOXED(6891913306518833903,64,FLEN)
NAN_BOXED(18390729240896591924,64,FLEN)
NAN_BOXED(6882437814271052711,64,FLEN)
NAN_BOXED(6887506382190491903,64,FLEN)
NAN_BOXED(18386446623879506269,64,FLEN)
NAN_BOXED(6882625089650134895,64,FLEN)
NAN_BOXED(6892365561427223179,64,FLEN)
NAN_BOXED(18391644372565505130,64,FLEN)
NAN_BOXED(6883295166715008291,64,FLEN)
NAN_BOXED(6889996278796862279,64,FLEN)
NAN_BOXED(18389634777973498359,64,FLEN)
NAN_BOXED(6883810666144884543,64,FLEN)
NAN_BOXED(6893048487845392220,64,FLEN)
NAN_BOXED(18393526631565871876,64,FLEN)
NAN_BOXED(6884179180304040315,64,FLEN)
NAN_BOXED(6887959388707632471,64,FLEN)
NAN_BOXED(18388844361189922595,64,FLEN)
NAN_BOXED(6884333531774268683,64,FLEN)
NAN_BOXED(6853971511644136447,64,FLEN)
NAN_BOXED(18354588702225026156,64,FLEN)
NAN_BOXED(6884485004018212615,64,FLEN)
NAN_BOXED(6891292186657817908,64,FLEN)
NAN_BOXED(18392486908507859703,64,FLEN)
NAN_BOXED(6884489829582454039,64,FLEN)
NAN_BOXED(6884374997096945399,64,FLEN)
NAN_BOXED(18385328231780463016,64,FLEN)
NAN_BOXED(6884583449326415235,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(18394272397464454788,64,FLEN)
NAN_BOXED(6884939558928250207,64,FLEN)
NAN_BOXED(6893160797400109765,64,FLEN)
NAN_BOXED(18394508593835220777,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(6873845123901983599,64,FLEN)
NAN_BOXED(18375455126350124312,64,FLEN)
NAN_BOXED(6885593675852316755,64,FLEN)
NAN_BOXED(6894718658070833675,64,FLEN)
NAN_BOXED(18396515265486983418,64,FLEN)
NAN_BOXED(6885622500027387651,64,FLEN)
NAN_BOXED(6891745013660312571,64,FLEN)
NAN_BOXED(18393695402309359845,64,FLEN)
NAN_BOXED(6885648240716404135,64,FLEN)
NAN_BOXED(6894588856128857107,64,FLEN)
NAN_BOXED(18396443381616185626,64,FLEN)
NAN_BOXED(6885752912090391651,64,FLEN)
NAN_BOXED(6892592499413846776,64,FLEN)
NAN_BOXED(18394602403789413617,64,FLEN)
NAN_BOXED(6886012951684573221,64,FLEN)
NAN_BOXED(6894198096048248923,64,FLEN)
NAN_BOXED(18396408140735330683,64,FLEN)
NAN_BOXED(6886016212253281607,64,FLEN)
NAN_BOXED(6891379249243981900,64,FLEN)
NAN_BOXED(18393587476494824086,64,FLEN)
NAN_BOXED(6886084163630880557,64,FLEN)
NAN_BOXED(6877221511452349823,64,FLEN)
NAN_BOXED(18379499304464275076,64,FLEN)
NAN_BOXED(6886164460142675365,64,FLEN)
NAN_BOXED(6890608983538767622,64,FLEN)
NAN_BOXED(18392966683850779692,64,FLEN)
NAN_BOXED(6886170047725483137,64,FLEN)
NAN_BOXED(6882677888494358351,64,FLEN)
NAN_BOXED(18385081018910736616,64,FLEN)
NAN_BOXED(6886182531097386601,64,FLEN)
NAN_BOXED(6884952843986848711,64,FLEN)
NAN_BOXED(18387461991315295266,64,FLEN)
NAN_BOXED(6886489683004863353,64,FLEN)
NAN_BOXED(6891031483036472373,64,FLEN)
NAN_BOXED(18393767319466159834,64,FLEN)
NAN_BOXED(6886577369866187527,64,FLEN)
NAN_BOXED(6892811509313903439,64,FLEN)
NAN_BOXED(18395871924925254093,64,FLEN)
NAN_BOXED(6886686178102419801,64,FLEN)
NAN_BOXED(6887971024134529919,64,FLEN)
NAN_BOXED(18391144873101642656,64,FLEN)
NAN_BOXED(6886715954800304895,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(18391930183290470355,64,FLEN)
NAN_BOXED(6886730341977460777,64,FLEN)
NAN_BOXED(6883820172728384203,64,FLEN)
NAN_BOXED(18387114381203599087,64,FLEN)
NAN_BOXED(6886743492789980495,64,FLEN)
NAN_BOXED(6889062411707234673,64,FLEN)
NAN_BOXED(18392497858087661401,64,FLEN)
NAN_BOXED(6886771819833912059,64,FLEN)
NAN_BOXED(6894444718462303740,64,FLEN)
NAN_BOXED(18397641025943154651,64,FLEN)
NAN_BOXED(6886785781271842509,64,FLEN)
NAN_BOXED(6890112278085508037,64,FLEN)
NAN_BOXED(18393250948599018297,64,FLEN)
NAN_BOXED(6887000235274427065,64,FLEN)
NAN_BOXED(6880667597602914031,64,FLEN)
NAN_BOXED(18384181658929299203,64,FLEN)
NAN_BOXED(6887190824523731097,64,FLEN)
NAN_BOXED(6885745816863594763,64,FLEN)
NAN_BOXED(18389221264398967277,64,FLEN)
NAN_BOXED(6887195971571610317,64,FLEN)
NAN_BOXED(6884689667702819203,64,FLEN)
NAN_BOXED(18388558403572158360,64,FLEN)
NAN_BOXED(6887276925858334443,64,FLEN)
NAN_BOXED(6884346155240656703,64,FLEN)
NAN_BOXED(18388407237547537113,64,FLEN)
NAN_BOXED(6887551565300334919,64,FLEN)
NAN_BOXED(6874574990505025903,64,FLEN)
NAN_BOXED(18379031672882764581,64,FLEN)
NAN_BOXED(6887690907378687487,64,FLEN)
NAN_BOXED(6890130686098642337,64,FLEN)
NAN_BOXED(18394129018110735240,64,FLEN)
NAN_BOXED(6887705283115150213,64,FLEN)
NAN_BOXED(6894643279255071364,64,FLEN)
NAN_BOXED(18398652587816295682,64,FLEN)
NAN_BOXED(6887767038633990873,64,FLEN)
NAN_BOXED(6864726226528670655,64,FLEN)
NAN_BOXED(18369168511162930595,64,FLEN)
NAN_BOXED(6887810565746266509,64,FLEN)
NAN_BOXED(6883493268067846047,64,FLEN)
NAN_BOXED(18388245144476506918,64,FLEN)
NAN_BOXED(6887934103360630901,64,FLEN)
NAN_BOXED(6893548811354990115,64,FLEN)
NAN_BOXED(18398090283574989033,64,FLEN)
NAN_BOXED(6888135500260104097,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(18399259570557704325,64,FLEN)
NAN_BOXED(6888149888195102463,64,FLEN)
NAN_BOXED(6870590715045714207,64,FLEN)
NAN_BOXED(18375428133009679179,64,FLEN)
NAN_BOXED(6888152156065016521,64,FLEN)
NAN_BOXED(6894551049212651651,64,FLEN)
NAN_BOXED(18399013102622811581,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(6894781891052260276,64,FLEN)
NAN_BOXED(18399294454408807404,64,FLEN)
NAN_BOXED(6888407204530253851,64,FLEN)
NAN_BOXED(6892997198982422202,64,FLEN)
NAN_BOXED(18398063590163181909,64,FLEN)
NAN_BOXED(6888490127727584809,64,FLEN)
NAN_BOXED(6888965721412442053,64,FLEN)
NAN_BOXED(18393990756747160278,64,FLEN)
NAN_BOXED(6888746830020556711,64,FLEN)
NAN_BOXED(6892325349515138935,64,FLEN)
NAN_BOXED(18397786756311709981,64,FLEN)
NAN_BOXED(6888861386211934845,64,FLEN)
NAN_BOXED(6889016296683476549,64,FLEN)
NAN_BOXED(18394339801899366961,64,FLEN)
NAN_BOXED(6888906673961307221,64,FLEN)
NAN_BOXED(6891514172322707514,64,FLEN)
NAN_BOXED(18397231924424294623,64,FLEN)
NAN_BOXED(6888971190956623009,64,FLEN)
NAN_BOXED(6879655580587413943,64,FLEN)
NAN_BOXED(18385131007172736003,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(6879641936471851175,64,FLEN)
NAN_BOXED(18385132838242156437,64,FLEN)
NAN_BOXED(6889184007918810845,64,FLEN)
NAN_BOXED(6886938833668947819,64,FLEN)
NAN_BOXED(18392836791174149452,64,FLEN)
NAN_BOXED(6889570133002080109,64,FLEN)
NAN_BOXED(6878289763502684303,64,FLEN)
NAN_BOXED(18384383598519755091,64,FLEN)
NAN_BOXED(6889668806151052617,64,FLEN)
NAN_BOXED(6894444518521170100,64,FLEN)
NAN_BOXED(18400355688262844918,64,FLEN)
NAN_BOXED(6889830725383444669,64,FLEN)
NAN_BOXED(6891744150079181643,64,FLEN)
NAN_BOXED(18398009931852193239,64,FLEN)
NAN_BOXED(6889911013410741099,64,FLEN)
NAN_BOXED(6893291067492955926,64,FLEN)
NAN_BOXED(18399505587153399108,64,FLEN)
NAN_BOXED(6889982986464951249,64,FLEN)
NAN_BOXED(6894563086439409856,64,FLEN)
NAN_BOXED(18400761772406038830,64,FLEN)
NAN_BOXED(6890005597651632023,64,FLEN)
NAN_BOXED(6879749318137496111,64,FLEN)
NAN_BOXED(18386042085178489545,64,FLEN)
NAN_BOXED(6890039139303053127,64,FLEN)
NAN_BOXED(6893577518724482552,64,FLEN)
NAN_BOXED(18399880805307930009,64,FLEN)
NAN_BOXED(6890093274829857487,64,FLEN)
NAN_BOXED(6893797849186033081,64,FLEN)
NAN_BOXED(18400136524643843325,64,FLEN)
NAN_BOXED(6890258202488408059,64,FLEN)
NAN_BOXED(6894119959888874420,64,FLEN)
NAN_BOXED(18400592436148749477,64,FLEN)
NAN_BOXED(6890263230329017399,64,FLEN)
NAN_BOXED(6891679692904419619,64,FLEN)
NAN_BOXED(18398222859140434906,64,FLEN)
NAN_BOXED(6890278027339737701,64,FLEN)
NAN_BOXED(6891060516277090571,64,FLEN)
NAN_BOXED(18397628776494419575,64,FLEN)
NAN_BOXED(6890360269518578719,64,FLEN)
NAN_BOXED(6893779972195379700,64,FLEN)
NAN_BOXED(18400349972883738492,64,FLEN)
NAN_BOXED(6890483049043369175,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(18398719978714234482,64,FLEN)
NAN_BOXED(6890552463104370679,64,FLEN)
NAN_BOXED(6894120131721332197,64,FLEN)
NAN_BOXED(18400898337677857943,64,FLEN)
NAN_BOXED(6890578952826252357,64,FLEN)
NAN_BOXED(6894406050375862167,64,FLEN)
NAN_BOXED(18401236536360284856,64,FLEN)
NAN_BOXED(6890678600247854792,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(18396584644030717035,64,FLEN)
NAN_BOXED(6890695369848841028,64,FLEN)
NAN_BOXED(6891865564547148626,64,FLEN)
NAN_BOXED(18398807228845854532,64,FLEN)
NAN_BOXED(6890925285220210065,64,FLEN)
NAN_BOXED(6882449026238450283,64,FLEN)
NAN_BOXED(18389651961166060160,64,FLEN)
NAN_BOXED(6890969204177638315,64,FLEN)
NAN_BOXED(6892367969653870176,64,FLEN)
NAN_BOXED(18399717561387485485,64,FLEN)
NAN_BOXED(6891053268122953481,64,FLEN)
NAN_BOXED(6866151282193497215,64,FLEN)
NAN_BOXED(18373717222087695773,64,FLEN)
NAN_BOXED(6891102021889306516,64,FLEN)
NAN_BOXED(6894316399550139518,64,FLEN)
NAN_BOXED(18401909499881978308,64,FLEN)
NAN_BOXED(6891129942092795084,64,FLEN)
NAN_BOXED(6890584892961949704,64,FLEN)
NAN_BOXED(18397915160481548447,64,FLEN)
NAN_BOXED(6891172814001066632,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(18399715926816166869,64,FLEN)
NAN_BOXED(6891191553213763954,64,FLEN)
NAN_BOXED(6888547632822318347,64,FLEN)
NAN_BOXED(18396315222700074008,64,FLEN)
NAN_BOXED(6891258468520497020,64,FLEN)
NAN_BOXED(6894183383952240498,64,FLEN)
NAN_BOXED(18401976282529419639,64,FLEN)
NAN_BOXED(6891272039330188630,64,FLEN)
NAN_BOXED(6892122443828066229,64,FLEN)
NAN_BOXED(18399858294089051301,64,FLEN)
NAN_BOXED(6891374704824751583,64,FLEN)
NAN_BOXED(6888433993252425689,64,FLEN)
NAN_BOXED(18396466301669312092,64,FLEN)
NAN_BOXED(6891395668199071338,64,FLEN)
NAN_BOXED(6893441044204217280,64,FLEN)
NAN_BOXED(18401604922891600590,64,FLEN)
NAN_BOXED(6891436843388132629,64,FLEN)
NAN_BOXED(6891296614232002463,64,FLEN)
NAN_BOXED(18399085940641419071,64,FLEN)
NAN_BOXED(6891496155637197367,64,FLEN)
NAN_BOXED(6884878762495164431,64,FLEN)
NAN_BOXED(18393003570690129798,64,FLEN)
NAN_BOXED(6891506210941422373,64,FLEN)
NAN_BOXED(6894227502727783068,64,FLEN)
NAN_BOXED(18402228212199334686,64,FLEN)
NAN_BOXED(6891523200378526165,64,FLEN)
NAN_BOXED(6891918492208614443,64,FLEN)
NAN_BOXED(18399949570614188779,64,FLEN)
NAN_BOXED(6891576904346311006,64,FLEN)
NAN_BOXED(6863444499226291455,64,FLEN)
NAN_BOXED(18371226780388861573,64,FLEN)
NAN_BOXED(6891699196189758552,64,FLEN)
NAN_BOXED(6887586672216910529,64,FLEN)
NAN_BOXED(18395894346460427647,64,FLEN)
NAN_BOXED(6891706186856009397,64,FLEN)
NAN_BOXED(6878507466184482959,64,FLEN)
NAN_BOXED(18386805421458936429,64,FLEN)
NAN_BOXED(6891712123431961555,64,FLEN)
NAN_BOXED(6891597993150481729,64,FLEN)
NAN_BOXED(18399791455628379624,64,FLEN)
NAN_BOXED(6891731649727223021,64,FLEN)
NAN_BOXED(6883627570764251619,64,FLEN)
NAN_BOXED(18392127116423033818,64,FLEN)
NAN_BOXED(6891741110266958554,64,FLEN)
NAN_BOXED(6878585911298234463,64,FLEN)
NAN_BOXED(18386951994470961658,64,FLEN)
NAN_BOXED(6891769709587194916,64,FLEN)
NAN_BOXED(6888209680069862959,64,FLEN)
NAN_BOXED(18396787268592598196,64,FLEN)
NAN_BOXED(6891906805148572274,64,FLEN)
NAN_BOXED(6892420177566341718,64,FLEN)
NAN_BOXED(18401110936865053060,64,FLEN)
NAN_BOXED(6891950791931762149,64,FLEN)
NAN_BOXED(6894977323117643754,64,FLEN)
NAN_BOXED(18403129185004776708,64,FLEN)
NAN_BOXED(6891968360567145900,64,FLEN)
NAN_BOXED(6874731094979799855,64,FLEN)
NAN_BOXED(18383615083036097945,64,FLEN)
NAN_BOXED(6892007229005163325,64,FLEN)
NAN_BOXED(6891154118195340792,64,FLEN)
NAN_BOXED(18399566326889642555,64,FLEN)
NAN_BOXED(6892022019265676718,64,FLEN)
NAN_BOXED(6850741757457091583,64,FLEN)
NAN_BOXED(18359211249043845269,64,FLEN)
NAN_BOXED(6892062437832412143,64,FLEN)
NAN_BOXED(6894709728808649666,64,FLEN)
NAN_BOXED(18403060418321720230,64,FLEN)
NAN_BOXED(6892070573540341521,64,FLEN)
NAN_BOXED(6882450445914534159,64,FLEN)
NAN_BOXED(18391040445471304960,64,FLEN)
NAN_BOXED(6892094514457084272,64,FLEN)
NAN_BOXED(6893618738019817288,64,FLEN)
NAN_BOXED(18402353692030047764,64,FLEN)
NAN_BOXED(6892112321347166135,64,FLEN)
NAN_BOXED(6892850110860360424,64,FLEN)
NAN_BOXED(18401847479809536947,64,FLEN)
NAN_BOXED(6892128090583033223,64,FLEN)
NAN_BOXED(6893909057968913653,64,FLEN)
NAN_BOXED(18402579475205611844,64,FLEN)
NAN_BOXED(6892151510522314337,64,FLEN)
NAN_BOXED(6891606645440217064,64,FLEN)
NAN_BOXED(18400349052812571115,64,FLEN)
NAN_BOXED(6892186534886967080,64,FLEN)
NAN_BOXED(6872171433872680575,64,FLEN)
NAN_BOXED(18380648433966445762,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(18383738135736128257,64,FLEN)
NAN_BOXED(6892356458363038184,64,FLEN)
NAN_BOXED(6886465613526245447,64,FLEN)
NAN_BOXED(18395201282826139227,64,FLEN)
NAN_BOXED(6892472185128178558,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(18402424798412911093,64,FLEN)
NAN_BOXED(6892475497714808027,64,FLEN)
NAN_BOXED(6887593708464389869,64,FLEN)
NAN_BOXED(18396953599178422336,64,FLEN)
NAN_BOXED(6892486353764499678,64,FLEN)
NAN_BOXED(6888684796846709079,64,FLEN)
NAN_BOXED(18397871644162723507,64,FLEN)
NAN_BOXED(6892577570228503329,64,FLEN)
NAN_BOXED(6894099845807006363,64,FLEN)
NAN_BOXED(18403113206996760706,64,FLEN)
NAN_BOXED(6892617630588434063,64,FLEN)
NAN_BOXED(6872334748489529567,64,FLEN)
NAN_BOXED(18381184056163228029,64,FLEN)
NAN_BOXED(6892677073403683137,64,FLEN)
NAN_BOXED(6882122933392968867,64,FLEN)
NAN_BOXED(18391289616668556278,64,FLEN)
NAN_BOXED(6892818823314082955,64,FLEN)
NAN_BOXED(6889705252977260769,64,FLEN)
NAN_BOXED(18398908931191114277,64,FLEN)
NAN_BOXED(6892829903619001265,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(18403965925756395945,64,FLEN)
NAN_BOXED(6892867271163578444,64,FLEN)
NAN_BOXED(6886545854401771623,64,FLEN)
NAN_BOXED(18395886758869861913,64,FLEN)
NAN_BOXED(6892918123376137024,64,FLEN)
NAN_BOXED(6889277343616326813,64,FLEN)
NAN_BOXED(18398670906976985220,64,FLEN)
NAN_BOXED(6892927072179211059,64,FLEN)
NAN_BOXED(6891668641414406915,64,FLEN)
NAN_BOXED(18401409214051500015,64,FLEN)
NAN_BOXED(6893003326182036540,64,FLEN)
NAN_BOXED(6889268418005506677,64,FLEN)
NAN_BOXED(18398737537796988146,64,FLEN)
NAN_BOXED(6893024002714007683,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(18402108085353138456,64,FLEN)
NAN_BOXED(6893063660316509428,64,FLEN)
NAN_BOXED(6886964226942701035,64,FLEN)
NAN_BOXED(18396762623766863686,64,FLEN)
NAN_BOXED(6893066974778074534,64,FLEN)
NAN_BOXED(6893590894365383145,64,FLEN)
NAN_BOXED(18403153999838868433,64,FLEN)
NAN_BOXED(6893128887054864705,64,FLEN)
NAN_BOXED(6888500065457669173,64,FLEN)
NAN_BOXED(18398238029011348854,64,FLEN)
NAN_BOXED(6893140608298684126,64,FLEN)
NAN_BOXED(6893762270531593469,64,FLEN)
NAN_BOXED(18403351812261211746,64,FLEN)
NAN_BOXED(6893149467356033473,64,FLEN)
NAN_BOXED(6878428630710541943,64,FLEN)
NAN_BOXED(18388402538774644386,64,FLEN)
NAN_BOXED(6893170472789177822,64,FLEN)
NAN_BOXED(6889537613635327969,64,FLEN)
NAN_BOXED(18399095879488524282,64,FLEN)
NAN_BOXED(6893254876293005838,64,FLEN)
NAN_BOXED(6890946074210073204,64,FLEN)
NAN_BOXED(18400658166013421325,64,FLEN)
NAN_BOXED(6893299999720399681,64,FLEN)
NAN_BOXED(6876961864484102079,64,FLEN)
NAN_BOXED(18386458086591362911,64,FLEN)
NAN_BOXED(6893301618333735171,64,FLEN)
NAN_BOXED(6894129818725940491,64,FLEN)
NAN_BOXED(18403788293731607323,64,FLEN)
NAN_BOXED(6893301921096693818,64,FLEN)
NAN_BOXED(6890678632498402593,64,FLEN)
NAN_BOXED(18400276403167374490,64,FLEN)
NAN_BOXED(6893321413422815687,64,FLEN)
NAN_BOXED(6883770091457407231,64,FLEN)
NAN_BOXED(18393700138977375556,64,FLEN)
NAN_BOXED(6893339895573537338,64,FLEN)
NAN_BOXED(6890870272351540260,64,FLEN)
NAN_BOXED(18400627989849599837,64,FLEN)
NAN_BOXED(6893352922084519776,64,FLEN)
NAN_BOXED(6879742567216270983,64,FLEN)
NAN_BOXED(18389608670169267618,64,FLEN)
NAN_BOXED(6893380786778969323,64,FLEN)
NAN_BOXED(6877574360787796447,64,FLEN)
NAN_BOXED(18387513364969992802,64,FLEN)
NAN_BOXED(6893554804662728098,64,FLEN)
NAN_BOXED(6894276781193785702,64,FLEN)
NAN_BOXED(18404139912357622560,64,FLEN)
NAN_BOXED(6893605498265492207,64,FLEN)
NAN_BOXED(6887455689298750873,64,FLEN)
NAN_BOXED(18397727015436697577,64,FLEN)
NAN_BOXED(6893609706121231805,64,FLEN)
NAN_BOXED(6892830876582779929,64,FLEN)
NAN_BOXED(18402969384913681496,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(6894065624569858079,64,FLEN)
NAN_BOXED(18404052858937849382,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(18403323980524949841,64,FLEN)
NAN_BOXED(6893742596151134959,64,FLEN)
NAN_BOXED(6883733717085571047,64,FLEN)
NAN_BOXED(18393985618596138587,64,FLEN)
NAN_BOXED(6893818501322318175,64,FLEN)
NAN_BOXED(6885784446468831379,64,FLEN)
NAN_BOXED(18395821611649568842,64,FLEN)
NAN_BOXED(6893844338082610930,64,FLEN)
NAN_BOXED(6883880548451490835,64,FLEN)
NAN_BOXED(18394189530664040908,64,FLEN)
NAN_BOXED(6893856881540736397,64,FLEN)
NAN_BOXED(6886515615982376647,64,FLEN)
NAN_BOXED(18396942744789259010,64,FLEN)
NAN_BOXED(6893873004321025164,64,FLEN)
NAN_BOXED(6886543951336186177,64,FLEN)
NAN_BOXED(18397010210330797418,64,FLEN)
NAN_BOXED(6893888943170908703,64,FLEN)
NAN_BOXED(6891121283304490699,64,FLEN)
NAN_BOXED(18401660754401790199,64,FLEN)
NAN_BOXED(6893941664323050187,64,FLEN)
NAN_BOXED(6891499300343096084,64,FLEN)
NAN_BOXED(18402047507092669946,64,FLEN)
NAN_BOXED(6893965069880121361,64,FLEN)
NAN_BOXED(6890409839942142073,64,FLEN)
NAN_BOXED(18400575860493137703,64,FLEN)
NAN_BOXED(6894059867265263207,64,FLEN)
NAN_BOXED(6894287650923646386,64,FLEN)
NAN_BOXED(18404613525182212383,64,FLEN)
NAN_BOXED(6894089370670101501,64,FLEN)
NAN_BOXED(6894521743952592348,64,FLEN)
NAN_BOXED(18404850798667814351,64,FLEN)
NAN_BOXED(6894137427621474158,64,FLEN)
NAN_BOXED(6889635745427160683,64,FLEN)
NAN_BOXED(18400047335161417045,64,FLEN)
NAN_BOXED(6894162377705831077,64,FLEN)
NAN_BOXED(6884422340153865947,64,FLEN)
NAN_BOXED(18394923342767289576,64,FLEN)
NAN_BOXED(6894200525818887941,64,FLEN)
NAN_BOXED(6890815457791090528,64,FLEN)
NAN_BOXED(18401458194420355505,64,FLEN)
NAN_BOXED(6894262417828327122,64,FLEN)
NAN_BOXED(6893862924345181993,64,FLEN)
NAN_BOXED(18404410382223820027,64,FLEN)
NAN_BOXED(6894263852356933296,64,FLEN)
NAN_BOXED(6887309159237882779,64,FLEN)
NAN_BOXED(18398027936840492135,64,FLEN)
NAN_BOXED(6894318217713501176,64,FLEN)
NAN_BOXED(6890873121490593535,64,FLEN)
NAN_BOXED(18401690392659174382,64,FLEN)
NAN_BOXED(6894320907048161702,64,FLEN)
NAN_BOXED(6893592037343505564,64,FLEN)
NAN_BOXED(18404211284184160517,64,FLEN)
NAN_BOXED(6894454945452033679,64,FLEN)
NAN_BOXED(6881369670997208335,64,FLEN)
NAN_BOXED(18392022294959111878,64,FLEN)
NAN_BOXED(6894497141957120544,64,FLEN)
NAN_BOXED(6886955078367709713,64,FLEN)
NAN_BOXED(18397844510614528298,64,FLEN)
NAN_BOXED(6894529167350018816,64,FLEN)
NAN_BOXED(6894456535507080773,64,FLEN)
NAN_BOXED(18405204984924433509,64,FLEN)
NAN_BOXED(6894558551707843912,64,FLEN)
NAN_BOXED(6891225258718253276,64,FLEN)
NAN_BOXED(18402163607156203232,64,FLEN)
NAN_BOXED(6894660030480645390,64,FLEN)
NAN_BOXED(6883660947525559395,64,FLEN)
NAN_BOXED(18394601895201263431,64,FLEN)
NAN_BOXED(6894670940056865150,64,FLEN)
NAN_BOXED(6892511916967765473,64,FLEN)
NAN_BOXED(18403466835354696540,64,FLEN)
NAN_BOXED(6894673858179954625,64,FLEN)
NAN_BOXED(6894101374779647436,64,FLEN)
NAN_BOXED(18404998902607918651,64,FLEN)
NAN_BOXED(6894709461812059504,64,FLEN)
NAN_BOXED(6888025763995327327,64,FLEN)
NAN_BOXED(18399007931871132738,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(18384332541386352320,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(6882343377145544783,64,FLEN)
NAN_BOXED(18393453072331493521,64,FLEN)
NAN_BOXED(6894892327950554416,64,FLEN)
NAN_BOXED(6888738718985268319,64,FLEN)
NAN_BOXED(18399843973982077367,64,FLEN)
NAN_BOXED(6840840769119412223,64,FLEN)
NAN_BOXED(6883552752355954039,64,FLEN)
NAN_BOXED(18340617716966649410,64,FLEN)
NAN_BOXED(6855411207357415423,64,FLEN)
NAN_BOXED(6893414335997278956,64,FLEN)
NAN_BOXED(18365617103576764546,64,FLEN)
NAN_BOXED(6870052462467318143,64,FLEN)
NAN_BOXED(6889167497874308381,64,FLEN)
NAN_BOXED(18375772643127288585,64,FLEN)
NAN_BOXED(6871180659280168319,64,FLEN)
NAN_BOXED(6891723400964803467,64,FLEN)
NAN_BOXED(18379572694229791004,64,FLEN)
NAN_BOXED(6872668197955996959,64,FLEN)
NAN_BOXED(6891564878885544708,64,FLEN)
NAN_BOXED(18380463824159737571,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(6882342111287304743,64,FLEN)
NAN_BOXED(18371746317052706264,64,FLEN)
NAN_BOXED(6873664501517700879,64,FLEN)
NAN_BOXED(6879765173194775263,64,FLEN)
NAN_BOXED(18370261161103274045,64,FLEN)
NAN_BOXED(6873849627073496623,64,FLEN)
NAN_BOXED(6892137703849715396,64,FLEN)
NAN_BOXED(18382668027860279323,64,FLEN)
NAN_BOXED(6873927402557373743,64,FLEN)
NAN_BOXED(6882900329334309391,64,FLEN)
NAN_BOXED(18373463273523598355,64,FLEN)
NAN_BOXED(6874042922764518079,64,FLEN)
NAN_BOXED(6892751436872435090,64,FLEN)
NAN_BOXED(18383724960228539907,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(6894542307026047572,64,FLEN)
NAN_BOXED(18384941792327864550,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 166*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
