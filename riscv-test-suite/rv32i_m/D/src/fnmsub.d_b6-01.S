
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmsub.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmsub.d_b6 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmsub.d_b6)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f3, rs2==f16, rs3==f3, rd==f11,fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f3; op2:f16; op3:f3; dest:f11; op1val:0x39226e649f5a74b6; op2val:0xc081c94a0c1e1fa9;
op3val:0x39226e649f5a74b6; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f11, f3, f16, f3, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rs3 != rd, rs1==f6, rs2==f6, rs3==f6, rd==f8,fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f6; op2:f6; op3:f6; dest:f8; op1val:0x39226e649f5a74b6; op2val:0x39226e649f5a74b6;
op3val:0x39226e649f5a74b6; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f8, f6, f6, f6, dyn, 32, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f0, rs2==f0, rs3==f16, rd==f0,fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f0; op2:f0; op3:f16; dest:f0; op1val:0x39226e649f5a74b6; op2val:0x39226e649f5a74b6;
op3val:0x39b1ac979514b6d7; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f0, f0, f0, f16, dyn, 64, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f23, rs2==f22, rs3==f18, rd==f23,fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f23; op2:f22; op3:f18; dest:f23; op1val:0x39226e649f5a74b6; op2val:0xc081c94a0c1e1fa9;
op3val:0x39b1ac979514b6d7; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f23, f23, f22, f18, dyn, 96, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f10, rs2==f20, rs3==f20, rd==f12,fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f10; op2:f20; op3:f20; dest:f12; op1val:0x39226e649f5a74b6; op2val:0xc081c94a0c1e1fa9;
op3val:0xc081c94a0c1e1fa9; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f12, f10, f20, f20, dyn, 128, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f17, rs2==f2, rs3==f2, rd==f2,fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f17; op2:f2; op3:f2; dest:f2; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0xc6d1ff8cc931a9a9; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f2, f17, f2, f2, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rd == rs3 != rs2, rs1==f25, rs2==f15, rs3==f25, rd==f25,fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f25; op2:f15; op3:f25; dest:f25; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0x393190efde47be0e; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f25, f25, f15, f25, dyn, 32, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f22, rs2==f21, rs3==f9, rd==f21,fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f22; op2:f21; op3:f9; dest:f21; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0x39ab80125e1b1046; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f21, f22, f21, f9, dyn, 64, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f8, rs2==f12, rs3==f13, rd==f13,fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f8; op2:f12; op3:f13; dest:f13; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0x39ab80125e1b1046; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f13, f8, f12, f13, dyn, 96, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f11, rs2==f28, rs3==f27, rd==f18,fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f11; op2:f28; op3:f27; dest:f18; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0x39ab80125e1b1046; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f18, f11, f28, f27, dyn, 128, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs2 == rs3 == rd, rs1==f7, rs2==f7, rs3==f7, rd==f7,fs1 == 0 and fe1 == 0x395 and fm1 == 0x105efde4ed531 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x09f209cec78cd and fs3 == 0 and fe3 == 0x399 and fm3 == 0x1954d45efc2a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f7; op2:f7; op3:f7; dest:f7; op1val:0x395105efde4ed531; op2val:0x395105efde4ed531;
op3val:0x395105efde4ed531; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f7, f7, f7, f7, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f29, rs2==f29, rs3==f1, rd==f27,fs1 == 0 and fe1 == 0x395 and fm1 == 0x105efde4ed531 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x09f209cec78cd and fs3 == 0 and fe3 == 0x399 and fm3 == 0x1954d45efc2a6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f29; op2:f29; op3:f1; dest:f27; op1val:0x395105efde4ed531; op2val:0x395105efde4ed531;
op3val:0x3991954d45efc2a6; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f27, f29, f29, f1, dyn, 32, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f24, rs2==f26, rs3==f31, rd==f9,fs1 == 0 and fe1 == 0x395 and fm1 == 0x105efde4ed531 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x09f209cec78cd and fs3 == 0 and fe3 == 0x399 and fm3 == 0x1954d45efc2a6 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f24; op2:f26; op3:f31; dest:f9; op1val:0x395105efde4ed531; op2val:0xc0309f209cec78cd;
op3val:0x3991954d45efc2a6; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f9, f24, f26, f31, dyn, 64, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f12, rs2==f11, rs3==f4, rd==f17,fs1 == 0 and fe1 == 0x395 and fm1 == 0x105efde4ed531 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x09f209cec78cd and fs3 == 0 and fe3 == 0x399 and fm3 == 0x1954d45efc2a6 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f12; op2:f11; op3:f4; dest:f17; op1val:0x395105efde4ed531; op2val:0xc0309f209cec78cd;
op3val:0x3991954d45efc2a6; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f17, f12, f11, f4, dyn, 96, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f16, rs2==f17, rs3==f22, rd==f15,fs1 == 0 and fe1 == 0x395 and fm1 == 0x105efde4ed531 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x09f209cec78cd and fs3 == 0 and fe3 == 0x399 and fm3 == 0x1954d45efc2a6 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f16; op2:f17; op3:f22; dest:f15; op1val:0x395105efde4ed531; op2val:0xc0309f209cec78cd;
op3val:0x3991954d45efc2a6; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f15, f16, f17, f22, dyn, 128, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f28, rs2==f24, rs3==f8, rd==f16,fs1 == 0 and fe1 == 0x396 and fm1 == 0x2d351f7784365 and fs2 == 1 and fe2 == 0x413 and fm2 == 0xb328b8cd61a2b and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2e34d55d8fb3c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f28; op2:f24; op3:f8; dest:f16; op1val:0x3962d351f7784365; op2val:0xc13b328b8cd61a2b;
op3val:0x39a2e34d55d8fb3c; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f16, f28, f24, f8, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f19, rs2==f25, rs3==f29, rd==f31,fs1 == 0 and fe1 == 0x396 and fm1 == 0x2d351f7784365 and fs2 == 1 and fe2 == 0x413 and fm2 == 0xb328b8cd61a2b and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2e34d55d8fb3c and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f19; op2:f25; op3:f29; dest:f31; op1val:0x3962d351f7784365; op2val:0xc13b328b8cd61a2b;
op3val:0x39a2e34d55d8fb3c; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f19, f25, f29, dyn, 32, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f4, rs2==f13, rs3==f11, rd==f28,fs1 == 0 and fe1 == 0x396 and fm1 == 0x2d351f7784365 and fs2 == 1 and fe2 == 0x413 and fm2 == 0xb328b8cd61a2b and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2e34d55d8fb3c and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f4; op2:f13; op3:f11; dest:f28; op1val:0x3962d351f7784365; op2val:0xc13b328b8cd61a2b;
op3val:0x39a2e34d55d8fb3c; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f28, f4, f13, f11, dyn, 64, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f21, rs2==f4, rs3==f23, rd==f3,fs1 == 0 and fe1 == 0x396 and fm1 == 0x2d351f7784365 and fs2 == 1 and fe2 == 0x413 and fm2 == 0xb328b8cd61a2b and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2e34d55d8fb3c and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f21; op2:f4; op3:f23; dest:f3; op1val:0x3962d351f7784365; op2val:0xc13b328b8cd61a2b;
op3val:0x39a2e34d55d8fb3c; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f3, f21, f4, f23, dyn, 96, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f18, rs2==f14, rs3==f21, rd==f10,fs1 == 0 and fe1 == 0x396 and fm1 == 0x2d351f7784365 and fs2 == 1 and fe2 == 0x413 and fm2 == 0xb328b8cd61a2b and fs3 == 0 and fe3 == 0x39a and fm3 == 0x2e34d55d8fb3c and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f18; op2:f14; op3:f21; dest:f10; op1val:0x3962d351f7784365; op2val:0xc13b328b8cd61a2b;
op3val:0x39a2e34d55d8fb3c; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f10, f18, f14, f21, dyn, 128, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f30, rs2==f18, rs3==f26, rd==f5,fs1 == 0 and fe1 == 0x398 and fm1 == 0x7a4387525b0f4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd2951553b9cee and fs3 == 0 and fe3 == 0x397 and fm3 == 0x523987d918460 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f18; op3:f26; dest:f5; op1val:0x3987a4387525b0f4; op2val:0xbfdd2951553b9cee;
op3val:0x397523987d918460; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f5, f30, f18, f26, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f20, rs2==f27, rs3==f19, rd==f6,fs1 == 0 and fe1 == 0x398 and fm1 == 0x7a4387525b0f4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd2951553b9cee and fs3 == 0 and fe3 == 0x397 and fm3 == 0x523987d918460 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f20; op2:f27; op3:f19; dest:f6; op1val:0x3987a4387525b0f4; op2val:0xbfdd2951553b9cee;
op3val:0x397523987d918460; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f6, f20, f27, f19, dyn, 32, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f1, rs2==f3, rs3==f28, rd==f26,fs1 == 0 and fe1 == 0x398 and fm1 == 0x7a4387525b0f4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd2951553b9cee and fs3 == 0 and fe3 == 0x397 and fm3 == 0x523987d918460 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f1; op2:f3; op3:f28; dest:f26; op1val:0x3987a4387525b0f4; op2val:0xbfdd2951553b9cee;
op3val:0x397523987d918460; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f26, f1, f3, f28, dyn, 64, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f14, rs2==f19, rs3==f10, rd==f1,fs1 == 0 and fe1 == 0x398 and fm1 == 0x7a4387525b0f4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd2951553b9cee and fs3 == 0 and fe3 == 0x397 and fm3 == 0x523987d918460 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f14; op2:f19; op3:f10; dest:f1; op1val:0x3987a4387525b0f4; op2val:0xbfdd2951553b9cee;
op3val:0x397523987d918460; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f1, f14, f19, f10, dyn, 96, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f9, rs2==f1, rs3==f17, rd==f29,fs1 == 0 and fe1 == 0x398 and fm1 == 0x7a4387525b0f4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd2951553b9cee and fs3 == 0 and fe3 == 0x397 and fm3 == 0x523987d918460 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f9; op2:f1; op3:f17; dest:f29; op1val:0x3987a4387525b0f4; op2val:0xbfdd2951553b9cee;
op3val:0x397523987d918460; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f29, f9, f1, f17, dyn, 128, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f13, rs2==f30, rs3==f5, rd==f14,fs1 == 0 and fe1 == 0x399 and fm1 == 0x09d1aa79c23a7 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xb2b2b55701cc8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x315d3a4ddb3be and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f13; op2:f30; op3:f5; dest:f14; op1val:0x39909d1aa79c23a7; op2val:0xc08b2b2b55701cc8;
op3val:0x39b315d3a4ddb3be; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f14, f13, f30, f5, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f2, rs2==f5, rs3==f0, rd==f22,fs1 == 0 and fe1 == 0x399 and fm1 == 0x09d1aa79c23a7 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xb2b2b55701cc8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x315d3a4ddb3be and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f2; op2:f5; op3:f0; dest:f22; op1val:0x39909d1aa79c23a7; op2val:0xc08b2b2b55701cc8;
op3val:0x39b315d3a4ddb3be; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f22, f2, f5, f0, dyn, 32, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f27, rs2==f23, rs3==f15, rd==f19,fs1 == 0 and fe1 == 0x399 and fm1 == 0x09d1aa79c23a7 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xb2b2b55701cc8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x315d3a4ddb3be and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f27; op2:f23; op3:f15; dest:f19; op1val:0x39909d1aa79c23a7; op2val:0xc08b2b2b55701cc8;
op3val:0x39b315d3a4ddb3be; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f19, f27, f23, f15, dyn, 64, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f15, rs2==f8, rs3==f12, rd==f30,fs1 == 0 and fe1 == 0x399 and fm1 == 0x09d1aa79c23a7 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xb2b2b55701cc8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x315d3a4ddb3be and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f15; op2:f8; op3:f12; dest:f30; op1val:0x39909d1aa79c23a7; op2val:0xc08b2b2b55701cc8;
op3val:0x39b315d3a4ddb3be; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f30, f15, f8, f12, dyn, 96, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f26, rs2==f9, rs3==f30, rd==f4,fs1 == 0 and fe1 == 0x399 and fm1 == 0x09d1aa79c23a7 and fs2 == 1 and fe2 == 0x408 and fm2 == 0xb2b2b55701cc8 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x315d3a4ddb3be and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f26; op2:f9; op3:f30; dest:f4; op1val:0x39909d1aa79c23a7; op2val:0xc08b2b2b55701cc8;
op3val:0x39b315d3a4ddb3be; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f4, f26, f9, f30, dyn, 128, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f31, rs2==f10, rs3==f24, rd==f20,fs1 == 0 and fe1 == 0x399 and fm1 == 0x0fe3d26689661 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x14930996ec6a3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x17b5e6929a8da and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f31; op2:f10; op3:f24; dest:f20; op1val:0x3990fe3d26689661; op2val:0xbff14930996ec6a3;
op3val:0x39917b5e6929a8da; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f20, f31, f10, f24, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f5, rs2==f31, rs3==f14, rd==f24,fs1 == 0 and fe1 == 0x399 and fm1 == 0x0fe3d26689661 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x14930996ec6a3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x17b5e6929a8da and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f5; op2:f31; op3:f14; dest:f24; op1val:0x3990fe3d26689661; op2val:0xbff14930996ec6a3;
op3val:0x39917b5e6929a8da; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f24, f5, f31, f14, dyn, 32, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x0fe3d26689661 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x14930996ec6a3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x17b5e6929a8da and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3990fe3d26689661; op2val:0xbff14930996ec6a3;
op3val:0x39917b5e6929a8da; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x0fe3d26689661 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x14930996ec6a3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x17b5e6929a8da and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3990fe3d26689661; op2val:0xbff14930996ec6a3;
op3val:0x39917b5e6929a8da; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x0fe3d26689661 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x14930996ec6a3 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x17b5e6929a8da and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3990fe3d26689661; op2val:0xbff14930996ec6a3;
op3val:0x39917b5e6929a8da; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x6ac9f241360fd and fs2 == 1 and fe2 == 0x41e and fm2 == 0x694a403ead2c3 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x295efec093b53 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3996ac9f241360fd; op2val:0xc1e694a403ead2c3;
op3val:0x39b295efec093b53; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x6ac9f241360fd and fs2 == 1 and fe2 == 0x41e and fm2 == 0x694a403ead2c3 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x295efec093b53 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3996ac9f241360fd; op2val:0xc1e694a403ead2c3;
op3val:0x39b295efec093b53; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x6ac9f241360fd and fs2 == 1 and fe2 == 0x41e and fm2 == 0x694a403ead2c3 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x295efec093b53 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3996ac9f241360fd; op2val:0xc1e694a403ead2c3;
op3val:0x39b295efec093b53; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x6ac9f241360fd and fs2 == 1 and fe2 == 0x41e and fm2 == 0x694a403ead2c3 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x295efec093b53 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3996ac9f241360fd; op2val:0xc1e694a403ead2c3;
op3val:0x39b295efec093b53; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x6ac9f241360fd and fs2 == 1 and fe2 == 0x41e and fm2 == 0x694a403ead2c3 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x295efec093b53 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x3996ac9f241360fd; op2val:0xc1e694a403ead2c3;
op3val:0x39b295efec093b53; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x778a21cf93979 and fs2 == 1 and fe2 == 0x41e and fm2 == 0x5d05ec080509a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3804775d28375 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399778a21cf93979; op2val:0xc1e5d05ec080509a;
op3val:0x39b3804775d28375; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x778a21cf93979 and fs2 == 1 and fe2 == 0x41e and fm2 == 0x5d05ec080509a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3804775d28375 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399778a21cf93979; op2val:0xc1e5d05ec080509a;
op3val:0x39b3804775d28375; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x778a21cf93979 and fs2 == 1 and fe2 == 0x41e and fm2 == 0x5d05ec080509a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3804775d28375 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399778a21cf93979; op2val:0xc1e5d05ec080509a;
op3val:0x39b3804775d28375; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x778a21cf93979 and fs2 == 1 and fe2 == 0x41e and fm2 == 0x5d05ec080509a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3804775d28375 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399778a21cf93979; op2val:0xc1e5d05ec080509a;
op3val:0x39b3804775d28375; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x778a21cf93979 and fs2 == 1 and fe2 == 0x41e and fm2 == 0x5d05ec080509a and fs3 == 0 and fe3 == 0x39b and fm3 == 0x3804775d28375 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399778a21cf93979; op2val:0xc1e5d05ec080509a;
op3val:0x39b3804775d28375; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x872fbd0697864 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x9dcd6cdb373ca and fs3 == 0 and fe3 == 0x39a and fm3 == 0x8770d62dcf522 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399872fbd0697864; op2val:0xc669dcd6cdb373ca;
op3val:0x39a8770d62dcf522; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x872fbd0697864 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x9dcd6cdb373ca and fs3 == 0 and fe3 == 0x39a and fm3 == 0x8770d62dcf522 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399872fbd0697864; op2val:0xc669dcd6cdb373ca;
op3val:0x39a8770d62dcf522; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x872fbd0697864 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x9dcd6cdb373ca and fs3 == 0 and fe3 == 0x39a and fm3 == 0x8770d62dcf522 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399872fbd0697864; op2val:0xc669dcd6cdb373ca;
op3val:0x39a8770d62dcf522; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x872fbd0697864 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x9dcd6cdb373ca and fs3 == 0 and fe3 == 0x39a and fm3 == 0x8770d62dcf522 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399872fbd0697864; op2val:0xc669dcd6cdb373ca;
op3val:0x39a8770d62dcf522; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x872fbd0697864 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x9dcd6cdb373ca and fs3 == 0 and fe3 == 0x39a and fm3 == 0x8770d62dcf522 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399872fbd0697864; op2val:0xc669dcd6cdb373ca;
op3val:0x39a8770d62dcf522; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x99ec4260f18a4 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x8ae3826fd6bf0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38541e6f2f8cc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39999ec4260f18a4; op2val:0xc668ae3826fd6bf0;
op3val:0x39a38541e6f2f8cc; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x99ec4260f18a4 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x8ae3826fd6bf0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38541e6f2f8cc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39999ec4260f18a4; op2val:0xc668ae3826fd6bf0;
op3val:0x39a38541e6f2f8cc; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x99ec4260f18a4 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x8ae3826fd6bf0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38541e6f2f8cc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39999ec4260f18a4; op2val:0xc668ae3826fd6bf0;
op3val:0x39a38541e6f2f8cc; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x99ec4260f18a4 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x8ae3826fd6bf0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38541e6f2f8cc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39999ec4260f18a4; op2val:0xc668ae3826fd6bf0;
op3val:0x39a38541e6f2f8cc; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0x99ec4260f18a4 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x8ae3826fd6bf0 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38541e6f2f8cc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39999ec4260f18a4; op2val:0xc668ae3826fd6bf0;
op3val:0x39a38541e6f2f8cc; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xb69d7df6648b9 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x710e89f183b2f and fs3 == 0 and fe3 == 0x399 and fm3 == 0x925930a7283d5 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399b69d7df6648b9; op2val:0xc66710e89f183b2f;
op3val:0x399925930a7283d5; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xb69d7df6648b9 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x710e89f183b2f and fs3 == 0 and fe3 == 0x399 and fm3 == 0x925930a7283d5 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399b69d7df6648b9; op2val:0xc66710e89f183b2f;
op3val:0x399925930a7283d5; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xb69d7df6648b9 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x710e89f183b2f and fs3 == 0 and fe3 == 0x399 and fm3 == 0x925930a7283d5 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399b69d7df6648b9; op2val:0xc66710e89f183b2f;
op3val:0x399925930a7283d5; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xb69d7df6648b9 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x710e89f183b2f and fs3 == 0 and fe3 == 0x399 and fm3 == 0x925930a7283d5 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399b69d7df6648b9; op2val:0xc66710e89f183b2f;
op3val:0x399925930a7283d5; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xb69d7df6648b9 and fs2 == 1 and fe2 == 0x466 and fm2 == 0x710e89f183b2f and fs3 == 0 and fe3 == 0x399 and fm3 == 0x925930a7283d5 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399b69d7df6648b9; op2val:0xc66710e89f183b2f;
op3val:0x399925930a7283d5; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xd4d9f1794d731 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf524488086933 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xaed8b7f6659fc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399d4d9f1794d731; op2val:0xbfdf524488086933;
op3val:0x398aed8b7f6659fc; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xd4d9f1794d731 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf524488086933 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xaed8b7f6659fc and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399d4d9f1794d731; op2val:0xbfdf524488086933;
op3val:0x398aed8b7f6659fc; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xd4d9f1794d731 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf524488086933 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xaed8b7f6659fc and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399d4d9f1794d731; op2val:0xbfdf524488086933;
op3val:0x398aed8b7f6659fc; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xd4d9f1794d731 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf524488086933 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xaed8b7f6659fc and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399d4d9f1794d731; op2val:0xbfdf524488086933;
op3val:0x398aed8b7f6659fc; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x399 and fm1 == 0xd4d9f1794d731 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf524488086933 and fs3 == 0 and fe3 == 0x398 and fm3 == 0xaed8b7f6659fc and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x399d4d9f1794d731; op2val:0xbfdf524488086933;
op3val:0x398aed8b7f6659fc; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x307176ba846d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa49e942239fe4 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x4011e0c68bb1b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a307176ba846d7; op2val:0xbfea49e942239fe4;
op3val:0x3994011e0c68bb1b; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x307176ba846d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa49e942239fe4 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x4011e0c68bb1b and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a307176ba846d7; op2val:0xbfea49e942239fe4;
op3val:0x3994011e0c68bb1b; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x307176ba846d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa49e942239fe4 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x4011e0c68bb1b and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a307176ba846d7; op2val:0xbfea49e942239fe4;
op3val:0x3994011e0c68bb1b; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x307176ba846d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa49e942239fe4 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x4011e0c68bb1b and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a307176ba846d7; op2val:0xbfea49e942239fe4;
op3val:0x3994011e0c68bb1b; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x307176ba846d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xa49e942239fe4 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x4011e0c68bb1b and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a307176ba846d7; op2val:0xbfea49e942239fe4;
op3val:0x3994011e0c68bb1b; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x5df9ddc92c784 and fs2 == 1 and fe2 == 0x40f and fm2 == 0x7685a045f0410 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb7efe7e5707bd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a5df9ddc92c784; op2val:0xc0f7685a045f0410;
op3val:0x39ab7efe7e5707bd; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x5df9ddc92c784 and fs2 == 1 and fe2 == 0x40f and fm2 == 0x7685a045f0410 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb7efe7e5707bd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a5df9ddc92c784; op2val:0xc0f7685a045f0410;
op3val:0x39ab7efe7e5707bd; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x5df9ddc92c784 and fs2 == 1 and fe2 == 0x40f and fm2 == 0x7685a045f0410 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb7efe7e5707bd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a5df9ddc92c784; op2val:0xc0f7685a045f0410;
op3val:0x39ab7efe7e5707bd; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x5df9ddc92c784 and fs2 == 1 and fe2 == 0x40f and fm2 == 0x7685a045f0410 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb7efe7e5707bd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a5df9ddc92c784; op2val:0xc0f7685a045f0410;
op3val:0x39ab7efe7e5707bd; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x5df9ddc92c784 and fs2 == 1 and fe2 == 0x40f and fm2 == 0x7685a045f0410 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb7efe7e5707bd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a5df9ddc92c784; op2val:0xc0f7685a045f0410;
op3val:0x39ab7efe7e5707bd; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x60ebc50708520 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x134c2c0ceb740 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7482563cd9d1d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a60ebc50708520; op2val:0xbff134c2c0ceb740;
op3val:0x39a7482563cd9d1d; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x60ebc50708520 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x134c2c0ceb740 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7482563cd9d1d and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a60ebc50708520; op2val:0xbff134c2c0ceb740;
op3val:0x39a7482563cd9d1d; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x60ebc50708520 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x134c2c0ceb740 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7482563cd9d1d and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a60ebc50708520; op2val:0xbff134c2c0ceb740;
op3val:0x39a7482563cd9d1d; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x60ebc50708520 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x134c2c0ceb740 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7482563cd9d1d and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a60ebc50708520; op2val:0xbff134c2c0ceb740;
op3val:0x39a7482563cd9d1d; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x60ebc50708520 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x134c2c0ceb740 and fs3 == 0 and fe3 == 0x39a and fm3 == 0x7482563cd9d1d and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a60ebc50708520; op2val:0xbff134c2c0ceb740;
op3val:0x39a7482563cd9d1d; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x90bfe5a4042c4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x54331d75479b6 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x48ee155ea078a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a90bfe5a4042c4; op2val:0xc0154331d75479b6;
op3val:0x39848ee155ea078a; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x90bfe5a4042c4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x54331d75479b6 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x48ee155ea078a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a90bfe5a4042c4; op2val:0xc0154331d75479b6;
op3val:0x39848ee155ea078a; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x90bfe5a4042c4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x54331d75479b6 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x48ee155ea078a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a90bfe5a4042c4; op2val:0xc0154331d75479b6;
op3val:0x39848ee155ea078a; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x90bfe5a4042c4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x54331d75479b6 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x48ee155ea078a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a90bfe5a4042c4; op2val:0xc0154331d75479b6;
op3val:0x39848ee155ea078a; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0x90bfe5a4042c4 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x54331d75479b6 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x48ee155ea078a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39a90bfe5a4042c4; op2val:0xc0154331d75479b6;
op3val:0x39848ee155ea078a; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc040934d45782 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x7df9ce01785ce and fs3 == 0 and fe3 == 0x39b and fm3 == 0x39ab057fa02c0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac040934d45782; op2val:0xc017df9ce01785ce;
op3val:0x39b39ab057fa02c0; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc040934d45782 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x7df9ce01785ce and fs3 == 0 and fe3 == 0x39b and fm3 == 0x39ab057fa02c0 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac040934d45782; op2val:0xc017df9ce01785ce;
op3val:0x39b39ab057fa02c0; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc040934d45782 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x7df9ce01785ce and fs3 == 0 and fe3 == 0x39b and fm3 == 0x39ab057fa02c0 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac040934d45782; op2val:0xc017df9ce01785ce;
op3val:0x39b39ab057fa02c0; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc040934d45782 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x7df9ce01785ce and fs3 == 0 and fe3 == 0x39b and fm3 == 0x39ab057fa02c0 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac040934d45782; op2val:0xc017df9ce01785ce;
op3val:0x39b39ab057fa02c0; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc040934d45782 and fs2 == 1 and fe2 == 0x401 and fm2 == 0x7df9ce01785ce and fs3 == 0 and fe3 == 0x39b and fm3 == 0x39ab057fa02c0 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac040934d45782; op2val:0xc017df9ce01785ce;
op3val:0x39b39ab057fa02c0; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc95b3e1b9233b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x61ef112e7ddd2 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x27f73b38190cd and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac95b3e1b9233b; op2val:0xc6561ef112e7ddd2;
op3val:0x39727f73b38190cd; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc95b3e1b9233b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x61ef112e7ddd2 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x27f73b38190cd and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac95b3e1b9233b; op2val:0xc6561ef112e7ddd2;
op3val:0x39727f73b38190cd; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc95b3e1b9233b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x61ef112e7ddd2 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x27f73b38190cd and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac95b3e1b9233b; op2val:0xc6561ef112e7ddd2;
op3val:0x39727f73b38190cd; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc95b3e1b9233b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x61ef112e7ddd2 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x27f73b38190cd and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac95b3e1b9233b; op2val:0xc6561ef112e7ddd2;
op3val:0x39727f73b38190cd; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xc95b3e1b9233b and fs2 == 1 and fe2 == 0x465 and fm2 == 0x61ef112e7ddd2 and fs3 == 0 and fe3 == 0x397 and fm3 == 0x27f73b38190cd and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ac95b3e1b9233b; op2val:0xc6561ef112e7ddd2;
op3val:0x39727f73b38190cd; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe038bcc967e53 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x10f0cde8ed0f1 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2b4fc34ef8713 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae038bcc967e53; op2val:0xc1d10f0cde8ed0f1;
op3val:0x39b2b4fc34ef8713; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe038bcc967e53 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x10f0cde8ed0f1 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2b4fc34ef8713 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae038bcc967e53; op2val:0xc1d10f0cde8ed0f1;
op3val:0x39b2b4fc34ef8713; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe038bcc967e53 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x10f0cde8ed0f1 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2b4fc34ef8713 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae038bcc967e53; op2val:0xc1d10f0cde8ed0f1;
op3val:0x39b2b4fc34ef8713; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe038bcc967e53 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x10f0cde8ed0f1 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2b4fc34ef8713 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae038bcc967e53; op2val:0xc1d10f0cde8ed0f1;
op3val:0x39b2b4fc34ef8713; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xe038bcc967e53 and fs2 == 1 and fe2 == 0x41d and fm2 == 0x10f0cde8ed0f1 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x2b4fc34ef8713 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39ae038bcc967e53; op2val:0xc1d10f0cde8ed0f1;
op3val:0x39b2b4fc34ef8713; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xf0fbf6a2f168e and fs2 == 1 and fe2 == 0x40f and fm2 == 0x07bc4c532d3b5 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9e5b31936c644 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39af0fbf6a2f168e; op2val:0xc0f07bc4c532d3b5;
op3val:0x3989e5b31936c644; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xf0fbf6a2f168e and fs2 == 1 and fe2 == 0x40f and fm2 == 0x07bc4c532d3b5 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9e5b31936c644 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39af0fbf6a2f168e; op2val:0xc0f07bc4c532d3b5;
op3val:0x3989e5b31936c644; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xf0fbf6a2f168e and fs2 == 1 and fe2 == 0x40f and fm2 == 0x07bc4c532d3b5 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9e5b31936c644 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39af0fbf6a2f168e; op2val:0xc0f07bc4c532d3b5;
op3val:0x3989e5b31936c644; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xf0fbf6a2f168e and fs2 == 1 and fe2 == 0x40f and fm2 == 0x07bc4c532d3b5 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9e5b31936c644 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39af0fbf6a2f168e; op2val:0xc0f07bc4c532d3b5;
op3val:0x3989e5b31936c644; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x39a and fm1 == 0xf0fbf6a2f168e and fs2 == 1 and fe2 == 0x40f and fm2 == 0x07bc4c532d3b5 and fs3 == 0 and fe3 == 0x398 and fm3 == 0x9e5b31936c644 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39af0fbf6a2f168e; op2val:0xc0f07bc4c532d3b5;
op3val:0x3989e5b31936c644; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x02b0619073291 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xbcaaa53f7565d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x6842c4cac9ea4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b02b0619073291; op2val:0xc06bcaaa53f7565d;
op3val:0x3986842c4cac9ea4; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x02b0619073291 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xbcaaa53f7565d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x6842c4cac9ea4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b02b0619073291; op2val:0xc06bcaaa53f7565d;
op3val:0x3986842c4cac9ea4; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x02b0619073291 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xbcaaa53f7565d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x6842c4cac9ea4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b02b0619073291; op2val:0xc06bcaaa53f7565d;
op3val:0x3986842c4cac9ea4; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x02b0619073291 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xbcaaa53f7565d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x6842c4cac9ea4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b02b0619073291; op2val:0xc06bcaaa53f7565d;
op3val:0x3986842c4cac9ea4; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x02b0619073291 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xbcaaa53f7565d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x6842c4cac9ea4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b02b0619073291; op2val:0xc06bcaaa53f7565d;
op3val:0x3986842c4cac9ea4; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x099fd23cef832 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x30b463f83caec and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38057ebfc111a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b099fd23cef832; op2val:0xc6530b463f83caec;
op3val:0x39a38057ebfc111a; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x099fd23cef832 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x30b463f83caec and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38057ebfc111a and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b099fd23cef832; op2val:0xc6530b463f83caec;
op3val:0x39a38057ebfc111a; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x099fd23cef832 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x30b463f83caec and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38057ebfc111a and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b099fd23cef832; op2val:0xc6530b463f83caec;
op3val:0x39a38057ebfc111a; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x099fd23cef832 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x30b463f83caec and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38057ebfc111a and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b099fd23cef832; op2val:0xc6530b463f83caec;
op3val:0x39a38057ebfc111a; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x099fd23cef832 and fs2 == 1 and fe2 == 0x465 and fm2 == 0x30b463f83caec and fs3 == 0 and fe3 == 0x39a and fm3 == 0x38057ebfc111a and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b099fd23cef832; op2val:0xc6530b463f83caec;
op3val:0x39a38057ebfc111a; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x2209275762c5c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf55704cec8e60 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x83d9a457c5398 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b2209275762c5c; op2val:0xbfdf55704cec8e60;
op3val:0x39983d9a457c5398; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x2209275762c5c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf55704cec8e60 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x83d9a457c5398 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b2209275762c5c; op2val:0xbfdf55704cec8e60;
op3val:0x39983d9a457c5398; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x2209275762c5c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf55704cec8e60 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x83d9a457c5398 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b2209275762c5c; op2val:0xbfdf55704cec8e60;
op3val:0x39983d9a457c5398; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x2209275762c5c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf55704cec8e60 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x83d9a457c5398 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b2209275762c5c; op2val:0xbfdf55704cec8e60;
op3val:0x39983d9a457c5398; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x2209275762c5c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf55704cec8e60 and fs3 == 0 and fe3 == 0x399 and fm3 == 0x83d9a457c5398 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b2209275762c5c; op2val:0xbfdf55704cec8e60;
op3val:0x39983d9a457c5398; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x245be27b17194 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd068f21781b7d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x25e644cd05d18 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b245be27b17194; op2val:0xc00d068f21781b7d;
op3val:0x39825e644cd05d18; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x245be27b17194 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd068f21781b7d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x25e644cd05d18 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b245be27b17194; op2val:0xc00d068f21781b7d;
op3val:0x39825e644cd05d18; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x245be27b17194 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd068f21781b7d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x25e644cd05d18 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b245be27b17194; op2val:0xc00d068f21781b7d;
op3val:0x39825e644cd05d18; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x245be27b17194 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd068f21781b7d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x25e644cd05d18 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b245be27b17194; op2val:0xc00d068f21781b7d;
op3val:0x39825e644cd05d18; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x245be27b17194 and fs2 == 1 and fe2 == 0x400 and fm2 == 0xd068f21781b7d and fs3 == 0 and fe3 == 0x398 and fm3 == 0x25e644cd05d18 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b245be27b17194; op2val:0xc00d068f21781b7d;
op3val:0x39825e644cd05d18; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x322302882cdc2 and fs2 == 1 and fe2 == 0x406 and fm2 == 0x78d4762bbf263 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xa53564a0699a4 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b322302882cdc2; op2val:0xc0678d4762bbf263;
op3val:0x39aa53564a0699a4; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x322302882cdc2 and fs2 == 1 and fe2 == 0x406 and fm2 == 0x78d4762bbf263 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xa53564a0699a4 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b322302882cdc2; op2val:0xc0678d4762bbf263;
op3val:0x39aa53564a0699a4; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x322302882cdc2 and fs2 == 1 and fe2 == 0x406 and fm2 == 0x78d4762bbf263 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xa53564a0699a4 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b322302882cdc2; op2val:0xc0678d4762bbf263;
op3val:0x39aa53564a0699a4; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x322302882cdc2 and fs2 == 1 and fe2 == 0x406 and fm2 == 0x78d4762bbf263 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xa53564a0699a4 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b322302882cdc2; op2val:0xc0678d4762bbf263;
op3val:0x39aa53564a0699a4; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x322302882cdc2 and fs2 == 1 and fe2 == 0x406 and fm2 == 0x78d4762bbf263 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xa53564a0699a4 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b322302882cdc2; op2val:0xc0678d4762bbf263;
op3val:0x39aa53564a0699a4; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3c701a3548e1d and fs2 == 1 and fe2 == 0x464 and fm2 == 0xff8ce40f090d9 and fs3 == 0 and fe3 == 0x395 and fm3 == 0xdae62ff03f3d2 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3c701a3548e1d; op2val:0xc64ff8ce40f090d9;
op3val:0x395dae62ff03f3d2; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3c701a3548e1d and fs2 == 1 and fe2 == 0x464 and fm2 == 0xff8ce40f090d9 and fs3 == 0 and fe3 == 0x395 and fm3 == 0xdae62ff03f3d2 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3c701a3548e1d; op2val:0xc64ff8ce40f090d9;
op3val:0x395dae62ff03f3d2; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3c701a3548e1d and fs2 == 1 and fe2 == 0x464 and fm2 == 0xff8ce40f090d9 and fs3 == 0 and fe3 == 0x395 and fm3 == 0xdae62ff03f3d2 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3c701a3548e1d; op2val:0xc64ff8ce40f090d9;
op3val:0x395dae62ff03f3d2; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3c701a3548e1d and fs2 == 1 and fe2 == 0x464 and fm2 == 0xff8ce40f090d9 and fs3 == 0 and fe3 == 0x395 and fm3 == 0xdae62ff03f3d2 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3c701a3548e1d; op2val:0xc64ff8ce40f090d9;
op3val:0x395dae62ff03f3d2; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3c701a3548e1d and fs2 == 1 and fe2 == 0x464 and fm2 == 0xff8ce40f090d9 and fs3 == 0 and fe3 == 0x395 and fm3 == 0xdae62ff03f3d2 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3c701a3548e1d; op2val:0xc64ff8ce40f090d9;
op3val:0x395dae62ff03f3d2; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3ed05a43970e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc750f043d5c8d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1b1ccd357d197 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3ed05a43970e3; op2val:0xbfec750f043d5c8d;
op3val:0x39b1b1ccd357d197; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3ed05a43970e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc750f043d5c8d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1b1ccd357d197 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3ed05a43970e3; op2val:0xbfec750f043d5c8d;
op3val:0x39b1b1ccd357d197; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3ed05a43970e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc750f043d5c8d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1b1ccd357d197 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3ed05a43970e3; op2val:0xbfec750f043d5c8d;
op3val:0x39b1b1ccd357d197; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3ed05a43970e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc750f043d5c8d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1b1ccd357d197 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3ed05a43970e3; op2val:0xbfec750f043d5c8d;
op3val:0x39b1b1ccd357d197; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x39b and fm1 == 0x3ed05a43970e3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc750f043d5c8d and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1b1ccd357d197 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39b3ed05a43970e3; op2val:0xbfec750f043d5c8d;
op3val:0x39b1b1ccd357d197; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39226e649f5a74b6; op2val:0xc081c94a0c1e1fa9;
op3val:0x39b1ac979514b6d7; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39226e649f5a74b6; op2val:0xc081c94a0c1e1fa9;
op3val:0x39b1ac979514b6d7; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39226e649f5a74b6; op2val:0xc081c94a0c1e1fa9;
op3val:0x39b1ac979514b6d7; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39226e649f5a74b6; op2val:0xc081c94a0c1e1fa9;
op3val:0x39b1ac979514b6d7; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x392 and fm1 == 0x26e649f5a74b6 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x1c94a0c1e1fa9 and fs3 == 0 and fe3 == 0x39b and fm3 == 0x1ac979514b6d7 and  fcsr == 0x80 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x39226e649f5a74b6; op2val:0xc081c94a0c1e1fa9;
op3val:0x39b1ac979514b6d7; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:128 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 128, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0x39ab80125e1b1046; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0x39ab80125e1b1046; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x40 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0x39ab80125e1b1046; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:64 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 64, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x393 and fm1 == 0x190efde47be0e and fs2 == 1 and fe2 == 0x46d and fm2 == 0x1ff8cc931a9a9 and fs3 == 0 and fe3 == 0x39a and fm3 == 0xb80125e1b1046 and  fcsr == 0x60 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x393190efde47be0e; op2val:0xc6d1ff8cc931a9a9;
op3val:0x39ab80125e1b1046; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:96 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 96, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x105efde4ed531 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x09f209cec78cd and fs3 == 0 and fe3 == 0x399 and fm3 == 0x1954d45efc2a6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x395105efde4ed531; op2val:0xc0309f209cec78cd;
op3val:0x3991954d45efc2a6; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x395 and fm1 == 0x105efde4ed531 and fs2 == 1 and fe2 == 0x403 and fm2 == 0x09f209cec78cd and fs3 == 0 and fe3 == 0x399 and fm3 == 0x1954d45efc2a6 and  fcsr == 0x20 and rm_val == 7   
/* opcode: fnmsub.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x395105efde4ed531; op2val:0xc0309f209cec78cd;
op3val:0x3991954d45efc2a6; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:32 */
TEST_FPR4_OP(fnmsub.d, f31, f30, f29, f28, dyn, 32, 0, x3, 450*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(4157293698080880343,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(4157293698080880343,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4155555897556013126,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4155555897556013126,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4155555897556013126,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(4148260890903298726,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(13848743816584788173,64,FLEN)
NAN_BOXED(4148260890903298726,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(13848743816584788173,64,FLEN)
NAN_BOXED(4148260890903298726,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(13848743816584788173,64,FLEN)
NAN_BOXED(4148260890903298726,64,FLEN)
NAN_BOXED(4135099756877202277,64,FLEN)
NAN_BOXED(13923778247890704939,64,FLEN)
NAN_BOXED(4153131727681289020,64,FLEN)
NAN_BOXED(4135099756877202277,64,FLEN)
NAN_BOXED(13923778247890704939,64,FLEN)
NAN_BOXED(4153131727681289020,64,FLEN)
NAN_BOXED(4135099756877202277,64,FLEN)
NAN_BOXED(13923778247890704939,64,FLEN)
NAN_BOXED(4153131727681289020,64,FLEN)
NAN_BOXED(4135099756877202277,64,FLEN)
NAN_BOXED(13923778247890704939,64,FLEN)
NAN_BOXED(4153131727681289020,64,FLEN)
NAN_BOXED(4135099756877202277,64,FLEN)
NAN_BOXED(13923778247890704939,64,FLEN)
NAN_BOXED(4153131727681289020,64,FLEN)
NAN_BOXED(4145462544408359156,64,FLEN)
NAN_BOXED(13825251860396350702,64,FLEN)
NAN_BOXED(4140254570285728864,64,FLEN)
NAN_BOXED(4145462544408359156,64,FLEN)
NAN_BOXED(13825251860396350702,64,FLEN)
NAN_BOXED(4140254570285728864,64,FLEN)
NAN_BOXED(4145462544408359156,64,FLEN)
NAN_BOXED(13825251860396350702,64,FLEN)
NAN_BOXED(4140254570285728864,64,FLEN)
NAN_BOXED(4145462544408359156,64,FLEN)
NAN_BOXED(13825251860396350702,64,FLEN)
NAN_BOXED(4140254570285728864,64,FLEN)
NAN_BOXED(4145462544408359156,64,FLEN)
NAN_BOXED(13825251860396350702,64,FLEN)
NAN_BOXED(4140254570285728864,64,FLEN)
NAN_BOXED(4147987994614965159,64,FLEN)
NAN_BOXED(13874230542161943752,64,FLEN)
NAN_BOXED(4157690879741375422,64,FLEN)
NAN_BOXED(4147987994614965159,64,FLEN)
NAN_BOXED(13874230542161943752,64,FLEN)
NAN_BOXED(4157690879741375422,64,FLEN)
NAN_BOXED(4147987994614965159,64,FLEN)
NAN_BOXED(13874230542161943752,64,FLEN)
NAN_BOXED(4157690879741375422,64,FLEN)
NAN_BOXED(4147987994614965159,64,FLEN)
NAN_BOXED(13874230542161943752,64,FLEN)
NAN_BOXED(4157690879741375422,64,FLEN)
NAN_BOXED(4147987994614965159,64,FLEN)
NAN_BOXED(13874230542161943752,64,FLEN)
NAN_BOXED(4157690879741375422,64,FLEN)
NAN_BOXED(4148094795399075425,64,FLEN)
NAN_BOXED(13830916403712935587,64,FLEN)
NAN_BOXED(4148232377206417626,64,FLEN)
NAN_BOXED(4148094795399075425,64,FLEN)
NAN_BOXED(13830916403712935587,64,FLEN)
NAN_BOXED(4148232377206417626,64,FLEN)
NAN_BOXED(4148094795399075425,64,FLEN)
NAN_BOXED(13830916403712935587,64,FLEN)
NAN_BOXED(4148232377206417626,64,FLEN)
NAN_BOXED(4148094795399075425,64,FLEN)
NAN_BOXED(13830916403712935587,64,FLEN)
NAN_BOXED(4148232377206417626,64,FLEN)
NAN_BOXED(4148094795399075425,64,FLEN)
NAN_BOXED(13830916403712935587,64,FLEN)
NAN_BOXED(4148232377206417626,64,FLEN)
NAN_BOXED(4149693906173518077,64,FLEN)
NAN_BOXED(13972018326124810947,64,FLEN)
NAN_BOXED(4157550263706139475,64,FLEN)
NAN_BOXED(4149693906173518077,64,FLEN)
NAN_BOXED(13972018326124810947,64,FLEN)
NAN_BOXED(4157550263706139475,64,FLEN)
NAN_BOXED(4149693906173518077,64,FLEN)
NAN_BOXED(13972018326124810947,64,FLEN)
NAN_BOXED(4157550263706139475,64,FLEN)
NAN_BOXED(4149693906173518077,64,FLEN)
NAN_BOXED(13972018326124810947,64,FLEN)
NAN_BOXED(4157550263706139475,64,FLEN)
NAN_BOXED(4149693906173518077,64,FLEN)
NAN_BOXED(13972018326124810947,64,FLEN)
NAN_BOXED(4157550263706139475,64,FLEN)
NAN_BOXED(4149918219311331705,64,FLEN)
NAN_BOXED(13971802524361969818,64,FLEN)
NAN_BOXED(4157807925400863605,64,FLEN)
NAN_BOXED(4149918219311331705,64,FLEN)
NAN_BOXED(13971802524361969818,64,FLEN)
NAN_BOXED(4157807925400863605,64,FLEN)
NAN_BOXED(4149918219311331705,64,FLEN)
NAN_BOXED(13971802524361969818,64,FLEN)
NAN_BOXED(4157807925400863605,64,FLEN)
NAN_BOXED(4149918219311331705,64,FLEN)
NAN_BOXED(13971802524361969818,64,FLEN)
NAN_BOXED(4157807925400863605,64,FLEN)
NAN_BOXED(4149918219311331705,64,FLEN)
NAN_BOXED(13971802524361969818,64,FLEN)
NAN_BOXED(4157807925400863605,64,FLEN)
NAN_BOXED(4150193482480842852,64,FLEN)
NAN_BOXED(14297201307196552138,64,FLEN)
NAN_BOXED(4154701555626210594,64,FLEN)
NAN_BOXED(4150193482480842852,64,FLEN)
NAN_BOXED(14297201307196552138,64,FLEN)
NAN_BOXED(4154701555626210594,64,FLEN)
NAN_BOXED(4150193482480842852,64,FLEN)
NAN_BOXED(14297201307196552138,64,FLEN)
NAN_BOXED(4154701555626210594,64,FLEN)
NAN_BOXED(4150193482480842852,64,FLEN)
NAN_BOXED(14297201307196552138,64,FLEN)
NAN_BOXED(4154701555626210594,64,FLEN)
NAN_BOXED(4150193482480842852,64,FLEN)
NAN_BOXED(14297201307196552138,64,FLEN)
NAN_BOXED(4154701555626210594,64,FLEN)
NAN_BOXED(4150523096887924900,64,FLEN)
NAN_BOXED(14296868573283183600,64,FLEN)
NAN_BOXED(4153309799459780812,64,FLEN)
NAN_BOXED(4150523096887924900,64,FLEN)
NAN_BOXED(14296868573283183600,64,FLEN)
NAN_BOXED(4153309799459780812,64,FLEN)
NAN_BOXED(4150523096887924900,64,FLEN)
NAN_BOXED(14296868573283183600,64,FLEN)
NAN_BOXED(4153309799459780812,64,FLEN)
NAN_BOXED(4150523096887924900,64,FLEN)
NAN_BOXED(14296868573283183600,64,FLEN)
NAN_BOXED(4153309799459780812,64,FLEN)
NAN_BOXED(4150523096887924900,64,FLEN)
NAN_BOXED(14296868573283183600,64,FLEN)
NAN_BOXED(4153309799459780812,64,FLEN)
NAN_BOXED(4151027857438951609,64,FLEN)
NAN_BOXED(14296414133398551343,64,FLEN)
NAN_BOXED(4150389845064319957,64,FLEN)
NAN_BOXED(4151027857438951609,64,FLEN)
NAN_BOXED(14296414133398551343,64,FLEN)
NAN_BOXED(4150389845064319957,64,FLEN)
NAN_BOXED(4151027857438951609,64,FLEN)
NAN_BOXED(14296414133398551343,64,FLEN)
NAN_BOXED(4150389845064319957,64,FLEN)
NAN_BOXED(4151027857438951609,64,FLEN)
NAN_BOXED(14296414133398551343,64,FLEN)
NAN_BOXED(4150389845064319957,64,FLEN)
NAN_BOXED(4151027857438951609,64,FLEN)
NAN_BOXED(14296414133398551343,64,FLEN)
NAN_BOXED(4150389845064319957,64,FLEN)
NAN_BOXED(4151559777196234545,64,FLEN)
NAN_BOXED(13825859835344218419,64,FLEN)
NAN_BOXED(4146387590341614076,64,FLEN)
NAN_BOXED(4151559777196234545,64,FLEN)
NAN_BOXED(13825859835344218419,64,FLEN)
NAN_BOXED(4146387590341614076,64,FLEN)
NAN_BOXED(4151559777196234545,64,FLEN)
NAN_BOXED(13825859835344218419,64,FLEN)
NAN_BOXED(4146387590341614076,64,FLEN)
NAN_BOXED(4151559777196234545,64,FLEN)
NAN_BOXED(13825859835344218419,64,FLEN)
NAN_BOXED(4146387590341614076,64,FLEN)
NAN_BOXED(4151559777196234545,64,FLEN)
NAN_BOXED(13825859835344218419,64,FLEN)
NAN_BOXED(4146387590341614076,64,FLEN)
NAN_BOXED(4153171078537561815,64,FLEN)
NAN_BOXED(13828946871980367844,64,FLEN)
NAN_BOXED(4148942385283906331,64,FLEN)
NAN_BOXED(4153171078537561815,64,FLEN)
NAN_BOXED(13828946871980367844,64,FLEN)
NAN_BOXED(4148942385283906331,64,FLEN)
NAN_BOXED(4153171078537561815,64,FLEN)
NAN_BOXED(13828946871980367844,64,FLEN)
NAN_BOXED(4148942385283906331,64,FLEN)
NAN_BOXED(4153171078537561815,64,FLEN)
NAN_BOXED(13828946871980367844,64,FLEN)
NAN_BOXED(4148942385283906331,64,FLEN)
NAN_BOXED(4153171078537561815,64,FLEN)
NAN_BOXED(13828946871980367844,64,FLEN)
NAN_BOXED(4148942385283906331,64,FLEN)
NAN_BOXED(4153972100422616964,64,FLEN)
NAN_BOXED(13904697110359376912,64,FLEN)
NAN_BOXED(4155554712685840317,64,FLEN)
NAN_BOXED(4153972100422616964,64,FLEN)
NAN_BOXED(13904697110359376912,64,FLEN)
NAN_BOXED(4155554712685840317,64,FLEN)
NAN_BOXED(4153972100422616964,64,FLEN)
NAN_BOXED(13904697110359376912,64,FLEN)
NAN_BOXED(4155554712685840317,64,FLEN)
NAN_BOXED(4153972100422616964,64,FLEN)
NAN_BOXED(13904697110359376912,64,FLEN)
NAN_BOXED(4155554712685840317,64,FLEN)
NAN_BOXED(4153972100422616964,64,FLEN)
NAN_BOXED(13904697110359376912,64,FLEN)
NAN_BOXED(4155554712685840317,64,FLEN)
NAN_BOXED(4154023908262053152,64,FLEN)
NAN_BOXED(13830893941694576448,64,FLEN)
NAN_BOXED(4154368506697981213,64,FLEN)
NAN_BOXED(4154023908262053152,64,FLEN)
NAN_BOXED(13830893941694576448,64,FLEN)
NAN_BOXED(4154368506697981213,64,FLEN)
NAN_BOXED(4154023908262053152,64,FLEN)
NAN_BOXED(13830893941694576448,64,FLEN)
NAN_BOXED(4154368506697981213,64,FLEN)
NAN_BOXED(4154023908262053152,64,FLEN)
NAN_BOXED(13830893941694576448,64,FLEN)
NAN_BOXED(4154368506697981213,64,FLEN)
NAN_BOXED(4154023908262053152,64,FLEN)
NAN_BOXED(13830893941694576448,64,FLEN)
NAN_BOXED(4154368506697981213,64,FLEN)
NAN_BOXED(4154865318289752772,64,FLEN)
NAN_BOXED(13841042911138183606,64,FLEN)
NAN_BOXED(4144594655547885450,64,FLEN)
NAN_BOXED(4154865318289752772,64,FLEN)
NAN_BOXED(13841042911138183606,64,FLEN)
NAN_BOXED(4144594655547885450,64,FLEN)
NAN_BOXED(4154865318289752772,64,FLEN)
NAN_BOXED(13841042911138183606,64,FLEN)
NAN_BOXED(4144594655547885450,64,FLEN)
NAN_BOXED(4154865318289752772,64,FLEN)
NAN_BOXED(13841042911138183606,64,FLEN)
NAN_BOXED(4144594655547885450,64,FLEN)
NAN_BOXED(4154865318289752772,64,FLEN)
NAN_BOXED(13841042911138183606,64,FLEN)
NAN_BOXED(4144594655547885450,64,FLEN)
NAN_BOXED(4155700993743673218,64,FLEN)
NAN_BOXED(13841777844614038990,64,FLEN)
NAN_BOXED(4157836963174023872,64,FLEN)
NAN_BOXED(4155700993743673218,64,FLEN)
NAN_BOXED(13841777844614038990,64,FLEN)
NAN_BOXED(4157836963174023872,64,FLEN)
NAN_BOXED(4155700993743673218,64,FLEN)
NAN_BOXED(13841777844614038990,64,FLEN)
NAN_BOXED(4157836963174023872,64,FLEN)
NAN_BOXED(4155700993743673218,64,FLEN)
NAN_BOXED(13841777844614038990,64,FLEN)
NAN_BOXED(4157836963174023872,64,FLEN)
NAN_BOXED(4155700993743673218,64,FLEN)
NAN_BOXED(13841777844614038990,64,FLEN)
NAN_BOXED(4157836963174023872,64,FLEN)
NAN_BOXED(4155861155974816571,64,FLEN)
NAN_BOXED(14291644488259984850,64,FLEN)
NAN_BOXED(4139511142416486605,64,FLEN)
NAN_BOXED(4155861155974816571,64,FLEN)
NAN_BOXED(14291644488259984850,64,FLEN)
NAN_BOXED(4139511142416486605,64,FLEN)
NAN_BOXED(4155861155974816571,64,FLEN)
NAN_BOXED(14291644488259984850,64,FLEN)
NAN_BOXED(4139511142416486605,64,FLEN)
NAN_BOXED(4155861155974816571,64,FLEN)
NAN_BOXED(14291644488259984850,64,FLEN)
NAN_BOXED(4139511142416486605,64,FLEN)
NAN_BOXED(4155861155974816571,64,FLEN)
NAN_BOXED(14291644488259984850,64,FLEN)
NAN_BOXED(4139511142416486605,64,FLEN)
NAN_BOXED(4156263405077298771,64,FLEN)
NAN_BOXED(13965960467400544497,64,FLEN)
NAN_BOXED(4157584401329260307,64,FLEN)
NAN_BOXED(4156263405077298771,64,FLEN)
NAN_BOXED(13965960467400544497,64,FLEN)
NAN_BOXED(4157584401329260307,64,FLEN)
NAN_BOXED(4156263405077298771,64,FLEN)
NAN_BOXED(13965960467400544497,64,FLEN)
NAN_BOXED(4157584401329260307,64,FLEN)
NAN_BOXED(4156263405077298771,64,FLEN)
NAN_BOXED(13965960467400544497,64,FLEN)
NAN_BOXED(4157584401329260307,64,FLEN)
NAN_BOXED(4156263405077298771,64,FLEN)
NAN_BOXED(13965960467400544497,64,FLEN)
NAN_BOXED(4157584401329260307,64,FLEN)
NAN_BOXED(4156558295880898190,64,FLEN)
NAN_BOXED(13902748134744970165,64,FLEN)
NAN_BOXED(4146097489356179012,64,FLEN)
NAN_BOXED(4156558295880898190,64,FLEN)
NAN_BOXED(13902748134744970165,64,FLEN)
NAN_BOXED(4146097489356179012,64,FLEN)
NAN_BOXED(4156558295880898190,64,FLEN)
NAN_BOXED(13902748134744970165,64,FLEN)
NAN_BOXED(4146097489356179012,64,FLEN)
NAN_BOXED(4156558295880898190,64,FLEN)
NAN_BOXED(13902748134744970165,64,FLEN)
NAN_BOXED(4146097489356179012,64,FLEN)
NAN_BOXED(4156558295880898190,64,FLEN)
NAN_BOXED(13902748134744970165,64,FLEN)
NAN_BOXED(4146097489356179012,64,FLEN)
NAN_BOXED(4156869761252668049,64,FLEN)
NAN_BOXED(13865398710692173405,64,FLEN)
NAN_BOXED(4145145832840928932,64,FLEN)
NAN_BOXED(4156869761252668049,64,FLEN)
NAN_BOXED(13865398710692173405,64,FLEN)
NAN_BOXED(4145145832840928932,64,FLEN)
NAN_BOXED(4156869761252668049,64,FLEN)
NAN_BOXED(13865398710692173405,64,FLEN)
NAN_BOXED(4145145832840928932,64,FLEN)
NAN_BOXED(4156869761252668049,64,FLEN)
NAN_BOXED(13865398710692173405,64,FLEN)
NAN_BOXED(4145145832840928932,64,FLEN)
NAN_BOXED(4156869761252668049,64,FLEN)
NAN_BOXED(13865398710692173405,64,FLEN)
NAN_BOXED(4145145832840928932,64,FLEN)
NAN_BOXED(4156991768569509938,64,FLEN)
NAN_BOXED(14290778438917933804,64,FLEN)
NAN_BOXED(4153304396475404570,64,FLEN)
NAN_BOXED(4156991768569509938,64,FLEN)
NAN_BOXED(14290778438917933804,64,FLEN)
NAN_BOXED(4153304396475404570,64,FLEN)
NAN_BOXED(4156991768569509938,64,FLEN)
NAN_BOXED(14290778438917933804,64,FLEN)
NAN_BOXED(4153304396475404570,64,FLEN)
NAN_BOXED(4156991768569509938,64,FLEN)
NAN_BOXED(14290778438917933804,64,FLEN)
NAN_BOXED(4153304396475404570,64,FLEN)
NAN_BOXED(4156991768569509938,64,FLEN)
NAN_BOXED(14290778438917933804,64,FLEN)
NAN_BOXED(4153304396475404570,64,FLEN)
NAN_BOXED(4157421219424382044,64,FLEN)
NAN_BOXED(13825863321865981536,64,FLEN)
NAN_BOXED(4150134789421945752,64,FLEN)
NAN_BOXED(4157421219424382044,64,FLEN)
NAN_BOXED(13825863321865981536,64,FLEN)
NAN_BOXED(4150134789421945752,64,FLEN)
NAN_BOXED(4157421219424382044,64,FLEN)
NAN_BOXED(13825863321865981536,64,FLEN)
NAN_BOXED(4150134789421945752,64,FLEN)
NAN_BOXED(4157421219424382044,64,FLEN)
NAN_BOXED(13825863321865981536,64,FLEN)
NAN_BOXED(4150134789421945752,64,FLEN)
NAN_BOXED(4157421219424382044,64,FLEN)
NAN_BOXED(13825863321865981536,64,FLEN)
NAN_BOXED(4150134789421945752,64,FLEN)
NAN_BOXED(4157462089028432276,64,FLEN)
NAN_BOXED(13838724441791011709,64,FLEN)
NAN_BOXED(4143978392012741912,64,FLEN)
NAN_BOXED(4157462089028432276,64,FLEN)
NAN_BOXED(13838724441791011709,64,FLEN)
NAN_BOXED(4143978392012741912,64,FLEN)
NAN_BOXED(4157462089028432276,64,FLEN)
NAN_BOXED(13838724441791011709,64,FLEN)
NAN_BOXED(4143978392012741912,64,FLEN)
NAN_BOXED(4157462089028432276,64,FLEN)
NAN_BOXED(13838724441791011709,64,FLEN)
NAN_BOXED(4143978392012741912,64,FLEN)
NAN_BOXED(4157462089028432276,64,FLEN)
NAN_BOXED(13838724441791011709,64,FLEN)
NAN_BOXED(4143978392012741912,64,FLEN)
NAN_BOXED(4157704471226535362,64,FLEN)
NAN_BOXED(13864205315622040163,64,FLEN)
NAN_BOXED(4155225236276943268,64,FLEN)
NAN_BOXED(4157704471226535362,64,FLEN)
NAN_BOXED(13864205315622040163,64,FLEN)
NAN_BOXED(4155225236276943268,64,FLEN)
NAN_BOXED(4157704471226535362,64,FLEN)
NAN_BOXED(13864205315622040163,64,FLEN)
NAN_BOXED(4155225236276943268,64,FLEN)
NAN_BOXED(4157704471226535362,64,FLEN)
NAN_BOXED(13864205315622040163,64,FLEN)
NAN_BOXED(4155225236276943268,64,FLEN)
NAN_BOXED(4157704471226535362,64,FLEN)
NAN_BOXED(13864205315622040163,64,FLEN)
NAN_BOXED(4155225236276943268,64,FLEN)
NAN_BOXED(4157885690842222109,64,FLEN)
NAN_BOXED(14289913707406332121,64,FLEN)
NAN_BOXED(4133651773204460498,64,FLEN)
NAN_BOXED(4157885690842222109,64,FLEN)
NAN_BOXED(14289913707406332121,64,FLEN)
NAN_BOXED(4133651773204460498,64,FLEN)
NAN_BOXED(4157885690842222109,64,FLEN)
NAN_BOXED(14289913707406332121,64,FLEN)
NAN_BOXED(4133651773204460498,64,FLEN)
NAN_BOXED(4157885690842222109,64,FLEN)
NAN_BOXED(14289913707406332121,64,FLEN)
NAN_BOXED(4133651773204460498,64,FLEN)
NAN_BOXED(4157885690842222109,64,FLEN)
NAN_BOXED(14289913707406332121,64,FLEN)
NAN_BOXED(4133651773204460498,64,FLEN)
NAN_BOXED(4157927489478947043,64,FLEN)
NAN_BOXED(13829557263104040077,64,FLEN)
NAN_BOXED(4157299424316871063,64,FLEN)
NAN_BOXED(4157927489478947043,64,FLEN)
NAN_BOXED(13829557263104040077,64,FLEN)
NAN_BOXED(4157299424316871063,64,FLEN)
NAN_BOXED(4157927489478947043,64,FLEN)
NAN_BOXED(13829557263104040077,64,FLEN)
NAN_BOXED(4157299424316871063,64,FLEN)
NAN_BOXED(4157927489478947043,64,FLEN)
NAN_BOXED(13829557263104040077,64,FLEN)
NAN_BOXED(4157299424316871063,64,FLEN)
NAN_BOXED(4157927489478947043,64,FLEN)
NAN_BOXED(13829557263104040077,64,FLEN)
NAN_BOXED(4157299424316871063,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(4157293698080880343,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(4157293698080880343,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(4157293698080880343,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(4157293698080880343,64,FLEN)
NAN_BOXED(4116974387819345078,64,FLEN)
NAN_BOXED(13871589647145901993,64,FLEN)
NAN_BOXED(4157293698080880343,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4155555897556013126,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4155555897556013126,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4155555897556013126,64,FLEN)
NAN_BOXED(4121234493921541646,64,FLEN)
NAN_BOXED(14326512869778237865,64,FLEN)
NAN_BOXED(4155555897556013126,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(13848743816584788173,64,FLEN)
NAN_BOXED(4148260890903298726,64,FLEN)
NAN_BOXED(4130088861060486449,64,FLEN)
NAN_BOXED(13848743816584788173,64,FLEN)
NAN_BOXED(4148260890903298726,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 46*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

RVMODEL_DATA_END
