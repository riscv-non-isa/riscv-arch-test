
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7680:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000000003f; valaddr_reg:x3; val_offset:23040*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23040*0 + 3*0*FLEN/8, x4, x1, x2)

inst_7681:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000000007f; valaddr_reg:x3; val_offset:23043*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23043*0 + 3*1*FLEN/8, x4, x1, x2)

inst_7682:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000000000ff; valaddr_reg:x3; val_offset:23046*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23046*0 + 3*2*FLEN/8, x4, x1, x2)

inst_7683:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000000001ff; valaddr_reg:x3; val_offset:23049*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23049*0 + 3*3*FLEN/8, x4, x1, x2)

inst_7684:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000000003ff; valaddr_reg:x3; val_offset:23052*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23052*0 + 3*4*FLEN/8, x4, x1, x2)

inst_7685:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000000007ff; valaddr_reg:x3; val_offset:23055*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23055*0 + 3*5*FLEN/8, x4, x1, x2)

inst_7686:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000000fff; valaddr_reg:x3; val_offset:23058*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23058*0 + 3*6*FLEN/8, x4, x1, x2)

inst_7687:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000001fff; valaddr_reg:x3; val_offset:23061*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23061*0 + 3*7*FLEN/8, x4, x1, x2)

inst_7688:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000003fff; valaddr_reg:x3; val_offset:23064*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23064*0 + 3*8*FLEN/8, x4, x1, x2)

inst_7689:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000007fff; valaddr_reg:x3; val_offset:23067*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23067*0 + 3*9*FLEN/8, x4, x1, x2)

inst_7690:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000000ffff; valaddr_reg:x3; val_offset:23070*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23070*0 + 3*10*FLEN/8, x4, x1, x2)

inst_7691:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000001ffff; valaddr_reg:x3; val_offset:23073*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23073*0 + 3*11*FLEN/8, x4, x1, x2)

inst_7692:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000003ffff; valaddr_reg:x3; val_offset:23076*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23076*0 + 3*12*FLEN/8, x4, x1, x2)

inst_7693:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000007ffff; valaddr_reg:x3; val_offset:23079*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23079*0 + 3*13*FLEN/8, x4, x1, x2)

inst_7694:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000000fffff; valaddr_reg:x3; val_offset:23082*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23082*0 + 3*14*FLEN/8, x4, x1, x2)

inst_7695:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000001fffff; valaddr_reg:x3; val_offset:23085*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23085*0 + 3*15*FLEN/8, x4, x1, x2)

inst_7696:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000003fffff; valaddr_reg:x3; val_offset:23088*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23088*0 + 3*16*FLEN/8, x4, x1, x2)

inst_7697:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000007fffff; valaddr_reg:x3; val_offset:23091*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23091*0 + 3*17*FLEN/8, x4, x1, x2)

inst_7698:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000000ffffff; valaddr_reg:x3; val_offset:23094*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23094*0 + 3*18*FLEN/8, x4, x1, x2)

inst_7699:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000001ffffff; valaddr_reg:x3; val_offset:23097*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23097*0 + 3*19*FLEN/8, x4, x1, x2)

inst_7700:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000003ffffff; valaddr_reg:x3; val_offset:23100*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23100*0 + 3*20*FLEN/8, x4, x1, x2)

inst_7701:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000007ffffff; valaddr_reg:x3; val_offset:23103*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23103*0 + 3*21*FLEN/8, x4, x1, x2)

inst_7702:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000000fffffff; valaddr_reg:x3; val_offset:23106*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23106*0 + 3*22*FLEN/8, x4, x1, x2)

inst_7703:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000001fffffff; valaddr_reg:x3; val_offset:23109*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23109*0 + 3*23*FLEN/8, x4, x1, x2)

inst_7704:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000003fffffff; valaddr_reg:x3; val_offset:23112*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23112*0 + 3*24*FLEN/8, x4, x1, x2)

inst_7705:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000007fffffff; valaddr_reg:x3; val_offset:23115*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23115*0 + 3*25*FLEN/8, x4, x1, x2)

inst_7706:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00000ffffffff; valaddr_reg:x3; val_offset:23118*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23118*0 + 3*26*FLEN/8, x4, x1, x2)

inst_7707:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00001ffffffff; valaddr_reg:x3; val_offset:23121*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23121*0 + 3*27*FLEN/8, x4, x1, x2)

inst_7708:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00003ffffffff; valaddr_reg:x3; val_offset:23124*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23124*0 + 3*28*FLEN/8, x4, x1, x2)

inst_7709:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00007ffffffff; valaddr_reg:x3; val_offset:23127*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23127*0 + 3*29*FLEN/8, x4, x1, x2)

inst_7710:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0000fffffffff; valaddr_reg:x3; val_offset:23130*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23130*0 + 3*30*FLEN/8, x4, x1, x2)

inst_7711:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0001fffffffff; valaddr_reg:x3; val_offset:23133*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23133*0 + 3*31*FLEN/8, x4, x1, x2)

inst_7712:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0003fffffffff; valaddr_reg:x3; val_offset:23136*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23136*0 + 3*32*FLEN/8, x4, x1, x2)

inst_7713:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0007fffffffff; valaddr_reg:x3; val_offset:23139*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23139*0 + 3*33*FLEN/8, x4, x1, x2)

inst_7714:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd000ffffffffff; valaddr_reg:x3; val_offset:23142*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23142*0 + 3*34*FLEN/8, x4, x1, x2)

inst_7715:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd001ffffffffff; valaddr_reg:x3; val_offset:23145*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23145*0 + 3*35*FLEN/8, x4, x1, x2)

inst_7716:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd003ffffffffff; valaddr_reg:x3; val_offset:23148*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23148*0 + 3*36*FLEN/8, x4, x1, x2)

inst_7717:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd007ffffffffff; valaddr_reg:x3; val_offset:23151*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23151*0 + 3*37*FLEN/8, x4, x1, x2)

inst_7718:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd00fffffffffff; valaddr_reg:x3; val_offset:23154*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23154*0 + 3*38*FLEN/8, x4, x1, x2)

inst_7719:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd01fffffffffff; valaddr_reg:x3; val_offset:23157*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23157*0 + 3*39*FLEN/8, x4, x1, x2)

inst_7720:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd03fffffffffff; valaddr_reg:x3; val_offset:23160*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23160*0 + 3*40*FLEN/8, x4, x1, x2)

inst_7721:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd07fffffffffff; valaddr_reg:x3; val_offset:23163*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23163*0 + 3*41*FLEN/8, x4, x1, x2)

inst_7722:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd0ffffffffffff; valaddr_reg:x3; val_offset:23166*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23166*0 + 3*42*FLEN/8, x4, x1, x2)

inst_7723:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd1ffffffffffff; valaddr_reg:x3; val_offset:23169*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23169*0 + 3*43*FLEN/8, x4, x1, x2)

inst_7724:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd3ffffffffffff; valaddr_reg:x3; val_offset:23172*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23172*0 + 3*44*FLEN/8, x4, x1, x2)

inst_7725:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd7ffffffffffff; valaddr_reg:x3; val_offset:23175*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23175*0 + 3*45*FLEN/8, x4, x1, x2)

inst_7726:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bd8000000000000; valaddr_reg:x3; val_offset:23178*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23178*0 + 3*46*FLEN/8, x4, x1, x2)

inst_7727:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdc000000000000; valaddr_reg:x3; val_offset:23181*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23181*0 + 3*47*FLEN/8, x4, x1, x2)

inst_7728:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bde000000000000; valaddr_reg:x3; val_offset:23184*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23184*0 + 3*48*FLEN/8, x4, x1, x2)

inst_7729:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdf000000000000; valaddr_reg:x3; val_offset:23187*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23187*0 + 3*49*FLEN/8, x4, x1, x2)

inst_7730:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdf800000000000; valaddr_reg:x3; val_offset:23190*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23190*0 + 3*50*FLEN/8, x4, x1, x2)

inst_7731:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfc00000000000; valaddr_reg:x3; val_offset:23193*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23193*0 + 3*51*FLEN/8, x4, x1, x2)

inst_7732:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfe00000000000; valaddr_reg:x3; val_offset:23196*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23196*0 + 3*52*FLEN/8, x4, x1, x2)

inst_7733:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdff00000000000; valaddr_reg:x3; val_offset:23199*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23199*0 + 3*53*FLEN/8, x4, x1, x2)

inst_7734:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdff80000000000; valaddr_reg:x3; val_offset:23202*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23202*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7735:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffc0000000000; valaddr_reg:x3; val_offset:23205*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23205*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7736:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffe0000000000; valaddr_reg:x3; val_offset:23208*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23208*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7737:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfff0000000000; valaddr_reg:x3; val_offset:23211*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23211*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7738:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfff8000000000; valaddr_reg:x3; val_offset:23214*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23214*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7739:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffc000000000; valaddr_reg:x3; val_offset:23217*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23217*0 + 3*59*FLEN/8, x4, x1, x2)

inst_7740:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffe000000000; valaddr_reg:x3; val_offset:23220*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23220*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7741:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffff000000000; valaddr_reg:x3; val_offset:23223*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23223*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7742:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffff800000000; valaddr_reg:x3; val_offset:23226*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23226*0 + 3*62*FLEN/8, x4, x1, x2)

inst_7743:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffc00000000; valaddr_reg:x3; val_offset:23229*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23229*0 + 3*63*FLEN/8, x4, x1, x2)

inst_7744:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffe00000000; valaddr_reg:x3; val_offset:23232*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23232*0 + 3*64*FLEN/8, x4, x1, x2)

inst_7745:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffff00000000; valaddr_reg:x3; val_offset:23235*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23235*0 + 3*65*FLEN/8, x4, x1, x2)

inst_7746:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffff80000000; valaddr_reg:x3; val_offset:23238*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23238*0 + 3*66*FLEN/8, x4, x1, x2)

inst_7747:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffc0000000; valaddr_reg:x3; val_offset:23241*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23241*0 + 3*67*FLEN/8, x4, x1, x2)

inst_7748:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffe0000000; valaddr_reg:x3; val_offset:23244*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23244*0 + 3*68*FLEN/8, x4, x1, x2)

inst_7749:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffff0000000; valaddr_reg:x3; val_offset:23247*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23247*0 + 3*69*FLEN/8, x4, x1, x2)

inst_7750:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffff8000000; valaddr_reg:x3; val_offset:23250*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23250*0 + 3*70*FLEN/8, x4, x1, x2)

inst_7751:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffc000000; valaddr_reg:x3; val_offset:23253*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23253*0 + 3*71*FLEN/8, x4, x1, x2)

inst_7752:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffe000000; valaddr_reg:x3; val_offset:23256*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23256*0 + 3*72*FLEN/8, x4, x1, x2)

inst_7753:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffff000000; valaddr_reg:x3; val_offset:23259*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23259*0 + 3*73*FLEN/8, x4, x1, x2)

inst_7754:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffff800000; valaddr_reg:x3; val_offset:23262*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23262*0 + 3*74*FLEN/8, x4, x1, x2)

inst_7755:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffc00000; valaddr_reg:x3; val_offset:23265*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23265*0 + 3*75*FLEN/8, x4, x1, x2)

inst_7756:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffe00000; valaddr_reg:x3; val_offset:23268*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23268*0 + 3*76*FLEN/8, x4, x1, x2)

inst_7757:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffff00000; valaddr_reg:x3; val_offset:23271*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23271*0 + 3*77*FLEN/8, x4, x1, x2)

inst_7758:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffff80000; valaddr_reg:x3; val_offset:23274*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23274*0 + 3*78*FLEN/8, x4, x1, x2)

inst_7759:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffc0000; valaddr_reg:x3; val_offset:23277*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23277*0 + 3*79*FLEN/8, x4, x1, x2)

inst_7760:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffe0000; valaddr_reg:x3; val_offset:23280*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23280*0 + 3*80*FLEN/8, x4, x1, x2)

inst_7761:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffff0000; valaddr_reg:x3; val_offset:23283*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23283*0 + 3*81*FLEN/8, x4, x1, x2)

inst_7762:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffff8000; valaddr_reg:x3; val_offset:23286*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23286*0 + 3*82*FLEN/8, x4, x1, x2)

inst_7763:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffffc000; valaddr_reg:x3; val_offset:23289*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23289*0 + 3*83*FLEN/8, x4, x1, x2)

inst_7764:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffffe000; valaddr_reg:x3; val_offset:23292*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23292*0 + 3*84*FLEN/8, x4, x1, x2)

inst_7765:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffff000; valaddr_reg:x3; val_offset:23295*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23295*0 + 3*85*FLEN/8, x4, x1, x2)

inst_7766:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffff800; valaddr_reg:x3; val_offset:23298*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23298*0 + 3*86*FLEN/8, x4, x1, x2)

inst_7767:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffffc00; valaddr_reg:x3; val_offset:23301*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23301*0 + 3*87*FLEN/8, x4, x1, x2)

inst_7768:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffffe00; valaddr_reg:x3; val_offset:23304*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23304*0 + 3*88*FLEN/8, x4, x1, x2)

inst_7769:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffffff00; valaddr_reg:x3; val_offset:23307*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23307*0 + 3*89*FLEN/8, x4, x1, x2)

inst_7770:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffffff80; valaddr_reg:x3; val_offset:23310*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23310*0 + 3*90*FLEN/8, x4, x1, x2)

inst_7771:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffffffc0; valaddr_reg:x3; val_offset:23313*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23313*0 + 3*91*FLEN/8, x4, x1, x2)

inst_7772:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffffffe0; valaddr_reg:x3; val_offset:23316*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23316*0 + 3*92*FLEN/8, x4, x1, x2)

inst_7773:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffffff0; valaddr_reg:x3; val_offset:23319*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23319*0 + 3*93*FLEN/8, x4, x1, x2)

inst_7774:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffffff8; valaddr_reg:x3; val_offset:23322*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23322*0 + 3*94*FLEN/8, x4, x1, x2)

inst_7775:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffffffc; valaddr_reg:x3; val_offset:23325*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23325*0 + 3*95*FLEN/8, x4, x1, x2)

inst_7776:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdffffffffffffe; valaddr_reg:x3; val_offset:23328*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23328*0 + 3*96*FLEN/8, x4, x1, x2)

inst_7777:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3bd and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3bdfffffffffffff; valaddr_reg:x3; val_offset:23331*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23331*0 + 3*97*FLEN/8, x4, x1, x2)

inst_7778:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:23334*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23334*0 + 3*98*FLEN/8, x4, x1, x2)

inst_7779:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:23337*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23337*0 + 3*99*FLEN/8, x4, x1, x2)

inst_7780:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:23340*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23340*0 + 3*100*FLEN/8, x4, x1, x2)

inst_7781:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:23343*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23343*0 + 3*101*FLEN/8, x4, x1, x2)

inst_7782:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:23346*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23346*0 + 3*102*FLEN/8, x4, x1, x2)

inst_7783:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:23349*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23349*0 + 3*103*FLEN/8, x4, x1, x2)

inst_7784:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:23352*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23352*0 + 3*104*FLEN/8, x4, x1, x2)

inst_7785:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:23355*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23355*0 + 3*105*FLEN/8, x4, x1, x2)

inst_7786:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:23358*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23358*0 + 3*106*FLEN/8, x4, x1, x2)

inst_7787:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:23361*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23361*0 + 3*107*FLEN/8, x4, x1, x2)

inst_7788:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:23364*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23364*0 + 3*108*FLEN/8, x4, x1, x2)

inst_7789:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:23367*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23367*0 + 3*109*FLEN/8, x4, x1, x2)

inst_7790:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:23370*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23370*0 + 3*110*FLEN/8, x4, x1, x2)

inst_7791:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:23373*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23373*0 + 3*111*FLEN/8, x4, x1, x2)

inst_7792:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:23376*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23376*0 + 3*112*FLEN/8, x4, x1, x2)

inst_7793:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:23379*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23379*0 + 3*113*FLEN/8, x4, x1, x2)

inst_7794:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:23382*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23382*0 + 3*114*FLEN/8, x4, x1, x2)

inst_7795:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:23385*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23385*0 + 3*115*FLEN/8, x4, x1, x2)

inst_7796:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:23388*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23388*0 + 3*116*FLEN/8, x4, x1, x2)

inst_7797:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:23391*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23391*0 + 3*117*FLEN/8, x4, x1, x2)

inst_7798:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:23394*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23394*0 + 3*118*FLEN/8, x4, x1, x2)

inst_7799:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x05ada684b963f and fs2 == 0 and fe2 == 0x206 and fm2 == 0xf4e3c952ef8ab and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f705ada684b963f; op2val:0x206f4e3c952ef8ab;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:23397*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23397*0 + 3*119*FLEN/8, x4, x1, x2)

inst_7800:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000000000; valaddr_reg:x3; val_offset:23400*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23400*0 + 3*120*FLEN/8, x4, x1, x2)

inst_7801:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000000001; valaddr_reg:x3; val_offset:23403*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23403*0 + 3*121*FLEN/8, x4, x1, x2)

inst_7802:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000000003; valaddr_reg:x3; val_offset:23406*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23406*0 + 3*122*FLEN/8, x4, x1, x2)

inst_7803:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000000007; valaddr_reg:x3; val_offset:23409*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23409*0 + 3*123*FLEN/8, x4, x1, x2)

inst_7804:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000000000f; valaddr_reg:x3; val_offset:23412*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23412*0 + 3*124*FLEN/8, x4, x1, x2)

inst_7805:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000000001f; valaddr_reg:x3; val_offset:23415*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23415*0 + 3*125*FLEN/8, x4, x1, x2)

inst_7806:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000000003f; valaddr_reg:x3; val_offset:23418*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23418*0 + 3*126*FLEN/8, x4, x1, x2)

inst_7807:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000000007f; valaddr_reg:x3; val_offset:23421*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23421*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_7808:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000000000ff; valaddr_reg:x3; val_offset:23424*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23424*0 + 3*128*FLEN/8, x4, x1, x2)

inst_7809:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000000001ff; valaddr_reg:x3; val_offset:23427*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23427*0 + 3*129*FLEN/8, x4, x1, x2)

inst_7810:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000000003ff; valaddr_reg:x3; val_offset:23430*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23430*0 + 3*130*FLEN/8, x4, x1, x2)

inst_7811:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000000007ff; valaddr_reg:x3; val_offset:23433*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23433*0 + 3*131*FLEN/8, x4, x1, x2)

inst_7812:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000000fff; valaddr_reg:x3; val_offset:23436*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23436*0 + 3*132*FLEN/8, x4, x1, x2)

inst_7813:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000001fff; valaddr_reg:x3; val_offset:23439*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23439*0 + 3*133*FLEN/8, x4, x1, x2)

inst_7814:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000003fff; valaddr_reg:x3; val_offset:23442*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23442*0 + 3*134*FLEN/8, x4, x1, x2)

inst_7815:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000007fff; valaddr_reg:x3; val_offset:23445*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23445*0 + 3*135*FLEN/8, x4, x1, x2)

inst_7816:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000000ffff; valaddr_reg:x3; val_offset:23448*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23448*0 + 3*136*FLEN/8, x4, x1, x2)

inst_7817:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000001ffff; valaddr_reg:x3; val_offset:23451*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23451*0 + 3*137*FLEN/8, x4, x1, x2)

inst_7818:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000003ffff; valaddr_reg:x3; val_offset:23454*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23454*0 + 3*138*FLEN/8, x4, x1, x2)

inst_7819:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000007ffff; valaddr_reg:x3; val_offset:23457*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23457*0 + 3*139*FLEN/8, x4, x1, x2)

inst_7820:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000000fffff; valaddr_reg:x3; val_offset:23460*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23460*0 + 3*140*FLEN/8, x4, x1, x2)

inst_7821:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000001fffff; valaddr_reg:x3; val_offset:23463*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23463*0 + 3*141*FLEN/8, x4, x1, x2)

inst_7822:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000003fffff; valaddr_reg:x3; val_offset:23466*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23466*0 + 3*142*FLEN/8, x4, x1, x2)

inst_7823:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000007fffff; valaddr_reg:x3; val_offset:23469*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23469*0 + 3*143*FLEN/8, x4, x1, x2)

inst_7824:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000000ffffff; valaddr_reg:x3; val_offset:23472*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23472*0 + 3*144*FLEN/8, x4, x1, x2)

inst_7825:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000001ffffff; valaddr_reg:x3; val_offset:23475*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23475*0 + 3*145*FLEN/8, x4, x1, x2)

inst_7826:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000003ffffff; valaddr_reg:x3; val_offset:23478*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23478*0 + 3*146*FLEN/8, x4, x1, x2)

inst_7827:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000007ffffff; valaddr_reg:x3; val_offset:23481*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23481*0 + 3*147*FLEN/8, x4, x1, x2)

inst_7828:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000000fffffff; valaddr_reg:x3; val_offset:23484*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23484*0 + 3*148*FLEN/8, x4, x1, x2)

inst_7829:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000001fffffff; valaddr_reg:x3; val_offset:23487*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23487*0 + 3*149*FLEN/8, x4, x1, x2)

inst_7830:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000003fffffff; valaddr_reg:x3; val_offset:23490*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23490*0 + 3*150*FLEN/8, x4, x1, x2)

inst_7831:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000007fffffff; valaddr_reg:x3; val_offset:23493*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23493*0 + 3*151*FLEN/8, x4, x1, x2)

inst_7832:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00000ffffffff; valaddr_reg:x3; val_offset:23496*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23496*0 + 3*152*FLEN/8, x4, x1, x2)

inst_7833:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00001ffffffff; valaddr_reg:x3; val_offset:23499*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23499*0 + 3*153*FLEN/8, x4, x1, x2)

inst_7834:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00003ffffffff; valaddr_reg:x3; val_offset:23502*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23502*0 + 3*154*FLEN/8, x4, x1, x2)

inst_7835:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00007ffffffff; valaddr_reg:x3; val_offset:23505*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23505*0 + 3*155*FLEN/8, x4, x1, x2)

inst_7836:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0000fffffffff; valaddr_reg:x3; val_offset:23508*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23508*0 + 3*156*FLEN/8, x4, x1, x2)

inst_7837:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0001fffffffff; valaddr_reg:x3; val_offset:23511*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23511*0 + 3*157*FLEN/8, x4, x1, x2)

inst_7838:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0003fffffffff; valaddr_reg:x3; val_offset:23514*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23514*0 + 3*158*FLEN/8, x4, x1, x2)

inst_7839:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0007fffffffff; valaddr_reg:x3; val_offset:23517*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23517*0 + 3*159*FLEN/8, x4, x1, x2)

inst_7840:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb000ffffffffff; valaddr_reg:x3; val_offset:23520*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23520*0 + 3*160*FLEN/8, x4, x1, x2)

inst_7841:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb001ffffffffff; valaddr_reg:x3; val_offset:23523*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23523*0 + 3*161*FLEN/8, x4, x1, x2)

inst_7842:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb003ffffffffff; valaddr_reg:x3; val_offset:23526*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23526*0 + 3*162*FLEN/8, x4, x1, x2)

inst_7843:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb007ffffffffff; valaddr_reg:x3; val_offset:23529*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23529*0 + 3*163*FLEN/8, x4, x1, x2)

inst_7844:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb00fffffffffff; valaddr_reg:x3; val_offset:23532*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23532*0 + 3*164*FLEN/8, x4, x1, x2)

inst_7845:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb01fffffffffff; valaddr_reg:x3; val_offset:23535*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23535*0 + 3*165*FLEN/8, x4, x1, x2)

inst_7846:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb03fffffffffff; valaddr_reg:x3; val_offset:23538*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23538*0 + 3*166*FLEN/8, x4, x1, x2)

inst_7847:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb07fffffffffff; valaddr_reg:x3; val_offset:23541*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23541*0 + 3*167*FLEN/8, x4, x1, x2)

inst_7848:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb0ffffffffffff; valaddr_reg:x3; val_offset:23544*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23544*0 + 3*168*FLEN/8, x4, x1, x2)

inst_7849:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb1ffffffffffff; valaddr_reg:x3; val_offset:23547*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23547*0 + 3*169*FLEN/8, x4, x1, x2)

inst_7850:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb3ffffffffffff; valaddr_reg:x3; val_offset:23550*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23550*0 + 3*170*FLEN/8, x4, x1, x2)

inst_7851:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb7ffffffffffff; valaddr_reg:x3; val_offset:23553*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23553*0 + 3*171*FLEN/8, x4, x1, x2)

inst_7852:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1eb8000000000000; valaddr_reg:x3; val_offset:23556*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23556*0 + 3*172*FLEN/8, x4, x1, x2)

inst_7853:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebc000000000000; valaddr_reg:x3; val_offset:23559*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23559*0 + 3*173*FLEN/8, x4, x1, x2)

inst_7854:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebe000000000000; valaddr_reg:x3; val_offset:23562*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23562*0 + 3*174*FLEN/8, x4, x1, x2)

inst_7855:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebf000000000000; valaddr_reg:x3; val_offset:23565*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23565*0 + 3*175*FLEN/8, x4, x1, x2)

inst_7856:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebf800000000000; valaddr_reg:x3; val_offset:23568*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23568*0 + 3*176*FLEN/8, x4, x1, x2)

inst_7857:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfc00000000000; valaddr_reg:x3; val_offset:23571*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23571*0 + 3*177*FLEN/8, x4, x1, x2)

inst_7858:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfe00000000000; valaddr_reg:x3; val_offset:23574*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23574*0 + 3*178*FLEN/8, x4, x1, x2)

inst_7859:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebff00000000000; valaddr_reg:x3; val_offset:23577*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23577*0 + 3*179*FLEN/8, x4, x1, x2)

inst_7860:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebff80000000000; valaddr_reg:x3; val_offset:23580*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23580*0 + 3*180*FLEN/8, x4, x1, x2)

inst_7861:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffc0000000000; valaddr_reg:x3; val_offset:23583*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23583*0 + 3*181*FLEN/8, x4, x1, x2)

inst_7862:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffe0000000000; valaddr_reg:x3; val_offset:23586*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23586*0 + 3*182*FLEN/8, x4, x1, x2)

inst_7863:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfff0000000000; valaddr_reg:x3; val_offset:23589*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23589*0 + 3*183*FLEN/8, x4, x1, x2)

inst_7864:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfff8000000000; valaddr_reg:x3; val_offset:23592*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23592*0 + 3*184*FLEN/8, x4, x1, x2)

inst_7865:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffc000000000; valaddr_reg:x3; val_offset:23595*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23595*0 + 3*185*FLEN/8, x4, x1, x2)

inst_7866:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffe000000000; valaddr_reg:x3; val_offset:23598*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23598*0 + 3*186*FLEN/8, x4, x1, x2)

inst_7867:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffff000000000; valaddr_reg:x3; val_offset:23601*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23601*0 + 3*187*FLEN/8, x4, x1, x2)

inst_7868:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffff800000000; valaddr_reg:x3; val_offset:23604*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23604*0 + 3*188*FLEN/8, x4, x1, x2)

inst_7869:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffc00000000; valaddr_reg:x3; val_offset:23607*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23607*0 + 3*189*FLEN/8, x4, x1, x2)

inst_7870:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffe00000000; valaddr_reg:x3; val_offset:23610*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23610*0 + 3*190*FLEN/8, x4, x1, x2)

inst_7871:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffff00000000; valaddr_reg:x3; val_offset:23613*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23613*0 + 3*191*FLEN/8, x4, x1, x2)

inst_7872:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffff80000000; valaddr_reg:x3; val_offset:23616*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23616*0 + 3*192*FLEN/8, x4, x1, x2)

inst_7873:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffc0000000; valaddr_reg:x3; val_offset:23619*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23619*0 + 3*193*FLEN/8, x4, x1, x2)

inst_7874:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffe0000000; valaddr_reg:x3; val_offset:23622*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23622*0 + 3*194*FLEN/8, x4, x1, x2)

inst_7875:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffff0000000; valaddr_reg:x3; val_offset:23625*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23625*0 + 3*195*FLEN/8, x4, x1, x2)

inst_7876:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffff8000000; valaddr_reg:x3; val_offset:23628*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23628*0 + 3*196*FLEN/8, x4, x1, x2)

inst_7877:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffc000000; valaddr_reg:x3; val_offset:23631*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23631*0 + 3*197*FLEN/8, x4, x1, x2)

inst_7878:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffe000000; valaddr_reg:x3; val_offset:23634*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23634*0 + 3*198*FLEN/8, x4, x1, x2)

inst_7879:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffff000000; valaddr_reg:x3; val_offset:23637*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23637*0 + 3*199*FLEN/8, x4, x1, x2)

inst_7880:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffff800000; valaddr_reg:x3; val_offset:23640*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23640*0 + 3*200*FLEN/8, x4, x1, x2)

inst_7881:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffc00000; valaddr_reg:x3; val_offset:23643*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23643*0 + 3*201*FLEN/8, x4, x1, x2)

inst_7882:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffe00000; valaddr_reg:x3; val_offset:23646*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23646*0 + 3*202*FLEN/8, x4, x1, x2)

inst_7883:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffff00000; valaddr_reg:x3; val_offset:23649*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23649*0 + 3*203*FLEN/8, x4, x1, x2)

inst_7884:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffff80000; valaddr_reg:x3; val_offset:23652*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23652*0 + 3*204*FLEN/8, x4, x1, x2)

inst_7885:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffc0000; valaddr_reg:x3; val_offset:23655*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23655*0 + 3*205*FLEN/8, x4, x1, x2)

inst_7886:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffe0000; valaddr_reg:x3; val_offset:23658*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23658*0 + 3*206*FLEN/8, x4, x1, x2)

inst_7887:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffff0000; valaddr_reg:x3; val_offset:23661*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23661*0 + 3*207*FLEN/8, x4, x1, x2)

inst_7888:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffff8000; valaddr_reg:x3; val_offset:23664*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23664*0 + 3*208*FLEN/8, x4, x1, x2)

inst_7889:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffffc000; valaddr_reg:x3; val_offset:23667*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23667*0 + 3*209*FLEN/8, x4, x1, x2)

inst_7890:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffffe000; valaddr_reg:x3; val_offset:23670*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23670*0 + 3*210*FLEN/8, x4, x1, x2)

inst_7891:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffff000; valaddr_reg:x3; val_offset:23673*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23673*0 + 3*211*FLEN/8, x4, x1, x2)

inst_7892:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffff800; valaddr_reg:x3; val_offset:23676*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23676*0 + 3*212*FLEN/8, x4, x1, x2)

inst_7893:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffffc00; valaddr_reg:x3; val_offset:23679*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23679*0 + 3*213*FLEN/8, x4, x1, x2)

inst_7894:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffffe00; valaddr_reg:x3; val_offset:23682*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23682*0 + 3*214*FLEN/8, x4, x1, x2)

inst_7895:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffffff00; valaddr_reg:x3; val_offset:23685*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23685*0 + 3*215*FLEN/8, x4, x1, x2)

inst_7896:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffffff80; valaddr_reg:x3; val_offset:23688*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23688*0 + 3*216*FLEN/8, x4, x1, x2)

inst_7897:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffffffc0; valaddr_reg:x3; val_offset:23691*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23691*0 + 3*217*FLEN/8, x4, x1, x2)

inst_7898:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffffffe0; valaddr_reg:x3; val_offset:23694*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23694*0 + 3*218*FLEN/8, x4, x1, x2)

inst_7899:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffffff0; valaddr_reg:x3; val_offset:23697*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23697*0 + 3*219*FLEN/8, x4, x1, x2)

inst_7900:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffffff8; valaddr_reg:x3; val_offset:23700*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23700*0 + 3*220*FLEN/8, x4, x1, x2)

inst_7901:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffffffc; valaddr_reg:x3; val_offset:23703*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23703*0 + 3*221*FLEN/8, x4, x1, x2)

inst_7902:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebffffffffffffe; valaddr_reg:x3; val_offset:23706*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23706*0 + 3*222*FLEN/8, x4, x1, x2)

inst_7903:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x1eb and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x1ebfffffffffffff; valaddr_reg:x3; val_offset:23709*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23709*0 + 3*223*FLEN/8, x4, x1, x2)

inst_7904:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe0000000000001; valaddr_reg:x3; val_offset:23712*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23712*0 + 3*224*FLEN/8, x4, x1, x2)

inst_7905:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe0000000000003; valaddr_reg:x3; val_offset:23715*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23715*0 + 3*225*FLEN/8, x4, x1, x2)

inst_7906:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe0000000000007; valaddr_reg:x3; val_offset:23718*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23718*0 + 3*226*FLEN/8, x4, x1, x2)

inst_7907:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe000000000000f; valaddr_reg:x3; val_offset:23721*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23721*0 + 3*227*FLEN/8, x4, x1, x2)

inst_7908:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe000000000001f; valaddr_reg:x3; val_offset:23724*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23724*0 + 3*228*FLEN/8, x4, x1, x2)

inst_7909:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe000000000003f; valaddr_reg:x3; val_offset:23727*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23727*0 + 3*229*FLEN/8, x4, x1, x2)

inst_7910:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe3333333333333; valaddr_reg:x3; val_offset:23730*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23730*0 + 3*230*FLEN/8, x4, x1, x2)

inst_7911:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe4924924924924; valaddr_reg:x3; val_offset:23733*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23733*0 + 3*231*FLEN/8, x4, x1, x2)

inst_7912:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe6666666666666; valaddr_reg:x3; val_offset:23736*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23736*0 + 3*232*FLEN/8, x4, x1, x2)

inst_7913:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe6db6db6db6db6; valaddr_reg:x3; val_offset:23739*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23739*0 + 3*233*FLEN/8, x4, x1, x2)

inst_7914:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe7777777777777; valaddr_reg:x3; val_offset:23742*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23742*0 + 3*234*FLEN/8, x4, x1, x2)

inst_7915:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe8888888888888; valaddr_reg:x3; val_offset:23745*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23745*0 + 3*235*FLEN/8, x4, x1, x2)

inst_7916:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fe9999999999999; valaddr_reg:x3; val_offset:23748*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23748*0 + 3*236*FLEN/8, x4, x1, x2)

inst_7917:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7feb6db6db6db6db; valaddr_reg:x3; val_offset:23751*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23751*0 + 3*237*FLEN/8, x4, x1, x2)

inst_7918:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7feccccccccccccc; valaddr_reg:x3; val_offset:23754*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23754*0 + 3*238*FLEN/8, x4, x1, x2)

inst_7919:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fedb6db6db6db6d; valaddr_reg:x3; val_offset:23757*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23757*0 + 3*239*FLEN/8, x4, x1, x2)

inst_7920:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fefffffffffffc0; valaddr_reg:x3; val_offset:23760*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23760*0 + 3*240*FLEN/8, x4, x1, x2)

inst_7921:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7fefffffffffffe0; valaddr_reg:x3; val_offset:23763*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23763*0 + 3*241*FLEN/8, x4, x1, x2)

inst_7922:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7feffffffffffff0; valaddr_reg:x3; val_offset:23766*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23766*0 + 3*242*FLEN/8, x4, x1, x2)

inst_7923:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7feffffffffffff8; valaddr_reg:x3; val_offset:23769*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23769*0 + 3*243*FLEN/8, x4, x1, x2)

inst_7924:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7feffffffffffffc; valaddr_reg:x3; val_offset:23772*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23772*0 + 3*244*FLEN/8, x4, x1, x2)

inst_7925:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x095e49094b637 and fs2 == 0 and fe2 == 0x606 and fm2 == 0xedecc3484e3c6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f7095e49094b637; op2val:0x606edecc3484e3c6;
op3val:0x7feffffffffffffe; valaddr_reg:x3; val_offset:23775*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23775*0 + 3*245*FLEN/8, x4, x1, x2)

inst_7926:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000000000; valaddr_reg:x3; val_offset:23778*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23778*0 + 3*246*FLEN/8, x4, x1, x2)

inst_7927:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000000001; valaddr_reg:x3; val_offset:23781*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23781*0 + 3*247*FLEN/8, x4, x1, x2)

inst_7928:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000000003; valaddr_reg:x3; val_offset:23784*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23784*0 + 3*248*FLEN/8, x4, x1, x2)

inst_7929:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000000007; valaddr_reg:x3; val_offset:23787*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23787*0 + 3*249*FLEN/8, x4, x1, x2)

inst_7930:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000000000f; valaddr_reg:x3; val_offset:23790*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23790*0 + 3*250*FLEN/8, x4, x1, x2)

inst_7931:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000000001f; valaddr_reg:x3; val_offset:23793*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23793*0 + 3*251*FLEN/8, x4, x1, x2)

inst_7932:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000000003f; valaddr_reg:x3; val_offset:23796*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23796*0 + 3*252*FLEN/8, x4, x1, x2)

inst_7933:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000000007f; valaddr_reg:x3; val_offset:23799*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23799*0 + 3*253*FLEN/8, x4, x1, x2)

inst_7934:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000000000ff; valaddr_reg:x3; val_offset:23802*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23802*0 + 3*254*FLEN/8, x4, x1, x2)

inst_7935:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000000001ff; valaddr_reg:x3; val_offset:23805*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23805*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_7936:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000000003ff; valaddr_reg:x3; val_offset:23808*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23808*0 + 3*256*FLEN/8, x4, x1, x2)

inst_7937:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000000007ff; valaddr_reg:x3; val_offset:23811*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23811*0 + 3*257*FLEN/8, x4, x1, x2)

inst_7938:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000000fff; valaddr_reg:x3; val_offset:23814*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23814*0 + 3*258*FLEN/8, x4, x1, x2)

inst_7939:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000001fff; valaddr_reg:x3; val_offset:23817*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23817*0 + 3*259*FLEN/8, x4, x1, x2)

inst_7940:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000003fff; valaddr_reg:x3; val_offset:23820*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23820*0 + 3*260*FLEN/8, x4, x1, x2)

inst_7941:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000007fff; valaddr_reg:x3; val_offset:23823*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23823*0 + 3*261*FLEN/8, x4, x1, x2)

inst_7942:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000000ffff; valaddr_reg:x3; val_offset:23826*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23826*0 + 3*262*FLEN/8, x4, x1, x2)

inst_7943:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000001ffff; valaddr_reg:x3; val_offset:23829*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23829*0 + 3*263*FLEN/8, x4, x1, x2)

inst_7944:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000003ffff; valaddr_reg:x3; val_offset:23832*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23832*0 + 3*264*FLEN/8, x4, x1, x2)

inst_7945:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000007ffff; valaddr_reg:x3; val_offset:23835*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23835*0 + 3*265*FLEN/8, x4, x1, x2)

inst_7946:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000000fffff; valaddr_reg:x3; val_offset:23838*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23838*0 + 3*266*FLEN/8, x4, x1, x2)

inst_7947:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000001fffff; valaddr_reg:x3; val_offset:23841*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23841*0 + 3*267*FLEN/8, x4, x1, x2)

inst_7948:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000003fffff; valaddr_reg:x3; val_offset:23844*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23844*0 + 3*268*FLEN/8, x4, x1, x2)

inst_7949:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000007fffff; valaddr_reg:x3; val_offset:23847*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23847*0 + 3*269*FLEN/8, x4, x1, x2)

inst_7950:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000000ffffff; valaddr_reg:x3; val_offset:23850*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23850*0 + 3*270*FLEN/8, x4, x1, x2)

inst_7951:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000001ffffff; valaddr_reg:x3; val_offset:23853*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23853*0 + 3*271*FLEN/8, x4, x1, x2)

inst_7952:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000003ffffff; valaddr_reg:x3; val_offset:23856*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23856*0 + 3*272*FLEN/8, x4, x1, x2)

inst_7953:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000007ffffff; valaddr_reg:x3; val_offset:23859*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23859*0 + 3*273*FLEN/8, x4, x1, x2)

inst_7954:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000000fffffff; valaddr_reg:x3; val_offset:23862*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23862*0 + 3*274*FLEN/8, x4, x1, x2)

inst_7955:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000001fffffff; valaddr_reg:x3; val_offset:23865*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23865*0 + 3*275*FLEN/8, x4, x1, x2)

inst_7956:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000003fffffff; valaddr_reg:x3; val_offset:23868*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23868*0 + 3*276*FLEN/8, x4, x1, x2)

inst_7957:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000007fffffff; valaddr_reg:x3; val_offset:23871*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23871*0 + 3*277*FLEN/8, x4, x1, x2)

inst_7958:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00000ffffffff; valaddr_reg:x3; val_offset:23874*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23874*0 + 3*278*FLEN/8, x4, x1, x2)

inst_7959:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00001ffffffff; valaddr_reg:x3; val_offset:23877*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23877*0 + 3*279*FLEN/8, x4, x1, x2)

inst_7960:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00003ffffffff; valaddr_reg:x3; val_offset:23880*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23880*0 + 3*280*FLEN/8, x4, x1, x2)

inst_7961:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00007ffffffff; valaddr_reg:x3; val_offset:23883*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23883*0 + 3*281*FLEN/8, x4, x1, x2)

inst_7962:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0000fffffffff; valaddr_reg:x3; val_offset:23886*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23886*0 + 3*282*FLEN/8, x4, x1, x2)

inst_7963:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0001fffffffff; valaddr_reg:x3; val_offset:23889*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23889*0 + 3*283*FLEN/8, x4, x1, x2)

inst_7964:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0003fffffffff; valaddr_reg:x3; val_offset:23892*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23892*0 + 3*284*FLEN/8, x4, x1, x2)

inst_7965:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0007fffffffff; valaddr_reg:x3; val_offset:23895*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23895*0 + 3*285*FLEN/8, x4, x1, x2)

inst_7966:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c000ffffffffff; valaddr_reg:x3; val_offset:23898*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23898*0 + 3*286*FLEN/8, x4, x1, x2)

inst_7967:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c001ffffffffff; valaddr_reg:x3; val_offset:23901*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23901*0 + 3*287*FLEN/8, x4, x1, x2)

inst_7968:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c003ffffffffff; valaddr_reg:x3; val_offset:23904*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23904*0 + 3*288*FLEN/8, x4, x1, x2)

inst_7969:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c007ffffffffff; valaddr_reg:x3; val_offset:23907*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23907*0 + 3*289*FLEN/8, x4, x1, x2)

inst_7970:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c00fffffffffff; valaddr_reg:x3; val_offset:23910*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23910*0 + 3*290*FLEN/8, x4, x1, x2)

inst_7971:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c01fffffffffff; valaddr_reg:x3; val_offset:23913*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23913*0 + 3*291*FLEN/8, x4, x1, x2)

inst_7972:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c03fffffffffff; valaddr_reg:x3; val_offset:23916*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23916*0 + 3*292*FLEN/8, x4, x1, x2)

inst_7973:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c07fffffffffff; valaddr_reg:x3; val_offset:23919*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23919*0 + 3*293*FLEN/8, x4, x1, x2)

inst_7974:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c0ffffffffffff; valaddr_reg:x3; val_offset:23922*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23922*0 + 3*294*FLEN/8, x4, x1, x2)

inst_7975:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c1ffffffffffff; valaddr_reg:x3; val_offset:23925*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23925*0 + 3*295*FLEN/8, x4, x1, x2)

inst_7976:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c3ffffffffffff; valaddr_reg:x3; val_offset:23928*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23928*0 + 3*296*FLEN/8, x4, x1, x2)

inst_7977:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c7ffffffffffff; valaddr_reg:x3; val_offset:23931*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23931*0 + 3*297*FLEN/8, x4, x1, x2)

inst_7978:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9c8000000000000; valaddr_reg:x3; val_offset:23934*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23934*0 + 3*298*FLEN/8, x4, x1, x2)

inst_7979:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cc000000000000; valaddr_reg:x3; val_offset:23937*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23937*0 + 3*299*FLEN/8, x4, x1, x2)

inst_7980:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9ce000000000000; valaddr_reg:x3; val_offset:23940*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23940*0 + 3*300*FLEN/8, x4, x1, x2)

inst_7981:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cf000000000000; valaddr_reg:x3; val_offset:23943*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23943*0 + 3*301*FLEN/8, x4, x1, x2)

inst_7982:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cf800000000000; valaddr_reg:x3; val_offset:23946*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23946*0 + 3*302*FLEN/8, x4, x1, x2)

inst_7983:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfc00000000000; valaddr_reg:x3; val_offset:23949*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23949*0 + 3*303*FLEN/8, x4, x1, x2)

inst_7984:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfe00000000000; valaddr_reg:x3; val_offset:23952*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23952*0 + 3*304*FLEN/8, x4, x1, x2)

inst_7985:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cff00000000000; valaddr_reg:x3; val_offset:23955*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23955*0 + 3*305*FLEN/8, x4, x1, x2)

inst_7986:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cff80000000000; valaddr_reg:x3; val_offset:23958*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23958*0 + 3*306*FLEN/8, x4, x1, x2)

inst_7987:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffc0000000000; valaddr_reg:x3; val_offset:23961*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23961*0 + 3*307*FLEN/8, x4, x1, x2)

inst_7988:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffe0000000000; valaddr_reg:x3; val_offset:23964*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23964*0 + 3*308*FLEN/8, x4, x1, x2)

inst_7989:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfff0000000000; valaddr_reg:x3; val_offset:23967*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23967*0 + 3*309*FLEN/8, x4, x1, x2)

inst_7990:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfff8000000000; valaddr_reg:x3; val_offset:23970*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23970*0 + 3*310*FLEN/8, x4, x1, x2)

inst_7991:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffc000000000; valaddr_reg:x3; val_offset:23973*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23973*0 + 3*311*FLEN/8, x4, x1, x2)

inst_7992:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffe000000000; valaddr_reg:x3; val_offset:23976*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23976*0 + 3*312*FLEN/8, x4, x1, x2)

inst_7993:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffff000000000; valaddr_reg:x3; val_offset:23979*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23979*0 + 3*313*FLEN/8, x4, x1, x2)

inst_7994:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffff800000000; valaddr_reg:x3; val_offset:23982*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23982*0 + 3*314*FLEN/8, x4, x1, x2)

inst_7995:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffc00000000; valaddr_reg:x3; val_offset:23985*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23985*0 + 3*315*FLEN/8, x4, x1, x2)

inst_7996:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffe00000000; valaddr_reg:x3; val_offset:23988*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23988*0 + 3*316*FLEN/8, x4, x1, x2)

inst_7997:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffff00000000; valaddr_reg:x3; val_offset:23991*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23991*0 + 3*317*FLEN/8, x4, x1, x2)

inst_7998:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffff80000000; valaddr_reg:x3; val_offset:23994*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23994*0 + 3*318*FLEN/8, x4, x1, x2)

inst_7999:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffc0000000; valaddr_reg:x3; val_offset:23997*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 23997*0 + 3*319*FLEN/8, x4, x1, x2)

inst_8000:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffe0000000; valaddr_reg:x3; val_offset:24000*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24000*0 + 3*320*FLEN/8, x4, x1, x2)

inst_8001:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffff0000000; valaddr_reg:x3; val_offset:24003*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24003*0 + 3*321*FLEN/8, x4, x1, x2)

inst_8002:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffff8000000; valaddr_reg:x3; val_offset:24006*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24006*0 + 3*322*FLEN/8, x4, x1, x2)

inst_8003:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffc000000; valaddr_reg:x3; val_offset:24009*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24009*0 + 3*323*FLEN/8, x4, x1, x2)

inst_8004:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffe000000; valaddr_reg:x3; val_offset:24012*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24012*0 + 3*324*FLEN/8, x4, x1, x2)

inst_8005:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffff000000; valaddr_reg:x3; val_offset:24015*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24015*0 + 3*325*FLEN/8, x4, x1, x2)

inst_8006:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffff800000; valaddr_reg:x3; val_offset:24018*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24018*0 + 3*326*FLEN/8, x4, x1, x2)

inst_8007:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffc00000; valaddr_reg:x3; val_offset:24021*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24021*0 + 3*327*FLEN/8, x4, x1, x2)

inst_8008:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffe00000; valaddr_reg:x3; val_offset:24024*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24024*0 + 3*328*FLEN/8, x4, x1, x2)

inst_8009:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffff00000; valaddr_reg:x3; val_offset:24027*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24027*0 + 3*329*FLEN/8, x4, x1, x2)

inst_8010:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffff80000; valaddr_reg:x3; val_offset:24030*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24030*0 + 3*330*FLEN/8, x4, x1, x2)

inst_8011:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffc0000; valaddr_reg:x3; val_offset:24033*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24033*0 + 3*331*FLEN/8, x4, x1, x2)

inst_8012:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffe0000; valaddr_reg:x3; val_offset:24036*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24036*0 + 3*332*FLEN/8, x4, x1, x2)

inst_8013:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffff0000; valaddr_reg:x3; val_offset:24039*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24039*0 + 3*333*FLEN/8, x4, x1, x2)

inst_8014:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffff8000; valaddr_reg:x3; val_offset:24042*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24042*0 + 3*334*FLEN/8, x4, x1, x2)

inst_8015:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffffc000; valaddr_reg:x3; val_offset:24045*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24045*0 + 3*335*FLEN/8, x4, x1, x2)

inst_8016:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffffe000; valaddr_reg:x3; val_offset:24048*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24048*0 + 3*336*FLEN/8, x4, x1, x2)

inst_8017:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffff000; valaddr_reg:x3; val_offset:24051*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24051*0 + 3*337*FLEN/8, x4, x1, x2)

inst_8018:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffff800; valaddr_reg:x3; val_offset:24054*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24054*0 + 3*338*FLEN/8, x4, x1, x2)

inst_8019:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffffc00; valaddr_reg:x3; val_offset:24057*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24057*0 + 3*339*FLEN/8, x4, x1, x2)

inst_8020:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffffe00; valaddr_reg:x3; val_offset:24060*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24060*0 + 3*340*FLEN/8, x4, x1, x2)

inst_8021:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffffff00; valaddr_reg:x3; val_offset:24063*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24063*0 + 3*341*FLEN/8, x4, x1, x2)

inst_8022:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffffff80; valaddr_reg:x3; val_offset:24066*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24066*0 + 3*342*FLEN/8, x4, x1, x2)

inst_8023:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffffffc0; valaddr_reg:x3; val_offset:24069*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24069*0 + 3*343*FLEN/8, x4, x1, x2)

inst_8024:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffffffe0; valaddr_reg:x3; val_offset:24072*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24072*0 + 3*344*FLEN/8, x4, x1, x2)

inst_8025:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffffff0; valaddr_reg:x3; val_offset:24075*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24075*0 + 3*345*FLEN/8, x4, x1, x2)

inst_8026:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffffff8; valaddr_reg:x3; val_offset:24078*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24078*0 + 3*346*FLEN/8, x4, x1, x2)

inst_8027:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffffffc; valaddr_reg:x3; val_offset:24081*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24081*0 + 3*347*FLEN/8, x4, x1, x2)

inst_8028:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cffffffffffffe; valaddr_reg:x3; val_offset:24084*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24084*0 + 3*348*FLEN/8, x4, x1, x2)

inst_8029:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x39c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xb9cfffffffffffff; valaddr_reg:x3; val_offset:24087*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24087*0 + 3*349*FLEN/8, x4, x1, x2)

inst_8030:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:24090*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24090*0 + 3*350*FLEN/8, x4, x1, x2)

inst_8031:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:24093*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24093*0 + 3*351*FLEN/8, x4, x1, x2)

inst_8032:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:24096*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24096*0 + 3*352*FLEN/8, x4, x1, x2)

inst_8033:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:24099*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24099*0 + 3*353*FLEN/8, x4, x1, x2)

inst_8034:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:24102*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24102*0 + 3*354*FLEN/8, x4, x1, x2)

inst_8035:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:24105*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24105*0 + 3*355*FLEN/8, x4, x1, x2)

inst_8036:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:24108*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24108*0 + 3*356*FLEN/8, x4, x1, x2)

inst_8037:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:24111*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24111*0 + 3*357*FLEN/8, x4, x1, x2)

inst_8038:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:24114*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24114*0 + 3*358*FLEN/8, x4, x1, x2)

inst_8039:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:24117*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24117*0 + 3*359*FLEN/8, x4, x1, x2)

inst_8040:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:24120*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24120*0 + 3*360*FLEN/8, x4, x1, x2)

inst_8041:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:24123*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24123*0 + 3*361*FLEN/8, x4, x1, x2)

inst_8042:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:24126*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24126*0 + 3*362*FLEN/8, x4, x1, x2)

inst_8043:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:24129*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24129*0 + 3*363*FLEN/8, x4, x1, x2)

inst_8044:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:24132*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24132*0 + 3*364*FLEN/8, x4, x1, x2)

inst_8045:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:24135*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24135*0 + 3*365*FLEN/8, x4, x1, x2)

inst_8046:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:24138*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24138*0 + 3*366*FLEN/8, x4, x1, x2)

inst_8047:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:24141*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24141*0 + 3*367*FLEN/8, x4, x1, x2)

inst_8048:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:24144*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24144*0 + 3*368*FLEN/8, x4, x1, x2)

inst_8049:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:24147*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24147*0 + 3*369*FLEN/8, x4, x1, x2)

inst_8050:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:24150*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24150*0 + 3*370*FLEN/8, x4, x1, x2)

inst_8051:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0da8a99d945d7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe610e71f60d8d and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70da8a99d945d7; op2val:0x9ffe610e71f60d8d;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:24153*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24153*0 + 3*371*FLEN/8, x4, x1, x2)

inst_8052:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000000000; valaddr_reg:x3; val_offset:24156*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24156*0 + 3*372*FLEN/8, x4, x1, x2)

inst_8053:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000000001; valaddr_reg:x3; val_offset:24159*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24159*0 + 3*373*FLEN/8, x4, x1, x2)

inst_8054:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000000003; valaddr_reg:x3; val_offset:24162*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24162*0 + 3*374*FLEN/8, x4, x1, x2)

inst_8055:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000000007; valaddr_reg:x3; val_offset:24165*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24165*0 + 3*375*FLEN/8, x4, x1, x2)

inst_8056:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000000000f; valaddr_reg:x3; val_offset:24168*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24168*0 + 3*376*FLEN/8, x4, x1, x2)

inst_8057:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000000001f; valaddr_reg:x3; val_offset:24171*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24171*0 + 3*377*FLEN/8, x4, x1, x2)

inst_8058:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000000003f; valaddr_reg:x3; val_offset:24174*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24174*0 + 3*378*FLEN/8, x4, x1, x2)

inst_8059:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000000007f; valaddr_reg:x3; val_offset:24177*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24177*0 + 3*379*FLEN/8, x4, x1, x2)

inst_8060:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000000000ff; valaddr_reg:x3; val_offset:24180*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24180*0 + 3*380*FLEN/8, x4, x1, x2)

inst_8061:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000000001ff; valaddr_reg:x3; val_offset:24183*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24183*0 + 3*381*FLEN/8, x4, x1, x2)

inst_8062:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000000003ff; valaddr_reg:x3; val_offset:24186*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24186*0 + 3*382*FLEN/8, x4, x1, x2)

inst_8063:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000000007ff; valaddr_reg:x3; val_offset:24189*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24189*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_8064:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000000fff; valaddr_reg:x3; val_offset:24192*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24192*0 + 3*384*FLEN/8, x4, x1, x2)

inst_8065:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000001fff; valaddr_reg:x3; val_offset:24195*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24195*0 + 3*385*FLEN/8, x4, x1, x2)

inst_8066:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000003fff; valaddr_reg:x3; val_offset:24198*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24198*0 + 3*386*FLEN/8, x4, x1, x2)

inst_8067:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000007fff; valaddr_reg:x3; val_offset:24201*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24201*0 + 3*387*FLEN/8, x4, x1, x2)

inst_8068:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000000ffff; valaddr_reg:x3; val_offset:24204*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24204*0 + 3*388*FLEN/8, x4, x1, x2)

inst_8069:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000001ffff; valaddr_reg:x3; val_offset:24207*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24207*0 + 3*389*FLEN/8, x4, x1, x2)

inst_8070:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000003ffff; valaddr_reg:x3; val_offset:24210*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24210*0 + 3*390*FLEN/8, x4, x1, x2)

inst_8071:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000007ffff; valaddr_reg:x3; val_offset:24213*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24213*0 + 3*391*FLEN/8, x4, x1, x2)

inst_8072:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000000fffff; valaddr_reg:x3; val_offset:24216*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24216*0 + 3*392*FLEN/8, x4, x1, x2)

inst_8073:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000001fffff; valaddr_reg:x3; val_offset:24219*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24219*0 + 3*393*FLEN/8, x4, x1, x2)

inst_8074:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000003fffff; valaddr_reg:x3; val_offset:24222*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24222*0 + 3*394*FLEN/8, x4, x1, x2)

inst_8075:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000007fffff; valaddr_reg:x3; val_offset:24225*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24225*0 + 3*395*FLEN/8, x4, x1, x2)

inst_8076:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000000ffffff; valaddr_reg:x3; val_offset:24228*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24228*0 + 3*396*FLEN/8, x4, x1, x2)

inst_8077:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000001ffffff; valaddr_reg:x3; val_offset:24231*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24231*0 + 3*397*FLEN/8, x4, x1, x2)

inst_8078:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000003ffffff; valaddr_reg:x3; val_offset:24234*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24234*0 + 3*398*FLEN/8, x4, x1, x2)

inst_8079:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000007ffffff; valaddr_reg:x3; val_offset:24237*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24237*0 + 3*399*FLEN/8, x4, x1, x2)

inst_8080:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000000fffffff; valaddr_reg:x3; val_offset:24240*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24240*0 + 3*400*FLEN/8, x4, x1, x2)

inst_8081:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000001fffffff; valaddr_reg:x3; val_offset:24243*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24243*0 + 3*401*FLEN/8, x4, x1, x2)

inst_8082:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000003fffffff; valaddr_reg:x3; val_offset:24246*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24246*0 + 3*402*FLEN/8, x4, x1, x2)

inst_8083:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000007fffffff; valaddr_reg:x3; val_offset:24249*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24249*0 + 3*403*FLEN/8, x4, x1, x2)

inst_8084:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00000ffffffff; valaddr_reg:x3; val_offset:24252*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24252*0 + 3*404*FLEN/8, x4, x1, x2)

inst_8085:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00001ffffffff; valaddr_reg:x3; val_offset:24255*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24255*0 + 3*405*FLEN/8, x4, x1, x2)

inst_8086:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00003ffffffff; valaddr_reg:x3; val_offset:24258*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24258*0 + 3*406*FLEN/8, x4, x1, x2)

inst_8087:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00007ffffffff; valaddr_reg:x3; val_offset:24261*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24261*0 + 3*407*FLEN/8, x4, x1, x2)

inst_8088:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0000fffffffff; valaddr_reg:x3; val_offset:24264*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24264*0 + 3*408*FLEN/8, x4, x1, x2)

inst_8089:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0001fffffffff; valaddr_reg:x3; val_offset:24267*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24267*0 + 3*409*FLEN/8, x4, x1, x2)

inst_8090:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0003fffffffff; valaddr_reg:x3; val_offset:24270*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24270*0 + 3*410*FLEN/8, x4, x1, x2)

inst_8091:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0007fffffffff; valaddr_reg:x3; val_offset:24273*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24273*0 + 3*411*FLEN/8, x4, x1, x2)

inst_8092:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda000ffffffffff; valaddr_reg:x3; val_offset:24276*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24276*0 + 3*412*FLEN/8, x4, x1, x2)

inst_8093:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda001ffffffffff; valaddr_reg:x3; val_offset:24279*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24279*0 + 3*413*FLEN/8, x4, x1, x2)

inst_8094:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda003ffffffffff; valaddr_reg:x3; val_offset:24282*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24282*0 + 3*414*FLEN/8, x4, x1, x2)

inst_8095:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda007ffffffffff; valaddr_reg:x3; val_offset:24285*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24285*0 + 3*415*FLEN/8, x4, x1, x2)

inst_8096:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda00fffffffffff; valaddr_reg:x3; val_offset:24288*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24288*0 + 3*416*FLEN/8, x4, x1, x2)

inst_8097:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda01fffffffffff; valaddr_reg:x3; val_offset:24291*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24291*0 + 3*417*FLEN/8, x4, x1, x2)

inst_8098:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda03fffffffffff; valaddr_reg:x3; val_offset:24294*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24294*0 + 3*418*FLEN/8, x4, x1, x2)

inst_8099:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda07fffffffffff; valaddr_reg:x3; val_offset:24297*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24297*0 + 3*419*FLEN/8, x4, x1, x2)

inst_8100:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda0ffffffffffff; valaddr_reg:x3; val_offset:24300*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24300*0 + 3*420*FLEN/8, x4, x1, x2)

inst_8101:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda1ffffffffffff; valaddr_reg:x3; val_offset:24303*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24303*0 + 3*421*FLEN/8, x4, x1, x2)

inst_8102:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda3ffffffffffff; valaddr_reg:x3; val_offset:24306*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24306*0 + 3*422*FLEN/8, x4, x1, x2)

inst_8103:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda7ffffffffffff; valaddr_reg:x3; val_offset:24309*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24309*0 + 3*423*FLEN/8, x4, x1, x2)

inst_8104:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbda8000000000000; valaddr_reg:x3; val_offset:24312*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24312*0 + 3*424*FLEN/8, x4, x1, x2)

inst_8105:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdac000000000000; valaddr_reg:x3; val_offset:24315*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24315*0 + 3*425*FLEN/8, x4, x1, x2)

inst_8106:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdae000000000000; valaddr_reg:x3; val_offset:24318*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24318*0 + 3*426*FLEN/8, x4, x1, x2)

inst_8107:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaf000000000000; valaddr_reg:x3; val_offset:24321*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24321*0 + 3*427*FLEN/8, x4, x1, x2)

inst_8108:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaf800000000000; valaddr_reg:x3; val_offset:24324*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24324*0 + 3*428*FLEN/8, x4, x1, x2)

inst_8109:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafc00000000000; valaddr_reg:x3; val_offset:24327*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24327*0 + 3*429*FLEN/8, x4, x1, x2)

inst_8110:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafe00000000000; valaddr_reg:x3; val_offset:24330*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24330*0 + 3*430*FLEN/8, x4, x1, x2)

inst_8111:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaff00000000000; valaddr_reg:x3; val_offset:24333*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24333*0 + 3*431*FLEN/8, x4, x1, x2)

inst_8112:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaff80000000000; valaddr_reg:x3; val_offset:24336*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24336*0 + 3*432*FLEN/8, x4, x1, x2)

inst_8113:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffc0000000000; valaddr_reg:x3; val_offset:24339*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24339*0 + 3*433*FLEN/8, x4, x1, x2)

inst_8114:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffe0000000000; valaddr_reg:x3; val_offset:24342*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24342*0 + 3*434*FLEN/8, x4, x1, x2)

inst_8115:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafff0000000000; valaddr_reg:x3; val_offset:24345*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24345*0 + 3*435*FLEN/8, x4, x1, x2)

inst_8116:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafff8000000000; valaddr_reg:x3; val_offset:24348*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24348*0 + 3*436*FLEN/8, x4, x1, x2)

inst_8117:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffc000000000; valaddr_reg:x3; val_offset:24351*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24351*0 + 3*437*FLEN/8, x4, x1, x2)

inst_8118:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffe000000000; valaddr_reg:x3; val_offset:24354*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24354*0 + 3*438*FLEN/8, x4, x1, x2)

inst_8119:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffff000000000; valaddr_reg:x3; val_offset:24357*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24357*0 + 3*439*FLEN/8, x4, x1, x2)

inst_8120:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffff800000000; valaddr_reg:x3; val_offset:24360*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24360*0 + 3*440*FLEN/8, x4, x1, x2)

inst_8121:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffc00000000; valaddr_reg:x3; val_offset:24363*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24363*0 + 3*441*FLEN/8, x4, x1, x2)

inst_8122:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffe00000000; valaddr_reg:x3; val_offset:24366*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24366*0 + 3*442*FLEN/8, x4, x1, x2)

inst_8123:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffff00000000; valaddr_reg:x3; val_offset:24369*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24369*0 + 3*443*FLEN/8, x4, x1, x2)

inst_8124:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffff80000000; valaddr_reg:x3; val_offset:24372*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24372*0 + 3*444*FLEN/8, x4, x1, x2)

inst_8125:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffc0000000; valaddr_reg:x3; val_offset:24375*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24375*0 + 3*445*FLEN/8, x4, x1, x2)

inst_8126:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffe0000000; valaddr_reg:x3; val_offset:24378*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24378*0 + 3*446*FLEN/8, x4, x1, x2)

inst_8127:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffff0000000; valaddr_reg:x3; val_offset:24381*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24381*0 + 3*447*FLEN/8, x4, x1, x2)

inst_8128:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffff8000000; valaddr_reg:x3; val_offset:24384*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24384*0 + 3*448*FLEN/8, x4, x1, x2)

inst_8129:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffc000000; valaddr_reg:x3; val_offset:24387*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24387*0 + 3*449*FLEN/8, x4, x1, x2)

inst_8130:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffe000000; valaddr_reg:x3; val_offset:24390*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24390*0 + 3*450*FLEN/8, x4, x1, x2)

inst_8131:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffff000000; valaddr_reg:x3; val_offset:24393*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24393*0 + 3*451*FLEN/8, x4, x1, x2)

inst_8132:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffff800000; valaddr_reg:x3; val_offset:24396*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24396*0 + 3*452*FLEN/8, x4, x1, x2)

inst_8133:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffc00000; valaddr_reg:x3; val_offset:24399*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24399*0 + 3*453*FLEN/8, x4, x1, x2)

inst_8134:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffe00000; valaddr_reg:x3; val_offset:24402*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24402*0 + 3*454*FLEN/8, x4, x1, x2)

inst_8135:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffff00000; valaddr_reg:x3; val_offset:24405*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24405*0 + 3*455*FLEN/8, x4, x1, x2)

inst_8136:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffff80000; valaddr_reg:x3; val_offset:24408*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24408*0 + 3*456*FLEN/8, x4, x1, x2)

inst_8137:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffc0000; valaddr_reg:x3; val_offset:24411*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24411*0 + 3*457*FLEN/8, x4, x1, x2)

inst_8138:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffe0000; valaddr_reg:x3; val_offset:24414*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24414*0 + 3*458*FLEN/8, x4, x1, x2)

inst_8139:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffff0000; valaddr_reg:x3; val_offset:24417*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24417*0 + 3*459*FLEN/8, x4, x1, x2)

inst_8140:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffff8000; valaddr_reg:x3; val_offset:24420*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24420*0 + 3*460*FLEN/8, x4, x1, x2)

inst_8141:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffffc000; valaddr_reg:x3; val_offset:24423*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24423*0 + 3*461*FLEN/8, x4, x1, x2)

inst_8142:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffffe000; valaddr_reg:x3; val_offset:24426*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24426*0 + 3*462*FLEN/8, x4, x1, x2)

inst_8143:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffff000; valaddr_reg:x3; val_offset:24429*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24429*0 + 3*463*FLEN/8, x4, x1, x2)

inst_8144:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffff800; valaddr_reg:x3; val_offset:24432*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24432*0 + 3*464*FLEN/8, x4, x1, x2)

inst_8145:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffffc00; valaddr_reg:x3; val_offset:24435*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24435*0 + 3*465*FLEN/8, x4, x1, x2)

inst_8146:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffffe00; valaddr_reg:x3; val_offset:24438*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24438*0 + 3*466*FLEN/8, x4, x1, x2)

inst_8147:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffffff00; valaddr_reg:x3; val_offset:24441*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24441*0 + 3*467*FLEN/8, x4, x1, x2)

inst_8148:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffffff80; valaddr_reg:x3; val_offset:24444*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24444*0 + 3*468*FLEN/8, x4, x1, x2)

inst_8149:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffffffc0; valaddr_reg:x3; val_offset:24447*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24447*0 + 3*469*FLEN/8, x4, x1, x2)

inst_8150:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffffffe0; valaddr_reg:x3; val_offset:24450*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24450*0 + 3*470*FLEN/8, x4, x1, x2)

inst_8151:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffffff0; valaddr_reg:x3; val_offset:24453*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24453*0 + 3*471*FLEN/8, x4, x1, x2)

inst_8152:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffffff8; valaddr_reg:x3; val_offset:24456*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24456*0 + 3*472*FLEN/8, x4, x1, x2)

inst_8153:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffffffc; valaddr_reg:x3; val_offset:24459*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24459*0 + 3*473*FLEN/8, x4, x1, x2)

inst_8154:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdaffffffffffffe; valaddr_reg:x3; val_offset:24462*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24462*0 + 3*474*FLEN/8, x4, x1, x2)

inst_8155:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3da and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbdafffffffffffff; valaddr_reg:x3; val_offset:24465*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24465*0 + 3*475*FLEN/8, x4, x1, x2)

inst_8156:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:24468*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24468*0 + 3*476*FLEN/8, x4, x1, x2)

inst_8157:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:24471*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24471*0 + 3*477*FLEN/8, x4, x1, x2)

inst_8158:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:24474*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24474*0 + 3*478*FLEN/8, x4, x1, x2)

inst_8159:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:24477*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24477*0 + 3*479*FLEN/8, x4, x1, x2)

inst_8160:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:24480*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24480*0 + 3*480*FLEN/8, x4, x1, x2)

inst_8161:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:24483*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24483*0 + 3*481*FLEN/8, x4, x1, x2)

inst_8162:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:24486*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24486*0 + 3*482*FLEN/8, x4, x1, x2)

inst_8163:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:24489*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24489*0 + 3*483*FLEN/8, x4, x1, x2)

inst_8164:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:24492*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24492*0 + 3*484*FLEN/8, x4, x1, x2)

inst_8165:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:24495*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24495*0 + 3*485*FLEN/8, x4, x1, x2)

inst_8166:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:24498*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24498*0 + 3*486*FLEN/8, x4, x1, x2)

inst_8167:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:24501*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24501*0 + 3*487*FLEN/8, x4, x1, x2)

inst_8168:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:24504*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24504*0 + 3*488*FLEN/8, x4, x1, x2)

inst_8169:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:24507*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24507*0 + 3*489*FLEN/8, x4, x1, x2)

inst_8170:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:24510*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24510*0 + 3*490*FLEN/8, x4, x1, x2)

inst_8171:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:24513*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24513*0 + 3*491*FLEN/8, x4, x1, x2)

inst_8172:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:24516*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24516*0 + 3*492*FLEN/8, x4, x1, x2)

inst_8173:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:24519*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24519*0 + 3*493*FLEN/8, x4, x1, x2)

inst_8174:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:24522*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24522*0 + 3*494*FLEN/8, x4, x1, x2)

inst_8175:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:24525*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24525*0 + 3*495*FLEN/8, x4, x1, x2)

inst_8176:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:24528*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24528*0 + 3*496*FLEN/8, x4, x1, x2)

inst_8177:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x0fce9799927f7 and fs2 == 1 and fe2 == 0x1ff and fm2 == 0xe2397a08240cb and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f70fce9799927f7; op2val:0x9ffe2397a08240cb;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:24531*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24531*0 + 3*497*FLEN/8, x4, x1, x2)

inst_8178:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:24534*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24534*0 + 3*498*FLEN/8, x4, x1, x2)

inst_8179:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:24537*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24537*0 + 3*499*FLEN/8, x4, x1, x2)

inst_8180:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:24540*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24540*0 + 3*500*FLEN/8, x4, x1, x2)

inst_8181:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:24543*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24543*0 + 3*501*FLEN/8, x4, x1, x2)

inst_8182:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:24546*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24546*0 + 3*502*FLEN/8, x4, x1, x2)

inst_8183:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:24549*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24549*0 + 3*503*FLEN/8, x4, x1, x2)

inst_8184:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:24552*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24552*0 + 3*504*FLEN/8, x4, x1, x2)

inst_8185:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:24555*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24555*0 + 3*505*FLEN/8, x4, x1, x2)

inst_8186:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:24558*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24558*0 + 3*506*FLEN/8, x4, x1, x2)

inst_8187:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:24561*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24561*0 + 3*507*FLEN/8, x4, x1, x2)

inst_8188:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:24564*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24564*0 + 3*508*FLEN/8, x4, x1, x2)

inst_8189:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:24567*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24567*0 + 3*509*FLEN/8, x4, x1, x2)

inst_8190:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:24570*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24570*0 + 3*510*FLEN/8, x4, x1, x2)

inst_8191:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:24573*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24573*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_8192:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:24576*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24576*0 + 3*512*FLEN/8, x4, x1, x2)

inst_8193:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:24579*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24579*0 + 3*513*FLEN/8, x4, x1, x2)

inst_8194:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:24582*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24582*0 + 3*514*FLEN/8, x4, x1, x2)

inst_8195:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:24585*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24585*0 + 3*515*FLEN/8, x4, x1, x2)

inst_8196:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:24588*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24588*0 + 3*516*FLEN/8, x4, x1, x2)

inst_8197:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:24591*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24591*0 + 3*517*FLEN/8, x4, x1, x2)

inst_8198:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:24594*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24594*0 + 3*518*FLEN/8, x4, x1, x2)

inst_8199:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:24597*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24597*0 + 3*519*FLEN/8, x4, x1, x2)

inst_8200:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000000000; valaddr_reg:x3; val_offset:24600*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24600*0 + 3*520*FLEN/8, x4, x1, x2)

inst_8201:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000000001; valaddr_reg:x3; val_offset:24603*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24603*0 + 3*521*FLEN/8, x4, x1, x2)

inst_8202:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000000003; valaddr_reg:x3; val_offset:24606*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24606*0 + 3*522*FLEN/8, x4, x1, x2)

inst_8203:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000000007; valaddr_reg:x3; val_offset:24609*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24609*0 + 3*523*FLEN/8, x4, x1, x2)

inst_8204:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000000000f; valaddr_reg:x3; val_offset:24612*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24612*0 + 3*524*FLEN/8, x4, x1, x2)

inst_8205:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000000001f; valaddr_reg:x3; val_offset:24615*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24615*0 + 3*525*FLEN/8, x4, x1, x2)

inst_8206:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000000003f; valaddr_reg:x3; val_offset:24618*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24618*0 + 3*526*FLEN/8, x4, x1, x2)

inst_8207:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000000007f; valaddr_reg:x3; val_offset:24621*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24621*0 + 3*527*FLEN/8, x4, x1, x2)

inst_8208:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000000000ff; valaddr_reg:x3; val_offset:24624*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24624*0 + 3*528*FLEN/8, x4, x1, x2)

inst_8209:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000000001ff; valaddr_reg:x3; val_offset:24627*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24627*0 + 3*529*FLEN/8, x4, x1, x2)

inst_8210:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000000003ff; valaddr_reg:x3; val_offset:24630*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24630*0 + 3*530*FLEN/8, x4, x1, x2)

inst_8211:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000000007ff; valaddr_reg:x3; val_offset:24633*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24633*0 + 3*531*FLEN/8, x4, x1, x2)

inst_8212:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000000fff; valaddr_reg:x3; val_offset:24636*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24636*0 + 3*532*FLEN/8, x4, x1, x2)

inst_8213:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000001fff; valaddr_reg:x3; val_offset:24639*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24639*0 + 3*533*FLEN/8, x4, x1, x2)

inst_8214:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000003fff; valaddr_reg:x3; val_offset:24642*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24642*0 + 3*534*FLEN/8, x4, x1, x2)

inst_8215:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000007fff; valaddr_reg:x3; val_offset:24645*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24645*0 + 3*535*FLEN/8, x4, x1, x2)

inst_8216:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000000ffff; valaddr_reg:x3; val_offset:24648*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24648*0 + 3*536*FLEN/8, x4, x1, x2)

inst_8217:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000001ffff; valaddr_reg:x3; val_offset:24651*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24651*0 + 3*537*FLEN/8, x4, x1, x2)

inst_8218:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000003ffff; valaddr_reg:x3; val_offset:24654*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24654*0 + 3*538*FLEN/8, x4, x1, x2)

inst_8219:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000007ffff; valaddr_reg:x3; val_offset:24657*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24657*0 + 3*539*FLEN/8, x4, x1, x2)

inst_8220:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000000fffff; valaddr_reg:x3; val_offset:24660*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24660*0 + 3*540*FLEN/8, x4, x1, x2)

inst_8221:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000001fffff; valaddr_reg:x3; val_offset:24663*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24663*0 + 3*541*FLEN/8, x4, x1, x2)

inst_8222:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000003fffff; valaddr_reg:x3; val_offset:24666*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24666*0 + 3*542*FLEN/8, x4, x1, x2)

inst_8223:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000007fffff; valaddr_reg:x3; val_offset:24669*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24669*0 + 3*543*FLEN/8, x4, x1, x2)

inst_8224:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000000ffffff; valaddr_reg:x3; val_offset:24672*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24672*0 + 3*544*FLEN/8, x4, x1, x2)

inst_8225:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000001ffffff; valaddr_reg:x3; val_offset:24675*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24675*0 + 3*545*FLEN/8, x4, x1, x2)

inst_8226:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000003ffffff; valaddr_reg:x3; val_offset:24678*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24678*0 + 3*546*FLEN/8, x4, x1, x2)

inst_8227:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000007ffffff; valaddr_reg:x3; val_offset:24681*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24681*0 + 3*547*FLEN/8, x4, x1, x2)

inst_8228:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000000fffffff; valaddr_reg:x3; val_offset:24684*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24684*0 + 3*548*FLEN/8, x4, x1, x2)

inst_8229:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000001fffffff; valaddr_reg:x3; val_offset:24687*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24687*0 + 3*549*FLEN/8, x4, x1, x2)

inst_8230:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000003fffffff; valaddr_reg:x3; val_offset:24690*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24690*0 + 3*550*FLEN/8, x4, x1, x2)

inst_8231:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000007fffffff; valaddr_reg:x3; val_offset:24693*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24693*0 + 3*551*FLEN/8, x4, x1, x2)

inst_8232:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000000ffffffff; valaddr_reg:x3; val_offset:24696*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24696*0 + 3*552*FLEN/8, x4, x1, x2)

inst_8233:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000001ffffffff; valaddr_reg:x3; val_offset:24699*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24699*0 + 3*553*FLEN/8, x4, x1, x2)

inst_8234:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000003ffffffff; valaddr_reg:x3; val_offset:24702*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24702*0 + 3*554*FLEN/8, x4, x1, x2)

inst_8235:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000007ffffffff; valaddr_reg:x3; val_offset:24705*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24705*0 + 3*555*FLEN/8, x4, x1, x2)

inst_8236:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300000fffffffff; valaddr_reg:x3; val_offset:24708*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24708*0 + 3*556*FLEN/8, x4, x1, x2)

inst_8237:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300001fffffffff; valaddr_reg:x3; val_offset:24711*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24711*0 + 3*557*FLEN/8, x4, x1, x2)

inst_8238:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300003fffffffff; valaddr_reg:x3; val_offset:24714*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24714*0 + 3*558*FLEN/8, x4, x1, x2)

inst_8239:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300007fffffffff; valaddr_reg:x3; val_offset:24717*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24717*0 + 3*559*FLEN/8, x4, x1, x2)

inst_8240:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830000ffffffffff; valaddr_reg:x3; val_offset:24720*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24720*0 + 3*560*FLEN/8, x4, x1, x2)

inst_8241:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830001ffffffffff; valaddr_reg:x3; val_offset:24723*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24723*0 + 3*561*FLEN/8, x4, x1, x2)

inst_8242:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830003ffffffffff; valaddr_reg:x3; val_offset:24726*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24726*0 + 3*562*FLEN/8, x4, x1, x2)

inst_8243:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830007ffffffffff; valaddr_reg:x3; val_offset:24729*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24729*0 + 3*563*FLEN/8, x4, x1, x2)

inst_8244:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83000fffffffffff; valaddr_reg:x3; val_offset:24732*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24732*0 + 3*564*FLEN/8, x4, x1, x2)

inst_8245:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83001fffffffffff; valaddr_reg:x3; val_offset:24735*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24735*0 + 3*565*FLEN/8, x4, x1, x2)

inst_8246:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83003fffffffffff; valaddr_reg:x3; val_offset:24738*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24738*0 + 3*566*FLEN/8, x4, x1, x2)

inst_8247:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x83007fffffffffff; valaddr_reg:x3; val_offset:24741*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24741*0 + 3*567*FLEN/8, x4, x1, x2)

inst_8248:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8300ffffffffffff; valaddr_reg:x3; val_offset:24744*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24744*0 + 3*568*FLEN/8, x4, x1, x2)

inst_8249:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8301ffffffffffff; valaddr_reg:x3; val_offset:24747*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24747*0 + 3*569*FLEN/8, x4, x1, x2)

inst_8250:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8303ffffffffffff; valaddr_reg:x3; val_offset:24750*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24750*0 + 3*570*FLEN/8, x4, x1, x2)

inst_8251:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8307ffffffffffff; valaddr_reg:x3; val_offset:24753*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24753*0 + 3*571*FLEN/8, x4, x1, x2)

inst_8252:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x8308000000000000; valaddr_reg:x3; val_offset:24756*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24756*0 + 3*572*FLEN/8, x4, x1, x2)

inst_8253:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830c000000000000; valaddr_reg:x3; val_offset:24759*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24759*0 + 3*573*FLEN/8, x4, x1, x2)

inst_8254:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830e000000000000; valaddr_reg:x3; val_offset:24762*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24762*0 + 3*574*FLEN/8, x4, x1, x2)

inst_8255:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830f000000000000; valaddr_reg:x3; val_offset:24765*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24765*0 + 3*575*FLEN/8, x4, x1, x2)

inst_8256:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830f800000000000; valaddr_reg:x3; val_offset:24768*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24768*0 + 3*576*FLEN/8, x4, x1, x2)

inst_8257:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fc00000000000; valaddr_reg:x3; val_offset:24771*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24771*0 + 3*577*FLEN/8, x4, x1, x2)

inst_8258:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fe00000000000; valaddr_reg:x3; val_offset:24774*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24774*0 + 3*578*FLEN/8, x4, x1, x2)

inst_8259:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ff00000000000; valaddr_reg:x3; val_offset:24777*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24777*0 + 3*579*FLEN/8, x4, x1, x2)

inst_8260:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ff80000000000; valaddr_reg:x3; val_offset:24780*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24780*0 + 3*580*FLEN/8, x4, x1, x2)

inst_8261:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffc0000000000; valaddr_reg:x3; val_offset:24783*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24783*0 + 3*581*FLEN/8, x4, x1, x2)

inst_8262:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffe0000000000; valaddr_reg:x3; val_offset:24786*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24786*0 + 3*582*FLEN/8, x4, x1, x2)

inst_8263:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fff0000000000; valaddr_reg:x3; val_offset:24789*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24789*0 + 3*583*FLEN/8, x4, x1, x2)

inst_8264:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fff8000000000; valaddr_reg:x3; val_offset:24792*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24792*0 + 3*584*FLEN/8, x4, x1, x2)

inst_8265:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffc000000000; valaddr_reg:x3; val_offset:24795*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24795*0 + 3*585*FLEN/8, x4, x1, x2)

inst_8266:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffe000000000; valaddr_reg:x3; val_offset:24798*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24798*0 + 3*586*FLEN/8, x4, x1, x2)

inst_8267:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffff000000000; valaddr_reg:x3; val_offset:24801*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24801*0 + 3*587*FLEN/8, x4, x1, x2)

inst_8268:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffff800000000; valaddr_reg:x3; val_offset:24804*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24804*0 + 3*588*FLEN/8, x4, x1, x2)

inst_8269:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffc00000000; valaddr_reg:x3; val_offset:24807*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24807*0 + 3*589*FLEN/8, x4, x1, x2)

inst_8270:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffe00000000; valaddr_reg:x3; val_offset:24810*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24810*0 + 3*590*FLEN/8, x4, x1, x2)

inst_8271:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffff00000000; valaddr_reg:x3; val_offset:24813*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24813*0 + 3*591*FLEN/8, x4, x1, x2)

inst_8272:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffff80000000; valaddr_reg:x3; val_offset:24816*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24816*0 + 3*592*FLEN/8, x4, x1, x2)

inst_8273:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffc0000000; valaddr_reg:x3; val_offset:24819*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24819*0 + 3*593*FLEN/8, x4, x1, x2)

inst_8274:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffe0000000; valaddr_reg:x3; val_offset:24822*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24822*0 + 3*594*FLEN/8, x4, x1, x2)

inst_8275:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffff0000000; valaddr_reg:x3; val_offset:24825*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24825*0 + 3*595*FLEN/8, x4, x1, x2)

inst_8276:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffff8000000; valaddr_reg:x3; val_offset:24828*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24828*0 + 3*596*FLEN/8, x4, x1, x2)

inst_8277:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffc000000; valaddr_reg:x3; val_offset:24831*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24831*0 + 3*597*FLEN/8, x4, x1, x2)

inst_8278:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffe000000; valaddr_reg:x3; val_offset:24834*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24834*0 + 3*598*FLEN/8, x4, x1, x2)

inst_8279:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffff000000; valaddr_reg:x3; val_offset:24837*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24837*0 + 3*599*FLEN/8, x4, x1, x2)

inst_8280:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffff800000; valaddr_reg:x3; val_offset:24840*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24840*0 + 3*600*FLEN/8, x4, x1, x2)

inst_8281:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffc00000; valaddr_reg:x3; val_offset:24843*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24843*0 + 3*601*FLEN/8, x4, x1, x2)

inst_8282:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffe00000; valaddr_reg:x3; val_offset:24846*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24846*0 + 3*602*FLEN/8, x4, x1, x2)

inst_8283:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffff00000; valaddr_reg:x3; val_offset:24849*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24849*0 + 3*603*FLEN/8, x4, x1, x2)

inst_8284:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffff80000; valaddr_reg:x3; val_offset:24852*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24852*0 + 3*604*FLEN/8, x4, x1, x2)

inst_8285:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffc0000; valaddr_reg:x3; val_offset:24855*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24855*0 + 3*605*FLEN/8, x4, x1, x2)

inst_8286:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffe0000; valaddr_reg:x3; val_offset:24858*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24858*0 + 3*606*FLEN/8, x4, x1, x2)

inst_8287:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffff0000; valaddr_reg:x3; val_offset:24861*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24861*0 + 3*607*FLEN/8, x4, x1, x2)

inst_8288:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffff8000; valaddr_reg:x3; val_offset:24864*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24864*0 + 3*608*FLEN/8, x4, x1, x2)

inst_8289:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffffc000; valaddr_reg:x3; val_offset:24867*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24867*0 + 3*609*FLEN/8, x4, x1, x2)

inst_8290:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffffe000; valaddr_reg:x3; val_offset:24870*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24870*0 + 3*610*FLEN/8, x4, x1, x2)

inst_8291:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffff000; valaddr_reg:x3; val_offset:24873*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24873*0 + 3*611*FLEN/8, x4, x1, x2)

inst_8292:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffff800; valaddr_reg:x3; val_offset:24876*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24876*0 + 3*612*FLEN/8, x4, x1, x2)

inst_8293:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffffc00; valaddr_reg:x3; val_offset:24879*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24879*0 + 3*613*FLEN/8, x4, x1, x2)

inst_8294:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffffe00; valaddr_reg:x3; val_offset:24882*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24882*0 + 3*614*FLEN/8, x4, x1, x2)

inst_8295:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffffff00; valaddr_reg:x3; val_offset:24885*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24885*0 + 3*615*FLEN/8, x4, x1, x2)

inst_8296:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffffff80; valaddr_reg:x3; val_offset:24888*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24888*0 + 3*616*FLEN/8, x4, x1, x2)

inst_8297:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffffffc0; valaddr_reg:x3; val_offset:24891*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24891*0 + 3*617*FLEN/8, x4, x1, x2)

inst_8298:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffffffe0; valaddr_reg:x3; val_offset:24894*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24894*0 + 3*618*FLEN/8, x4, x1, x2)

inst_8299:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffffff0; valaddr_reg:x3; val_offset:24897*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24897*0 + 3*619*FLEN/8, x4, x1, x2)

inst_8300:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffffff8; valaddr_reg:x3; val_offset:24900*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24900*0 + 3*620*FLEN/8, x4, x1, x2)

inst_8301:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffffffc; valaddr_reg:x3; val_offset:24903*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24903*0 + 3*621*FLEN/8, x4, x1, x2)

inst_8302:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830ffffffffffffe; valaddr_reg:x3; val_offset:24906*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24906*0 + 3*622*FLEN/8, x4, x1, x2)

inst_8303:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1035095fb0c7f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x030 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71035095fb0c7f; op2val:0x8000;
op3val:0x830fffffffffffff; valaddr_reg:x3; val_offset:24909*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24909*0 + 3*623*FLEN/8, x4, x1, x2)

inst_8304:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000000000; valaddr_reg:x3; val_offset:24912*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24912*0 + 3*624*FLEN/8, x4, x1, x2)

inst_8305:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000000001; valaddr_reg:x3; val_offset:24915*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24915*0 + 3*625*FLEN/8, x4, x1, x2)

inst_8306:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000000003; valaddr_reg:x3; val_offset:24918*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24918*0 + 3*626*FLEN/8, x4, x1, x2)

inst_8307:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000000007; valaddr_reg:x3; val_offset:24921*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24921*0 + 3*627*FLEN/8, x4, x1, x2)

inst_8308:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000000000f; valaddr_reg:x3; val_offset:24924*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24924*0 + 3*628*FLEN/8, x4, x1, x2)

inst_8309:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000000001f; valaddr_reg:x3; val_offset:24927*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24927*0 + 3*629*FLEN/8, x4, x1, x2)

inst_8310:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000000003f; valaddr_reg:x3; val_offset:24930*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24930*0 + 3*630*FLEN/8, x4, x1, x2)

inst_8311:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000000007f; valaddr_reg:x3; val_offset:24933*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24933*0 + 3*631*FLEN/8, x4, x1, x2)

inst_8312:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000000000ff; valaddr_reg:x3; val_offset:24936*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24936*0 + 3*632*FLEN/8, x4, x1, x2)

inst_8313:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000000001ff; valaddr_reg:x3; val_offset:24939*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24939*0 + 3*633*FLEN/8, x4, x1, x2)

inst_8314:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000000003ff; valaddr_reg:x3; val_offset:24942*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24942*0 + 3*634*FLEN/8, x4, x1, x2)

inst_8315:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000000007ff; valaddr_reg:x3; val_offset:24945*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24945*0 + 3*635*FLEN/8, x4, x1, x2)

inst_8316:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000000fff; valaddr_reg:x3; val_offset:24948*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24948*0 + 3*636*FLEN/8, x4, x1, x2)

inst_8317:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000001fff; valaddr_reg:x3; val_offset:24951*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24951*0 + 3*637*FLEN/8, x4, x1, x2)

inst_8318:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000003fff; valaddr_reg:x3; val_offset:24954*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24954*0 + 3*638*FLEN/8, x4, x1, x2)

inst_8319:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000007fff; valaddr_reg:x3; val_offset:24957*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24957*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_8320:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000000ffff; valaddr_reg:x3; val_offset:24960*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24960*0 + 3*640*FLEN/8, x4, x1, x2)

inst_8321:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000001ffff; valaddr_reg:x3; val_offset:24963*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24963*0 + 3*641*FLEN/8, x4, x1, x2)

inst_8322:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000003ffff; valaddr_reg:x3; val_offset:24966*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24966*0 + 3*642*FLEN/8, x4, x1, x2)

inst_8323:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000007ffff; valaddr_reg:x3; val_offset:24969*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24969*0 + 3*643*FLEN/8, x4, x1, x2)

inst_8324:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000000fffff; valaddr_reg:x3; val_offset:24972*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24972*0 + 3*644*FLEN/8, x4, x1, x2)

inst_8325:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000001fffff; valaddr_reg:x3; val_offset:24975*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24975*0 + 3*645*FLEN/8, x4, x1, x2)

inst_8326:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000003fffff; valaddr_reg:x3; val_offset:24978*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24978*0 + 3*646*FLEN/8, x4, x1, x2)

inst_8327:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000007fffff; valaddr_reg:x3; val_offset:24981*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24981*0 + 3*647*FLEN/8, x4, x1, x2)

inst_8328:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000000ffffff; valaddr_reg:x3; val_offset:24984*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24984*0 + 3*648*FLEN/8, x4, x1, x2)

inst_8329:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000001ffffff; valaddr_reg:x3; val_offset:24987*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24987*0 + 3*649*FLEN/8, x4, x1, x2)

inst_8330:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000003ffffff; valaddr_reg:x3; val_offset:24990*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24990*0 + 3*650*FLEN/8, x4, x1, x2)

inst_8331:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000007ffffff; valaddr_reg:x3; val_offset:24993*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24993*0 + 3*651*FLEN/8, x4, x1, x2)

inst_8332:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000000fffffff; valaddr_reg:x3; val_offset:24996*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24996*0 + 3*652*FLEN/8, x4, x1, x2)

inst_8333:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000001fffffff; valaddr_reg:x3; val_offset:24999*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 24999*0 + 3*653*FLEN/8, x4, x1, x2)

inst_8334:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000003fffffff; valaddr_reg:x3; val_offset:25002*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25002*0 + 3*654*FLEN/8, x4, x1, x2)

inst_8335:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000007fffffff; valaddr_reg:x3; val_offset:25005*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25005*0 + 3*655*FLEN/8, x4, x1, x2)

inst_8336:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00000ffffffff; valaddr_reg:x3; val_offset:25008*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25008*0 + 3*656*FLEN/8, x4, x1, x2)

inst_8337:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00001ffffffff; valaddr_reg:x3; val_offset:25011*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25011*0 + 3*657*FLEN/8, x4, x1, x2)

inst_8338:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00003ffffffff; valaddr_reg:x3; val_offset:25014*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25014*0 + 3*658*FLEN/8, x4, x1, x2)

inst_8339:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00007ffffffff; valaddr_reg:x3; val_offset:25017*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25017*0 + 3*659*FLEN/8, x4, x1, x2)

inst_8340:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0000fffffffff; valaddr_reg:x3; val_offset:25020*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25020*0 + 3*660*FLEN/8, x4, x1, x2)

inst_8341:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0001fffffffff; valaddr_reg:x3; val_offset:25023*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25023*0 + 3*661*FLEN/8, x4, x1, x2)

inst_8342:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0003fffffffff; valaddr_reg:x3; val_offset:25026*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25026*0 + 3*662*FLEN/8, x4, x1, x2)

inst_8343:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0007fffffffff; valaddr_reg:x3; val_offset:25029*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25029*0 + 3*663*FLEN/8, x4, x1, x2)

inst_8344:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a000ffffffffff; valaddr_reg:x3; val_offset:25032*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25032*0 + 3*664*FLEN/8, x4, x1, x2)

inst_8345:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a001ffffffffff; valaddr_reg:x3; val_offset:25035*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25035*0 + 3*665*FLEN/8, x4, x1, x2)

inst_8346:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a003ffffffffff; valaddr_reg:x3; val_offset:25038*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25038*0 + 3*666*FLEN/8, x4, x1, x2)

inst_8347:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a007ffffffffff; valaddr_reg:x3; val_offset:25041*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25041*0 + 3*667*FLEN/8, x4, x1, x2)

inst_8348:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a00fffffffffff; valaddr_reg:x3; val_offset:25044*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25044*0 + 3*668*FLEN/8, x4, x1, x2)

inst_8349:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a01fffffffffff; valaddr_reg:x3; val_offset:25047*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25047*0 + 3*669*FLEN/8, x4, x1, x2)

inst_8350:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a03fffffffffff; valaddr_reg:x3; val_offset:25050*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25050*0 + 3*670*FLEN/8, x4, x1, x2)

inst_8351:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a07fffffffffff; valaddr_reg:x3; val_offset:25053*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25053*0 + 3*671*FLEN/8, x4, x1, x2)

inst_8352:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a0ffffffffffff; valaddr_reg:x3; val_offset:25056*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25056*0 + 3*672*FLEN/8, x4, x1, x2)

inst_8353:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a1ffffffffffff; valaddr_reg:x3; val_offset:25059*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25059*0 + 3*673*FLEN/8, x4, x1, x2)

inst_8354:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a3ffffffffffff; valaddr_reg:x3; val_offset:25062*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25062*0 + 3*674*FLEN/8, x4, x1, x2)

inst_8355:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a7ffffffffffff; valaddr_reg:x3; val_offset:25065*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25065*0 + 3*675*FLEN/8, x4, x1, x2)

inst_8356:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10a8000000000000; valaddr_reg:x3; val_offset:25068*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25068*0 + 3*676*FLEN/8, x4, x1, x2)

inst_8357:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10ac000000000000; valaddr_reg:x3; val_offset:25071*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25071*0 + 3*677*FLEN/8, x4, x1, x2)

inst_8358:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10ae000000000000; valaddr_reg:x3; val_offset:25074*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25074*0 + 3*678*FLEN/8, x4, x1, x2)

inst_8359:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10af000000000000; valaddr_reg:x3; val_offset:25077*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25077*0 + 3*679*FLEN/8, x4, x1, x2)

inst_8360:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10af800000000000; valaddr_reg:x3; val_offset:25080*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25080*0 + 3*680*FLEN/8, x4, x1, x2)

inst_8361:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afc00000000000; valaddr_reg:x3; val_offset:25083*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25083*0 + 3*681*FLEN/8, x4, x1, x2)

inst_8362:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afe00000000000; valaddr_reg:x3; val_offset:25086*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25086*0 + 3*682*FLEN/8, x4, x1, x2)

inst_8363:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10aff00000000000; valaddr_reg:x3; val_offset:25089*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25089*0 + 3*683*FLEN/8, x4, x1, x2)

inst_8364:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10aff80000000000; valaddr_reg:x3; val_offset:25092*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25092*0 + 3*684*FLEN/8, x4, x1, x2)

inst_8365:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affc0000000000; valaddr_reg:x3; val_offset:25095*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25095*0 + 3*685*FLEN/8, x4, x1, x2)

inst_8366:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affe0000000000; valaddr_reg:x3; val_offset:25098*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25098*0 + 3*686*FLEN/8, x4, x1, x2)

inst_8367:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afff0000000000; valaddr_reg:x3; val_offset:25101*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25101*0 + 3*687*FLEN/8, x4, x1, x2)

inst_8368:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afff8000000000; valaddr_reg:x3; val_offset:25104*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25104*0 + 3*688*FLEN/8, x4, x1, x2)

inst_8369:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffc000000000; valaddr_reg:x3; val_offset:25107*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25107*0 + 3*689*FLEN/8, x4, x1, x2)

inst_8370:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffe000000000; valaddr_reg:x3; val_offset:25110*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25110*0 + 3*690*FLEN/8, x4, x1, x2)

inst_8371:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affff000000000; valaddr_reg:x3; val_offset:25113*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25113*0 + 3*691*FLEN/8, x4, x1, x2)

inst_8372:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affff800000000; valaddr_reg:x3; val_offset:25116*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25116*0 + 3*692*FLEN/8, x4, x1, x2)

inst_8373:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffc00000000; valaddr_reg:x3; val_offset:25119*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25119*0 + 3*693*FLEN/8, x4, x1, x2)

inst_8374:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffe00000000; valaddr_reg:x3; val_offset:25122*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25122*0 + 3*694*FLEN/8, x4, x1, x2)

inst_8375:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffff00000000; valaddr_reg:x3; val_offset:25125*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25125*0 + 3*695*FLEN/8, x4, x1, x2)

inst_8376:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffff80000000; valaddr_reg:x3; val_offset:25128*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25128*0 + 3*696*FLEN/8, x4, x1, x2)

inst_8377:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffc0000000; valaddr_reg:x3; val_offset:25131*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25131*0 + 3*697*FLEN/8, x4, x1, x2)

inst_8378:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffe0000000; valaddr_reg:x3; val_offset:25134*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25134*0 + 3*698*FLEN/8, x4, x1, x2)

inst_8379:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffff0000000; valaddr_reg:x3; val_offset:25137*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25137*0 + 3*699*FLEN/8, x4, x1, x2)

inst_8380:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffff8000000; valaddr_reg:x3; val_offset:25140*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25140*0 + 3*700*FLEN/8, x4, x1, x2)

inst_8381:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffc000000; valaddr_reg:x3; val_offset:25143*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25143*0 + 3*701*FLEN/8, x4, x1, x2)

inst_8382:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffe000000; valaddr_reg:x3; val_offset:25146*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25146*0 + 3*702*FLEN/8, x4, x1, x2)

inst_8383:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffff000000; valaddr_reg:x3; val_offset:25149*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25149*0 + 3*703*FLEN/8, x4, x1, x2)

inst_8384:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffff800000; valaddr_reg:x3; val_offset:25152*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25152*0 + 3*704*FLEN/8, x4, x1, x2)

inst_8385:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffc00000; valaddr_reg:x3; val_offset:25155*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25155*0 + 3*705*FLEN/8, x4, x1, x2)

inst_8386:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffe00000; valaddr_reg:x3; val_offset:25158*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25158*0 + 3*706*FLEN/8, x4, x1, x2)

inst_8387:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffff00000; valaddr_reg:x3; val_offset:25161*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25161*0 + 3*707*FLEN/8, x4, x1, x2)

inst_8388:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffff80000; valaddr_reg:x3; val_offset:25164*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25164*0 + 3*708*FLEN/8, x4, x1, x2)

inst_8389:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffc0000; valaddr_reg:x3; val_offset:25167*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25167*0 + 3*709*FLEN/8, x4, x1, x2)

inst_8390:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffe0000; valaddr_reg:x3; val_offset:25170*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25170*0 + 3*710*FLEN/8, x4, x1, x2)

inst_8391:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffff0000; valaddr_reg:x3; val_offset:25173*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25173*0 + 3*711*FLEN/8, x4, x1, x2)

inst_8392:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffff8000; valaddr_reg:x3; val_offset:25176*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25176*0 + 3*712*FLEN/8, x4, x1, x2)

inst_8393:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffffc000; valaddr_reg:x3; val_offset:25179*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25179*0 + 3*713*FLEN/8, x4, x1, x2)

inst_8394:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffffe000; valaddr_reg:x3; val_offset:25182*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25182*0 + 3*714*FLEN/8, x4, x1, x2)

inst_8395:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffff000; valaddr_reg:x3; val_offset:25185*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25185*0 + 3*715*FLEN/8, x4, x1, x2)

inst_8396:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffff800; valaddr_reg:x3; val_offset:25188*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25188*0 + 3*716*FLEN/8, x4, x1, x2)

inst_8397:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffffc00; valaddr_reg:x3; val_offset:25191*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25191*0 + 3*717*FLEN/8, x4, x1, x2)

inst_8398:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffffe00; valaddr_reg:x3; val_offset:25194*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25194*0 + 3*718*FLEN/8, x4, x1, x2)

inst_8399:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffffff00; valaddr_reg:x3; val_offset:25197*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25197*0 + 3*719*FLEN/8, x4, x1, x2)

inst_8400:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffffff80; valaddr_reg:x3; val_offset:25200*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25200*0 + 3*720*FLEN/8, x4, x1, x2)

inst_8401:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffffffc0; valaddr_reg:x3; val_offset:25203*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25203*0 + 3*721*FLEN/8, x4, x1, x2)

inst_8402:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffffffe0; valaddr_reg:x3; val_offset:25206*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25206*0 + 3*722*FLEN/8, x4, x1, x2)

inst_8403:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffffff0; valaddr_reg:x3; val_offset:25209*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25209*0 + 3*723*FLEN/8, x4, x1, x2)

inst_8404:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffffff8; valaddr_reg:x3; val_offset:25212*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25212*0 + 3*724*FLEN/8, x4, x1, x2)

inst_8405:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffffffc; valaddr_reg:x3; val_offset:25215*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25215*0 + 3*725*FLEN/8, x4, x1, x2)

inst_8406:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10affffffffffffe; valaddr_reg:x3; val_offset:25218*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25218*0 + 3*726*FLEN/8, x4, x1, x2)

inst_8407:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x10a and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x10afffffffffffff; valaddr_reg:x3; val_offset:25221*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25221*0 + 3*727*FLEN/8, x4, x1, x2)

inst_8408:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:25224*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25224*0 + 3*728*FLEN/8, x4, x1, x2)

inst_8409:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:25227*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25227*0 + 3*729*FLEN/8, x4, x1, x2)

inst_8410:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:25230*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25230*0 + 3*730*FLEN/8, x4, x1, x2)

inst_8411:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:25233*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25233*0 + 3*731*FLEN/8, x4, x1, x2)

inst_8412:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:25236*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25236*0 + 3*732*FLEN/8, x4, x1, x2)

inst_8413:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:25239*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25239*0 + 3*733*FLEN/8, x4, x1, x2)

inst_8414:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:25242*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25242*0 + 3*734*FLEN/8, x4, x1, x2)

inst_8415:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:25245*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25245*0 + 3*735*FLEN/8, x4, x1, x2)

inst_8416:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:25248*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25248*0 + 3*736*FLEN/8, x4, x1, x2)

inst_8417:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:25251*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25251*0 + 3*737*FLEN/8, x4, x1, x2)

inst_8418:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:25254*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25254*0 + 3*738*FLEN/8, x4, x1, x2)

inst_8419:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:25257*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25257*0 + 3*739*FLEN/8, x4, x1, x2)

inst_8420:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:25260*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25260*0 + 3*740*FLEN/8, x4, x1, x2)

inst_8421:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:25263*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25263*0 + 3*741*FLEN/8, x4, x1, x2)

inst_8422:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:25266*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25266*0 + 3*742*FLEN/8, x4, x1, x2)

inst_8423:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:25269*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25269*0 + 3*743*FLEN/8, x4, x1, x2)

inst_8424:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:25272*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25272*0 + 3*744*FLEN/8, x4, x1, x2)

inst_8425:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:25275*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25275*0 + 3*745*FLEN/8, x4, x1, x2)

inst_8426:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:25278*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25278*0 + 3*746*FLEN/8, x4, x1, x2)

inst_8427:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:25281*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25281*0 + 3*747*FLEN/8, x4, x1, x2)

inst_8428:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:25284*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25284*0 + 3*748*FLEN/8, x4, x1, x2)

inst_8429:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x1ebcd47110887 and fs2 == 0 and fe2 == 0x206 and fm2 == 0xc91d61a4c3b6d and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f71ebcd47110887; op2val:0x206c91d61a4c3b6d;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:25287*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25287*0 + 3*749*FLEN/8, x4, x1, x2)

inst_8430:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:25290*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25290*0 + 3*750*FLEN/8, x4, x1, x2)

inst_8431:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:25293*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25293*0 + 3*751*FLEN/8, x4, x1, x2)

inst_8432:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:25296*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25296*0 + 3*752*FLEN/8, x4, x1, x2)

inst_8433:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:25299*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25299*0 + 3*753*FLEN/8, x4, x1, x2)

inst_8434:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:25302*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25302*0 + 3*754*FLEN/8, x4, x1, x2)

inst_8435:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:25305*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25305*0 + 3*755*FLEN/8, x4, x1, x2)

inst_8436:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:25308*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25308*0 + 3*756*FLEN/8, x4, x1, x2)

inst_8437:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:25311*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25311*0 + 3*757*FLEN/8, x4, x1, x2)

inst_8438:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:25314*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25314*0 + 3*758*FLEN/8, x4, x1, x2)

inst_8439:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:25317*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25317*0 + 3*759*FLEN/8, x4, x1, x2)

inst_8440:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:25320*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25320*0 + 3*760*FLEN/8, x4, x1, x2)

inst_8441:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:25323*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25323*0 + 3*761*FLEN/8, x4, x1, x2)

inst_8442:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:25326*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25326*0 + 3*762*FLEN/8, x4, x1, x2)

inst_8443:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:25329*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25329*0 + 3*763*FLEN/8, x4, x1, x2)

inst_8444:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:25332*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25332*0 + 3*764*FLEN/8, x4, x1, x2)

inst_8445:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:25335*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25335*0 + 3*765*FLEN/8, x4, x1, x2)

inst_8446:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:25338*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25338*0 + 3*766*FLEN/8, x4, x1, x2)

inst_8447:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x2011ca3e25417 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f72011ca3e25417; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:25341*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 25341*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564735,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564799,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393564927,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393565183,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393565695,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393566719,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393568767,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393572863,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393581055,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393597439,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393630207,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393695743,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843393826815,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843394088959,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843394613247,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843395661823,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843397758975,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843401953279,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843410341887,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843427119103,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843460673535,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843527782399,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843662000127,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944843930435583,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944844467306495,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944845541048319,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944847688531967,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944851983499263,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944860573433855,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944877753303039,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944912113041407,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309944980832518143,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309945118271471615,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309945393149378559,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309945942905192447,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309947042416820223,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309949241440075775,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309953639486586879,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309962435579609087,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4309980027765653503,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4310015212137742335,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4310085580881919999,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4310226318370275327,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4310507793346985983,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4311070743300407295,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4312196643207249919,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4312196643207249920,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4313322543114092544,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4313885493067513856,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314166968044224512,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314307705532579840,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314378074276757504,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314413258648846336,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314430850834890752,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314439646927912960,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314444044974424064,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314446243997679616,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314447343509307392,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314447893265121280,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448168143028224,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448305581981696,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448374301458432,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448408661196800,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448425841065984,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448434431000576,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448438725967872,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448440873451520,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448441947193344,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448442484064256,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448442752499712,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448442886717440,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448442953826304,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448442987380736,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443004157952,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443012546560,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443016740864,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443018838016,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443019886592,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020410880,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020673024,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020804096,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020869632,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020902400,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020918784,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020926976,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020931072,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020933120,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020934144,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020934656,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020934912,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020935040,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020935104,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020935136,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020935152,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020935160,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020935164,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020935166,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4314448443020935167,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6877096525093901887,64,FLEN)
NAN_BOXED(2337172753736464555,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913536,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913537,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913539,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913543,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913551,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913567,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913599,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913663,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038913791,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038914047,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038914559,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038915583,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038917631,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038921727,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038929919,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038946303,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417038979071,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417039044607,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417039175679,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417039437823,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417039962111,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417041010687,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417043107839,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417047302143,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417055690751,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417072467967,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417106022399,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417173131263,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417307348991,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267417575784447,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267418112655359,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267419186397183,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267421333880831,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267425628848127,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267434218782719,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267451398651903,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267485758390271,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267554477867007,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267691916820479,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211267966794727423,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211268516550541311,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211269616062169087,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211271815085424639,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211276213131935743,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211285009224957951,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211302601411002367,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211337785783091199,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211408154527268863,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211548892015624191,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2211830366992334847,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2212393316945756159,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2213519216852598783,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2213519216852598784,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2214645116759441408,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215208066712862720,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215489541689573376,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215630279177928704,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215700647922106368,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215735832294195200,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215753424480239616,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215762220573261824,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215766618619772928,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215768817643028480,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215769917154656256,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215770466910470144,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215770741788377088,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215770879227330560,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215770947946807296,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215770982306545664,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215770999486414848,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771008076349440,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771012371316736,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771014518800384,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771015592542208,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016129413120,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016397848576,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016532066304,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016599175168,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016632729600,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016649506816,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016657895424,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016662089728,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016664186880,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016665235456,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016665759744,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666021888,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666152960,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666218496,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666251264,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666267648,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666275840,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666279936,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666281984,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666283008,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666283520,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666283776,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666283904,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666283968,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666284000,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666284016,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666284024,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666284028,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666284030,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(2215771016666284031,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9214364837600034817,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9214364837600034819,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9214364837600034823,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9214364837600034831,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9214364837600034847,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9214364837600034879,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9215265557525508915,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9215651580350712100,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9216166277450983014,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9216294951726050742,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9216466517426141047,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9216766757401299080,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9217066997376457113,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9217581694476728027,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9217967717301931212,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9218225065852066669,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9218868437227405248,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9218868437227405280,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9218868437227405296,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9218868437227405304,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9218868437227405308,64,FLEN)
NAN_BOXED(6877161439905494583,64,FLEN)
NAN_BOXED(6948736243715072966,64,FLEN)
NAN_BOXED(9218868437227405310,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114112,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114113,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114115,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114119,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114127,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114143,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114175,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114239,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114367,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545114623,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545115135,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545116159,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545118207,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545122303,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545130495,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545146879,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545179647,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545245183,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545376255,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092545638399,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092546162687,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092547211263,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092549308415,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092553502719,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092561891327,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092578668543,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092612222975,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092679331839,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698092813549567,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698093081985023,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698093618855935,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698094692597759,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698096840081407,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698101135048703,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698109724983295,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698126904852479,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698161264590847,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698229984067583,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698367423021055,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384698642300927999,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384699192056741887,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384700291568369663,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384702490591625215,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384706888638136319,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384715684731158527,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384733276917202943,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384768461289291775,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384838830033469439,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13384979567521824767,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13385261042498535423,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13385823992451956735,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13386949892358799359,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13386949892358799360,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13388075792265641984,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13388638742219063296,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13388920217195773952,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389060954684129280,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389131323428306944,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389166507800395776,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389184099986440192,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389192896079462400,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389197294125973504,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389199493149229056,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389200592660856832,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201142416670720,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201417294577664,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201554733531136,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201623453007872,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201657812746240,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201674992615424,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201683582550016,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201687877517312,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201690025000960,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201691098742784,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201691635613696,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201691904049152,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692038266880,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692105375744,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692138930176,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692155707392,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692164096000,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692168290304,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692170387456,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692171436032,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692171960320,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172222464,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172353536,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172419072,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172451840,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172468224,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172476416,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172480512,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172482560,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172483584,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484096,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484352,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484480,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484544,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484576,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484592,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484600,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484604,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484606,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13389201692172484607,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6877236919816242647,64,FLEN)
NAN_BOXED(11528758810784435597,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442084864,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442084865,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442084867,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442084871,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442084879,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442084895,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442084927,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442084991,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442085119,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442085375,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442085887,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442086911,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442088959,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442093055,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442101247,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442117631,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442150399,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442215935,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442347007,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269442609151,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269443133439,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269444182015,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269446279167,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269450473471,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269458862079,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269475639295,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269509193727,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269576302591,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269710520319,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921269978955775,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921270515826687,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921271589568511,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921273737052159,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921278032019455,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921286621954047,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921303801823231,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921338161561599,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921406881038335,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921544319991807,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663921819197898751,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663922368953712639,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663923468465340415,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663925667488595967,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663930065535107071,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663938861628129279,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663956453814173695,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13663991638186262527,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13664062006930440191,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13664202744418795519,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13664484219395506175,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13665047169348927487,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13666173069255770111,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13666173069255770112,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13667298969162612736,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13667861919116034048,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668143394092744704,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668284131581100032,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668354500325277696,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668389684697366528,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668407276883410944,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668416072976433152,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668420471022944256,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668422670046199808,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668423769557827584,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424319313641472,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424594191548416,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424731630501888,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424800349978624,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424834709716992,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424851889586176,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424860479520768,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424864774488064,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424866921971712,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424867995713536,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424868532584448,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424868801019904,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424868935237632,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869002346496,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869035900928,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869052678144,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869061066752,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869065261056,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869067358208,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869068406784,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869068931072,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069193216,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069324288,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069389824,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069422592,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069438976,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069447168,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069451264,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069453312,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069454336,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069454848,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455104,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455232,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455296,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455328,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455344,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455352,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455356,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455358,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13668424869069455359,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6877274710692407287,64,FLEN)
NAN_BOXED(11528691230254973131,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559616,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559617,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559619,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559623,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559631,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559647,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559679,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559743,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968559871,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968560127,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968560639,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968561663,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968563711,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968567807,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968575999,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968592383,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968625151,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968690687,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818968821759,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818969083903,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818969608191,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818970656767,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818972753919,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818976948223,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544818985336831,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544819002114047,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544819035668479,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544819102777343,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544819236995071,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544819505430527,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544820042301439,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544821116043263,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544823263526911,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544827558494207,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544836148428799,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544853328297983,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544887688036351,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439544956407513087,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439545093846466559,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439545368724373503,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439545918480187391,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439547017991815167,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439549217015070719,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439553615061581823,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439562411154604031,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439580003340648447,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439615187712737279,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439685556456914943,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9439826293945270271,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9440107768921980927,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9440670718875402239,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9441796618782244863,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9441796618782244864,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9442922518689087488,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9443485468642508800,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9443766943619219456,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9443907681107574784,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9443978049851752448,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444013234223841280,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444030826409885696,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444039622502907904,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444044020549419008,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444046219572674560,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444047319084302336,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444047868840116224,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048143718023168,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048281156976640,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048349876453376,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048384236191744,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048401416060928,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048410005995520,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048414300962816,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048416448446464,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048417522188288,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418059059200,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418327494656,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418461712384,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418528821248,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418562375680,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418579152896,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418587541504,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418591735808,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418593832960,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418594881536,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595405824,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595667968,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595799040,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595864576,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595897344,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595913728,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595921920,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595926016,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595928064,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595929088,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595929600,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595929856,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595929984,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595930048,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595930080,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595930096,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595930104,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595930108,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595930110,64,FLEN)
NAN_BOXED(6877281750619982975,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9444048418595930111,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880551936,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880551937,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880551939,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880551943,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880551951,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880551967,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880551999,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880552063,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880552191,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880552447,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880552959,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880553983,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880556031,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880560127,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880568319,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880584703,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880617471,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880683007,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500880814079,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500881076223,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500881600511,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500882649087,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500884746239,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500888940543,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500897329151,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500914106367,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957500947660799,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957501014769663,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957501148987391,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957501417422847,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957501954293759,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957503028035583,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957505175519231,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957509470486527,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957518060421119,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957535240290303,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957569600028671,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957638319505407,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197957775758458879,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197958050636365823,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197958600392179711,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197959699903807487,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197961898927063039,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197966296973574143,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197975093066596351,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1197992685252640767,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1198027869624729599,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1198098238368907263,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1198238975857262591,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1198520450833973247,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1199083400787394559,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1200209300694237183,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1200209300694237184,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1201335200601079808,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1201898150554501120,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202179625531211776,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202320363019567104,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202390731763744768,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202425916135833600,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202443508321878016,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202452304414900224,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202456702461411328,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202458901484666880,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202460000996294656,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202460550752108544,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202460825630015488,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202460963068968960,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461031788445696,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461066148184064,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461083328053248,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461091917987840,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461096212955136,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461098360438784,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461099434180608,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461099971051520,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100239486976,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100373704704,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100440813568,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100474368000,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100491145216,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100499533824,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100503728128,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100505825280,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100506873856,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507398144,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507660288,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507791360,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507856896,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507889664,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507906048,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507914240,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507918336,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507920384,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507921408,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507921920,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922176,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922304,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922368,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922400,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922416,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922424,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922428,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922430,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(1202461100507922431,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6877537372864579719,64,FLEN)
NAN_BOXED(2336402655448677229,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6877560803468399639,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
