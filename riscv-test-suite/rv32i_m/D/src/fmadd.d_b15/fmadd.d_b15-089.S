
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_67584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:202752*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202752*0 + 3*0*FLEN/8, x4, x1, x2)

inst_67585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:202755*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202755*0 + 3*1*FLEN/8, x4, x1, x2)

inst_67586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:202758*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202758*0 + 3*2*FLEN/8, x4, x1, x2)

inst_67587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:202761*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202761*0 + 3*3*FLEN/8, x4, x1, x2)

inst_67588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000000000; valaddr_reg:x3; val_offset:202764*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202764*0 + 3*4*FLEN/8, x4, x1, x2)

inst_67589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000000001; valaddr_reg:x3; val_offset:202767*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202767*0 + 3*5*FLEN/8, x4, x1, x2)

inst_67590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000000003; valaddr_reg:x3; val_offset:202770*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202770*0 + 3*6*FLEN/8, x4, x1, x2)

inst_67591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000000007; valaddr_reg:x3; val_offset:202773*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202773*0 + 3*7*FLEN/8, x4, x1, x2)

inst_67592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000000000f; valaddr_reg:x3; val_offset:202776*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202776*0 + 3*8*FLEN/8, x4, x1, x2)

inst_67593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000000001f; valaddr_reg:x3; val_offset:202779*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202779*0 + 3*9*FLEN/8, x4, x1, x2)

inst_67594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000000003f; valaddr_reg:x3; val_offset:202782*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202782*0 + 3*10*FLEN/8, x4, x1, x2)

inst_67595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000000007f; valaddr_reg:x3; val_offset:202785*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202785*0 + 3*11*FLEN/8, x4, x1, x2)

inst_67596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000000000ff; valaddr_reg:x3; val_offset:202788*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202788*0 + 3*12*FLEN/8, x4, x1, x2)

inst_67597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000000001ff; valaddr_reg:x3; val_offset:202791*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202791*0 + 3*13*FLEN/8, x4, x1, x2)

inst_67598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000000003ff; valaddr_reg:x3; val_offset:202794*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202794*0 + 3*14*FLEN/8, x4, x1, x2)

inst_67599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000000007ff; valaddr_reg:x3; val_offset:202797*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202797*0 + 3*15*FLEN/8, x4, x1, x2)

inst_67600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000000fff; valaddr_reg:x3; val_offset:202800*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202800*0 + 3*16*FLEN/8, x4, x1, x2)

inst_67601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000001fff; valaddr_reg:x3; val_offset:202803*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202803*0 + 3*17*FLEN/8, x4, x1, x2)

inst_67602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000003fff; valaddr_reg:x3; val_offset:202806*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202806*0 + 3*18*FLEN/8, x4, x1, x2)

inst_67603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000007fff; valaddr_reg:x3; val_offset:202809*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202809*0 + 3*19*FLEN/8, x4, x1, x2)

inst_67604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000000ffff; valaddr_reg:x3; val_offset:202812*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202812*0 + 3*20*FLEN/8, x4, x1, x2)

inst_67605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000001ffff; valaddr_reg:x3; val_offset:202815*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202815*0 + 3*21*FLEN/8, x4, x1, x2)

inst_67606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000003ffff; valaddr_reg:x3; val_offset:202818*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202818*0 + 3*22*FLEN/8, x4, x1, x2)

inst_67607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000007ffff; valaddr_reg:x3; val_offset:202821*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202821*0 + 3*23*FLEN/8, x4, x1, x2)

inst_67608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000000fffff; valaddr_reg:x3; val_offset:202824*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202824*0 + 3*24*FLEN/8, x4, x1, x2)

inst_67609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000001fffff; valaddr_reg:x3; val_offset:202827*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202827*0 + 3*25*FLEN/8, x4, x1, x2)

inst_67610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000003fffff; valaddr_reg:x3; val_offset:202830*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202830*0 + 3*26*FLEN/8, x4, x1, x2)

inst_67611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000007fffff; valaddr_reg:x3; val_offset:202833*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202833*0 + 3*27*FLEN/8, x4, x1, x2)

inst_67612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000000ffffff; valaddr_reg:x3; val_offset:202836*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202836*0 + 3*28*FLEN/8, x4, x1, x2)

inst_67613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000001ffffff; valaddr_reg:x3; val_offset:202839*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202839*0 + 3*29*FLEN/8, x4, x1, x2)

inst_67614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000003ffffff; valaddr_reg:x3; val_offset:202842*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202842*0 + 3*30*FLEN/8, x4, x1, x2)

inst_67615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000007ffffff; valaddr_reg:x3; val_offset:202845*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202845*0 + 3*31*FLEN/8, x4, x1, x2)

inst_67616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000000fffffff; valaddr_reg:x3; val_offset:202848*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202848*0 + 3*32*FLEN/8, x4, x1, x2)

inst_67617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000001fffffff; valaddr_reg:x3; val_offset:202851*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202851*0 + 3*33*FLEN/8, x4, x1, x2)

inst_67618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000003fffffff; valaddr_reg:x3; val_offset:202854*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202854*0 + 3*34*FLEN/8, x4, x1, x2)

inst_67619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000007fffffff; valaddr_reg:x3; val_offset:202857*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202857*0 + 3*35*FLEN/8, x4, x1, x2)

inst_67620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200000ffffffff; valaddr_reg:x3; val_offset:202860*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202860*0 + 3*36*FLEN/8, x4, x1, x2)

inst_67621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200001ffffffff; valaddr_reg:x3; val_offset:202863*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202863*0 + 3*37*FLEN/8, x4, x1, x2)

inst_67622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200003ffffffff; valaddr_reg:x3; val_offset:202866*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202866*0 + 3*38*FLEN/8, x4, x1, x2)

inst_67623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200007ffffffff; valaddr_reg:x3; val_offset:202869*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202869*0 + 3*39*FLEN/8, x4, x1, x2)

inst_67624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220000fffffffff; valaddr_reg:x3; val_offset:202872*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202872*0 + 3*40*FLEN/8, x4, x1, x2)

inst_67625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220001fffffffff; valaddr_reg:x3; val_offset:202875*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202875*0 + 3*41*FLEN/8, x4, x1, x2)

inst_67626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220003fffffffff; valaddr_reg:x3; val_offset:202878*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202878*0 + 3*42*FLEN/8, x4, x1, x2)

inst_67627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220007fffffffff; valaddr_reg:x3; val_offset:202881*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202881*0 + 3*43*FLEN/8, x4, x1, x2)

inst_67628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822000ffffffffff; valaddr_reg:x3; val_offset:202884*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202884*0 + 3*44*FLEN/8, x4, x1, x2)

inst_67629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822001ffffffffff; valaddr_reg:x3; val_offset:202887*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202887*0 + 3*45*FLEN/8, x4, x1, x2)

inst_67630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822003ffffffffff; valaddr_reg:x3; val_offset:202890*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202890*0 + 3*46*FLEN/8, x4, x1, x2)

inst_67631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822007ffffffffff; valaddr_reg:x3; val_offset:202893*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202893*0 + 3*47*FLEN/8, x4, x1, x2)

inst_67632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82200fffffffffff; valaddr_reg:x3; val_offset:202896*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202896*0 + 3*48*FLEN/8, x4, x1, x2)

inst_67633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82201fffffffffff; valaddr_reg:x3; val_offset:202899*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202899*0 + 3*49*FLEN/8, x4, x1, x2)

inst_67634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82203fffffffffff; valaddr_reg:x3; val_offset:202902*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202902*0 + 3*50*FLEN/8, x4, x1, x2)

inst_67635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x82207fffffffffff; valaddr_reg:x3; val_offset:202905*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202905*0 + 3*51*FLEN/8, x4, x1, x2)

inst_67636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8220ffffffffffff; valaddr_reg:x3; val_offset:202908*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202908*0 + 3*52*FLEN/8, x4, x1, x2)

inst_67637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8221ffffffffffff; valaddr_reg:x3; val_offset:202911*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202911*0 + 3*53*FLEN/8, x4, x1, x2)

inst_67638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8223ffffffffffff; valaddr_reg:x3; val_offset:202914*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202914*0 + 3*54*FLEN/8, x4, x1, x2)

inst_67639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8227ffffffffffff; valaddr_reg:x3; val_offset:202917*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202917*0 + 3*55*FLEN/8, x4, x1, x2)

inst_67640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8228000000000000; valaddr_reg:x3; val_offset:202920*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202920*0 + 3*56*FLEN/8, x4, x1, x2)

inst_67641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822c000000000000; valaddr_reg:x3; val_offset:202923*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202923*0 + 3*57*FLEN/8, x4, x1, x2)

inst_67642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822e000000000000; valaddr_reg:x3; val_offset:202926*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202926*0 + 3*58*FLEN/8, x4, x1, x2)

inst_67643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822f000000000000; valaddr_reg:x3; val_offset:202929*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202929*0 + 3*59*FLEN/8, x4, x1, x2)

inst_67644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822f800000000000; valaddr_reg:x3; val_offset:202932*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202932*0 + 3*60*FLEN/8, x4, x1, x2)

inst_67645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fc00000000000; valaddr_reg:x3; val_offset:202935*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202935*0 + 3*61*FLEN/8, x4, x1, x2)

inst_67646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fe00000000000; valaddr_reg:x3; val_offset:202938*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202938*0 + 3*62*FLEN/8, x4, x1, x2)

inst_67647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ff00000000000; valaddr_reg:x3; val_offset:202941*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202941*0 + 3*63*FLEN/8, x4, x1, x2)

inst_67648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ff80000000000; valaddr_reg:x3; val_offset:202944*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202944*0 + 3*64*FLEN/8, x4, x1, x2)

inst_67649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffc0000000000; valaddr_reg:x3; val_offset:202947*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202947*0 + 3*65*FLEN/8, x4, x1, x2)

inst_67650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffe0000000000; valaddr_reg:x3; val_offset:202950*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202950*0 + 3*66*FLEN/8, x4, x1, x2)

inst_67651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fff0000000000; valaddr_reg:x3; val_offset:202953*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202953*0 + 3*67*FLEN/8, x4, x1, x2)

inst_67652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fff8000000000; valaddr_reg:x3; val_offset:202956*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202956*0 + 3*68*FLEN/8, x4, x1, x2)

inst_67653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffc000000000; valaddr_reg:x3; val_offset:202959*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202959*0 + 3*69*FLEN/8, x4, x1, x2)

inst_67654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffe000000000; valaddr_reg:x3; val_offset:202962*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202962*0 + 3*70*FLEN/8, x4, x1, x2)

inst_67655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffff000000000; valaddr_reg:x3; val_offset:202965*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202965*0 + 3*71*FLEN/8, x4, x1, x2)

inst_67656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffff800000000; valaddr_reg:x3; val_offset:202968*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202968*0 + 3*72*FLEN/8, x4, x1, x2)

inst_67657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffc00000000; valaddr_reg:x3; val_offset:202971*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202971*0 + 3*73*FLEN/8, x4, x1, x2)

inst_67658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffe00000000; valaddr_reg:x3; val_offset:202974*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202974*0 + 3*74*FLEN/8, x4, x1, x2)

inst_67659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffff00000000; valaddr_reg:x3; val_offset:202977*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202977*0 + 3*75*FLEN/8, x4, x1, x2)

inst_67660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffff80000000; valaddr_reg:x3; val_offset:202980*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202980*0 + 3*76*FLEN/8, x4, x1, x2)

inst_67661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffc0000000; valaddr_reg:x3; val_offset:202983*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202983*0 + 3*77*FLEN/8, x4, x1, x2)

inst_67662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffe0000000; valaddr_reg:x3; val_offset:202986*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202986*0 + 3*78*FLEN/8, x4, x1, x2)

inst_67663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffff0000000; valaddr_reg:x3; val_offset:202989*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202989*0 + 3*79*FLEN/8, x4, x1, x2)

inst_67664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffff8000000; valaddr_reg:x3; val_offset:202992*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202992*0 + 3*80*FLEN/8, x4, x1, x2)

inst_67665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffc000000; valaddr_reg:x3; val_offset:202995*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202995*0 + 3*81*FLEN/8, x4, x1, x2)

inst_67666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffe000000; valaddr_reg:x3; val_offset:202998*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202998*0 + 3*82*FLEN/8, x4, x1, x2)

inst_67667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffff000000; valaddr_reg:x3; val_offset:203001*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203001*0 + 3*83*FLEN/8, x4, x1, x2)

inst_67668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffff800000; valaddr_reg:x3; val_offset:203004*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203004*0 + 3*84*FLEN/8, x4, x1, x2)

inst_67669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffc00000; valaddr_reg:x3; val_offset:203007*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203007*0 + 3*85*FLEN/8, x4, x1, x2)

inst_67670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffe00000; valaddr_reg:x3; val_offset:203010*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203010*0 + 3*86*FLEN/8, x4, x1, x2)

inst_67671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffff00000; valaddr_reg:x3; val_offset:203013*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203013*0 + 3*87*FLEN/8, x4, x1, x2)

inst_67672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffff80000; valaddr_reg:x3; val_offset:203016*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203016*0 + 3*88*FLEN/8, x4, x1, x2)

inst_67673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffc0000; valaddr_reg:x3; val_offset:203019*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203019*0 + 3*89*FLEN/8, x4, x1, x2)

inst_67674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffe0000; valaddr_reg:x3; val_offset:203022*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203022*0 + 3*90*FLEN/8, x4, x1, x2)

inst_67675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffff0000; valaddr_reg:x3; val_offset:203025*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203025*0 + 3*91*FLEN/8, x4, x1, x2)

inst_67676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffff8000; valaddr_reg:x3; val_offset:203028*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203028*0 + 3*92*FLEN/8, x4, x1, x2)

inst_67677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffffc000; valaddr_reg:x3; val_offset:203031*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203031*0 + 3*93*FLEN/8, x4, x1, x2)

inst_67678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffffe000; valaddr_reg:x3; val_offset:203034*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203034*0 + 3*94*FLEN/8, x4, x1, x2)

inst_67679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffff000; valaddr_reg:x3; val_offset:203037*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203037*0 + 3*95*FLEN/8, x4, x1, x2)

inst_67680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffff800; valaddr_reg:x3; val_offset:203040*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203040*0 + 3*96*FLEN/8, x4, x1, x2)

inst_67681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffffc00; valaddr_reg:x3; val_offset:203043*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203043*0 + 3*97*FLEN/8, x4, x1, x2)

inst_67682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffffe00; valaddr_reg:x3; val_offset:203046*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203046*0 + 3*98*FLEN/8, x4, x1, x2)

inst_67683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffffff00; valaddr_reg:x3; val_offset:203049*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203049*0 + 3*99*FLEN/8, x4, x1, x2)

inst_67684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffffff80; valaddr_reg:x3; val_offset:203052*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203052*0 + 3*100*FLEN/8, x4, x1, x2)

inst_67685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffffffc0; valaddr_reg:x3; val_offset:203055*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203055*0 + 3*101*FLEN/8, x4, x1, x2)

inst_67686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffffffe0; valaddr_reg:x3; val_offset:203058*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203058*0 + 3*102*FLEN/8, x4, x1, x2)

inst_67687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffffff0; valaddr_reg:x3; val_offset:203061*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203061*0 + 3*103*FLEN/8, x4, x1, x2)

inst_67688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffffff8; valaddr_reg:x3; val_offset:203064*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203064*0 + 3*104*FLEN/8, x4, x1, x2)

inst_67689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffffffc; valaddr_reg:x3; val_offset:203067*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203067*0 + 3*105*FLEN/8, x4, x1, x2)

inst_67690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822ffffffffffffe; valaddr_reg:x3; val_offset:203070*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203070*0 + 3*106*FLEN/8, x4, x1, x2)

inst_67691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x022 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x822fffffffffffff; valaddr_reg:x3; val_offset:203073*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203073*0 + 3*107*FLEN/8, x4, x1, x2)

inst_67692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000000000; valaddr_reg:x3; val_offset:203076*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203076*0 + 3*108*FLEN/8, x4, x1, x2)

inst_67693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000000001; valaddr_reg:x3; val_offset:203079*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203079*0 + 3*109*FLEN/8, x4, x1, x2)

inst_67694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000000003; valaddr_reg:x3; val_offset:203082*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203082*0 + 3*110*FLEN/8, x4, x1, x2)

inst_67695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000000007; valaddr_reg:x3; val_offset:203085*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203085*0 + 3*111*FLEN/8, x4, x1, x2)

inst_67696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000000000f; valaddr_reg:x3; val_offset:203088*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203088*0 + 3*112*FLEN/8, x4, x1, x2)

inst_67697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000000001f; valaddr_reg:x3; val_offset:203091*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203091*0 + 3*113*FLEN/8, x4, x1, x2)

inst_67698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000000003f; valaddr_reg:x3; val_offset:203094*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203094*0 + 3*114*FLEN/8, x4, x1, x2)

inst_67699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000000007f; valaddr_reg:x3; val_offset:203097*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203097*0 + 3*115*FLEN/8, x4, x1, x2)

inst_67700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000000000ff; valaddr_reg:x3; val_offset:203100*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203100*0 + 3*116*FLEN/8, x4, x1, x2)

inst_67701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000000001ff; valaddr_reg:x3; val_offset:203103*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203103*0 + 3*117*FLEN/8, x4, x1, x2)

inst_67702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000000003ff; valaddr_reg:x3; val_offset:203106*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203106*0 + 3*118*FLEN/8, x4, x1, x2)

inst_67703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000000007ff; valaddr_reg:x3; val_offset:203109*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203109*0 + 3*119*FLEN/8, x4, x1, x2)

inst_67704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000000fff; valaddr_reg:x3; val_offset:203112*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203112*0 + 3*120*FLEN/8, x4, x1, x2)

inst_67705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000001fff; valaddr_reg:x3; val_offset:203115*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203115*0 + 3*121*FLEN/8, x4, x1, x2)

inst_67706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000003fff; valaddr_reg:x3; val_offset:203118*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203118*0 + 3*122*FLEN/8, x4, x1, x2)

inst_67707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000007fff; valaddr_reg:x3; val_offset:203121*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203121*0 + 3*123*FLEN/8, x4, x1, x2)

inst_67708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000000ffff; valaddr_reg:x3; val_offset:203124*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203124*0 + 3*124*FLEN/8, x4, x1, x2)

inst_67709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000001ffff; valaddr_reg:x3; val_offset:203127*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203127*0 + 3*125*FLEN/8, x4, x1, x2)

inst_67710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000003ffff; valaddr_reg:x3; val_offset:203130*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203130*0 + 3*126*FLEN/8, x4, x1, x2)

inst_67711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000007ffff; valaddr_reg:x3; val_offset:203133*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203133*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_67712:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000000fffff; valaddr_reg:x3; val_offset:203136*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203136*0 + 3*128*FLEN/8, x4, x1, x2)

inst_67713:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000001fffff; valaddr_reg:x3; val_offset:203139*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203139*0 + 3*129*FLEN/8, x4, x1, x2)

inst_67714:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000003fffff; valaddr_reg:x3; val_offset:203142*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203142*0 + 3*130*FLEN/8, x4, x1, x2)

inst_67715:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000007fffff; valaddr_reg:x3; val_offset:203145*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203145*0 + 3*131*FLEN/8, x4, x1, x2)

inst_67716:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000000ffffff; valaddr_reg:x3; val_offset:203148*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203148*0 + 3*132*FLEN/8, x4, x1, x2)

inst_67717:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000001ffffff; valaddr_reg:x3; val_offset:203151*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203151*0 + 3*133*FLEN/8, x4, x1, x2)

inst_67718:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000003ffffff; valaddr_reg:x3; val_offset:203154*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203154*0 + 3*134*FLEN/8, x4, x1, x2)

inst_67719:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000007ffffff; valaddr_reg:x3; val_offset:203157*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203157*0 + 3*135*FLEN/8, x4, x1, x2)

inst_67720:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000000fffffff; valaddr_reg:x3; val_offset:203160*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203160*0 + 3*136*FLEN/8, x4, x1, x2)

inst_67721:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000001fffffff; valaddr_reg:x3; val_offset:203163*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203163*0 + 3*137*FLEN/8, x4, x1, x2)

inst_67722:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000003fffffff; valaddr_reg:x3; val_offset:203166*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203166*0 + 3*138*FLEN/8, x4, x1, x2)

inst_67723:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000007fffffff; valaddr_reg:x3; val_offset:203169*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203169*0 + 3*139*FLEN/8, x4, x1, x2)

inst_67724:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500000ffffffff; valaddr_reg:x3; val_offset:203172*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203172*0 + 3*140*FLEN/8, x4, x1, x2)

inst_67725:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500001ffffffff; valaddr_reg:x3; val_offset:203175*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203175*0 + 3*141*FLEN/8, x4, x1, x2)

inst_67726:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500003ffffffff; valaddr_reg:x3; val_offset:203178*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203178*0 + 3*142*FLEN/8, x4, x1, x2)

inst_67727:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500007ffffffff; valaddr_reg:x3; val_offset:203181*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203181*0 + 3*143*FLEN/8, x4, x1, x2)

inst_67728:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50000fffffffff; valaddr_reg:x3; val_offset:203184*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203184*0 + 3*144*FLEN/8, x4, x1, x2)

inst_67729:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50001fffffffff; valaddr_reg:x3; val_offset:203187*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203187*0 + 3*145*FLEN/8, x4, x1, x2)

inst_67730:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50003fffffffff; valaddr_reg:x3; val_offset:203190*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203190*0 + 3*146*FLEN/8, x4, x1, x2)

inst_67731:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50007fffffffff; valaddr_reg:x3; val_offset:203193*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203193*0 + 3*147*FLEN/8, x4, x1, x2)

inst_67732:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5000ffffffffff; valaddr_reg:x3; val_offset:203196*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203196*0 + 3*148*FLEN/8, x4, x1, x2)

inst_67733:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5001ffffffffff; valaddr_reg:x3; val_offset:203199*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203199*0 + 3*149*FLEN/8, x4, x1, x2)

inst_67734:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5003ffffffffff; valaddr_reg:x3; val_offset:203202*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203202*0 + 3*150*FLEN/8, x4, x1, x2)

inst_67735:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5007ffffffffff; valaddr_reg:x3; val_offset:203205*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203205*0 + 3*151*FLEN/8, x4, x1, x2)

inst_67736:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b500fffffffffff; valaddr_reg:x3; val_offset:203208*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203208*0 + 3*152*FLEN/8, x4, x1, x2)

inst_67737:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b501fffffffffff; valaddr_reg:x3; val_offset:203211*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203211*0 + 3*153*FLEN/8, x4, x1, x2)

inst_67738:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b503fffffffffff; valaddr_reg:x3; val_offset:203214*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203214*0 + 3*154*FLEN/8, x4, x1, x2)

inst_67739:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b507fffffffffff; valaddr_reg:x3; val_offset:203217*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203217*0 + 3*155*FLEN/8, x4, x1, x2)

inst_67740:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b50ffffffffffff; valaddr_reg:x3; val_offset:203220*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203220*0 + 3*156*FLEN/8, x4, x1, x2)

inst_67741:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b51ffffffffffff; valaddr_reg:x3; val_offset:203223*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203223*0 + 3*157*FLEN/8, x4, x1, x2)

inst_67742:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b53ffffffffffff; valaddr_reg:x3; val_offset:203226*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203226*0 + 3*158*FLEN/8, x4, x1, x2)

inst_67743:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b57ffffffffffff; valaddr_reg:x3; val_offset:203229*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203229*0 + 3*159*FLEN/8, x4, x1, x2)

inst_67744:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b58000000000000; valaddr_reg:x3; val_offset:203232*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203232*0 + 3*160*FLEN/8, x4, x1, x2)

inst_67745:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5c000000000000; valaddr_reg:x3; val_offset:203235*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203235*0 + 3*161*FLEN/8, x4, x1, x2)

inst_67746:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5e000000000000; valaddr_reg:x3; val_offset:203238*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203238*0 + 3*162*FLEN/8, x4, x1, x2)

inst_67747:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5f000000000000; valaddr_reg:x3; val_offset:203241*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203241*0 + 3*163*FLEN/8, x4, x1, x2)

inst_67748:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5f800000000000; valaddr_reg:x3; val_offset:203244*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203244*0 + 3*164*FLEN/8, x4, x1, x2)

inst_67749:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fc00000000000; valaddr_reg:x3; val_offset:203247*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203247*0 + 3*165*FLEN/8, x4, x1, x2)

inst_67750:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fe00000000000; valaddr_reg:x3; val_offset:203250*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203250*0 + 3*166*FLEN/8, x4, x1, x2)

inst_67751:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ff00000000000; valaddr_reg:x3; val_offset:203253*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203253*0 + 3*167*FLEN/8, x4, x1, x2)

inst_67752:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ff80000000000; valaddr_reg:x3; val_offset:203256*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203256*0 + 3*168*FLEN/8, x4, x1, x2)

inst_67753:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffc0000000000; valaddr_reg:x3; val_offset:203259*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203259*0 + 3*169*FLEN/8, x4, x1, x2)

inst_67754:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffe0000000000; valaddr_reg:x3; val_offset:203262*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203262*0 + 3*170*FLEN/8, x4, x1, x2)

inst_67755:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fff0000000000; valaddr_reg:x3; val_offset:203265*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203265*0 + 3*171*FLEN/8, x4, x1, x2)

inst_67756:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fff8000000000; valaddr_reg:x3; val_offset:203268*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203268*0 + 3*172*FLEN/8, x4, x1, x2)

inst_67757:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffc000000000; valaddr_reg:x3; val_offset:203271*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203271*0 + 3*173*FLEN/8, x4, x1, x2)

inst_67758:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffe000000000; valaddr_reg:x3; val_offset:203274*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203274*0 + 3*174*FLEN/8, x4, x1, x2)

inst_67759:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffff000000000; valaddr_reg:x3; val_offset:203277*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203277*0 + 3*175*FLEN/8, x4, x1, x2)

inst_67760:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffff800000000; valaddr_reg:x3; val_offset:203280*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203280*0 + 3*176*FLEN/8, x4, x1, x2)

inst_67761:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffc00000000; valaddr_reg:x3; val_offset:203283*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203283*0 + 3*177*FLEN/8, x4, x1, x2)

inst_67762:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffe00000000; valaddr_reg:x3; val_offset:203286*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203286*0 + 3*178*FLEN/8, x4, x1, x2)

inst_67763:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffff00000000; valaddr_reg:x3; val_offset:203289*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203289*0 + 3*179*FLEN/8, x4, x1, x2)

inst_67764:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffff80000000; valaddr_reg:x3; val_offset:203292*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203292*0 + 3*180*FLEN/8, x4, x1, x2)

inst_67765:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffc0000000; valaddr_reg:x3; val_offset:203295*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203295*0 + 3*181*FLEN/8, x4, x1, x2)

inst_67766:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffe0000000; valaddr_reg:x3; val_offset:203298*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203298*0 + 3*182*FLEN/8, x4, x1, x2)

inst_67767:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffff0000000; valaddr_reg:x3; val_offset:203301*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203301*0 + 3*183*FLEN/8, x4, x1, x2)

inst_67768:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffff8000000; valaddr_reg:x3; val_offset:203304*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203304*0 + 3*184*FLEN/8, x4, x1, x2)

inst_67769:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffc000000; valaddr_reg:x3; val_offset:203307*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203307*0 + 3*185*FLEN/8, x4, x1, x2)

inst_67770:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffe000000; valaddr_reg:x3; val_offset:203310*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203310*0 + 3*186*FLEN/8, x4, x1, x2)

inst_67771:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffff000000; valaddr_reg:x3; val_offset:203313*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203313*0 + 3*187*FLEN/8, x4, x1, x2)

inst_67772:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffff800000; valaddr_reg:x3; val_offset:203316*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203316*0 + 3*188*FLEN/8, x4, x1, x2)

inst_67773:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffc00000; valaddr_reg:x3; val_offset:203319*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203319*0 + 3*189*FLEN/8, x4, x1, x2)

inst_67774:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffe00000; valaddr_reg:x3; val_offset:203322*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203322*0 + 3*190*FLEN/8, x4, x1, x2)

inst_67775:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffff00000; valaddr_reg:x3; val_offset:203325*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203325*0 + 3*191*FLEN/8, x4, x1, x2)

inst_67776:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffff80000; valaddr_reg:x3; val_offset:203328*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203328*0 + 3*192*FLEN/8, x4, x1, x2)

inst_67777:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffc0000; valaddr_reg:x3; val_offset:203331*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203331*0 + 3*193*FLEN/8, x4, x1, x2)

inst_67778:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffe0000; valaddr_reg:x3; val_offset:203334*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203334*0 + 3*194*FLEN/8, x4, x1, x2)

inst_67779:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffff0000; valaddr_reg:x3; val_offset:203337*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203337*0 + 3*195*FLEN/8, x4, x1, x2)

inst_67780:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffff8000; valaddr_reg:x3; val_offset:203340*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203340*0 + 3*196*FLEN/8, x4, x1, x2)

inst_67781:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffffc000; valaddr_reg:x3; val_offset:203343*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203343*0 + 3*197*FLEN/8, x4, x1, x2)

inst_67782:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffffe000; valaddr_reg:x3; val_offset:203346*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203346*0 + 3*198*FLEN/8, x4, x1, x2)

inst_67783:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffff000; valaddr_reg:x3; val_offset:203349*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203349*0 + 3*199*FLEN/8, x4, x1, x2)

inst_67784:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffff800; valaddr_reg:x3; val_offset:203352*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203352*0 + 3*200*FLEN/8, x4, x1, x2)

inst_67785:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffffc00; valaddr_reg:x3; val_offset:203355*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203355*0 + 3*201*FLEN/8, x4, x1, x2)

inst_67786:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffffe00; valaddr_reg:x3; val_offset:203358*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203358*0 + 3*202*FLEN/8, x4, x1, x2)

inst_67787:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffffff00; valaddr_reg:x3; val_offset:203361*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203361*0 + 3*203*FLEN/8, x4, x1, x2)

inst_67788:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffffff80; valaddr_reg:x3; val_offset:203364*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203364*0 + 3*204*FLEN/8, x4, x1, x2)

inst_67789:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffffffc0; valaddr_reg:x3; val_offset:203367*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203367*0 + 3*205*FLEN/8, x4, x1, x2)

inst_67790:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffffffe0; valaddr_reg:x3; val_offset:203370*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203370*0 + 3*206*FLEN/8, x4, x1, x2)

inst_67791:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffffff0; valaddr_reg:x3; val_offset:203373*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203373*0 + 3*207*FLEN/8, x4, x1, x2)

inst_67792:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffffff8; valaddr_reg:x3; val_offset:203376*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203376*0 + 3*208*FLEN/8, x4, x1, x2)

inst_67793:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffffffc; valaddr_reg:x3; val_offset:203379*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203379*0 + 3*209*FLEN/8, x4, x1, x2)

inst_67794:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5ffffffffffffe; valaddr_reg:x3; val_offset:203382*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203382*0 + 3*210*FLEN/8, x4, x1, x2)

inst_67795:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3b5 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3b5fffffffffffff; valaddr_reg:x3; val_offset:203385*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203385*0 + 3*211*FLEN/8, x4, x1, x2)

inst_67796:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:203388*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203388*0 + 3*212*FLEN/8, x4, x1, x2)

inst_67797:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:203391*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203391*0 + 3*213*FLEN/8, x4, x1, x2)

inst_67798:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:203394*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203394*0 + 3*214*FLEN/8, x4, x1, x2)

inst_67799:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:203397*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203397*0 + 3*215*FLEN/8, x4, x1, x2)

inst_67800:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:203400*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203400*0 + 3*216*FLEN/8, x4, x1, x2)

inst_67801:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:203403*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203403*0 + 3*217*FLEN/8, x4, x1, x2)

inst_67802:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:203406*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203406*0 + 3*218*FLEN/8, x4, x1, x2)

inst_67803:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:203409*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203409*0 + 3*219*FLEN/8, x4, x1, x2)

inst_67804:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:203412*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203412*0 + 3*220*FLEN/8, x4, x1, x2)

inst_67805:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:203415*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203415*0 + 3*221*FLEN/8, x4, x1, x2)

inst_67806:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:203418*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203418*0 + 3*222*FLEN/8, x4, x1, x2)

inst_67807:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:203421*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203421*0 + 3*223*FLEN/8, x4, x1, x2)

inst_67808:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:203424*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203424*0 + 3*224*FLEN/8, x4, x1, x2)

inst_67809:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:203427*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203427*0 + 3*225*FLEN/8, x4, x1, x2)

inst_67810:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:203430*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203430*0 + 3*226*FLEN/8, x4, x1, x2)

inst_67811:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:203433*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203433*0 + 3*227*FLEN/8, x4, x1, x2)

inst_67812:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:203436*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203436*0 + 3*228*FLEN/8, x4, x1, x2)

inst_67813:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:203439*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203439*0 + 3*229*FLEN/8, x4, x1, x2)

inst_67814:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:203442*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203442*0 + 3*230*FLEN/8, x4, x1, x2)

inst_67815:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:203445*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203445*0 + 3*231*FLEN/8, x4, x1, x2)

inst_67816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:203448*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203448*0 + 3*232*FLEN/8, x4, x1, x2)

inst_67817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f910245c97b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7bf2dce3b9647 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f910245c97b; op2val:0x2037bf2dce3b9647;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:203451*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203451*0 + 3*233*FLEN/8, x4, x1, x2)

inst_67818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:203454*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203454*0 + 3*234*FLEN/8, x4, x1, x2)

inst_67819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:203457*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203457*0 + 3*235*FLEN/8, x4, x1, x2)

inst_67820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:203460*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203460*0 + 3*236*FLEN/8, x4, x1, x2)

inst_67821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:203463*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203463*0 + 3*237*FLEN/8, x4, x1, x2)

inst_67822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:203466*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203466*0 + 3*238*FLEN/8, x4, x1, x2)

inst_67823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:203469*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203469*0 + 3*239*FLEN/8, x4, x1, x2)

inst_67824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:203472*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203472*0 + 3*240*FLEN/8, x4, x1, x2)

inst_67825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:203475*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203475*0 + 3*241*FLEN/8, x4, x1, x2)

inst_67826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:203478*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203478*0 + 3*242*FLEN/8, x4, x1, x2)

inst_67827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:203481*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203481*0 + 3*243*FLEN/8, x4, x1, x2)

inst_67828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:203484*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203484*0 + 3*244*FLEN/8, x4, x1, x2)

inst_67829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:203487*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203487*0 + 3*245*FLEN/8, x4, x1, x2)

inst_67830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:203490*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203490*0 + 3*246*FLEN/8, x4, x1, x2)

inst_67831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:203493*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203493*0 + 3*247*FLEN/8, x4, x1, x2)

inst_67832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:203496*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203496*0 + 3*248*FLEN/8, x4, x1, x2)

inst_67833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:203499*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203499*0 + 3*249*FLEN/8, x4, x1, x2)

inst_67834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:203502*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203502*0 + 3*250*FLEN/8, x4, x1, x2)

inst_67835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:203505*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203505*0 + 3*251*FLEN/8, x4, x1, x2)

inst_67836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:203508*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203508*0 + 3*252*FLEN/8, x4, x1, x2)

inst_67837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:203511*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203511*0 + 3*253*FLEN/8, x4, x1, x2)

inst_67838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:203514*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203514*0 + 3*254*FLEN/8, x4, x1, x2)

inst_67839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:203517*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203517*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_67840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000000000; valaddr_reg:x3; val_offset:203520*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203520*0 + 3*256*FLEN/8, x4, x1, x2)

inst_67841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000000001; valaddr_reg:x3; val_offset:203523*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203523*0 + 3*257*FLEN/8, x4, x1, x2)

inst_67842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000000003; valaddr_reg:x3; val_offset:203526*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203526*0 + 3*258*FLEN/8, x4, x1, x2)

inst_67843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000000007; valaddr_reg:x3; val_offset:203529*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203529*0 + 3*259*FLEN/8, x4, x1, x2)

inst_67844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000000000f; valaddr_reg:x3; val_offset:203532*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203532*0 + 3*260*FLEN/8, x4, x1, x2)

inst_67845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000000001f; valaddr_reg:x3; val_offset:203535*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203535*0 + 3*261*FLEN/8, x4, x1, x2)

inst_67846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000000003f; valaddr_reg:x3; val_offset:203538*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203538*0 + 3*262*FLEN/8, x4, x1, x2)

inst_67847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000000007f; valaddr_reg:x3; val_offset:203541*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203541*0 + 3*263*FLEN/8, x4, x1, x2)

inst_67848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000000000ff; valaddr_reg:x3; val_offset:203544*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203544*0 + 3*264*FLEN/8, x4, x1, x2)

inst_67849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000000001ff; valaddr_reg:x3; val_offset:203547*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203547*0 + 3*265*FLEN/8, x4, x1, x2)

inst_67850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000000003ff; valaddr_reg:x3; val_offset:203550*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203550*0 + 3*266*FLEN/8, x4, x1, x2)

inst_67851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000000007ff; valaddr_reg:x3; val_offset:203553*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203553*0 + 3*267*FLEN/8, x4, x1, x2)

inst_67852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000000fff; valaddr_reg:x3; val_offset:203556*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203556*0 + 3*268*FLEN/8, x4, x1, x2)

inst_67853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000001fff; valaddr_reg:x3; val_offset:203559*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203559*0 + 3*269*FLEN/8, x4, x1, x2)

inst_67854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000003fff; valaddr_reg:x3; val_offset:203562*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203562*0 + 3*270*FLEN/8, x4, x1, x2)

inst_67855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000007fff; valaddr_reg:x3; val_offset:203565*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203565*0 + 3*271*FLEN/8, x4, x1, x2)

inst_67856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000000ffff; valaddr_reg:x3; val_offset:203568*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203568*0 + 3*272*FLEN/8, x4, x1, x2)

inst_67857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000001ffff; valaddr_reg:x3; val_offset:203571*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203571*0 + 3*273*FLEN/8, x4, x1, x2)

inst_67858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000003ffff; valaddr_reg:x3; val_offset:203574*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203574*0 + 3*274*FLEN/8, x4, x1, x2)

inst_67859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000007ffff; valaddr_reg:x3; val_offset:203577*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203577*0 + 3*275*FLEN/8, x4, x1, x2)

inst_67860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000000fffff; valaddr_reg:x3; val_offset:203580*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203580*0 + 3*276*FLEN/8, x4, x1, x2)

inst_67861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000001fffff; valaddr_reg:x3; val_offset:203583*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203583*0 + 3*277*FLEN/8, x4, x1, x2)

inst_67862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000003fffff; valaddr_reg:x3; val_offset:203586*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203586*0 + 3*278*FLEN/8, x4, x1, x2)

inst_67863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000007fffff; valaddr_reg:x3; val_offset:203589*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203589*0 + 3*279*FLEN/8, x4, x1, x2)

inst_67864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000000ffffff; valaddr_reg:x3; val_offset:203592*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203592*0 + 3*280*FLEN/8, x4, x1, x2)

inst_67865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000001ffffff; valaddr_reg:x3; val_offset:203595*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203595*0 + 3*281*FLEN/8, x4, x1, x2)

inst_67866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000003ffffff; valaddr_reg:x3; val_offset:203598*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203598*0 + 3*282*FLEN/8, x4, x1, x2)

inst_67867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000007ffffff; valaddr_reg:x3; val_offset:203601*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203601*0 + 3*283*FLEN/8, x4, x1, x2)

inst_67868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000000fffffff; valaddr_reg:x3; val_offset:203604*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203604*0 + 3*284*FLEN/8, x4, x1, x2)

inst_67869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000001fffffff; valaddr_reg:x3; val_offset:203607*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203607*0 + 3*285*FLEN/8, x4, x1, x2)

inst_67870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000003fffffff; valaddr_reg:x3; val_offset:203610*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203610*0 + 3*286*FLEN/8, x4, x1, x2)

inst_67871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000007fffffff; valaddr_reg:x3; val_offset:203613*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203613*0 + 3*287*FLEN/8, x4, x1, x2)

inst_67872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00000ffffffff; valaddr_reg:x3; val_offset:203616*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203616*0 + 3*288*FLEN/8, x4, x1, x2)

inst_67873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00001ffffffff; valaddr_reg:x3; val_offset:203619*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203619*0 + 3*289*FLEN/8, x4, x1, x2)

inst_67874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00003ffffffff; valaddr_reg:x3; val_offset:203622*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203622*0 + 3*290*FLEN/8, x4, x1, x2)

inst_67875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00007ffffffff; valaddr_reg:x3; val_offset:203625*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203625*0 + 3*291*FLEN/8, x4, x1, x2)

inst_67876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0000fffffffff; valaddr_reg:x3; val_offset:203628*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203628*0 + 3*292*FLEN/8, x4, x1, x2)

inst_67877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0001fffffffff; valaddr_reg:x3; val_offset:203631*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203631*0 + 3*293*FLEN/8, x4, x1, x2)

inst_67878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0003fffffffff; valaddr_reg:x3; val_offset:203634*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203634*0 + 3*294*FLEN/8, x4, x1, x2)

inst_67879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0007fffffffff; valaddr_reg:x3; val_offset:203637*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203637*0 + 3*295*FLEN/8, x4, x1, x2)

inst_67880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d000ffffffffff; valaddr_reg:x3; val_offset:203640*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203640*0 + 3*296*FLEN/8, x4, x1, x2)

inst_67881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d001ffffffffff; valaddr_reg:x3; val_offset:203643*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203643*0 + 3*297*FLEN/8, x4, x1, x2)

inst_67882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d003ffffffffff; valaddr_reg:x3; val_offset:203646*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203646*0 + 3*298*FLEN/8, x4, x1, x2)

inst_67883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d007ffffffffff; valaddr_reg:x3; val_offset:203649*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203649*0 + 3*299*FLEN/8, x4, x1, x2)

inst_67884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d00fffffffffff; valaddr_reg:x3; val_offset:203652*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203652*0 + 3*300*FLEN/8, x4, x1, x2)

inst_67885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d01fffffffffff; valaddr_reg:x3; val_offset:203655*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203655*0 + 3*301*FLEN/8, x4, x1, x2)

inst_67886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d03fffffffffff; valaddr_reg:x3; val_offset:203658*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203658*0 + 3*302*FLEN/8, x4, x1, x2)

inst_67887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d07fffffffffff; valaddr_reg:x3; val_offset:203661*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203661*0 + 3*303*FLEN/8, x4, x1, x2)

inst_67888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d0ffffffffffff; valaddr_reg:x3; val_offset:203664*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203664*0 + 3*304*FLEN/8, x4, x1, x2)

inst_67889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d1ffffffffffff; valaddr_reg:x3; val_offset:203667*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203667*0 + 3*305*FLEN/8, x4, x1, x2)

inst_67890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d3ffffffffffff; valaddr_reg:x3; val_offset:203670*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203670*0 + 3*306*FLEN/8, x4, x1, x2)

inst_67891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d7ffffffffffff; valaddr_reg:x3; val_offset:203673*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203673*0 + 3*307*FLEN/8, x4, x1, x2)

inst_67892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83d8000000000000; valaddr_reg:x3; val_offset:203676*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203676*0 + 3*308*FLEN/8, x4, x1, x2)

inst_67893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dc000000000000; valaddr_reg:x3; val_offset:203679*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203679*0 + 3*309*FLEN/8, x4, x1, x2)

inst_67894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83de000000000000; valaddr_reg:x3; val_offset:203682*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203682*0 + 3*310*FLEN/8, x4, x1, x2)

inst_67895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83df000000000000; valaddr_reg:x3; val_offset:203685*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203685*0 + 3*311*FLEN/8, x4, x1, x2)

inst_67896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83df800000000000; valaddr_reg:x3; val_offset:203688*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203688*0 + 3*312*FLEN/8, x4, x1, x2)

inst_67897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfc00000000000; valaddr_reg:x3; val_offset:203691*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203691*0 + 3*313*FLEN/8, x4, x1, x2)

inst_67898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfe00000000000; valaddr_reg:x3; val_offset:203694*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203694*0 + 3*314*FLEN/8, x4, x1, x2)

inst_67899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dff00000000000; valaddr_reg:x3; val_offset:203697*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203697*0 + 3*315*FLEN/8, x4, x1, x2)

inst_67900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dff80000000000; valaddr_reg:x3; val_offset:203700*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203700*0 + 3*316*FLEN/8, x4, x1, x2)

inst_67901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffc0000000000; valaddr_reg:x3; val_offset:203703*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203703*0 + 3*317*FLEN/8, x4, x1, x2)

inst_67902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffe0000000000; valaddr_reg:x3; val_offset:203706*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203706*0 + 3*318*FLEN/8, x4, x1, x2)

inst_67903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfff0000000000; valaddr_reg:x3; val_offset:203709*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203709*0 + 3*319*FLEN/8, x4, x1, x2)

inst_67904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfff8000000000; valaddr_reg:x3; val_offset:203712*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203712*0 + 3*320*FLEN/8, x4, x1, x2)

inst_67905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffc000000000; valaddr_reg:x3; val_offset:203715*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203715*0 + 3*321*FLEN/8, x4, x1, x2)

inst_67906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffe000000000; valaddr_reg:x3; val_offset:203718*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203718*0 + 3*322*FLEN/8, x4, x1, x2)

inst_67907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffff000000000; valaddr_reg:x3; val_offset:203721*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203721*0 + 3*323*FLEN/8, x4, x1, x2)

inst_67908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffff800000000; valaddr_reg:x3; val_offset:203724*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203724*0 + 3*324*FLEN/8, x4, x1, x2)

inst_67909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffc00000000; valaddr_reg:x3; val_offset:203727*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203727*0 + 3*325*FLEN/8, x4, x1, x2)

inst_67910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffe00000000; valaddr_reg:x3; val_offset:203730*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203730*0 + 3*326*FLEN/8, x4, x1, x2)

inst_67911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffff00000000; valaddr_reg:x3; val_offset:203733*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203733*0 + 3*327*FLEN/8, x4, x1, x2)

inst_67912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffff80000000; valaddr_reg:x3; val_offset:203736*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203736*0 + 3*328*FLEN/8, x4, x1, x2)

inst_67913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffc0000000; valaddr_reg:x3; val_offset:203739*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203739*0 + 3*329*FLEN/8, x4, x1, x2)

inst_67914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffe0000000; valaddr_reg:x3; val_offset:203742*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203742*0 + 3*330*FLEN/8, x4, x1, x2)

inst_67915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffff0000000; valaddr_reg:x3; val_offset:203745*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203745*0 + 3*331*FLEN/8, x4, x1, x2)

inst_67916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffff8000000; valaddr_reg:x3; val_offset:203748*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203748*0 + 3*332*FLEN/8, x4, x1, x2)

inst_67917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffc000000; valaddr_reg:x3; val_offset:203751*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203751*0 + 3*333*FLEN/8, x4, x1, x2)

inst_67918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffe000000; valaddr_reg:x3; val_offset:203754*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203754*0 + 3*334*FLEN/8, x4, x1, x2)

inst_67919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffff000000; valaddr_reg:x3; val_offset:203757*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203757*0 + 3*335*FLEN/8, x4, x1, x2)

inst_67920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffff800000; valaddr_reg:x3; val_offset:203760*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203760*0 + 3*336*FLEN/8, x4, x1, x2)

inst_67921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffc00000; valaddr_reg:x3; val_offset:203763*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203763*0 + 3*337*FLEN/8, x4, x1, x2)

inst_67922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffe00000; valaddr_reg:x3; val_offset:203766*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203766*0 + 3*338*FLEN/8, x4, x1, x2)

inst_67923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffff00000; valaddr_reg:x3; val_offset:203769*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203769*0 + 3*339*FLEN/8, x4, x1, x2)

inst_67924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffff80000; valaddr_reg:x3; val_offset:203772*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203772*0 + 3*340*FLEN/8, x4, x1, x2)

inst_67925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffc0000; valaddr_reg:x3; val_offset:203775*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203775*0 + 3*341*FLEN/8, x4, x1, x2)

inst_67926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffe0000; valaddr_reg:x3; val_offset:203778*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203778*0 + 3*342*FLEN/8, x4, x1, x2)

inst_67927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffff0000; valaddr_reg:x3; val_offset:203781*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203781*0 + 3*343*FLEN/8, x4, x1, x2)

inst_67928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffff8000; valaddr_reg:x3; val_offset:203784*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203784*0 + 3*344*FLEN/8, x4, x1, x2)

inst_67929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffffc000; valaddr_reg:x3; val_offset:203787*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203787*0 + 3*345*FLEN/8, x4, x1, x2)

inst_67930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffffe000; valaddr_reg:x3; val_offset:203790*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203790*0 + 3*346*FLEN/8, x4, x1, x2)

inst_67931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffff000; valaddr_reg:x3; val_offset:203793*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203793*0 + 3*347*FLEN/8, x4, x1, x2)

inst_67932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffff800; valaddr_reg:x3; val_offset:203796*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203796*0 + 3*348*FLEN/8, x4, x1, x2)

inst_67933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffffc00; valaddr_reg:x3; val_offset:203799*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203799*0 + 3*349*FLEN/8, x4, x1, x2)

inst_67934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffffe00; valaddr_reg:x3; val_offset:203802*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203802*0 + 3*350*FLEN/8, x4, x1, x2)

inst_67935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffffff00; valaddr_reg:x3; val_offset:203805*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203805*0 + 3*351*FLEN/8, x4, x1, x2)

inst_67936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffffff80; valaddr_reg:x3; val_offset:203808*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203808*0 + 3*352*FLEN/8, x4, x1, x2)

inst_67937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffffffc0; valaddr_reg:x3; val_offset:203811*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203811*0 + 3*353*FLEN/8, x4, x1, x2)

inst_67938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffffffe0; valaddr_reg:x3; val_offset:203814*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203814*0 + 3*354*FLEN/8, x4, x1, x2)

inst_67939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffffff0; valaddr_reg:x3; val_offset:203817*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203817*0 + 3*355*FLEN/8, x4, x1, x2)

inst_67940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffffff8; valaddr_reg:x3; val_offset:203820*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203820*0 + 3*356*FLEN/8, x4, x1, x2)

inst_67941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffffffc; valaddr_reg:x3; val_offset:203823*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203823*0 + 3*357*FLEN/8, x4, x1, x2)

inst_67942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dffffffffffffe; valaddr_reg:x3; val_offset:203826*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203826*0 + 3*358*FLEN/8, x4, x1, x2)

inst_67943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x598a25addbf15 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa598a25addbf15; op2val:0x8000;
op3val:0x83dfffffffffffff; valaddr_reg:x3; val_offset:203829*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203829*0 + 3*359*FLEN/8, x4, x1, x2)

inst_67944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000000000; valaddr_reg:x3; val_offset:203832*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203832*0 + 3*360*FLEN/8, x4, x1, x2)

inst_67945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000000001; valaddr_reg:x3; val_offset:203835*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203835*0 + 3*361*FLEN/8, x4, x1, x2)

inst_67946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000000003; valaddr_reg:x3; val_offset:203838*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203838*0 + 3*362*FLEN/8, x4, x1, x2)

inst_67947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000000007; valaddr_reg:x3; val_offset:203841*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203841*0 + 3*363*FLEN/8, x4, x1, x2)

inst_67948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000000000f; valaddr_reg:x3; val_offset:203844*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203844*0 + 3*364*FLEN/8, x4, x1, x2)

inst_67949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000000001f; valaddr_reg:x3; val_offset:203847*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203847*0 + 3*365*FLEN/8, x4, x1, x2)

inst_67950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000000003f; valaddr_reg:x3; val_offset:203850*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203850*0 + 3*366*FLEN/8, x4, x1, x2)

inst_67951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000000007f; valaddr_reg:x3; val_offset:203853*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203853*0 + 3*367*FLEN/8, x4, x1, x2)

inst_67952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000000000ff; valaddr_reg:x3; val_offset:203856*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203856*0 + 3*368*FLEN/8, x4, x1, x2)

inst_67953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000000001ff; valaddr_reg:x3; val_offset:203859*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203859*0 + 3*369*FLEN/8, x4, x1, x2)

inst_67954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000000003ff; valaddr_reg:x3; val_offset:203862*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203862*0 + 3*370*FLEN/8, x4, x1, x2)

inst_67955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000000007ff; valaddr_reg:x3; val_offset:203865*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203865*0 + 3*371*FLEN/8, x4, x1, x2)

inst_67956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000000fff; valaddr_reg:x3; val_offset:203868*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203868*0 + 3*372*FLEN/8, x4, x1, x2)

inst_67957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000001fff; valaddr_reg:x3; val_offset:203871*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203871*0 + 3*373*FLEN/8, x4, x1, x2)

inst_67958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000003fff; valaddr_reg:x3; val_offset:203874*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203874*0 + 3*374*FLEN/8, x4, x1, x2)

inst_67959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000007fff; valaddr_reg:x3; val_offset:203877*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203877*0 + 3*375*FLEN/8, x4, x1, x2)

inst_67960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000000ffff; valaddr_reg:x3; val_offset:203880*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203880*0 + 3*376*FLEN/8, x4, x1, x2)

inst_67961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000001ffff; valaddr_reg:x3; val_offset:203883*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203883*0 + 3*377*FLEN/8, x4, x1, x2)

inst_67962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000003ffff; valaddr_reg:x3; val_offset:203886*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203886*0 + 3*378*FLEN/8, x4, x1, x2)

inst_67963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000007ffff; valaddr_reg:x3; val_offset:203889*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203889*0 + 3*379*FLEN/8, x4, x1, x2)

inst_67964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000000fffff; valaddr_reg:x3; val_offset:203892*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203892*0 + 3*380*FLEN/8, x4, x1, x2)

inst_67965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000001fffff; valaddr_reg:x3; val_offset:203895*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203895*0 + 3*381*FLEN/8, x4, x1, x2)

inst_67966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000003fffff; valaddr_reg:x3; val_offset:203898*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203898*0 + 3*382*FLEN/8, x4, x1, x2)

inst_67967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000007fffff; valaddr_reg:x3; val_offset:203901*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203901*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_67968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000000ffffff; valaddr_reg:x3; val_offset:203904*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203904*0 + 3*384*FLEN/8, x4, x1, x2)

inst_67969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000001ffffff; valaddr_reg:x3; val_offset:203907*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203907*0 + 3*385*FLEN/8, x4, x1, x2)

inst_67970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000003ffffff; valaddr_reg:x3; val_offset:203910*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203910*0 + 3*386*FLEN/8, x4, x1, x2)

inst_67971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000007ffffff; valaddr_reg:x3; val_offset:203913*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203913*0 + 3*387*FLEN/8, x4, x1, x2)

inst_67972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000000fffffff; valaddr_reg:x3; val_offset:203916*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203916*0 + 3*388*FLEN/8, x4, x1, x2)

inst_67973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000001fffffff; valaddr_reg:x3; val_offset:203919*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203919*0 + 3*389*FLEN/8, x4, x1, x2)

inst_67974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000003fffffff; valaddr_reg:x3; val_offset:203922*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203922*0 + 3*390*FLEN/8, x4, x1, x2)

inst_67975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000007fffffff; valaddr_reg:x3; val_offset:203925*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203925*0 + 3*391*FLEN/8, x4, x1, x2)

inst_67976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700000ffffffff; valaddr_reg:x3; val_offset:203928*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203928*0 + 3*392*FLEN/8, x4, x1, x2)

inst_67977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700001ffffffff; valaddr_reg:x3; val_offset:203931*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203931*0 + 3*393*FLEN/8, x4, x1, x2)

inst_67978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700003ffffffff; valaddr_reg:x3; val_offset:203934*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203934*0 + 3*394*FLEN/8, x4, x1, x2)

inst_67979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700007ffffffff; valaddr_reg:x3; val_offset:203937*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203937*0 + 3*395*FLEN/8, x4, x1, x2)

inst_67980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70000fffffffff; valaddr_reg:x3; val_offset:203940*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203940*0 + 3*396*FLEN/8, x4, x1, x2)

inst_67981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70001fffffffff; valaddr_reg:x3; val_offset:203943*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203943*0 + 3*397*FLEN/8, x4, x1, x2)

inst_67982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70003fffffffff; valaddr_reg:x3; val_offset:203946*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203946*0 + 3*398*FLEN/8, x4, x1, x2)

inst_67983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70007fffffffff; valaddr_reg:x3; val_offset:203949*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203949*0 + 3*399*FLEN/8, x4, x1, x2)

inst_67984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7000ffffffffff; valaddr_reg:x3; val_offset:203952*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203952*0 + 3*400*FLEN/8, x4, x1, x2)

inst_67985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7001ffffffffff; valaddr_reg:x3; val_offset:203955*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203955*0 + 3*401*FLEN/8, x4, x1, x2)

inst_67986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7003ffffffffff; valaddr_reg:x3; val_offset:203958*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203958*0 + 3*402*FLEN/8, x4, x1, x2)

inst_67987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7007ffffffffff; valaddr_reg:x3; val_offset:203961*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203961*0 + 3*403*FLEN/8, x4, x1, x2)

inst_67988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d700fffffffffff; valaddr_reg:x3; val_offset:203964*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203964*0 + 3*404*FLEN/8, x4, x1, x2)

inst_67989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d701fffffffffff; valaddr_reg:x3; val_offset:203967*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203967*0 + 3*405*FLEN/8, x4, x1, x2)

inst_67990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d703fffffffffff; valaddr_reg:x3; val_offset:203970*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203970*0 + 3*406*FLEN/8, x4, x1, x2)

inst_67991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d707fffffffffff; valaddr_reg:x3; val_offset:203973*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203973*0 + 3*407*FLEN/8, x4, x1, x2)

inst_67992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d70ffffffffffff; valaddr_reg:x3; val_offset:203976*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203976*0 + 3*408*FLEN/8, x4, x1, x2)

inst_67993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d71ffffffffffff; valaddr_reg:x3; val_offset:203979*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203979*0 + 3*409*FLEN/8, x4, x1, x2)

inst_67994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d73ffffffffffff; valaddr_reg:x3; val_offset:203982*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203982*0 + 3*410*FLEN/8, x4, x1, x2)

inst_67995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d77ffffffffffff; valaddr_reg:x3; val_offset:203985*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203985*0 + 3*411*FLEN/8, x4, x1, x2)

inst_67996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d78000000000000; valaddr_reg:x3; val_offset:203988*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203988*0 + 3*412*FLEN/8, x4, x1, x2)

inst_67997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7c000000000000; valaddr_reg:x3; val_offset:203991*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203991*0 + 3*413*FLEN/8, x4, x1, x2)

inst_67998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7e000000000000; valaddr_reg:x3; val_offset:203994*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203994*0 + 3*414*FLEN/8, x4, x1, x2)

inst_67999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7f000000000000; valaddr_reg:x3; val_offset:203997*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 203997*0 + 3*415*FLEN/8, x4, x1, x2)

inst_68000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7f800000000000; valaddr_reg:x3; val_offset:204000*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204000*0 + 3*416*FLEN/8, x4, x1, x2)

inst_68001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fc00000000000; valaddr_reg:x3; val_offset:204003*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204003*0 + 3*417*FLEN/8, x4, x1, x2)

inst_68002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fe00000000000; valaddr_reg:x3; val_offset:204006*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204006*0 + 3*418*FLEN/8, x4, x1, x2)

inst_68003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ff00000000000; valaddr_reg:x3; val_offset:204009*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204009*0 + 3*419*FLEN/8, x4, x1, x2)

inst_68004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ff80000000000; valaddr_reg:x3; val_offset:204012*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204012*0 + 3*420*FLEN/8, x4, x1, x2)

inst_68005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffc0000000000; valaddr_reg:x3; val_offset:204015*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204015*0 + 3*421*FLEN/8, x4, x1, x2)

inst_68006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffe0000000000; valaddr_reg:x3; val_offset:204018*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204018*0 + 3*422*FLEN/8, x4, x1, x2)

inst_68007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fff0000000000; valaddr_reg:x3; val_offset:204021*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204021*0 + 3*423*FLEN/8, x4, x1, x2)

inst_68008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fff8000000000; valaddr_reg:x3; val_offset:204024*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204024*0 + 3*424*FLEN/8, x4, x1, x2)

inst_68009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffc000000000; valaddr_reg:x3; val_offset:204027*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204027*0 + 3*425*FLEN/8, x4, x1, x2)

inst_68010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffe000000000; valaddr_reg:x3; val_offset:204030*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204030*0 + 3*426*FLEN/8, x4, x1, x2)

inst_68011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffff000000000; valaddr_reg:x3; val_offset:204033*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204033*0 + 3*427*FLEN/8, x4, x1, x2)

inst_68012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffff800000000; valaddr_reg:x3; val_offset:204036*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204036*0 + 3*428*FLEN/8, x4, x1, x2)

inst_68013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffc00000000; valaddr_reg:x3; val_offset:204039*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204039*0 + 3*429*FLEN/8, x4, x1, x2)

inst_68014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffe00000000; valaddr_reg:x3; val_offset:204042*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204042*0 + 3*430*FLEN/8, x4, x1, x2)

inst_68015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffff00000000; valaddr_reg:x3; val_offset:204045*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204045*0 + 3*431*FLEN/8, x4, x1, x2)

inst_68016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffff80000000; valaddr_reg:x3; val_offset:204048*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204048*0 + 3*432*FLEN/8, x4, x1, x2)

inst_68017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffc0000000; valaddr_reg:x3; val_offset:204051*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204051*0 + 3*433*FLEN/8, x4, x1, x2)

inst_68018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffe0000000; valaddr_reg:x3; val_offset:204054*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204054*0 + 3*434*FLEN/8, x4, x1, x2)

inst_68019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffff0000000; valaddr_reg:x3; val_offset:204057*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204057*0 + 3*435*FLEN/8, x4, x1, x2)

inst_68020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffff8000000; valaddr_reg:x3; val_offset:204060*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204060*0 + 3*436*FLEN/8, x4, x1, x2)

inst_68021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffc000000; valaddr_reg:x3; val_offset:204063*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204063*0 + 3*437*FLEN/8, x4, x1, x2)

inst_68022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffe000000; valaddr_reg:x3; val_offset:204066*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204066*0 + 3*438*FLEN/8, x4, x1, x2)

inst_68023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffff000000; valaddr_reg:x3; val_offset:204069*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204069*0 + 3*439*FLEN/8, x4, x1, x2)

inst_68024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffff800000; valaddr_reg:x3; val_offset:204072*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204072*0 + 3*440*FLEN/8, x4, x1, x2)

inst_68025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffc00000; valaddr_reg:x3; val_offset:204075*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204075*0 + 3*441*FLEN/8, x4, x1, x2)

inst_68026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffe00000; valaddr_reg:x3; val_offset:204078*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204078*0 + 3*442*FLEN/8, x4, x1, x2)

inst_68027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffff00000; valaddr_reg:x3; val_offset:204081*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204081*0 + 3*443*FLEN/8, x4, x1, x2)

inst_68028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffff80000; valaddr_reg:x3; val_offset:204084*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204084*0 + 3*444*FLEN/8, x4, x1, x2)

inst_68029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffc0000; valaddr_reg:x3; val_offset:204087*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204087*0 + 3*445*FLEN/8, x4, x1, x2)

inst_68030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffe0000; valaddr_reg:x3; val_offset:204090*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204090*0 + 3*446*FLEN/8, x4, x1, x2)

inst_68031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffff0000; valaddr_reg:x3; val_offset:204093*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204093*0 + 3*447*FLEN/8, x4, x1, x2)

inst_68032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffff8000; valaddr_reg:x3; val_offset:204096*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204096*0 + 3*448*FLEN/8, x4, x1, x2)

inst_68033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffffc000; valaddr_reg:x3; val_offset:204099*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204099*0 + 3*449*FLEN/8, x4, x1, x2)

inst_68034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffffe000; valaddr_reg:x3; val_offset:204102*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204102*0 + 3*450*FLEN/8, x4, x1, x2)

inst_68035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffff000; valaddr_reg:x3; val_offset:204105*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204105*0 + 3*451*FLEN/8, x4, x1, x2)

inst_68036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffff800; valaddr_reg:x3; val_offset:204108*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204108*0 + 3*452*FLEN/8, x4, x1, x2)

inst_68037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffffc00; valaddr_reg:x3; val_offset:204111*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204111*0 + 3*453*FLEN/8, x4, x1, x2)

inst_68038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffffe00; valaddr_reg:x3; val_offset:204114*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204114*0 + 3*454*FLEN/8, x4, x1, x2)

inst_68039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffffff00; valaddr_reg:x3; val_offset:204117*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204117*0 + 3*455*FLEN/8, x4, x1, x2)

inst_68040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffffff80; valaddr_reg:x3; val_offset:204120*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204120*0 + 3*456*FLEN/8, x4, x1, x2)

inst_68041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffffffc0; valaddr_reg:x3; val_offset:204123*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204123*0 + 3*457*FLEN/8, x4, x1, x2)

inst_68042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffffffe0; valaddr_reg:x3; val_offset:204126*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204126*0 + 3*458*FLEN/8, x4, x1, x2)

inst_68043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffffff0; valaddr_reg:x3; val_offset:204129*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204129*0 + 3*459*FLEN/8, x4, x1, x2)

inst_68044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffffff8; valaddr_reg:x3; val_offset:204132*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204132*0 + 3*460*FLEN/8, x4, x1, x2)

inst_68045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffffffc; valaddr_reg:x3; val_offset:204135*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204135*0 + 3*461*FLEN/8, x4, x1, x2)

inst_68046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7ffffffffffffe; valaddr_reg:x3; val_offset:204138*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204138*0 + 3*462*FLEN/8, x4, x1, x2)

inst_68047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3d7 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3d7fffffffffffff; valaddr_reg:x3; val_offset:204141*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204141*0 + 3*463*FLEN/8, x4, x1, x2)

inst_68048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:204144*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204144*0 + 3*464*FLEN/8, x4, x1, x2)

inst_68049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:204147*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204147*0 + 3*465*FLEN/8, x4, x1, x2)

inst_68050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:204150*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204150*0 + 3*466*FLEN/8, x4, x1, x2)

inst_68051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:204153*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204153*0 + 3*467*FLEN/8, x4, x1, x2)

inst_68052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:204156*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204156*0 + 3*468*FLEN/8, x4, x1, x2)

inst_68053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:204159*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204159*0 + 3*469*FLEN/8, x4, x1, x2)

inst_68054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:204162*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204162*0 + 3*470*FLEN/8, x4, x1, x2)

inst_68055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:204165*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204165*0 + 3*471*FLEN/8, x4, x1, x2)

inst_68056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:204168*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204168*0 + 3*472*FLEN/8, x4, x1, x2)

inst_68057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:204171*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204171*0 + 3*473*FLEN/8, x4, x1, x2)

inst_68058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:204174*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204174*0 + 3*474*FLEN/8, x4, x1, x2)

inst_68059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:204177*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204177*0 + 3*475*FLEN/8, x4, x1, x2)

inst_68060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:204180*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204180*0 + 3*476*FLEN/8, x4, x1, x2)

inst_68061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:204183*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204183*0 + 3*477*FLEN/8, x4, x1, x2)

inst_68062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:204186*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204186*0 + 3*478*FLEN/8, x4, x1, x2)

inst_68063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:204189*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204189*0 + 3*479*FLEN/8, x4, x1, x2)

inst_68064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:204192*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204192*0 + 3*480*FLEN/8, x4, x1, x2)

inst_68065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:204195*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204195*0 + 3*481*FLEN/8, x4, x1, x2)

inst_68066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:204198*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204198*0 + 3*482*FLEN/8, x4, x1, x2)

inst_68067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:204201*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204201*0 + 3*483*FLEN/8, x4, x1, x2)

inst_68068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:204204*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204204*0 + 3*484*FLEN/8, x4, x1, x2)

inst_68069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x59fd76a1d06b9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7ad4e78a731bf and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa59fd76a1d06b9; op2val:0x2037ad4e78a731bf;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:204207*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204207*0 + 3*485*FLEN/8, x4, x1, x2)

inst_68070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000000000; valaddr_reg:x3; val_offset:204210*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204210*0 + 3*486*FLEN/8, x4, x1, x2)

inst_68071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000000001; valaddr_reg:x3; val_offset:204213*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204213*0 + 3*487*FLEN/8, x4, x1, x2)

inst_68072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000000003; valaddr_reg:x3; val_offset:204216*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204216*0 + 3*488*FLEN/8, x4, x1, x2)

inst_68073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000000007; valaddr_reg:x3; val_offset:204219*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204219*0 + 3*489*FLEN/8, x4, x1, x2)

inst_68074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000000000f; valaddr_reg:x3; val_offset:204222*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204222*0 + 3*490*FLEN/8, x4, x1, x2)

inst_68075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000000001f; valaddr_reg:x3; val_offset:204225*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204225*0 + 3*491*FLEN/8, x4, x1, x2)

inst_68076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000000003f; valaddr_reg:x3; val_offset:204228*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204228*0 + 3*492*FLEN/8, x4, x1, x2)

inst_68077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000000007f; valaddr_reg:x3; val_offset:204231*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204231*0 + 3*493*FLEN/8, x4, x1, x2)

inst_68078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000000000ff; valaddr_reg:x3; val_offset:204234*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204234*0 + 3*494*FLEN/8, x4, x1, x2)

inst_68079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000000001ff; valaddr_reg:x3; val_offset:204237*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204237*0 + 3*495*FLEN/8, x4, x1, x2)

inst_68080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000000003ff; valaddr_reg:x3; val_offset:204240*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204240*0 + 3*496*FLEN/8, x4, x1, x2)

inst_68081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000000007ff; valaddr_reg:x3; val_offset:204243*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204243*0 + 3*497*FLEN/8, x4, x1, x2)

inst_68082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000000fff; valaddr_reg:x3; val_offset:204246*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204246*0 + 3*498*FLEN/8, x4, x1, x2)

inst_68083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000001fff; valaddr_reg:x3; val_offset:204249*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204249*0 + 3*499*FLEN/8, x4, x1, x2)

inst_68084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000003fff; valaddr_reg:x3; val_offset:204252*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204252*0 + 3*500*FLEN/8, x4, x1, x2)

inst_68085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000007fff; valaddr_reg:x3; val_offset:204255*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204255*0 + 3*501*FLEN/8, x4, x1, x2)

inst_68086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000000ffff; valaddr_reg:x3; val_offset:204258*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204258*0 + 3*502*FLEN/8, x4, x1, x2)

inst_68087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000001ffff; valaddr_reg:x3; val_offset:204261*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204261*0 + 3*503*FLEN/8, x4, x1, x2)

inst_68088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000003ffff; valaddr_reg:x3; val_offset:204264*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204264*0 + 3*504*FLEN/8, x4, x1, x2)

inst_68089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000007ffff; valaddr_reg:x3; val_offset:204267*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204267*0 + 3*505*FLEN/8, x4, x1, x2)

inst_68090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000000fffff; valaddr_reg:x3; val_offset:204270*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204270*0 + 3*506*FLEN/8, x4, x1, x2)

inst_68091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000001fffff; valaddr_reg:x3; val_offset:204273*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204273*0 + 3*507*FLEN/8, x4, x1, x2)

inst_68092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000003fffff; valaddr_reg:x3; val_offset:204276*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204276*0 + 3*508*FLEN/8, x4, x1, x2)

inst_68093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000007fffff; valaddr_reg:x3; val_offset:204279*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204279*0 + 3*509*FLEN/8, x4, x1, x2)

inst_68094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000000ffffff; valaddr_reg:x3; val_offset:204282*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204282*0 + 3*510*FLEN/8, x4, x1, x2)

inst_68095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000001ffffff; valaddr_reg:x3; val_offset:204285*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204285*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_68096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000003ffffff; valaddr_reg:x3; val_offset:204288*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204288*0 + 3*512*FLEN/8, x4, x1, x2)

inst_68097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000007ffffff; valaddr_reg:x3; val_offset:204291*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204291*0 + 3*513*FLEN/8, x4, x1, x2)

inst_68098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000000fffffff; valaddr_reg:x3; val_offset:204294*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204294*0 + 3*514*FLEN/8, x4, x1, x2)

inst_68099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000001fffffff; valaddr_reg:x3; val_offset:204297*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204297*0 + 3*515*FLEN/8, x4, x1, x2)

inst_68100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000003fffffff; valaddr_reg:x3; val_offset:204300*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204300*0 + 3*516*FLEN/8, x4, x1, x2)

inst_68101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000007fffffff; valaddr_reg:x3; val_offset:204303*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204303*0 + 3*517*FLEN/8, x4, x1, x2)

inst_68102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300000ffffffff; valaddr_reg:x3; val_offset:204306*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204306*0 + 3*518*FLEN/8, x4, x1, x2)

inst_68103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300001ffffffff; valaddr_reg:x3; val_offset:204309*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204309*0 + 3*519*FLEN/8, x4, x1, x2)

inst_68104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300003ffffffff; valaddr_reg:x3; val_offset:204312*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204312*0 + 3*520*FLEN/8, x4, x1, x2)

inst_68105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300007ffffffff; valaddr_reg:x3; val_offset:204315*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204315*0 + 3*521*FLEN/8, x4, x1, x2)

inst_68106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30000fffffffff; valaddr_reg:x3; val_offset:204318*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204318*0 + 3*522*FLEN/8, x4, x1, x2)

inst_68107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30001fffffffff; valaddr_reg:x3; val_offset:204321*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204321*0 + 3*523*FLEN/8, x4, x1, x2)

inst_68108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30003fffffffff; valaddr_reg:x3; val_offset:204324*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204324*0 + 3*524*FLEN/8, x4, x1, x2)

inst_68109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30007fffffffff; valaddr_reg:x3; val_offset:204327*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204327*0 + 3*525*FLEN/8, x4, x1, x2)

inst_68110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3000ffffffffff; valaddr_reg:x3; val_offset:204330*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204330*0 + 3*526*FLEN/8, x4, x1, x2)

inst_68111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3001ffffffffff; valaddr_reg:x3; val_offset:204333*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204333*0 + 3*527*FLEN/8, x4, x1, x2)

inst_68112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3003ffffffffff; valaddr_reg:x3; val_offset:204336*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204336*0 + 3*528*FLEN/8, x4, x1, x2)

inst_68113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3007ffffffffff; valaddr_reg:x3; val_offset:204339*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204339*0 + 3*529*FLEN/8, x4, x1, x2)

inst_68114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb300fffffffffff; valaddr_reg:x3; val_offset:204342*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204342*0 + 3*530*FLEN/8, x4, x1, x2)

inst_68115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb301fffffffffff; valaddr_reg:x3; val_offset:204345*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204345*0 + 3*531*FLEN/8, x4, x1, x2)

inst_68116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb303fffffffffff; valaddr_reg:x3; val_offset:204348*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204348*0 + 3*532*FLEN/8, x4, x1, x2)

inst_68117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb307fffffffffff; valaddr_reg:x3; val_offset:204351*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204351*0 + 3*533*FLEN/8, x4, x1, x2)

inst_68118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb30ffffffffffff; valaddr_reg:x3; val_offset:204354*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204354*0 + 3*534*FLEN/8, x4, x1, x2)

inst_68119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb31ffffffffffff; valaddr_reg:x3; val_offset:204357*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204357*0 + 3*535*FLEN/8, x4, x1, x2)

inst_68120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb33ffffffffffff; valaddr_reg:x3; val_offset:204360*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204360*0 + 3*536*FLEN/8, x4, x1, x2)

inst_68121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb37ffffffffffff; valaddr_reg:x3; val_offset:204363*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204363*0 + 3*537*FLEN/8, x4, x1, x2)

inst_68122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb38000000000000; valaddr_reg:x3; val_offset:204366*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204366*0 + 3*538*FLEN/8, x4, x1, x2)

inst_68123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3c000000000000; valaddr_reg:x3; val_offset:204369*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204369*0 + 3*539*FLEN/8, x4, x1, x2)

inst_68124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3e000000000000; valaddr_reg:x3; val_offset:204372*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204372*0 + 3*540*FLEN/8, x4, x1, x2)

inst_68125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3f000000000000; valaddr_reg:x3; val_offset:204375*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204375*0 + 3*541*FLEN/8, x4, x1, x2)

inst_68126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3f800000000000; valaddr_reg:x3; val_offset:204378*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204378*0 + 3*542*FLEN/8, x4, x1, x2)

inst_68127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fc00000000000; valaddr_reg:x3; val_offset:204381*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204381*0 + 3*543*FLEN/8, x4, x1, x2)

inst_68128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fe00000000000; valaddr_reg:x3; val_offset:204384*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204384*0 + 3*544*FLEN/8, x4, x1, x2)

inst_68129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ff00000000000; valaddr_reg:x3; val_offset:204387*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204387*0 + 3*545*FLEN/8, x4, x1, x2)

inst_68130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ff80000000000; valaddr_reg:x3; val_offset:204390*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204390*0 + 3*546*FLEN/8, x4, x1, x2)

inst_68131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffc0000000000; valaddr_reg:x3; val_offset:204393*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204393*0 + 3*547*FLEN/8, x4, x1, x2)

inst_68132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffe0000000000; valaddr_reg:x3; val_offset:204396*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204396*0 + 3*548*FLEN/8, x4, x1, x2)

inst_68133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fff0000000000; valaddr_reg:x3; val_offset:204399*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204399*0 + 3*549*FLEN/8, x4, x1, x2)

inst_68134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fff8000000000; valaddr_reg:x3; val_offset:204402*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204402*0 + 3*550*FLEN/8, x4, x1, x2)

inst_68135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffc000000000; valaddr_reg:x3; val_offset:204405*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204405*0 + 3*551*FLEN/8, x4, x1, x2)

inst_68136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffe000000000; valaddr_reg:x3; val_offset:204408*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204408*0 + 3*552*FLEN/8, x4, x1, x2)

inst_68137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffff000000000; valaddr_reg:x3; val_offset:204411*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204411*0 + 3*553*FLEN/8, x4, x1, x2)

inst_68138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffff800000000; valaddr_reg:x3; val_offset:204414*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204414*0 + 3*554*FLEN/8, x4, x1, x2)

inst_68139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffc00000000; valaddr_reg:x3; val_offset:204417*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204417*0 + 3*555*FLEN/8, x4, x1, x2)

inst_68140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffe00000000; valaddr_reg:x3; val_offset:204420*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204420*0 + 3*556*FLEN/8, x4, x1, x2)

inst_68141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffff00000000; valaddr_reg:x3; val_offset:204423*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204423*0 + 3*557*FLEN/8, x4, x1, x2)

inst_68142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffff80000000; valaddr_reg:x3; val_offset:204426*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204426*0 + 3*558*FLEN/8, x4, x1, x2)

inst_68143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffc0000000; valaddr_reg:x3; val_offset:204429*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204429*0 + 3*559*FLEN/8, x4, x1, x2)

inst_68144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffe0000000; valaddr_reg:x3; val_offset:204432*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204432*0 + 3*560*FLEN/8, x4, x1, x2)

inst_68145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffff0000000; valaddr_reg:x3; val_offset:204435*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204435*0 + 3*561*FLEN/8, x4, x1, x2)

inst_68146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffff8000000; valaddr_reg:x3; val_offset:204438*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204438*0 + 3*562*FLEN/8, x4, x1, x2)

inst_68147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffc000000; valaddr_reg:x3; val_offset:204441*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204441*0 + 3*563*FLEN/8, x4, x1, x2)

inst_68148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffe000000; valaddr_reg:x3; val_offset:204444*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204444*0 + 3*564*FLEN/8, x4, x1, x2)

inst_68149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffff000000; valaddr_reg:x3; val_offset:204447*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204447*0 + 3*565*FLEN/8, x4, x1, x2)

inst_68150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffff800000; valaddr_reg:x3; val_offset:204450*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204450*0 + 3*566*FLEN/8, x4, x1, x2)

inst_68151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffc00000; valaddr_reg:x3; val_offset:204453*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204453*0 + 3*567*FLEN/8, x4, x1, x2)

inst_68152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffe00000; valaddr_reg:x3; val_offset:204456*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204456*0 + 3*568*FLEN/8, x4, x1, x2)

inst_68153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffff00000; valaddr_reg:x3; val_offset:204459*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204459*0 + 3*569*FLEN/8, x4, x1, x2)

inst_68154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffff80000; valaddr_reg:x3; val_offset:204462*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204462*0 + 3*570*FLEN/8, x4, x1, x2)

inst_68155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffc0000; valaddr_reg:x3; val_offset:204465*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204465*0 + 3*571*FLEN/8, x4, x1, x2)

inst_68156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffe0000; valaddr_reg:x3; val_offset:204468*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204468*0 + 3*572*FLEN/8, x4, x1, x2)

inst_68157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffff0000; valaddr_reg:x3; val_offset:204471*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204471*0 + 3*573*FLEN/8, x4, x1, x2)

inst_68158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffff8000; valaddr_reg:x3; val_offset:204474*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204474*0 + 3*574*FLEN/8, x4, x1, x2)

inst_68159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffffc000; valaddr_reg:x3; val_offset:204477*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204477*0 + 3*575*FLEN/8, x4, x1, x2)

inst_68160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffffe000; valaddr_reg:x3; val_offset:204480*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204480*0 + 3*576*FLEN/8, x4, x1, x2)

inst_68161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffff000; valaddr_reg:x3; val_offset:204483*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204483*0 + 3*577*FLEN/8, x4, x1, x2)

inst_68162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffff800; valaddr_reg:x3; val_offset:204486*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204486*0 + 3*578*FLEN/8, x4, x1, x2)

inst_68163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffffc00; valaddr_reg:x3; val_offset:204489*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204489*0 + 3*579*FLEN/8, x4, x1, x2)

inst_68164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffffe00; valaddr_reg:x3; val_offset:204492*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204492*0 + 3*580*FLEN/8, x4, x1, x2)

inst_68165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffffff00; valaddr_reg:x3; val_offset:204495*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204495*0 + 3*581*FLEN/8, x4, x1, x2)

inst_68166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffffff80; valaddr_reg:x3; val_offset:204498*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204498*0 + 3*582*FLEN/8, x4, x1, x2)

inst_68167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffffffc0; valaddr_reg:x3; val_offset:204501*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204501*0 + 3*583*FLEN/8, x4, x1, x2)

inst_68168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffffffe0; valaddr_reg:x3; val_offset:204504*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204504*0 + 3*584*FLEN/8, x4, x1, x2)

inst_68169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffffff0; valaddr_reg:x3; val_offset:204507*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204507*0 + 3*585*FLEN/8, x4, x1, x2)

inst_68170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffffff8; valaddr_reg:x3; val_offset:204510*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204510*0 + 3*586*FLEN/8, x4, x1, x2)

inst_68171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffffffc; valaddr_reg:x3; val_offset:204513*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204513*0 + 3*587*FLEN/8, x4, x1, x2)

inst_68172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3ffffffffffffe; valaddr_reg:x3; val_offset:204516*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204516*0 + 3*588*FLEN/8, x4, x1, x2)

inst_68173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3b3 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbb3fffffffffffff; valaddr_reg:x3; val_offset:204519*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204519*0 + 3*589*FLEN/8, x4, x1, x2)

inst_68174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:204522*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204522*0 + 3*590*FLEN/8, x4, x1, x2)

inst_68175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:204525*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204525*0 + 3*591*FLEN/8, x4, x1, x2)

inst_68176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:204528*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204528*0 + 3*592*FLEN/8, x4, x1, x2)

inst_68177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:204531*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204531*0 + 3*593*FLEN/8, x4, x1, x2)

inst_68178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:204534*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204534*0 + 3*594*FLEN/8, x4, x1, x2)

inst_68179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:204537*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204537*0 + 3*595*FLEN/8, x4, x1, x2)

inst_68180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:204540*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204540*0 + 3*596*FLEN/8, x4, x1, x2)

inst_68181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:204543*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204543*0 + 3*597*FLEN/8, x4, x1, x2)

inst_68182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:204546*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204546*0 + 3*598*FLEN/8, x4, x1, x2)

inst_68183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:204549*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204549*0 + 3*599*FLEN/8, x4, x1, x2)

inst_68184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:204552*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204552*0 + 3*600*FLEN/8, x4, x1, x2)

inst_68185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:204555*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204555*0 + 3*601*FLEN/8, x4, x1, x2)

inst_68186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:204558*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204558*0 + 3*602*FLEN/8, x4, x1, x2)

inst_68187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:204561*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204561*0 + 3*603*FLEN/8, x4, x1, x2)

inst_68188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:204564*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204564*0 + 3*604*FLEN/8, x4, x1, x2)

inst_68189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:204567*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204567*0 + 3*605*FLEN/8, x4, x1, x2)

inst_68190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:204570*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204570*0 + 3*606*FLEN/8, x4, x1, x2)

inst_68191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:204573*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204573*0 + 3*607*FLEN/8, x4, x1, x2)

inst_68192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:204576*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204576*0 + 3*608*FLEN/8, x4, x1, x2)

inst_68193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:204579*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204579*0 + 3*609*FLEN/8, x4, x1, x2)

inst_68194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:204582*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204582*0 + 3*610*FLEN/8, x4, x1, x2)

inst_68195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5a95628ce8746 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7a2ed8e51e098 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5a95628ce8746; op2val:0x9fc7a2ed8e51e098;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:204585*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204585*0 + 3*611*FLEN/8, x4, x1, x2)

inst_68196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:204588*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204588*0 + 3*612*FLEN/8, x4, x1, x2)

inst_68197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:204591*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204591*0 + 3*613*FLEN/8, x4, x1, x2)

inst_68198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:204594*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204594*0 + 3*614*FLEN/8, x4, x1, x2)

inst_68199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:204597*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204597*0 + 3*615*FLEN/8, x4, x1, x2)

inst_68200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:204600*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204600*0 + 3*616*FLEN/8, x4, x1, x2)

inst_68201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:204603*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204603*0 + 3*617*FLEN/8, x4, x1, x2)

inst_68202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x13333333333333; valaddr_reg:x3; val_offset:204606*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204606*0 + 3*618*FLEN/8, x4, x1, x2)

inst_68203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x14924924924924; valaddr_reg:x3; val_offset:204609*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204609*0 + 3*619*FLEN/8, x4, x1, x2)

inst_68204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x16666666666666; valaddr_reg:x3; val_offset:204612*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204612*0 + 3*620*FLEN/8, x4, x1, x2)

inst_68205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x16db6db6db6db6; valaddr_reg:x3; val_offset:204615*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204615*0 + 3*621*FLEN/8, x4, x1, x2)

inst_68206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17777777777777; valaddr_reg:x3; val_offset:204618*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204618*0 + 3*622*FLEN/8, x4, x1, x2)

inst_68207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x18888888888888; valaddr_reg:x3; val_offset:204621*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204621*0 + 3*623*FLEN/8, x4, x1, x2)

inst_68208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:204624*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204624*0 + 3*624*FLEN/8, x4, x1, x2)

inst_68209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:204627*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204627*0 + 3*625*FLEN/8, x4, x1, x2)

inst_68210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:204630*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204630*0 + 3*626*FLEN/8, x4, x1, x2)

inst_68211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:204633*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204633*0 + 3*627*FLEN/8, x4, x1, x2)

inst_68212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:204636*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204636*0 + 3*628*FLEN/8, x4, x1, x2)

inst_68213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:204639*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204639*0 + 3*629*FLEN/8, x4, x1, x2)

inst_68214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:204642*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204642*0 + 3*630*FLEN/8, x4, x1, x2)

inst_68215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:204645*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204645*0 + 3*631*FLEN/8, x4, x1, x2)

inst_68216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:204648*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204648*0 + 3*632*FLEN/8, x4, x1, x2)

inst_68217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:204651*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204651*0 + 3*633*FLEN/8, x4, x1, x2)

inst_68218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000000000; valaddr_reg:x3; val_offset:204654*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204654*0 + 3*634*FLEN/8, x4, x1, x2)

inst_68219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000000001; valaddr_reg:x3; val_offset:204657*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204657*0 + 3*635*FLEN/8, x4, x1, x2)

inst_68220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000000003; valaddr_reg:x3; val_offset:204660*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204660*0 + 3*636*FLEN/8, x4, x1, x2)

inst_68221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000000007; valaddr_reg:x3; val_offset:204663*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204663*0 + 3*637*FLEN/8, x4, x1, x2)

inst_68222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000000000f; valaddr_reg:x3; val_offset:204666*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204666*0 + 3*638*FLEN/8, x4, x1, x2)

inst_68223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000000001f; valaddr_reg:x3; val_offset:204669*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204669*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_68224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000000003f; valaddr_reg:x3; val_offset:204672*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204672*0 + 3*640*FLEN/8, x4, x1, x2)

inst_68225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000000007f; valaddr_reg:x3; val_offset:204675*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204675*0 + 3*641*FLEN/8, x4, x1, x2)

inst_68226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000000000ff; valaddr_reg:x3; val_offset:204678*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204678*0 + 3*642*FLEN/8, x4, x1, x2)

inst_68227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000000001ff; valaddr_reg:x3; val_offset:204681*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204681*0 + 3*643*FLEN/8, x4, x1, x2)

inst_68228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000000003ff; valaddr_reg:x3; val_offset:204684*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204684*0 + 3*644*FLEN/8, x4, x1, x2)

inst_68229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000000007ff; valaddr_reg:x3; val_offset:204687*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204687*0 + 3*645*FLEN/8, x4, x1, x2)

inst_68230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000000fff; valaddr_reg:x3; val_offset:204690*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204690*0 + 3*646*FLEN/8, x4, x1, x2)

inst_68231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000001fff; valaddr_reg:x3; val_offset:204693*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204693*0 + 3*647*FLEN/8, x4, x1, x2)

inst_68232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000003fff; valaddr_reg:x3; val_offset:204696*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204696*0 + 3*648*FLEN/8, x4, x1, x2)

inst_68233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000007fff; valaddr_reg:x3; val_offset:204699*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204699*0 + 3*649*FLEN/8, x4, x1, x2)

inst_68234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000000ffff; valaddr_reg:x3; val_offset:204702*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204702*0 + 3*650*FLEN/8, x4, x1, x2)

inst_68235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000001ffff; valaddr_reg:x3; val_offset:204705*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204705*0 + 3*651*FLEN/8, x4, x1, x2)

inst_68236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000003ffff; valaddr_reg:x3; val_offset:204708*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204708*0 + 3*652*FLEN/8, x4, x1, x2)

inst_68237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000007ffff; valaddr_reg:x3; val_offset:204711*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204711*0 + 3*653*FLEN/8, x4, x1, x2)

inst_68238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000000fffff; valaddr_reg:x3; val_offset:204714*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204714*0 + 3*654*FLEN/8, x4, x1, x2)

inst_68239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000001fffff; valaddr_reg:x3; val_offset:204717*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204717*0 + 3*655*FLEN/8, x4, x1, x2)

inst_68240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000003fffff; valaddr_reg:x3; val_offset:204720*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204720*0 + 3*656*FLEN/8, x4, x1, x2)

inst_68241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000007fffff; valaddr_reg:x3; val_offset:204723*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204723*0 + 3*657*FLEN/8, x4, x1, x2)

inst_68242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000000ffffff; valaddr_reg:x3; val_offset:204726*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204726*0 + 3*658*FLEN/8, x4, x1, x2)

inst_68243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000001ffffff; valaddr_reg:x3; val_offset:204729*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204729*0 + 3*659*FLEN/8, x4, x1, x2)

inst_68244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000003ffffff; valaddr_reg:x3; val_offset:204732*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204732*0 + 3*660*FLEN/8, x4, x1, x2)

inst_68245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000007ffffff; valaddr_reg:x3; val_offset:204735*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204735*0 + 3*661*FLEN/8, x4, x1, x2)

inst_68246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000000fffffff; valaddr_reg:x3; val_offset:204738*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204738*0 + 3*662*FLEN/8, x4, x1, x2)

inst_68247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000001fffffff; valaddr_reg:x3; val_offset:204741*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204741*0 + 3*663*FLEN/8, x4, x1, x2)

inst_68248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000003fffffff; valaddr_reg:x3; val_offset:204744*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204744*0 + 3*664*FLEN/8, x4, x1, x2)

inst_68249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000007fffffff; valaddr_reg:x3; val_offset:204747*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204747*0 + 3*665*FLEN/8, x4, x1, x2)

inst_68250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700000ffffffff; valaddr_reg:x3; val_offset:204750*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204750*0 + 3*666*FLEN/8, x4, x1, x2)

inst_68251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700001ffffffff; valaddr_reg:x3; val_offset:204753*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204753*0 + 3*667*FLEN/8, x4, x1, x2)

inst_68252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700003ffffffff; valaddr_reg:x3; val_offset:204756*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204756*0 + 3*668*FLEN/8, x4, x1, x2)

inst_68253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700007ffffffff; valaddr_reg:x3; val_offset:204759*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204759*0 + 3*669*FLEN/8, x4, x1, x2)

inst_68254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170000fffffffff; valaddr_reg:x3; val_offset:204762*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204762*0 + 3*670*FLEN/8, x4, x1, x2)

inst_68255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170001fffffffff; valaddr_reg:x3; val_offset:204765*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204765*0 + 3*671*FLEN/8, x4, x1, x2)

inst_68256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170003fffffffff; valaddr_reg:x3; val_offset:204768*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204768*0 + 3*672*FLEN/8, x4, x1, x2)

inst_68257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170007fffffffff; valaddr_reg:x3; val_offset:204771*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204771*0 + 3*673*FLEN/8, x4, x1, x2)

inst_68258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17000ffffffffff; valaddr_reg:x3; val_offset:204774*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204774*0 + 3*674*FLEN/8, x4, x1, x2)

inst_68259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17001ffffffffff; valaddr_reg:x3; val_offset:204777*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204777*0 + 3*675*FLEN/8, x4, x1, x2)

inst_68260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17003ffffffffff; valaddr_reg:x3; val_offset:204780*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204780*0 + 3*676*FLEN/8, x4, x1, x2)

inst_68261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17007ffffffffff; valaddr_reg:x3; val_offset:204783*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204783*0 + 3*677*FLEN/8, x4, x1, x2)

inst_68262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1700fffffffffff; valaddr_reg:x3; val_offset:204786*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204786*0 + 3*678*FLEN/8, x4, x1, x2)

inst_68263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1701fffffffffff; valaddr_reg:x3; val_offset:204789*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204789*0 + 3*679*FLEN/8, x4, x1, x2)

inst_68264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1703fffffffffff; valaddr_reg:x3; val_offset:204792*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204792*0 + 3*680*FLEN/8, x4, x1, x2)

inst_68265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x1707fffffffffff; valaddr_reg:x3; val_offset:204795*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204795*0 + 3*681*FLEN/8, x4, x1, x2)

inst_68266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x170ffffffffffff; valaddr_reg:x3; val_offset:204798*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204798*0 + 3*682*FLEN/8, x4, x1, x2)

inst_68267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x171ffffffffffff; valaddr_reg:x3; val_offset:204801*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204801*0 + 3*683*FLEN/8, x4, x1, x2)

inst_68268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x173ffffffffffff; valaddr_reg:x3; val_offset:204804*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204804*0 + 3*684*FLEN/8, x4, x1, x2)

inst_68269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x177ffffffffffff; valaddr_reg:x3; val_offset:204807*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204807*0 + 3*685*FLEN/8, x4, x1, x2)

inst_68270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x178000000000000; valaddr_reg:x3; val_offset:204810*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204810*0 + 3*686*FLEN/8, x4, x1, x2)

inst_68271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17c000000000000; valaddr_reg:x3; val_offset:204813*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204813*0 + 3*687*FLEN/8, x4, x1, x2)

inst_68272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17e000000000000; valaddr_reg:x3; val_offset:204816*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204816*0 + 3*688*FLEN/8, x4, x1, x2)

inst_68273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17f000000000000; valaddr_reg:x3; val_offset:204819*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204819*0 + 3*689*FLEN/8, x4, x1, x2)

inst_68274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17f800000000000; valaddr_reg:x3; val_offset:204822*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204822*0 + 3*690*FLEN/8, x4, x1, x2)

inst_68275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fc00000000000; valaddr_reg:x3; val_offset:204825*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204825*0 + 3*691*FLEN/8, x4, x1, x2)

inst_68276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fe00000000000; valaddr_reg:x3; val_offset:204828*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204828*0 + 3*692*FLEN/8, x4, x1, x2)

inst_68277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ff00000000000; valaddr_reg:x3; val_offset:204831*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204831*0 + 3*693*FLEN/8, x4, x1, x2)

inst_68278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ff80000000000; valaddr_reg:x3; val_offset:204834*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204834*0 + 3*694*FLEN/8, x4, x1, x2)

inst_68279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffc0000000000; valaddr_reg:x3; val_offset:204837*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204837*0 + 3*695*FLEN/8, x4, x1, x2)

inst_68280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffe0000000000; valaddr_reg:x3; val_offset:204840*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204840*0 + 3*696*FLEN/8, x4, x1, x2)

inst_68281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fff0000000000; valaddr_reg:x3; val_offset:204843*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204843*0 + 3*697*FLEN/8, x4, x1, x2)

inst_68282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fff8000000000; valaddr_reg:x3; val_offset:204846*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204846*0 + 3*698*FLEN/8, x4, x1, x2)

inst_68283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffc000000000; valaddr_reg:x3; val_offset:204849*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204849*0 + 3*699*FLEN/8, x4, x1, x2)

inst_68284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffe000000000; valaddr_reg:x3; val_offset:204852*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204852*0 + 3*700*FLEN/8, x4, x1, x2)

inst_68285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffff000000000; valaddr_reg:x3; val_offset:204855*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204855*0 + 3*701*FLEN/8, x4, x1, x2)

inst_68286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffff800000000; valaddr_reg:x3; val_offset:204858*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204858*0 + 3*702*FLEN/8, x4, x1, x2)

inst_68287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffc00000000; valaddr_reg:x3; val_offset:204861*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204861*0 + 3*703*FLEN/8, x4, x1, x2)

inst_68288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffe00000000; valaddr_reg:x3; val_offset:204864*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204864*0 + 3*704*FLEN/8, x4, x1, x2)

inst_68289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffff00000000; valaddr_reg:x3; val_offset:204867*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204867*0 + 3*705*FLEN/8, x4, x1, x2)

inst_68290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffff80000000; valaddr_reg:x3; val_offset:204870*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204870*0 + 3*706*FLEN/8, x4, x1, x2)

inst_68291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffc0000000; valaddr_reg:x3; val_offset:204873*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204873*0 + 3*707*FLEN/8, x4, x1, x2)

inst_68292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffe0000000; valaddr_reg:x3; val_offset:204876*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204876*0 + 3*708*FLEN/8, x4, x1, x2)

inst_68293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffff0000000; valaddr_reg:x3; val_offset:204879*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204879*0 + 3*709*FLEN/8, x4, x1, x2)

inst_68294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffff8000000; valaddr_reg:x3; val_offset:204882*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204882*0 + 3*710*FLEN/8, x4, x1, x2)

inst_68295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffc000000; valaddr_reg:x3; val_offset:204885*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204885*0 + 3*711*FLEN/8, x4, x1, x2)

inst_68296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffe000000; valaddr_reg:x3; val_offset:204888*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204888*0 + 3*712*FLEN/8, x4, x1, x2)

inst_68297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffff000000; valaddr_reg:x3; val_offset:204891*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204891*0 + 3*713*FLEN/8, x4, x1, x2)

inst_68298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffff800000; valaddr_reg:x3; val_offset:204894*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204894*0 + 3*714*FLEN/8, x4, x1, x2)

inst_68299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffc00000; valaddr_reg:x3; val_offset:204897*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204897*0 + 3*715*FLEN/8, x4, x1, x2)

inst_68300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffe00000; valaddr_reg:x3; val_offset:204900*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204900*0 + 3*716*FLEN/8, x4, x1, x2)

inst_68301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffff00000; valaddr_reg:x3; val_offset:204903*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204903*0 + 3*717*FLEN/8, x4, x1, x2)

inst_68302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffff80000; valaddr_reg:x3; val_offset:204906*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204906*0 + 3*718*FLEN/8, x4, x1, x2)

inst_68303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffc0000; valaddr_reg:x3; val_offset:204909*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204909*0 + 3*719*FLEN/8, x4, x1, x2)

inst_68304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffe0000; valaddr_reg:x3; val_offset:204912*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204912*0 + 3*720*FLEN/8, x4, x1, x2)

inst_68305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffff0000; valaddr_reg:x3; val_offset:204915*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204915*0 + 3*721*FLEN/8, x4, x1, x2)

inst_68306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffff8000; valaddr_reg:x3; val_offset:204918*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204918*0 + 3*722*FLEN/8, x4, x1, x2)

inst_68307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffffc000; valaddr_reg:x3; val_offset:204921*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204921*0 + 3*723*FLEN/8, x4, x1, x2)

inst_68308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffffe000; valaddr_reg:x3; val_offset:204924*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204924*0 + 3*724*FLEN/8, x4, x1, x2)

inst_68309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffff000; valaddr_reg:x3; val_offset:204927*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204927*0 + 3*725*FLEN/8, x4, x1, x2)

inst_68310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffff800; valaddr_reg:x3; val_offset:204930*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204930*0 + 3*726*FLEN/8, x4, x1, x2)

inst_68311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffffc00; valaddr_reg:x3; val_offset:204933*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204933*0 + 3*727*FLEN/8, x4, x1, x2)

inst_68312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffffe00; valaddr_reg:x3; val_offset:204936*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204936*0 + 3*728*FLEN/8, x4, x1, x2)

inst_68313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffffff00; valaddr_reg:x3; val_offset:204939*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204939*0 + 3*729*FLEN/8, x4, x1, x2)

inst_68314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffffff80; valaddr_reg:x3; val_offset:204942*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204942*0 + 3*730*FLEN/8, x4, x1, x2)

inst_68315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffffffc0; valaddr_reg:x3; val_offset:204945*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204945*0 + 3*731*FLEN/8, x4, x1, x2)

inst_68316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffffffe0; valaddr_reg:x3; val_offset:204948*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204948*0 + 3*732*FLEN/8, x4, x1, x2)

inst_68317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffffff0; valaddr_reg:x3; val_offset:204951*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204951*0 + 3*733*FLEN/8, x4, x1, x2)

inst_68318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffffff8; valaddr_reg:x3; val_offset:204954*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204954*0 + 3*734*FLEN/8, x4, x1, x2)

inst_68319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffffffc; valaddr_reg:x3; val_offset:204957*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204957*0 + 3*735*FLEN/8, x4, x1, x2)

inst_68320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17ffffffffffffe; valaddr_reg:x3; val_offset:204960*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204960*0 + 3*736*FLEN/8, x4, x1, x2)

inst_68321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5ae04f8b188ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x017 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5ae04f8b188ea; op2val:0x0;
op3val:0x17fffffffffffff; valaddr_reg:x3; val_offset:204963*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204963*0 + 3*737*FLEN/8, x4, x1, x2)

inst_68322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000000000; valaddr_reg:x3; val_offset:204966*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204966*0 + 3*738*FLEN/8, x4, x1, x2)

inst_68323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000000001; valaddr_reg:x3; val_offset:204969*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204969*0 + 3*739*FLEN/8, x4, x1, x2)

inst_68324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000000003; valaddr_reg:x3; val_offset:204972*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204972*0 + 3*740*FLEN/8, x4, x1, x2)

inst_68325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000000007; valaddr_reg:x3; val_offset:204975*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204975*0 + 3*741*FLEN/8, x4, x1, x2)

inst_68326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000000000f; valaddr_reg:x3; val_offset:204978*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204978*0 + 3*742*FLEN/8, x4, x1, x2)

inst_68327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000000001f; valaddr_reg:x3; val_offset:204981*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204981*0 + 3*743*FLEN/8, x4, x1, x2)

inst_68328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000000003f; valaddr_reg:x3; val_offset:204984*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204984*0 + 3*744*FLEN/8, x4, x1, x2)

inst_68329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000000007f; valaddr_reg:x3; val_offset:204987*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204987*0 + 3*745*FLEN/8, x4, x1, x2)

inst_68330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb00000000000ff; valaddr_reg:x3; val_offset:204990*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204990*0 + 3*746*FLEN/8, x4, x1, x2)

inst_68331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb00000000001ff; valaddr_reg:x3; val_offset:204993*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204993*0 + 3*747*FLEN/8, x4, x1, x2)

inst_68332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb00000000003ff; valaddr_reg:x3; val_offset:204996*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204996*0 + 3*748*FLEN/8, x4, x1, x2)

inst_68333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb00000000007ff; valaddr_reg:x3; val_offset:204999*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 204999*0 + 3*749*FLEN/8, x4, x1, x2)

inst_68334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000000fff; valaddr_reg:x3; val_offset:205002*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205002*0 + 3*750*FLEN/8, x4, x1, x2)

inst_68335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000001fff; valaddr_reg:x3; val_offset:205005*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205005*0 + 3*751*FLEN/8, x4, x1, x2)

inst_68336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000003fff; valaddr_reg:x3; val_offset:205008*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205008*0 + 3*752*FLEN/8, x4, x1, x2)

inst_68337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000007fff; valaddr_reg:x3; val_offset:205011*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205011*0 + 3*753*FLEN/8, x4, x1, x2)

inst_68338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000000ffff; valaddr_reg:x3; val_offset:205014*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205014*0 + 3*754*FLEN/8, x4, x1, x2)

inst_68339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000001ffff; valaddr_reg:x3; val_offset:205017*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205017*0 + 3*755*FLEN/8, x4, x1, x2)

inst_68340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000003ffff; valaddr_reg:x3; val_offset:205020*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205020*0 + 3*756*FLEN/8, x4, x1, x2)

inst_68341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000007ffff; valaddr_reg:x3; val_offset:205023*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205023*0 + 3*757*FLEN/8, x4, x1, x2)

inst_68342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb00000000fffff; valaddr_reg:x3; val_offset:205026*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205026*0 + 3*758*FLEN/8, x4, x1, x2)

inst_68343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb00000001fffff; valaddr_reg:x3; val_offset:205029*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205029*0 + 3*759*FLEN/8, x4, x1, x2)

inst_68344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb00000003fffff; valaddr_reg:x3; val_offset:205032*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205032*0 + 3*760*FLEN/8, x4, x1, x2)

inst_68345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb00000007fffff; valaddr_reg:x3; val_offset:205035*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205035*0 + 3*761*FLEN/8, x4, x1, x2)

inst_68346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000000ffffff; valaddr_reg:x3; val_offset:205038*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205038*0 + 3*762*FLEN/8, x4, x1, x2)

inst_68347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000001ffffff; valaddr_reg:x3; val_offset:205041*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205041*0 + 3*763*FLEN/8, x4, x1, x2)

inst_68348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000003ffffff; valaddr_reg:x3; val_offset:205044*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205044*0 + 3*764*FLEN/8, x4, x1, x2)

inst_68349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb0000007ffffff; valaddr_reg:x3; val_offset:205047*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205047*0 + 3*765*FLEN/8, x4, x1, x2)

inst_68350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000000fffffff; valaddr_reg:x3; val_offset:205050*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205050*0 + 3*766*FLEN/8, x4, x1, x2)

inst_68351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5b6db472d3462 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x794360ee650fc and fs3 == 1 and fe3 == 0x3eb and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5b6db472d3462; op2val:0x9fc794360ee650fc;
op3val:0xbeb000001fffffff; valaddr_reg:x3; val_offset:205053*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 205053*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372672,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372673,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372675,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372679,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372687,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372703,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372735,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372799,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372927,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185373183,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185373695,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185374719,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185376767,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185380863,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185389055,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185405439,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185438207,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185503743,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185634815,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185896959,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424186421247,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424187469823,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424189566975,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424193761279,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424202149887,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424218927103,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424252481535,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424319590399,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424453808127,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424722243583,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494425259114495,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494426332856319,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494428480339967,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494432775307263,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494441365241855,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494458545111039,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494492904849407,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494561624326143,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494699063279615,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494973941186559,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376495523697000447,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376496623208628223,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376498822231883775,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376503220278394879,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376512016371417087,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376529608557461503,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376564792929550335,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376635161673727999,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376775899162083327,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9377057374138793983,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9377620324092215295,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9378746223999057919,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9378746223999057920,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9379872123905900544,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380435073859321856,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380716548836032512,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380857286324387840,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380927655068565504,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380962839440654336,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380980431626698752,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380989227719720960,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380993625766232064,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380995824789487616,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380996924301115392,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997474056929280,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997748934836224,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997886373789696,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997955093266432,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380997989453004800,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998006632873984,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998015222808576,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998019517775872,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998021665259520,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998022739001344,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023275872256,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023544307712,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023678525440,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023745634304,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023779188736,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023795965952,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023804354560,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023808548864,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023810646016,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023811694592,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812218880,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812481024,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812612096,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812677632,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812710400,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812726784,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812734976,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812739072,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812741120,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812742144,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812742656,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812742912,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743040,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743104,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743136,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743152,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743160,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743164,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743166,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9380998023812743167,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600704,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600705,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600707,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600711,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600719,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600735,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600767,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600831,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374600959,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374601215,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374601727,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374602751,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374604799,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374608895,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374617087,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374633471,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374666239,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374731775,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046374862847,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046375124991,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046375649279,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046376697855,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046378795007,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046382989311,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046391377919,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046408155135,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046441709567,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046508818431,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046643036159,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916046911471615,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916047448342527,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916048522084351,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916050669567999,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916054964535295,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916063554469887,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916080734339071,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916115094077439,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916183813554175,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916321252507647,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273916596130414591,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273917145886228479,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273918245397856255,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273920444421111807,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273924842467622911,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273933638560645119,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273951230746689535,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4273986415118778367,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4274056783862956031,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4274197521351311359,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4274478996328022015,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4275041946281443327,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4276167846188285951,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4276167846188285952,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4277293746095128576,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4277856696048549888,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278138171025260544,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278278908513615872,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278349277257793536,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278384461629882368,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278402053815926784,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278410849908948992,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278415247955460096,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278417446978715648,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278418546490343424,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419096246157312,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419371124064256,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419508563017728,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419577282494464,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419611642232832,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419628822102016,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419637412036608,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419641707003904,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419643854487552,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419644928229376,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645465100288,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645733535744,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645867753472,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645934862336,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645968416768,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645985193984,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645993582592,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645997776896,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419645999874048,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646000922624,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001446912,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001709056,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001840128,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001905664,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001938432,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001954816,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001963008,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001967104,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001969152,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001970176,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001970688,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001970944,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001971072,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001971136,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001971168,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001971184,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001971192,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001971196,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001971198,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4278419646001971199,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6892072657731570043,64,FLEN)
NAN_BOXED(2321534336387225159,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376064,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376065,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376067,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376071,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376079,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376095,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376127,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376191,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376319,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376575,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124377087,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124378111,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124380159,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124384255,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124392447,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124408831,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124441599,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124507135,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124638207,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124900351,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614125424639,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614126473215,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614128570367,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614132764671,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614141153279,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614157930495,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614191484927,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614258593791,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614392811519,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614661246975,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091615198117887,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091616271859711,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091618419343359,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091622714310655,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091631304245247,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091648484114431,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091682843852799,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091751563329535,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091889002283007,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498092163880189951,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498092713636003839,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498093813147631615,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498096012170887167,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498100410217398271,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498109206310420479,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498126798496464895,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498161982868553727,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498232351612731391,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498373089101086719,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498654564077797375,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9499217514031218687,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9500343413938061311,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9500343413938061312,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9501469313844903936,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502032263798325248,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502313738775035904,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502454476263391232,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502524845007568896,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502560029379657728,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502577621565702144,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502586417658724352,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502590815705235456,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502593014728491008,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502594114240118784,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502594663995932672,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502594938873839616,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595076312793088,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595145032269824,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595179392008192,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595196571877376,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595205161811968,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595209456779264,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595211604262912,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595212678004736,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213214875648,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213483311104,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213617528832,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213684637696,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213718192128,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213734969344,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213743357952,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213747552256,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213749649408,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213750697984,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751222272,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751484416,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751615488,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751681024,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751713792,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751730176,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751738368,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751742464,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751744512,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751745536,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746048,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746304,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746432,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746496,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746528,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746544,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746552,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746556,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746558,64,FLEN)
NAN_BOXED(6892082627837017877,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746559,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197568,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197569,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197571,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197575,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197583,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197599,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197631,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197695,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705197823,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705198079,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705198591,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705199615,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705201663,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705205759,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705213951,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705230335,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705263103,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705328639,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705459711,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433705721855,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433706246143,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433707294719,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433709391871,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433713586175,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433721974783,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433738751999,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433772306431,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433839415295,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038433973633023,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038434242068479,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038434778939391,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038435852681215,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038438000164863,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038442295132159,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038450885066751,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038468064935935,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038502424674303,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038571144151039,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038708583104511,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427038983461011455,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427039533216825343,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427040632728453119,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427042831751708671,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427047229798219775,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427056025891241983,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427073618077286399,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427108802449375231,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427179171193552895,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427319908681908223,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4427601383658618879,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4428164333612040191,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4429290233518882815,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4429290233518882816,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4430416133425725440,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4430979083379146752,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431260558355857408,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431401295844212736,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431471664588390400,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431506848960479232,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431524441146523648,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431533237239545856,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431537635286056960,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431539834309312512,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431540933820940288,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431541483576754176,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431541758454661120,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431541895893614592,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431541964613091328,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431541998972829696,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542016152698880,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542024742633472,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542029037600768,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542031185084416,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542032258826240,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542032795697152,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033064132608,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033198350336,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033265459200,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033299013632,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033315790848,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033324179456,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033328373760,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033330470912,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033331519488,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332043776,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332305920,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332436992,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332502528,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332535296,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332551680,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332559872,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332563968,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332566016,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332567040,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332567552,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332567808,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332567936,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332568000,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332568032,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332568048,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332568056,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332568060,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332568062,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4431542033332568063,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6892090552307484345,64,FLEN)
NAN_BOXED(2321514685476057535,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635520,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635521,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635523,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635527,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635535,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635551,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635583,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635647,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974635775,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974636031,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974636543,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974637567,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974639615,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974643711,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974651903,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974668287,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974701055,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974766591,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883974897663,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883975159807,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883975684095,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883976732671,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883978829823,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883983024127,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280883991412735,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280884008189951,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280884041744383,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280884108853247,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280884243070975,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280884511506431,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280885048377343,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280886122119167,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280888269602815,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280892564570111,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280901154504703,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280918334373887,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488280952694112255,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488281021413588991,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488281158852542463,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488281433730449407,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488281983486263295,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488283082997891071,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488285282021146623,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488289680067657727,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488298476160679935,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488316068346724351,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488351252718813183,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488421621462990847,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488562358951346175,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13488843833928056831,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13489406783881478143,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13490532683788320767,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13490532683788320768,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13491658583695163392,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492221533648584704,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492503008625295360,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492643746113650688,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492714114857828352,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492749299229917184,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492766891415961600,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492775687508983808,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492780085555494912,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492782284578750464,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492783384090378240,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492783933846192128,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784208724099072,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784346163052544,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784414882529280,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784449242267648,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784466422136832,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784475012071424,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784479307038720,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784481454522368,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784482528264192,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483065135104,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483333570560,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483467788288,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483534897152,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483568451584,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483585228800,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483593617408,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483597811712,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483599908864,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483600957440,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483601481728,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483601743872,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483601874944,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483601940480,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483601973248,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483601989632,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483601997824,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602001920,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602003968,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602004992,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602005504,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602005760,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602005888,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602005952,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602005984,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602006000,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602006008,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602006012,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602006014,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13492784483602006015,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6892100992277317446,64,FLEN)
NAN_BOXED(11513350113574641816,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5404319552844595,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5790342378047780,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6305039478318694,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6433713753386422,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6605279453476727,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6905519428634760,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521408,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521409,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521411,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521415,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521423,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521439,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521471,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521535,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521663,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429521919,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429522431,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429523455,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429525503,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429529599,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429537791,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429554175,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429586943,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429652479,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791429783551,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791430045695,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791430569983,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791431618559,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791433715711,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791437910015,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791446298623,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791463075839,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791496630271,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791563739135,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791697956863,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582791966392319,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582792503263231,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582793577005055,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582795724488703,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582800019455999,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582808609390591,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582825789259775,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582860148998143,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103582928868474879,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103583066307428351,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103583341185335295,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103583890941149183,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103584990452776959,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103587189476032511,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103591587522543615,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103600383615565823,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103617975801610239,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103653160173699071,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103723528917876735,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(103864266406232063,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(104145741382942719,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(104708691336364031,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(105834591243206655,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(105834591243206656,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(106960491150049280,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(107523441103470592,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(107804916080181248,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(107945653568536576,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108016022312714240,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108051206684803072,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108068798870847488,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108077594963869696,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108081993010380800,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108084192033636352,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108085291545264128,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108085841301078016,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086116178984960,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086253617938432,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086322337415168,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086356697153536,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086373877022720,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086382466957312,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086386761924608,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086388909408256,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086389983150080,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086390520020992,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086390788456448,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086390922674176,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086390989783040,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391023337472,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391040114688,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391048503296,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391052697600,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391054794752,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391055843328,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056367616,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056629760,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056760832,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056826368,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056859136,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056875520,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056883712,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056887808,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056889856,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056890880,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891392,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891648,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891776,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891840,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891872,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891888,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891896,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891900,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891902,64,FLEN)
NAN_BOXED(6892106141135898858,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891903,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383296,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383297,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383299,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383303,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383311,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383327,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383359,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383423,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383551,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107383807,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107384319,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107385343,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107387391,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107391487,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107399679,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107416063,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107448831,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107514367,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107645439,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463107907583,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463108431871,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463109480447,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463111577599,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463115771903,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463124160511,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463140937727,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463174492159,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463241601023,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463375818751,64,FLEN)
NAN_BOXED(6892115857668650082,64,FLEN)
NAN_BOXED(11513333932295082236,64,FLEN)
NAN_BOXED(13740482463644254207,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
