
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_85248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:255744*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255744*0 + 3*0*FLEN/8, x4, x1, x2)

inst_85249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:255747*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255747*0 + 3*1*FLEN/8, x4, x1, x2)

inst_85250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:255750*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255750*0 + 3*2*FLEN/8, x4, x1, x2)

inst_85251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:255753*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255753*0 + 3*3*FLEN/8, x4, x1, x2)

inst_85252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:255756*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255756*0 + 3*4*FLEN/8, x4, x1, x2)

inst_85253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:255759*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255759*0 + 3*5*FLEN/8, x4, x1, x2)

inst_85254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:255762*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255762*0 + 3*6*FLEN/8, x4, x1, x2)

inst_85255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:255765*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255765*0 + 3*7*FLEN/8, x4, x1, x2)

inst_85256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:255768*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255768*0 + 3*8*FLEN/8, x4, x1, x2)

inst_85257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:255771*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255771*0 + 3*9*FLEN/8, x4, x1, x2)

inst_85258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:255774*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255774*0 + 3*10*FLEN/8, x4, x1, x2)

inst_85259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb156166ff1d31 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2e78c73154ac9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab156166ff1d31; op2val:0x2032e78c73154ac9;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:255777*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255777*0 + 3*11*FLEN/8, x4, x1, x2)

inst_85260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:255780*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255780*0 + 3*12*FLEN/8, x4, x1, x2)

inst_85261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:255783*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255783*0 + 3*13*FLEN/8, x4, x1, x2)

inst_85262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:255786*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255786*0 + 3*14*FLEN/8, x4, x1, x2)

inst_85263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:255789*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255789*0 + 3*15*FLEN/8, x4, x1, x2)

inst_85264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:255792*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255792*0 + 3*16*FLEN/8, x4, x1, x2)

inst_85265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:255795*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255795*0 + 3*17*FLEN/8, x4, x1, x2)

inst_85266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:255798*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255798*0 + 3*18*FLEN/8, x4, x1, x2)

inst_85267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:255801*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255801*0 + 3*19*FLEN/8, x4, x1, x2)

inst_85268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:255804*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255804*0 + 3*20*FLEN/8, x4, x1, x2)

inst_85269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:255807*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255807*0 + 3*21*FLEN/8, x4, x1, x2)

inst_85270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:255810*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255810*0 + 3*22*FLEN/8, x4, x1, x2)

inst_85271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:255813*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255813*0 + 3*23*FLEN/8, x4, x1, x2)

inst_85272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:255816*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255816*0 + 3*24*FLEN/8, x4, x1, x2)

inst_85273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:255819*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255819*0 + 3*25*FLEN/8, x4, x1, x2)

inst_85274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:255822*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255822*0 + 3*26*FLEN/8, x4, x1, x2)

inst_85275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:255825*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255825*0 + 3*27*FLEN/8, x4, x1, x2)

inst_85276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:255828*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255828*0 + 3*28*FLEN/8, x4, x1, x2)

inst_85277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:255831*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255831*0 + 3*29*FLEN/8, x4, x1, x2)

inst_85278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:255834*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255834*0 + 3*30*FLEN/8, x4, x1, x2)

inst_85279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:255837*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255837*0 + 3*31*FLEN/8, x4, x1, x2)

inst_85280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:255840*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255840*0 + 3*32*FLEN/8, x4, x1, x2)

inst_85281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:255843*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255843*0 + 3*33*FLEN/8, x4, x1, x2)

inst_85282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000000000; valaddr_reg:x3; val_offset:255846*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255846*0 + 3*34*FLEN/8, x4, x1, x2)

inst_85283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000000001; valaddr_reg:x3; val_offset:255849*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255849*0 + 3*35*FLEN/8, x4, x1, x2)

inst_85284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000000003; valaddr_reg:x3; val_offset:255852*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255852*0 + 3*36*FLEN/8, x4, x1, x2)

inst_85285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000000007; valaddr_reg:x3; val_offset:255855*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255855*0 + 3*37*FLEN/8, x4, x1, x2)

inst_85286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000000000f; valaddr_reg:x3; val_offset:255858*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255858*0 + 3*38*FLEN/8, x4, x1, x2)

inst_85287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000000001f; valaddr_reg:x3; val_offset:255861*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255861*0 + 3*39*FLEN/8, x4, x1, x2)

inst_85288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000000003f; valaddr_reg:x3; val_offset:255864*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255864*0 + 3*40*FLEN/8, x4, x1, x2)

inst_85289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000000007f; valaddr_reg:x3; val_offset:255867*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255867*0 + 3*41*FLEN/8, x4, x1, x2)

inst_85290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000000000ff; valaddr_reg:x3; val_offset:255870*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255870*0 + 3*42*FLEN/8, x4, x1, x2)

inst_85291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000000001ff; valaddr_reg:x3; val_offset:255873*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255873*0 + 3*43*FLEN/8, x4, x1, x2)

inst_85292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000000003ff; valaddr_reg:x3; val_offset:255876*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255876*0 + 3*44*FLEN/8, x4, x1, x2)

inst_85293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000000007ff; valaddr_reg:x3; val_offset:255879*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255879*0 + 3*45*FLEN/8, x4, x1, x2)

inst_85294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000000fff; valaddr_reg:x3; val_offset:255882*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255882*0 + 3*46*FLEN/8, x4, x1, x2)

inst_85295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000001fff; valaddr_reg:x3; val_offset:255885*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255885*0 + 3*47*FLEN/8, x4, x1, x2)

inst_85296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000003fff; valaddr_reg:x3; val_offset:255888*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255888*0 + 3*48*FLEN/8, x4, x1, x2)

inst_85297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000007fff; valaddr_reg:x3; val_offset:255891*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255891*0 + 3*49*FLEN/8, x4, x1, x2)

inst_85298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000000ffff; valaddr_reg:x3; val_offset:255894*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255894*0 + 3*50*FLEN/8, x4, x1, x2)

inst_85299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000001ffff; valaddr_reg:x3; val_offset:255897*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255897*0 + 3*51*FLEN/8, x4, x1, x2)

inst_85300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000003ffff; valaddr_reg:x3; val_offset:255900*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255900*0 + 3*52*FLEN/8, x4, x1, x2)

inst_85301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000007ffff; valaddr_reg:x3; val_offset:255903*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255903*0 + 3*53*FLEN/8, x4, x1, x2)

inst_85302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000000fffff; valaddr_reg:x3; val_offset:255906*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255906*0 + 3*54*FLEN/8, x4, x1, x2)

inst_85303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000001fffff; valaddr_reg:x3; val_offset:255909*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255909*0 + 3*55*FLEN/8, x4, x1, x2)

inst_85304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000003fffff; valaddr_reg:x3; val_offset:255912*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255912*0 + 3*56*FLEN/8, x4, x1, x2)

inst_85305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000007fffff; valaddr_reg:x3; val_offset:255915*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255915*0 + 3*57*FLEN/8, x4, x1, x2)

inst_85306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000000ffffff; valaddr_reg:x3; val_offset:255918*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255918*0 + 3*58*FLEN/8, x4, x1, x2)

inst_85307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000001ffffff; valaddr_reg:x3; val_offset:255921*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255921*0 + 3*59*FLEN/8, x4, x1, x2)

inst_85308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000003ffffff; valaddr_reg:x3; val_offset:255924*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255924*0 + 3*60*FLEN/8, x4, x1, x2)

inst_85309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000007ffffff; valaddr_reg:x3; val_offset:255927*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255927*0 + 3*61*FLEN/8, x4, x1, x2)

inst_85310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000000fffffff; valaddr_reg:x3; val_offset:255930*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255930*0 + 3*62*FLEN/8, x4, x1, x2)

inst_85311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000001fffffff; valaddr_reg:x3; val_offset:255933*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255933*0 + 3*63*FLEN/8, x4, x1, x2)

inst_85312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000003fffffff; valaddr_reg:x3; val_offset:255936*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255936*0 + 3*64*FLEN/8, x4, x1, x2)

inst_85313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000007fffffff; valaddr_reg:x3; val_offset:255939*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255939*0 + 3*65*FLEN/8, x4, x1, x2)

inst_85314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00000ffffffff; valaddr_reg:x3; val_offset:255942*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255942*0 + 3*66*FLEN/8, x4, x1, x2)

inst_85315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00001ffffffff; valaddr_reg:x3; val_offset:255945*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255945*0 + 3*67*FLEN/8, x4, x1, x2)

inst_85316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00003ffffffff; valaddr_reg:x3; val_offset:255948*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255948*0 + 3*68*FLEN/8, x4, x1, x2)

inst_85317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00007ffffffff; valaddr_reg:x3; val_offset:255951*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255951*0 + 3*69*FLEN/8, x4, x1, x2)

inst_85318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0000fffffffff; valaddr_reg:x3; val_offset:255954*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255954*0 + 3*70*FLEN/8, x4, x1, x2)

inst_85319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0001fffffffff; valaddr_reg:x3; val_offset:255957*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255957*0 + 3*71*FLEN/8, x4, x1, x2)

inst_85320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0003fffffffff; valaddr_reg:x3; val_offset:255960*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255960*0 + 3*72*FLEN/8, x4, x1, x2)

inst_85321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0007fffffffff; valaddr_reg:x3; val_offset:255963*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255963*0 + 3*73*FLEN/8, x4, x1, x2)

inst_85322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a000ffffffffff; valaddr_reg:x3; val_offset:255966*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255966*0 + 3*74*FLEN/8, x4, x1, x2)

inst_85323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a001ffffffffff; valaddr_reg:x3; val_offset:255969*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255969*0 + 3*75*FLEN/8, x4, x1, x2)

inst_85324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a003ffffffffff; valaddr_reg:x3; val_offset:255972*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255972*0 + 3*76*FLEN/8, x4, x1, x2)

inst_85325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a007ffffffffff; valaddr_reg:x3; val_offset:255975*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255975*0 + 3*77*FLEN/8, x4, x1, x2)

inst_85326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a00fffffffffff; valaddr_reg:x3; val_offset:255978*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255978*0 + 3*78*FLEN/8, x4, x1, x2)

inst_85327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a01fffffffffff; valaddr_reg:x3; val_offset:255981*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255981*0 + 3*79*FLEN/8, x4, x1, x2)

inst_85328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a03fffffffffff; valaddr_reg:x3; val_offset:255984*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255984*0 + 3*80*FLEN/8, x4, x1, x2)

inst_85329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a07fffffffffff; valaddr_reg:x3; val_offset:255987*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255987*0 + 3*81*FLEN/8, x4, x1, x2)

inst_85330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a0ffffffffffff; valaddr_reg:x3; val_offset:255990*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255990*0 + 3*82*FLEN/8, x4, x1, x2)

inst_85331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a1ffffffffffff; valaddr_reg:x3; val_offset:255993*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255993*0 + 3*83*FLEN/8, x4, x1, x2)

inst_85332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a3ffffffffffff; valaddr_reg:x3; val_offset:255996*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255996*0 + 3*84*FLEN/8, x4, x1, x2)

inst_85333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a7ffffffffffff; valaddr_reg:x3; val_offset:255999*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 255999*0 + 3*85*FLEN/8, x4, x1, x2)

inst_85334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2a8000000000000; valaddr_reg:x3; val_offset:256002*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256002*0 + 3*86*FLEN/8, x4, x1, x2)

inst_85335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2ac000000000000; valaddr_reg:x3; val_offset:256005*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256005*0 + 3*87*FLEN/8, x4, x1, x2)

inst_85336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2ae000000000000; valaddr_reg:x3; val_offset:256008*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256008*0 + 3*88*FLEN/8, x4, x1, x2)

inst_85337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2af000000000000; valaddr_reg:x3; val_offset:256011*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256011*0 + 3*89*FLEN/8, x4, x1, x2)

inst_85338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2af800000000000; valaddr_reg:x3; val_offset:256014*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256014*0 + 3*90*FLEN/8, x4, x1, x2)

inst_85339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afc00000000000; valaddr_reg:x3; val_offset:256017*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256017*0 + 3*91*FLEN/8, x4, x1, x2)

inst_85340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afe00000000000; valaddr_reg:x3; val_offset:256020*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256020*0 + 3*92*FLEN/8, x4, x1, x2)

inst_85341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2aff00000000000; valaddr_reg:x3; val_offset:256023*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256023*0 + 3*93*FLEN/8, x4, x1, x2)

inst_85342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2aff80000000000; valaddr_reg:x3; val_offset:256026*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256026*0 + 3*94*FLEN/8, x4, x1, x2)

inst_85343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affc0000000000; valaddr_reg:x3; val_offset:256029*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256029*0 + 3*95*FLEN/8, x4, x1, x2)

inst_85344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affe0000000000; valaddr_reg:x3; val_offset:256032*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256032*0 + 3*96*FLEN/8, x4, x1, x2)

inst_85345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afff0000000000; valaddr_reg:x3; val_offset:256035*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256035*0 + 3*97*FLEN/8, x4, x1, x2)

inst_85346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afff8000000000; valaddr_reg:x3; val_offset:256038*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256038*0 + 3*98*FLEN/8, x4, x1, x2)

inst_85347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffc000000000; valaddr_reg:x3; val_offset:256041*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256041*0 + 3*99*FLEN/8, x4, x1, x2)

inst_85348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffe000000000; valaddr_reg:x3; val_offset:256044*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256044*0 + 3*100*FLEN/8, x4, x1, x2)

inst_85349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affff000000000; valaddr_reg:x3; val_offset:256047*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256047*0 + 3*101*FLEN/8, x4, x1, x2)

inst_85350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affff800000000; valaddr_reg:x3; val_offset:256050*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256050*0 + 3*102*FLEN/8, x4, x1, x2)

inst_85351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffc00000000; valaddr_reg:x3; val_offset:256053*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256053*0 + 3*103*FLEN/8, x4, x1, x2)

inst_85352:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffe00000000; valaddr_reg:x3; val_offset:256056*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256056*0 + 3*104*FLEN/8, x4, x1, x2)

inst_85353:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffff00000000; valaddr_reg:x3; val_offset:256059*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256059*0 + 3*105*FLEN/8, x4, x1, x2)

inst_85354:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffff80000000; valaddr_reg:x3; val_offset:256062*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256062*0 + 3*106*FLEN/8, x4, x1, x2)

inst_85355:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffc0000000; valaddr_reg:x3; val_offset:256065*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256065*0 + 3*107*FLEN/8, x4, x1, x2)

inst_85356:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffe0000000; valaddr_reg:x3; val_offset:256068*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256068*0 + 3*108*FLEN/8, x4, x1, x2)

inst_85357:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffff0000000; valaddr_reg:x3; val_offset:256071*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256071*0 + 3*109*FLEN/8, x4, x1, x2)

inst_85358:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffff8000000; valaddr_reg:x3; val_offset:256074*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256074*0 + 3*110*FLEN/8, x4, x1, x2)

inst_85359:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffc000000; valaddr_reg:x3; val_offset:256077*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256077*0 + 3*111*FLEN/8, x4, x1, x2)

inst_85360:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffe000000; valaddr_reg:x3; val_offset:256080*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256080*0 + 3*112*FLEN/8, x4, x1, x2)

inst_85361:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffff000000; valaddr_reg:x3; val_offset:256083*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256083*0 + 3*113*FLEN/8, x4, x1, x2)

inst_85362:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffff800000; valaddr_reg:x3; val_offset:256086*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256086*0 + 3*114*FLEN/8, x4, x1, x2)

inst_85363:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffc00000; valaddr_reg:x3; val_offset:256089*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256089*0 + 3*115*FLEN/8, x4, x1, x2)

inst_85364:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffe00000; valaddr_reg:x3; val_offset:256092*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256092*0 + 3*116*FLEN/8, x4, x1, x2)

inst_85365:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffff00000; valaddr_reg:x3; val_offset:256095*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256095*0 + 3*117*FLEN/8, x4, x1, x2)

inst_85366:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffff80000; valaddr_reg:x3; val_offset:256098*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256098*0 + 3*118*FLEN/8, x4, x1, x2)

inst_85367:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffc0000; valaddr_reg:x3; val_offset:256101*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256101*0 + 3*119*FLEN/8, x4, x1, x2)

inst_85368:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffe0000; valaddr_reg:x3; val_offset:256104*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256104*0 + 3*120*FLEN/8, x4, x1, x2)

inst_85369:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffff0000; valaddr_reg:x3; val_offset:256107*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256107*0 + 3*121*FLEN/8, x4, x1, x2)

inst_85370:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffff8000; valaddr_reg:x3; val_offset:256110*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256110*0 + 3*122*FLEN/8, x4, x1, x2)

inst_85371:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffffc000; valaddr_reg:x3; val_offset:256113*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256113*0 + 3*123*FLEN/8, x4, x1, x2)

inst_85372:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffffe000; valaddr_reg:x3; val_offset:256116*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256116*0 + 3*124*FLEN/8, x4, x1, x2)

inst_85373:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffff000; valaddr_reg:x3; val_offset:256119*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256119*0 + 3*125*FLEN/8, x4, x1, x2)

inst_85374:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffff800; valaddr_reg:x3; val_offset:256122*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256122*0 + 3*126*FLEN/8, x4, x1, x2)

inst_85375:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffffc00; valaddr_reg:x3; val_offset:256125*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256125*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_85376:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffffe00; valaddr_reg:x3; val_offset:256128*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256128*0 + 3*128*FLEN/8, x4, x1, x2)

inst_85377:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffffff00; valaddr_reg:x3; val_offset:256131*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256131*0 + 3*129*FLEN/8, x4, x1, x2)

inst_85378:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffffff80; valaddr_reg:x3; val_offset:256134*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256134*0 + 3*130*FLEN/8, x4, x1, x2)

inst_85379:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffffffc0; valaddr_reg:x3; val_offset:256137*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256137*0 + 3*131*FLEN/8, x4, x1, x2)

inst_85380:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffffffe0; valaddr_reg:x3; val_offset:256140*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256140*0 + 3*132*FLEN/8, x4, x1, x2)

inst_85381:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffffff0; valaddr_reg:x3; val_offset:256143*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256143*0 + 3*133*FLEN/8, x4, x1, x2)

inst_85382:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffffff8; valaddr_reg:x3; val_offset:256146*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256146*0 + 3*134*FLEN/8, x4, x1, x2)

inst_85383:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffffffc; valaddr_reg:x3; val_offset:256149*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256149*0 + 3*135*FLEN/8, x4, x1, x2)

inst_85384:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2affffffffffffe; valaddr_reg:x3; val_offset:256152*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256152*0 + 3*136*FLEN/8, x4, x1, x2)

inst_85385:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2c15f08228e3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2c15f08228e3; op2val:0x0;
op3val:0x2afffffffffffff; valaddr_reg:x3; val_offset:256155*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256155*0 + 3*137*FLEN/8, x4, x1, x2)

inst_85386:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000000000; valaddr_reg:x3; val_offset:256158*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256158*0 + 3*138*FLEN/8, x4, x1, x2)

inst_85387:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000000001; valaddr_reg:x3; val_offset:256161*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256161*0 + 3*139*FLEN/8, x4, x1, x2)

inst_85388:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000000003; valaddr_reg:x3; val_offset:256164*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256164*0 + 3*140*FLEN/8, x4, x1, x2)

inst_85389:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000000007; valaddr_reg:x3; val_offset:256167*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256167*0 + 3*141*FLEN/8, x4, x1, x2)

inst_85390:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000000000f; valaddr_reg:x3; val_offset:256170*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256170*0 + 3*142*FLEN/8, x4, x1, x2)

inst_85391:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000000001f; valaddr_reg:x3; val_offset:256173*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256173*0 + 3*143*FLEN/8, x4, x1, x2)

inst_85392:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000000003f; valaddr_reg:x3; val_offset:256176*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256176*0 + 3*144*FLEN/8, x4, x1, x2)

inst_85393:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000000007f; valaddr_reg:x3; val_offset:256179*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256179*0 + 3*145*FLEN/8, x4, x1, x2)

inst_85394:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000000000ff; valaddr_reg:x3; val_offset:256182*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256182*0 + 3*146*FLEN/8, x4, x1, x2)

inst_85395:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000000001ff; valaddr_reg:x3; val_offset:256185*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256185*0 + 3*147*FLEN/8, x4, x1, x2)

inst_85396:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000000003ff; valaddr_reg:x3; val_offset:256188*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256188*0 + 3*148*FLEN/8, x4, x1, x2)

inst_85397:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000000007ff; valaddr_reg:x3; val_offset:256191*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256191*0 + 3*149*FLEN/8, x4, x1, x2)

inst_85398:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000000fff; valaddr_reg:x3; val_offset:256194*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256194*0 + 3*150*FLEN/8, x4, x1, x2)

inst_85399:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000001fff; valaddr_reg:x3; val_offset:256197*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256197*0 + 3*151*FLEN/8, x4, x1, x2)

inst_85400:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000003fff; valaddr_reg:x3; val_offset:256200*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256200*0 + 3*152*FLEN/8, x4, x1, x2)

inst_85401:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000007fff; valaddr_reg:x3; val_offset:256203*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256203*0 + 3*153*FLEN/8, x4, x1, x2)

inst_85402:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000000ffff; valaddr_reg:x3; val_offset:256206*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256206*0 + 3*154*FLEN/8, x4, x1, x2)

inst_85403:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000001ffff; valaddr_reg:x3; val_offset:256209*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256209*0 + 3*155*FLEN/8, x4, x1, x2)

inst_85404:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000003ffff; valaddr_reg:x3; val_offset:256212*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256212*0 + 3*156*FLEN/8, x4, x1, x2)

inst_85405:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000007ffff; valaddr_reg:x3; val_offset:256215*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256215*0 + 3*157*FLEN/8, x4, x1, x2)

inst_85406:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000000fffff; valaddr_reg:x3; val_offset:256218*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256218*0 + 3*158*FLEN/8, x4, x1, x2)

inst_85407:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000001fffff; valaddr_reg:x3; val_offset:256221*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256221*0 + 3*159*FLEN/8, x4, x1, x2)

inst_85408:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000003fffff; valaddr_reg:x3; val_offset:256224*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256224*0 + 3*160*FLEN/8, x4, x1, x2)

inst_85409:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000007fffff; valaddr_reg:x3; val_offset:256227*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256227*0 + 3*161*FLEN/8, x4, x1, x2)

inst_85410:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000000ffffff; valaddr_reg:x3; val_offset:256230*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256230*0 + 3*162*FLEN/8, x4, x1, x2)

inst_85411:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000001ffffff; valaddr_reg:x3; val_offset:256233*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256233*0 + 3*163*FLEN/8, x4, x1, x2)

inst_85412:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000003ffffff; valaddr_reg:x3; val_offset:256236*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256236*0 + 3*164*FLEN/8, x4, x1, x2)

inst_85413:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000007ffffff; valaddr_reg:x3; val_offset:256239*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256239*0 + 3*165*FLEN/8, x4, x1, x2)

inst_85414:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000000fffffff; valaddr_reg:x3; val_offset:256242*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256242*0 + 3*166*FLEN/8, x4, x1, x2)

inst_85415:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000001fffffff; valaddr_reg:x3; val_offset:256245*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256245*0 + 3*167*FLEN/8, x4, x1, x2)

inst_85416:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000003fffffff; valaddr_reg:x3; val_offset:256248*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256248*0 + 3*168*FLEN/8, x4, x1, x2)

inst_85417:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000007fffffff; valaddr_reg:x3; val_offset:256251*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256251*0 + 3*169*FLEN/8, x4, x1, x2)

inst_85418:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300000ffffffff; valaddr_reg:x3; val_offset:256254*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256254*0 + 3*170*FLEN/8, x4, x1, x2)

inst_85419:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300001ffffffff; valaddr_reg:x3; val_offset:256257*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256257*0 + 3*171*FLEN/8, x4, x1, x2)

inst_85420:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300003ffffffff; valaddr_reg:x3; val_offset:256260*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256260*0 + 3*172*FLEN/8, x4, x1, x2)

inst_85421:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300007ffffffff; valaddr_reg:x3; val_offset:256263*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256263*0 + 3*173*FLEN/8, x4, x1, x2)

inst_85422:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30000fffffffff; valaddr_reg:x3; val_offset:256266*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256266*0 + 3*174*FLEN/8, x4, x1, x2)

inst_85423:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30001fffffffff; valaddr_reg:x3; val_offset:256269*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256269*0 + 3*175*FLEN/8, x4, x1, x2)

inst_85424:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30003fffffffff; valaddr_reg:x3; val_offset:256272*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256272*0 + 3*176*FLEN/8, x4, x1, x2)

inst_85425:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30007fffffffff; valaddr_reg:x3; val_offset:256275*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256275*0 + 3*177*FLEN/8, x4, x1, x2)

inst_85426:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3000ffffffffff; valaddr_reg:x3; val_offset:256278*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256278*0 + 3*178*FLEN/8, x4, x1, x2)

inst_85427:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3001ffffffffff; valaddr_reg:x3; val_offset:256281*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256281*0 + 3*179*FLEN/8, x4, x1, x2)

inst_85428:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3003ffffffffff; valaddr_reg:x3; val_offset:256284*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256284*0 + 3*180*FLEN/8, x4, x1, x2)

inst_85429:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3007ffffffffff; valaddr_reg:x3; val_offset:256287*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256287*0 + 3*181*FLEN/8, x4, x1, x2)

inst_85430:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f300fffffffffff; valaddr_reg:x3; val_offset:256290*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256290*0 + 3*182*FLEN/8, x4, x1, x2)

inst_85431:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f301fffffffffff; valaddr_reg:x3; val_offset:256293*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256293*0 + 3*183*FLEN/8, x4, x1, x2)

inst_85432:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f303fffffffffff; valaddr_reg:x3; val_offset:256296*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256296*0 + 3*184*FLEN/8, x4, x1, x2)

inst_85433:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f307fffffffffff; valaddr_reg:x3; val_offset:256299*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256299*0 + 3*185*FLEN/8, x4, x1, x2)

inst_85434:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f30ffffffffffff; valaddr_reg:x3; val_offset:256302*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256302*0 + 3*186*FLEN/8, x4, x1, x2)

inst_85435:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f31ffffffffffff; valaddr_reg:x3; val_offset:256305*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256305*0 + 3*187*FLEN/8, x4, x1, x2)

inst_85436:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f33ffffffffffff; valaddr_reg:x3; val_offset:256308*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256308*0 + 3*188*FLEN/8, x4, x1, x2)

inst_85437:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f37ffffffffffff; valaddr_reg:x3; val_offset:256311*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256311*0 + 3*189*FLEN/8, x4, x1, x2)

inst_85438:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f38000000000000; valaddr_reg:x3; val_offset:256314*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256314*0 + 3*190*FLEN/8, x4, x1, x2)

inst_85439:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3c000000000000; valaddr_reg:x3; val_offset:256317*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256317*0 + 3*191*FLEN/8, x4, x1, x2)

inst_85440:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3e000000000000; valaddr_reg:x3; val_offset:256320*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256320*0 + 3*192*FLEN/8, x4, x1, x2)

inst_85441:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3f000000000000; valaddr_reg:x3; val_offset:256323*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256323*0 + 3*193*FLEN/8, x4, x1, x2)

inst_85442:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3f800000000000; valaddr_reg:x3; val_offset:256326*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256326*0 + 3*194*FLEN/8, x4, x1, x2)

inst_85443:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fc00000000000; valaddr_reg:x3; val_offset:256329*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256329*0 + 3*195*FLEN/8, x4, x1, x2)

inst_85444:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fe00000000000; valaddr_reg:x3; val_offset:256332*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256332*0 + 3*196*FLEN/8, x4, x1, x2)

inst_85445:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ff00000000000; valaddr_reg:x3; val_offset:256335*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256335*0 + 3*197*FLEN/8, x4, x1, x2)

inst_85446:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ff80000000000; valaddr_reg:x3; val_offset:256338*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256338*0 + 3*198*FLEN/8, x4, x1, x2)

inst_85447:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffc0000000000; valaddr_reg:x3; val_offset:256341*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256341*0 + 3*199*FLEN/8, x4, x1, x2)

inst_85448:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffe0000000000; valaddr_reg:x3; val_offset:256344*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256344*0 + 3*200*FLEN/8, x4, x1, x2)

inst_85449:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fff0000000000; valaddr_reg:x3; val_offset:256347*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256347*0 + 3*201*FLEN/8, x4, x1, x2)

inst_85450:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fff8000000000; valaddr_reg:x3; val_offset:256350*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256350*0 + 3*202*FLEN/8, x4, x1, x2)

inst_85451:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffc000000000; valaddr_reg:x3; val_offset:256353*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256353*0 + 3*203*FLEN/8, x4, x1, x2)

inst_85452:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffe000000000; valaddr_reg:x3; val_offset:256356*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256356*0 + 3*204*FLEN/8, x4, x1, x2)

inst_85453:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffff000000000; valaddr_reg:x3; val_offset:256359*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256359*0 + 3*205*FLEN/8, x4, x1, x2)

inst_85454:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffff800000000; valaddr_reg:x3; val_offset:256362*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256362*0 + 3*206*FLEN/8, x4, x1, x2)

inst_85455:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffc00000000; valaddr_reg:x3; val_offset:256365*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256365*0 + 3*207*FLEN/8, x4, x1, x2)

inst_85456:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffe00000000; valaddr_reg:x3; val_offset:256368*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256368*0 + 3*208*FLEN/8, x4, x1, x2)

inst_85457:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffff00000000; valaddr_reg:x3; val_offset:256371*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256371*0 + 3*209*FLEN/8, x4, x1, x2)

inst_85458:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffff80000000; valaddr_reg:x3; val_offset:256374*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256374*0 + 3*210*FLEN/8, x4, x1, x2)

inst_85459:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffc0000000; valaddr_reg:x3; val_offset:256377*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256377*0 + 3*211*FLEN/8, x4, x1, x2)

inst_85460:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffe0000000; valaddr_reg:x3; val_offset:256380*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256380*0 + 3*212*FLEN/8, x4, x1, x2)

inst_85461:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffff0000000; valaddr_reg:x3; val_offset:256383*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256383*0 + 3*213*FLEN/8, x4, x1, x2)

inst_85462:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffff8000000; valaddr_reg:x3; val_offset:256386*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256386*0 + 3*214*FLEN/8, x4, x1, x2)

inst_85463:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffc000000; valaddr_reg:x3; val_offset:256389*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256389*0 + 3*215*FLEN/8, x4, x1, x2)

inst_85464:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffe000000; valaddr_reg:x3; val_offset:256392*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256392*0 + 3*216*FLEN/8, x4, x1, x2)

inst_85465:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffff000000; valaddr_reg:x3; val_offset:256395*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256395*0 + 3*217*FLEN/8, x4, x1, x2)

inst_85466:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffff800000; valaddr_reg:x3; val_offset:256398*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256398*0 + 3*218*FLEN/8, x4, x1, x2)

inst_85467:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffc00000; valaddr_reg:x3; val_offset:256401*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256401*0 + 3*219*FLEN/8, x4, x1, x2)

inst_85468:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffe00000; valaddr_reg:x3; val_offset:256404*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256404*0 + 3*220*FLEN/8, x4, x1, x2)

inst_85469:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffff00000; valaddr_reg:x3; val_offset:256407*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256407*0 + 3*221*FLEN/8, x4, x1, x2)

inst_85470:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffff80000; valaddr_reg:x3; val_offset:256410*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256410*0 + 3*222*FLEN/8, x4, x1, x2)

inst_85471:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffc0000; valaddr_reg:x3; val_offset:256413*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256413*0 + 3*223*FLEN/8, x4, x1, x2)

inst_85472:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffe0000; valaddr_reg:x3; val_offset:256416*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256416*0 + 3*224*FLEN/8, x4, x1, x2)

inst_85473:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffff0000; valaddr_reg:x3; val_offset:256419*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256419*0 + 3*225*FLEN/8, x4, x1, x2)

inst_85474:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffff8000; valaddr_reg:x3; val_offset:256422*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256422*0 + 3*226*FLEN/8, x4, x1, x2)

inst_85475:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffffc000; valaddr_reg:x3; val_offset:256425*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256425*0 + 3*227*FLEN/8, x4, x1, x2)

inst_85476:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffffe000; valaddr_reg:x3; val_offset:256428*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256428*0 + 3*228*FLEN/8, x4, x1, x2)

inst_85477:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffff000; valaddr_reg:x3; val_offset:256431*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256431*0 + 3*229*FLEN/8, x4, x1, x2)

inst_85478:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffff800; valaddr_reg:x3; val_offset:256434*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256434*0 + 3*230*FLEN/8, x4, x1, x2)

inst_85479:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffffc00; valaddr_reg:x3; val_offset:256437*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256437*0 + 3*231*FLEN/8, x4, x1, x2)

inst_85480:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffffe00; valaddr_reg:x3; val_offset:256440*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256440*0 + 3*232*FLEN/8, x4, x1, x2)

inst_85481:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffffff00; valaddr_reg:x3; val_offset:256443*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256443*0 + 3*233*FLEN/8, x4, x1, x2)

inst_85482:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffffff80; valaddr_reg:x3; val_offset:256446*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256446*0 + 3*234*FLEN/8, x4, x1, x2)

inst_85483:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffffffc0; valaddr_reg:x3; val_offset:256449*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256449*0 + 3*235*FLEN/8, x4, x1, x2)

inst_85484:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffffffe0; valaddr_reg:x3; val_offset:256452*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256452*0 + 3*236*FLEN/8, x4, x1, x2)

inst_85485:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffffff0; valaddr_reg:x3; val_offset:256455*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256455*0 + 3*237*FLEN/8, x4, x1, x2)

inst_85486:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffffff8; valaddr_reg:x3; val_offset:256458*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256458*0 + 3*238*FLEN/8, x4, x1, x2)

inst_85487:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffffffc; valaddr_reg:x3; val_offset:256461*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256461*0 + 3*239*FLEN/8, x4, x1, x2)

inst_85488:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3ffffffffffffe; valaddr_reg:x3; val_offset:256464*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256464*0 + 3*240*FLEN/8, x4, x1, x2)

inst_85489:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3f3 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3f3fffffffffffff; valaddr_reg:x3; val_offset:256467*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256467*0 + 3*241*FLEN/8, x4, x1, x2)

inst_85490:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:256470*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256470*0 + 3*242*FLEN/8, x4, x1, x2)

inst_85491:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:256473*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256473*0 + 3*243*FLEN/8, x4, x1, x2)

inst_85492:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:256476*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256476*0 + 3*244*FLEN/8, x4, x1, x2)

inst_85493:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:256479*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256479*0 + 3*245*FLEN/8, x4, x1, x2)

inst_85494:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:256482*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256482*0 + 3*246*FLEN/8, x4, x1, x2)

inst_85495:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:256485*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256485*0 + 3*247*FLEN/8, x4, x1, x2)

inst_85496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:256488*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256488*0 + 3*248*FLEN/8, x4, x1, x2)

inst_85497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:256491*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256491*0 + 3*249*FLEN/8, x4, x1, x2)

inst_85498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:256494*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256494*0 + 3*250*FLEN/8, x4, x1, x2)

inst_85499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:256497*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256497*0 + 3*251*FLEN/8, x4, x1, x2)

inst_85500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:256500*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256500*0 + 3*252*FLEN/8, x4, x1, x2)

inst_85501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:256503*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256503*0 + 3*253*FLEN/8, x4, x1, x2)

inst_85502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:256506*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256506*0 + 3*254*FLEN/8, x4, x1, x2)

inst_85503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:256509*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256509*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_85504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:256512*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256512*0 + 3*256*FLEN/8, x4, x1, x2)

inst_85505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:256515*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256515*0 + 3*257*FLEN/8, x4, x1, x2)

inst_85506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:256518*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256518*0 + 3*258*FLEN/8, x4, x1, x2)

inst_85507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:256521*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256521*0 + 3*259*FLEN/8, x4, x1, x2)

inst_85508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:256524*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256524*0 + 3*260*FLEN/8, x4, x1, x2)

inst_85509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:256527*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256527*0 + 3*261*FLEN/8, x4, x1, x2)

inst_85510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:256530*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256530*0 + 3*262*FLEN/8, x4, x1, x2)

inst_85511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2e98282b033b and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2d6034f733cd8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2e98282b033b; op2val:0x2032d6034f733cd8;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:256533*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256533*0 + 3*263*FLEN/8, x4, x1, x2)

inst_85512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:256536*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256536*0 + 3*264*FLEN/8, x4, x1, x2)

inst_85513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:256539*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256539*0 + 3*265*FLEN/8, x4, x1, x2)

inst_85514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:256542*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256542*0 + 3*266*FLEN/8, x4, x1, x2)

inst_85515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:256545*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256545*0 + 3*267*FLEN/8, x4, x1, x2)

inst_85516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:256548*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256548*0 + 3*268*FLEN/8, x4, x1, x2)

inst_85517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:256551*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256551*0 + 3*269*FLEN/8, x4, x1, x2)

inst_85518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:256554*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256554*0 + 3*270*FLEN/8, x4, x1, x2)

inst_85519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:256557*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256557*0 + 3*271*FLEN/8, x4, x1, x2)

inst_85520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:256560*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256560*0 + 3*272*FLEN/8, x4, x1, x2)

inst_85521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:256563*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256563*0 + 3*273*FLEN/8, x4, x1, x2)

inst_85522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:256566*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256566*0 + 3*274*FLEN/8, x4, x1, x2)

inst_85523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:256569*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256569*0 + 3*275*FLEN/8, x4, x1, x2)

inst_85524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:256572*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256572*0 + 3*276*FLEN/8, x4, x1, x2)

inst_85525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:256575*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256575*0 + 3*277*FLEN/8, x4, x1, x2)

inst_85526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:256578*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256578*0 + 3*278*FLEN/8, x4, x1, x2)

inst_85527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:256581*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256581*0 + 3*279*FLEN/8, x4, x1, x2)

inst_85528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:256584*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256584*0 + 3*280*FLEN/8, x4, x1, x2)

inst_85529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:256587*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256587*0 + 3*281*FLEN/8, x4, x1, x2)

inst_85530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:256590*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256590*0 + 3*282*FLEN/8, x4, x1, x2)

inst_85531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:256593*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256593*0 + 3*283*FLEN/8, x4, x1, x2)

inst_85532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:256596*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256596*0 + 3*284*FLEN/8, x4, x1, x2)

inst_85533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:256599*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256599*0 + 3*285*FLEN/8, x4, x1, x2)

inst_85534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000000000; valaddr_reg:x3; val_offset:256602*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256602*0 + 3*286*FLEN/8, x4, x1, x2)

inst_85535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000000001; valaddr_reg:x3; val_offset:256605*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256605*0 + 3*287*FLEN/8, x4, x1, x2)

inst_85536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000000003; valaddr_reg:x3; val_offset:256608*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256608*0 + 3*288*FLEN/8, x4, x1, x2)

inst_85537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000000007; valaddr_reg:x3; val_offset:256611*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256611*0 + 3*289*FLEN/8, x4, x1, x2)

inst_85538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000000000f; valaddr_reg:x3; val_offset:256614*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256614*0 + 3*290*FLEN/8, x4, x1, x2)

inst_85539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000000001f; valaddr_reg:x3; val_offset:256617*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256617*0 + 3*291*FLEN/8, x4, x1, x2)

inst_85540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000000003f; valaddr_reg:x3; val_offset:256620*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256620*0 + 3*292*FLEN/8, x4, x1, x2)

inst_85541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000000007f; valaddr_reg:x3; val_offset:256623*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256623*0 + 3*293*FLEN/8, x4, x1, x2)

inst_85542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000000000ff; valaddr_reg:x3; val_offset:256626*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256626*0 + 3*294*FLEN/8, x4, x1, x2)

inst_85543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000000001ff; valaddr_reg:x3; val_offset:256629*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256629*0 + 3*295*FLEN/8, x4, x1, x2)

inst_85544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000000003ff; valaddr_reg:x3; val_offset:256632*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256632*0 + 3*296*FLEN/8, x4, x1, x2)

inst_85545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000000007ff; valaddr_reg:x3; val_offset:256635*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256635*0 + 3*297*FLEN/8, x4, x1, x2)

inst_85546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000000fff; valaddr_reg:x3; val_offset:256638*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256638*0 + 3*298*FLEN/8, x4, x1, x2)

inst_85547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000001fff; valaddr_reg:x3; val_offset:256641*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256641*0 + 3*299*FLEN/8, x4, x1, x2)

inst_85548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000003fff; valaddr_reg:x3; val_offset:256644*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256644*0 + 3*300*FLEN/8, x4, x1, x2)

inst_85549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000007fff; valaddr_reg:x3; val_offset:256647*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256647*0 + 3*301*FLEN/8, x4, x1, x2)

inst_85550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000000ffff; valaddr_reg:x3; val_offset:256650*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256650*0 + 3*302*FLEN/8, x4, x1, x2)

inst_85551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000001ffff; valaddr_reg:x3; val_offset:256653*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256653*0 + 3*303*FLEN/8, x4, x1, x2)

inst_85552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000003ffff; valaddr_reg:x3; val_offset:256656*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256656*0 + 3*304*FLEN/8, x4, x1, x2)

inst_85553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000007ffff; valaddr_reg:x3; val_offset:256659*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256659*0 + 3*305*FLEN/8, x4, x1, x2)

inst_85554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000000fffff; valaddr_reg:x3; val_offset:256662*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256662*0 + 3*306*FLEN/8, x4, x1, x2)

inst_85555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000001fffff; valaddr_reg:x3; val_offset:256665*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256665*0 + 3*307*FLEN/8, x4, x1, x2)

inst_85556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000003fffff; valaddr_reg:x3; val_offset:256668*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256668*0 + 3*308*FLEN/8, x4, x1, x2)

inst_85557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000007fffff; valaddr_reg:x3; val_offset:256671*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256671*0 + 3*309*FLEN/8, x4, x1, x2)

inst_85558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000000ffffff; valaddr_reg:x3; val_offset:256674*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256674*0 + 3*310*FLEN/8, x4, x1, x2)

inst_85559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000001ffffff; valaddr_reg:x3; val_offset:256677*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256677*0 + 3*311*FLEN/8, x4, x1, x2)

inst_85560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000003ffffff; valaddr_reg:x3; val_offset:256680*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256680*0 + 3*312*FLEN/8, x4, x1, x2)

inst_85561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000007ffffff; valaddr_reg:x3; val_offset:256683*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256683*0 + 3*313*FLEN/8, x4, x1, x2)

inst_85562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000000fffffff; valaddr_reg:x3; val_offset:256686*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256686*0 + 3*314*FLEN/8, x4, x1, x2)

inst_85563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000001fffffff; valaddr_reg:x3; val_offset:256689*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256689*0 + 3*315*FLEN/8, x4, x1, x2)

inst_85564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000003fffffff; valaddr_reg:x3; val_offset:256692*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256692*0 + 3*316*FLEN/8, x4, x1, x2)

inst_85565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000007fffffff; valaddr_reg:x3; val_offset:256695*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256695*0 + 3*317*FLEN/8, x4, x1, x2)

inst_85566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100000ffffffff; valaddr_reg:x3; val_offset:256698*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256698*0 + 3*318*FLEN/8, x4, x1, x2)

inst_85567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100001ffffffff; valaddr_reg:x3; val_offset:256701*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256701*0 + 3*319*FLEN/8, x4, x1, x2)

inst_85568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100003ffffffff; valaddr_reg:x3; val_offset:256704*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256704*0 + 3*320*FLEN/8, x4, x1, x2)

inst_85569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100007ffffffff; valaddr_reg:x3; val_offset:256707*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256707*0 + 3*321*FLEN/8, x4, x1, x2)

inst_85570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110000fffffffff; valaddr_reg:x3; val_offset:256710*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256710*0 + 3*322*FLEN/8, x4, x1, x2)

inst_85571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110001fffffffff; valaddr_reg:x3; val_offset:256713*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256713*0 + 3*323*FLEN/8, x4, x1, x2)

inst_85572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110003fffffffff; valaddr_reg:x3; val_offset:256716*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256716*0 + 3*324*FLEN/8, x4, x1, x2)

inst_85573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110007fffffffff; valaddr_reg:x3; val_offset:256719*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256719*0 + 3*325*FLEN/8, x4, x1, x2)

inst_85574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811000ffffffffff; valaddr_reg:x3; val_offset:256722*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256722*0 + 3*326*FLEN/8, x4, x1, x2)

inst_85575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811001ffffffffff; valaddr_reg:x3; val_offset:256725*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256725*0 + 3*327*FLEN/8, x4, x1, x2)

inst_85576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811003ffffffffff; valaddr_reg:x3; val_offset:256728*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256728*0 + 3*328*FLEN/8, x4, x1, x2)

inst_85577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811007ffffffffff; valaddr_reg:x3; val_offset:256731*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256731*0 + 3*329*FLEN/8, x4, x1, x2)

inst_85578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81100fffffffffff; valaddr_reg:x3; val_offset:256734*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256734*0 + 3*330*FLEN/8, x4, x1, x2)

inst_85579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81101fffffffffff; valaddr_reg:x3; val_offset:256737*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256737*0 + 3*331*FLEN/8, x4, x1, x2)

inst_85580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81103fffffffffff; valaddr_reg:x3; val_offset:256740*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256740*0 + 3*332*FLEN/8, x4, x1, x2)

inst_85581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x81107fffffffffff; valaddr_reg:x3; val_offset:256743*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256743*0 + 3*333*FLEN/8, x4, x1, x2)

inst_85582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8110ffffffffffff; valaddr_reg:x3; val_offset:256746*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256746*0 + 3*334*FLEN/8, x4, x1, x2)

inst_85583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8111ffffffffffff; valaddr_reg:x3; val_offset:256749*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256749*0 + 3*335*FLEN/8, x4, x1, x2)

inst_85584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8113ffffffffffff; valaddr_reg:x3; val_offset:256752*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256752*0 + 3*336*FLEN/8, x4, x1, x2)

inst_85585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8117ffffffffffff; valaddr_reg:x3; val_offset:256755*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256755*0 + 3*337*FLEN/8, x4, x1, x2)

inst_85586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x8118000000000000; valaddr_reg:x3; val_offset:256758*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256758*0 + 3*338*FLEN/8, x4, x1, x2)

inst_85587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811c000000000000; valaddr_reg:x3; val_offset:256761*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256761*0 + 3*339*FLEN/8, x4, x1, x2)

inst_85588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811e000000000000; valaddr_reg:x3; val_offset:256764*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256764*0 + 3*340*FLEN/8, x4, x1, x2)

inst_85589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811f000000000000; valaddr_reg:x3; val_offset:256767*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256767*0 + 3*341*FLEN/8, x4, x1, x2)

inst_85590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811f800000000000; valaddr_reg:x3; val_offset:256770*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256770*0 + 3*342*FLEN/8, x4, x1, x2)

inst_85591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fc00000000000; valaddr_reg:x3; val_offset:256773*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256773*0 + 3*343*FLEN/8, x4, x1, x2)

inst_85592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fe00000000000; valaddr_reg:x3; val_offset:256776*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256776*0 + 3*344*FLEN/8, x4, x1, x2)

inst_85593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ff00000000000; valaddr_reg:x3; val_offset:256779*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256779*0 + 3*345*FLEN/8, x4, x1, x2)

inst_85594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ff80000000000; valaddr_reg:x3; val_offset:256782*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256782*0 + 3*346*FLEN/8, x4, x1, x2)

inst_85595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffc0000000000; valaddr_reg:x3; val_offset:256785*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256785*0 + 3*347*FLEN/8, x4, x1, x2)

inst_85596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffe0000000000; valaddr_reg:x3; val_offset:256788*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256788*0 + 3*348*FLEN/8, x4, x1, x2)

inst_85597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fff0000000000; valaddr_reg:x3; val_offset:256791*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256791*0 + 3*349*FLEN/8, x4, x1, x2)

inst_85598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fff8000000000; valaddr_reg:x3; val_offset:256794*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256794*0 + 3*350*FLEN/8, x4, x1, x2)

inst_85599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffc000000000; valaddr_reg:x3; val_offset:256797*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256797*0 + 3*351*FLEN/8, x4, x1, x2)

inst_85600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffe000000000; valaddr_reg:x3; val_offset:256800*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256800*0 + 3*352*FLEN/8, x4, x1, x2)

inst_85601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffff000000000; valaddr_reg:x3; val_offset:256803*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256803*0 + 3*353*FLEN/8, x4, x1, x2)

inst_85602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffff800000000; valaddr_reg:x3; val_offset:256806*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256806*0 + 3*354*FLEN/8, x4, x1, x2)

inst_85603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffc00000000; valaddr_reg:x3; val_offset:256809*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256809*0 + 3*355*FLEN/8, x4, x1, x2)

inst_85604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffe00000000; valaddr_reg:x3; val_offset:256812*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256812*0 + 3*356*FLEN/8, x4, x1, x2)

inst_85605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffff00000000; valaddr_reg:x3; val_offset:256815*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256815*0 + 3*357*FLEN/8, x4, x1, x2)

inst_85606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffff80000000; valaddr_reg:x3; val_offset:256818*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256818*0 + 3*358*FLEN/8, x4, x1, x2)

inst_85607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffc0000000; valaddr_reg:x3; val_offset:256821*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256821*0 + 3*359*FLEN/8, x4, x1, x2)

inst_85608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffe0000000; valaddr_reg:x3; val_offset:256824*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256824*0 + 3*360*FLEN/8, x4, x1, x2)

inst_85609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffff0000000; valaddr_reg:x3; val_offset:256827*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256827*0 + 3*361*FLEN/8, x4, x1, x2)

inst_85610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffff8000000; valaddr_reg:x3; val_offset:256830*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256830*0 + 3*362*FLEN/8, x4, x1, x2)

inst_85611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffc000000; valaddr_reg:x3; val_offset:256833*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256833*0 + 3*363*FLEN/8, x4, x1, x2)

inst_85612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffe000000; valaddr_reg:x3; val_offset:256836*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256836*0 + 3*364*FLEN/8, x4, x1, x2)

inst_85613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffff000000; valaddr_reg:x3; val_offset:256839*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256839*0 + 3*365*FLEN/8, x4, x1, x2)

inst_85614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffff800000; valaddr_reg:x3; val_offset:256842*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256842*0 + 3*366*FLEN/8, x4, x1, x2)

inst_85615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffc00000; valaddr_reg:x3; val_offset:256845*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256845*0 + 3*367*FLEN/8, x4, x1, x2)

inst_85616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffe00000; valaddr_reg:x3; val_offset:256848*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256848*0 + 3*368*FLEN/8, x4, x1, x2)

inst_85617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffff00000; valaddr_reg:x3; val_offset:256851*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256851*0 + 3*369*FLEN/8, x4, x1, x2)

inst_85618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffff80000; valaddr_reg:x3; val_offset:256854*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256854*0 + 3*370*FLEN/8, x4, x1, x2)

inst_85619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffc0000; valaddr_reg:x3; val_offset:256857*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256857*0 + 3*371*FLEN/8, x4, x1, x2)

inst_85620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffe0000; valaddr_reg:x3; val_offset:256860*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256860*0 + 3*372*FLEN/8, x4, x1, x2)

inst_85621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffff0000; valaddr_reg:x3; val_offset:256863*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256863*0 + 3*373*FLEN/8, x4, x1, x2)

inst_85622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffff8000; valaddr_reg:x3; val_offset:256866*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256866*0 + 3*374*FLEN/8, x4, x1, x2)

inst_85623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffffc000; valaddr_reg:x3; val_offset:256869*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256869*0 + 3*375*FLEN/8, x4, x1, x2)

inst_85624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffffe000; valaddr_reg:x3; val_offset:256872*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256872*0 + 3*376*FLEN/8, x4, x1, x2)

inst_85625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffff000; valaddr_reg:x3; val_offset:256875*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256875*0 + 3*377*FLEN/8, x4, x1, x2)

inst_85626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffff800; valaddr_reg:x3; val_offset:256878*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256878*0 + 3*378*FLEN/8, x4, x1, x2)

inst_85627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffffc00; valaddr_reg:x3; val_offset:256881*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256881*0 + 3*379*FLEN/8, x4, x1, x2)

inst_85628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffffe00; valaddr_reg:x3; val_offset:256884*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256884*0 + 3*380*FLEN/8, x4, x1, x2)

inst_85629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffffff00; valaddr_reg:x3; val_offset:256887*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256887*0 + 3*381*FLEN/8, x4, x1, x2)

inst_85630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffffff80; valaddr_reg:x3; val_offset:256890*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256890*0 + 3*382*FLEN/8, x4, x1, x2)

inst_85631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffffffc0; valaddr_reg:x3; val_offset:256893*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256893*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_85632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffffffe0; valaddr_reg:x3; val_offset:256896*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256896*0 + 3*384*FLEN/8, x4, x1, x2)

inst_85633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffffff0; valaddr_reg:x3; val_offset:256899*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256899*0 + 3*385*FLEN/8, x4, x1, x2)

inst_85634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffffff8; valaddr_reg:x3; val_offset:256902*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256902*0 + 3*386*FLEN/8, x4, x1, x2)

inst_85635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffffffc; valaddr_reg:x3; val_offset:256905*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256905*0 + 3*387*FLEN/8, x4, x1, x2)

inst_85636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811ffffffffffffe; valaddr_reg:x3; val_offset:256908*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256908*0 + 3*388*FLEN/8, x4, x1, x2)

inst_85637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb2efd30dc5db9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab2efd30dc5db9; op2val:0x8000;
op3val:0x811fffffffffffff; valaddr_reg:x3; val_offset:256911*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256911*0 + 3*389*FLEN/8, x4, x1, x2)

inst_85638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:256914*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256914*0 + 3*390*FLEN/8, x4, x1, x2)

inst_85639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:256917*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256917*0 + 3*391*FLEN/8, x4, x1, x2)

inst_85640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:256920*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256920*0 + 3*392*FLEN/8, x4, x1, x2)

inst_85641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:256923*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256923*0 + 3*393*FLEN/8, x4, x1, x2)

inst_85642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:256926*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256926*0 + 3*394*FLEN/8, x4, x1, x2)

inst_85643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:256929*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256929*0 + 3*395*FLEN/8, x4, x1, x2)

inst_85644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:256932*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256932*0 + 3*396*FLEN/8, x4, x1, x2)

inst_85645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:256935*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256935*0 + 3*397*FLEN/8, x4, x1, x2)

inst_85646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:256938*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256938*0 + 3*398*FLEN/8, x4, x1, x2)

inst_85647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:256941*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256941*0 + 3*399*FLEN/8, x4, x1, x2)

inst_85648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:256944*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256944*0 + 3*400*FLEN/8, x4, x1, x2)

inst_85649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:256947*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256947*0 + 3*401*FLEN/8, x4, x1, x2)

inst_85650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:256950*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256950*0 + 3*402*FLEN/8, x4, x1, x2)

inst_85651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:256953*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256953*0 + 3*403*FLEN/8, x4, x1, x2)

inst_85652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:256956*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256956*0 + 3*404*FLEN/8, x4, x1, x2)

inst_85653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:256959*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256959*0 + 3*405*FLEN/8, x4, x1, x2)

inst_85654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:256962*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256962*0 + 3*406*FLEN/8, x4, x1, x2)

inst_85655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:256965*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256965*0 + 3*407*FLEN/8, x4, x1, x2)

inst_85656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:256968*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256968*0 + 3*408*FLEN/8, x4, x1, x2)

inst_85657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:256971*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256971*0 + 3*409*FLEN/8, x4, x1, x2)

inst_85658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:256974*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256974*0 + 3*410*FLEN/8, x4, x1, x2)

inst_85659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:256977*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256977*0 + 3*411*FLEN/8, x4, x1, x2)

inst_85660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000000000; valaddr_reg:x3; val_offset:256980*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256980*0 + 3*412*FLEN/8, x4, x1, x2)

inst_85661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000000001; valaddr_reg:x3; val_offset:256983*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256983*0 + 3*413*FLEN/8, x4, x1, x2)

inst_85662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000000003; valaddr_reg:x3; val_offset:256986*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256986*0 + 3*414*FLEN/8, x4, x1, x2)

inst_85663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000000007; valaddr_reg:x3; val_offset:256989*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256989*0 + 3*415*FLEN/8, x4, x1, x2)

inst_85664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000000000f; valaddr_reg:x3; val_offset:256992*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256992*0 + 3*416*FLEN/8, x4, x1, x2)

inst_85665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000000001f; valaddr_reg:x3; val_offset:256995*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256995*0 + 3*417*FLEN/8, x4, x1, x2)

inst_85666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000000003f; valaddr_reg:x3; val_offset:256998*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 256998*0 + 3*418*FLEN/8, x4, x1, x2)

inst_85667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000000007f; valaddr_reg:x3; val_offset:257001*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257001*0 + 3*419*FLEN/8, x4, x1, x2)

inst_85668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000000000ff; valaddr_reg:x3; val_offset:257004*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257004*0 + 3*420*FLEN/8, x4, x1, x2)

inst_85669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000000001ff; valaddr_reg:x3; val_offset:257007*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257007*0 + 3*421*FLEN/8, x4, x1, x2)

inst_85670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000000003ff; valaddr_reg:x3; val_offset:257010*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257010*0 + 3*422*FLEN/8, x4, x1, x2)

inst_85671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000000007ff; valaddr_reg:x3; val_offset:257013*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257013*0 + 3*423*FLEN/8, x4, x1, x2)

inst_85672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000000fff; valaddr_reg:x3; val_offset:257016*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257016*0 + 3*424*FLEN/8, x4, x1, x2)

inst_85673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000001fff; valaddr_reg:x3; val_offset:257019*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257019*0 + 3*425*FLEN/8, x4, x1, x2)

inst_85674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000003fff; valaddr_reg:x3; val_offset:257022*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257022*0 + 3*426*FLEN/8, x4, x1, x2)

inst_85675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000007fff; valaddr_reg:x3; val_offset:257025*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257025*0 + 3*427*FLEN/8, x4, x1, x2)

inst_85676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000000ffff; valaddr_reg:x3; val_offset:257028*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257028*0 + 3*428*FLEN/8, x4, x1, x2)

inst_85677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000001ffff; valaddr_reg:x3; val_offset:257031*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257031*0 + 3*429*FLEN/8, x4, x1, x2)

inst_85678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000003ffff; valaddr_reg:x3; val_offset:257034*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257034*0 + 3*430*FLEN/8, x4, x1, x2)

inst_85679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000007ffff; valaddr_reg:x3; val_offset:257037*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257037*0 + 3*431*FLEN/8, x4, x1, x2)

inst_85680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000000fffff; valaddr_reg:x3; val_offset:257040*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257040*0 + 3*432*FLEN/8, x4, x1, x2)

inst_85681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000001fffff; valaddr_reg:x3; val_offset:257043*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257043*0 + 3*433*FLEN/8, x4, x1, x2)

inst_85682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000003fffff; valaddr_reg:x3; val_offset:257046*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257046*0 + 3*434*FLEN/8, x4, x1, x2)

inst_85683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000007fffff; valaddr_reg:x3; val_offset:257049*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257049*0 + 3*435*FLEN/8, x4, x1, x2)

inst_85684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000000ffffff; valaddr_reg:x3; val_offset:257052*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257052*0 + 3*436*FLEN/8, x4, x1, x2)

inst_85685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000001ffffff; valaddr_reg:x3; val_offset:257055*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257055*0 + 3*437*FLEN/8, x4, x1, x2)

inst_85686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000003ffffff; valaddr_reg:x3; val_offset:257058*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257058*0 + 3*438*FLEN/8, x4, x1, x2)

inst_85687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000007ffffff; valaddr_reg:x3; val_offset:257061*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257061*0 + 3*439*FLEN/8, x4, x1, x2)

inst_85688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000000fffffff; valaddr_reg:x3; val_offset:257064*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257064*0 + 3*440*FLEN/8, x4, x1, x2)

inst_85689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000001fffffff; valaddr_reg:x3; val_offset:257067*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257067*0 + 3*441*FLEN/8, x4, x1, x2)

inst_85690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000003fffffff; valaddr_reg:x3; val_offset:257070*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257070*0 + 3*442*FLEN/8, x4, x1, x2)

inst_85691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000007fffffff; valaddr_reg:x3; val_offset:257073*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257073*0 + 3*443*FLEN/8, x4, x1, x2)

inst_85692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400000ffffffff; valaddr_reg:x3; val_offset:257076*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257076*0 + 3*444*FLEN/8, x4, x1, x2)

inst_85693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400001ffffffff; valaddr_reg:x3; val_offset:257079*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257079*0 + 3*445*FLEN/8, x4, x1, x2)

inst_85694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400003ffffffff; valaddr_reg:x3; val_offset:257082*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257082*0 + 3*446*FLEN/8, x4, x1, x2)

inst_85695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400007ffffffff; valaddr_reg:x3; val_offset:257085*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257085*0 + 3*447*FLEN/8, x4, x1, x2)

inst_85696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140000fffffffff; valaddr_reg:x3; val_offset:257088*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257088*0 + 3*448*FLEN/8, x4, x1, x2)

inst_85697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140001fffffffff; valaddr_reg:x3; val_offset:257091*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257091*0 + 3*449*FLEN/8, x4, x1, x2)

inst_85698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140003fffffffff; valaddr_reg:x3; val_offset:257094*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257094*0 + 3*450*FLEN/8, x4, x1, x2)

inst_85699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140007fffffffff; valaddr_reg:x3; val_offset:257097*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257097*0 + 3*451*FLEN/8, x4, x1, x2)

inst_85700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14000ffffffffff; valaddr_reg:x3; val_offset:257100*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257100*0 + 3*452*FLEN/8, x4, x1, x2)

inst_85701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14001ffffffffff; valaddr_reg:x3; val_offset:257103*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257103*0 + 3*453*FLEN/8, x4, x1, x2)

inst_85702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14003ffffffffff; valaddr_reg:x3; val_offset:257106*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257106*0 + 3*454*FLEN/8, x4, x1, x2)

inst_85703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14007ffffffffff; valaddr_reg:x3; val_offset:257109*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257109*0 + 3*455*FLEN/8, x4, x1, x2)

inst_85704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1400fffffffffff; valaddr_reg:x3; val_offset:257112*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257112*0 + 3*456*FLEN/8, x4, x1, x2)

inst_85705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1401fffffffffff; valaddr_reg:x3; val_offset:257115*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257115*0 + 3*457*FLEN/8, x4, x1, x2)

inst_85706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1403fffffffffff; valaddr_reg:x3; val_offset:257118*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257118*0 + 3*458*FLEN/8, x4, x1, x2)

inst_85707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x1407fffffffffff; valaddr_reg:x3; val_offset:257121*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257121*0 + 3*459*FLEN/8, x4, x1, x2)

inst_85708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x140ffffffffffff; valaddr_reg:x3; val_offset:257124*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257124*0 + 3*460*FLEN/8, x4, x1, x2)

inst_85709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x141ffffffffffff; valaddr_reg:x3; val_offset:257127*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257127*0 + 3*461*FLEN/8, x4, x1, x2)

inst_85710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x143ffffffffffff; valaddr_reg:x3; val_offset:257130*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257130*0 + 3*462*FLEN/8, x4, x1, x2)

inst_85711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x147ffffffffffff; valaddr_reg:x3; val_offset:257133*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257133*0 + 3*463*FLEN/8, x4, x1, x2)

inst_85712:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x148000000000000; valaddr_reg:x3; val_offset:257136*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257136*0 + 3*464*FLEN/8, x4, x1, x2)

inst_85713:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14c000000000000; valaddr_reg:x3; val_offset:257139*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257139*0 + 3*465*FLEN/8, x4, x1, x2)

inst_85714:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14e000000000000; valaddr_reg:x3; val_offset:257142*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257142*0 + 3*466*FLEN/8, x4, x1, x2)

inst_85715:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14f000000000000; valaddr_reg:x3; val_offset:257145*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257145*0 + 3*467*FLEN/8, x4, x1, x2)

inst_85716:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14f800000000000; valaddr_reg:x3; val_offset:257148*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257148*0 + 3*468*FLEN/8, x4, x1, x2)

inst_85717:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fc00000000000; valaddr_reg:x3; val_offset:257151*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257151*0 + 3*469*FLEN/8, x4, x1, x2)

inst_85718:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fe00000000000; valaddr_reg:x3; val_offset:257154*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257154*0 + 3*470*FLEN/8, x4, x1, x2)

inst_85719:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ff00000000000; valaddr_reg:x3; val_offset:257157*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257157*0 + 3*471*FLEN/8, x4, x1, x2)

inst_85720:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ff80000000000; valaddr_reg:x3; val_offset:257160*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257160*0 + 3*472*FLEN/8, x4, x1, x2)

inst_85721:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffc0000000000; valaddr_reg:x3; val_offset:257163*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257163*0 + 3*473*FLEN/8, x4, x1, x2)

inst_85722:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffe0000000000; valaddr_reg:x3; val_offset:257166*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257166*0 + 3*474*FLEN/8, x4, x1, x2)

inst_85723:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fff0000000000; valaddr_reg:x3; val_offset:257169*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257169*0 + 3*475*FLEN/8, x4, x1, x2)

inst_85724:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fff8000000000; valaddr_reg:x3; val_offset:257172*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257172*0 + 3*476*FLEN/8, x4, x1, x2)

inst_85725:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffc000000000; valaddr_reg:x3; val_offset:257175*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257175*0 + 3*477*FLEN/8, x4, x1, x2)

inst_85726:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffe000000000; valaddr_reg:x3; val_offset:257178*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257178*0 + 3*478*FLEN/8, x4, x1, x2)

inst_85727:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffff000000000; valaddr_reg:x3; val_offset:257181*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257181*0 + 3*479*FLEN/8, x4, x1, x2)

inst_85728:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffff800000000; valaddr_reg:x3; val_offset:257184*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257184*0 + 3*480*FLEN/8, x4, x1, x2)

inst_85729:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffc00000000; valaddr_reg:x3; val_offset:257187*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257187*0 + 3*481*FLEN/8, x4, x1, x2)

inst_85730:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffe00000000; valaddr_reg:x3; val_offset:257190*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257190*0 + 3*482*FLEN/8, x4, x1, x2)

inst_85731:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffff00000000; valaddr_reg:x3; val_offset:257193*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257193*0 + 3*483*FLEN/8, x4, x1, x2)

inst_85732:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffff80000000; valaddr_reg:x3; val_offset:257196*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257196*0 + 3*484*FLEN/8, x4, x1, x2)

inst_85733:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffc0000000; valaddr_reg:x3; val_offset:257199*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257199*0 + 3*485*FLEN/8, x4, x1, x2)

inst_85734:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffe0000000; valaddr_reg:x3; val_offset:257202*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257202*0 + 3*486*FLEN/8, x4, x1, x2)

inst_85735:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffff0000000; valaddr_reg:x3; val_offset:257205*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257205*0 + 3*487*FLEN/8, x4, x1, x2)

inst_85736:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffff8000000; valaddr_reg:x3; val_offset:257208*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257208*0 + 3*488*FLEN/8, x4, x1, x2)

inst_85737:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffc000000; valaddr_reg:x3; val_offset:257211*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257211*0 + 3*489*FLEN/8, x4, x1, x2)

inst_85738:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffe000000; valaddr_reg:x3; val_offset:257214*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257214*0 + 3*490*FLEN/8, x4, x1, x2)

inst_85739:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffff000000; valaddr_reg:x3; val_offset:257217*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257217*0 + 3*491*FLEN/8, x4, x1, x2)

inst_85740:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffff800000; valaddr_reg:x3; val_offset:257220*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257220*0 + 3*492*FLEN/8, x4, x1, x2)

inst_85741:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffc00000; valaddr_reg:x3; val_offset:257223*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257223*0 + 3*493*FLEN/8, x4, x1, x2)

inst_85742:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffe00000; valaddr_reg:x3; val_offset:257226*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257226*0 + 3*494*FLEN/8, x4, x1, x2)

inst_85743:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffff00000; valaddr_reg:x3; val_offset:257229*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257229*0 + 3*495*FLEN/8, x4, x1, x2)

inst_85744:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffff80000; valaddr_reg:x3; val_offset:257232*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257232*0 + 3*496*FLEN/8, x4, x1, x2)

inst_85745:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffc0000; valaddr_reg:x3; val_offset:257235*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257235*0 + 3*497*FLEN/8, x4, x1, x2)

inst_85746:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffe0000; valaddr_reg:x3; val_offset:257238*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257238*0 + 3*498*FLEN/8, x4, x1, x2)

inst_85747:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffff0000; valaddr_reg:x3; val_offset:257241*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257241*0 + 3*499*FLEN/8, x4, x1, x2)

inst_85748:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffff8000; valaddr_reg:x3; val_offset:257244*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257244*0 + 3*500*FLEN/8, x4, x1, x2)

inst_85749:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffffc000; valaddr_reg:x3; val_offset:257247*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257247*0 + 3*501*FLEN/8, x4, x1, x2)

inst_85750:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffffe000; valaddr_reg:x3; val_offset:257250*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257250*0 + 3*502*FLEN/8, x4, x1, x2)

inst_85751:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffff000; valaddr_reg:x3; val_offset:257253*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257253*0 + 3*503*FLEN/8, x4, x1, x2)

inst_85752:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffff800; valaddr_reg:x3; val_offset:257256*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257256*0 + 3*504*FLEN/8, x4, x1, x2)

inst_85753:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffffc00; valaddr_reg:x3; val_offset:257259*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257259*0 + 3*505*FLEN/8, x4, x1, x2)

inst_85754:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffffe00; valaddr_reg:x3; val_offset:257262*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257262*0 + 3*506*FLEN/8, x4, x1, x2)

inst_85755:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffffff00; valaddr_reg:x3; val_offset:257265*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257265*0 + 3*507*FLEN/8, x4, x1, x2)

inst_85756:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffffff80; valaddr_reg:x3; val_offset:257268*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257268*0 + 3*508*FLEN/8, x4, x1, x2)

inst_85757:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffffffc0; valaddr_reg:x3; val_offset:257271*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257271*0 + 3*509*FLEN/8, x4, x1, x2)

inst_85758:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffffffe0; valaddr_reg:x3; val_offset:257274*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257274*0 + 3*510*FLEN/8, x4, x1, x2)

inst_85759:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffffff0; valaddr_reg:x3; val_offset:257277*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257277*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_85760:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffffff8; valaddr_reg:x3; val_offset:257280*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257280*0 + 3*512*FLEN/8, x4, x1, x2)

inst_85761:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffffffc; valaddr_reg:x3; val_offset:257283*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257283*0 + 3*513*FLEN/8, x4, x1, x2)

inst_85762:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14ffffffffffffe; valaddr_reg:x3; val_offset:257286*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257286*0 + 3*514*FLEN/8, x4, x1, x2)

inst_85763:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3714e2bc6647 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3714e2bc6647; op2val:0x0;
op3val:0x14fffffffffffff; valaddr_reg:x3; val_offset:257289*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257289*0 + 3*515*FLEN/8, x4, x1, x2)

inst_85764:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000000000; valaddr_reg:x3; val_offset:257292*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257292*0 + 3*516*FLEN/8, x4, x1, x2)

inst_85765:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000000001; valaddr_reg:x3; val_offset:257295*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257295*0 + 3*517*FLEN/8, x4, x1, x2)

inst_85766:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000000003; valaddr_reg:x3; val_offset:257298*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257298*0 + 3*518*FLEN/8, x4, x1, x2)

inst_85767:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000000007; valaddr_reg:x3; val_offset:257301*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257301*0 + 3*519*FLEN/8, x4, x1, x2)

inst_85768:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000000000f; valaddr_reg:x3; val_offset:257304*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257304*0 + 3*520*FLEN/8, x4, x1, x2)

inst_85769:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000000001f; valaddr_reg:x3; val_offset:257307*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257307*0 + 3*521*FLEN/8, x4, x1, x2)

inst_85770:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000000003f; valaddr_reg:x3; val_offset:257310*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257310*0 + 3*522*FLEN/8, x4, x1, x2)

inst_85771:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000000007f; valaddr_reg:x3; val_offset:257313*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257313*0 + 3*523*FLEN/8, x4, x1, x2)

inst_85772:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000000000ff; valaddr_reg:x3; val_offset:257316*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257316*0 + 3*524*FLEN/8, x4, x1, x2)

inst_85773:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000000001ff; valaddr_reg:x3; val_offset:257319*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257319*0 + 3*525*FLEN/8, x4, x1, x2)

inst_85774:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000000003ff; valaddr_reg:x3; val_offset:257322*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257322*0 + 3*526*FLEN/8, x4, x1, x2)

inst_85775:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000000007ff; valaddr_reg:x3; val_offset:257325*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257325*0 + 3*527*FLEN/8, x4, x1, x2)

inst_85776:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000000fff; valaddr_reg:x3; val_offset:257328*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257328*0 + 3*528*FLEN/8, x4, x1, x2)

inst_85777:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000001fff; valaddr_reg:x3; val_offset:257331*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257331*0 + 3*529*FLEN/8, x4, x1, x2)

inst_85778:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000003fff; valaddr_reg:x3; val_offset:257334*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257334*0 + 3*530*FLEN/8, x4, x1, x2)

inst_85779:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000007fff; valaddr_reg:x3; val_offset:257337*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257337*0 + 3*531*FLEN/8, x4, x1, x2)

inst_85780:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000000ffff; valaddr_reg:x3; val_offset:257340*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257340*0 + 3*532*FLEN/8, x4, x1, x2)

inst_85781:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000001ffff; valaddr_reg:x3; val_offset:257343*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257343*0 + 3*533*FLEN/8, x4, x1, x2)

inst_85782:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000003ffff; valaddr_reg:x3; val_offset:257346*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257346*0 + 3*534*FLEN/8, x4, x1, x2)

inst_85783:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000007ffff; valaddr_reg:x3; val_offset:257349*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257349*0 + 3*535*FLEN/8, x4, x1, x2)

inst_85784:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000000fffff; valaddr_reg:x3; val_offset:257352*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257352*0 + 3*536*FLEN/8, x4, x1, x2)

inst_85785:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000001fffff; valaddr_reg:x3; val_offset:257355*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257355*0 + 3*537*FLEN/8, x4, x1, x2)

inst_85786:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000003fffff; valaddr_reg:x3; val_offset:257358*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257358*0 + 3*538*FLEN/8, x4, x1, x2)

inst_85787:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000007fffff; valaddr_reg:x3; val_offset:257361*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257361*0 + 3*539*FLEN/8, x4, x1, x2)

inst_85788:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000000ffffff; valaddr_reg:x3; val_offset:257364*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257364*0 + 3*540*FLEN/8, x4, x1, x2)

inst_85789:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000001ffffff; valaddr_reg:x3; val_offset:257367*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257367*0 + 3*541*FLEN/8, x4, x1, x2)

inst_85790:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000003ffffff; valaddr_reg:x3; val_offset:257370*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257370*0 + 3*542*FLEN/8, x4, x1, x2)

inst_85791:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000007ffffff; valaddr_reg:x3; val_offset:257373*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257373*0 + 3*543*FLEN/8, x4, x1, x2)

inst_85792:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000000fffffff; valaddr_reg:x3; val_offset:257376*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257376*0 + 3*544*FLEN/8, x4, x1, x2)

inst_85793:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000001fffffff; valaddr_reg:x3; val_offset:257379*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257379*0 + 3*545*FLEN/8, x4, x1, x2)

inst_85794:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000003fffffff; valaddr_reg:x3; val_offset:257382*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257382*0 + 3*546*FLEN/8, x4, x1, x2)

inst_85795:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000007fffffff; valaddr_reg:x3; val_offset:257385*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257385*0 + 3*547*FLEN/8, x4, x1, x2)

inst_85796:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00000ffffffff; valaddr_reg:x3; val_offset:257388*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257388*0 + 3*548*FLEN/8, x4, x1, x2)

inst_85797:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00001ffffffff; valaddr_reg:x3; val_offset:257391*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257391*0 + 3*549*FLEN/8, x4, x1, x2)

inst_85798:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00003ffffffff; valaddr_reg:x3; val_offset:257394*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257394*0 + 3*550*FLEN/8, x4, x1, x2)

inst_85799:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00007ffffffff; valaddr_reg:x3; val_offset:257397*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257397*0 + 3*551*FLEN/8, x4, x1, x2)

inst_85800:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0000fffffffff; valaddr_reg:x3; val_offset:257400*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257400*0 + 3*552*FLEN/8, x4, x1, x2)

inst_85801:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0001fffffffff; valaddr_reg:x3; val_offset:257403*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257403*0 + 3*553*FLEN/8, x4, x1, x2)

inst_85802:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0003fffffffff; valaddr_reg:x3; val_offset:257406*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257406*0 + 3*554*FLEN/8, x4, x1, x2)

inst_85803:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0007fffffffff; valaddr_reg:x3; val_offset:257409*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257409*0 + 3*555*FLEN/8, x4, x1, x2)

inst_85804:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec000ffffffffff; valaddr_reg:x3; val_offset:257412*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257412*0 + 3*556*FLEN/8, x4, x1, x2)

inst_85805:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec001ffffffffff; valaddr_reg:x3; val_offset:257415*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257415*0 + 3*557*FLEN/8, x4, x1, x2)

inst_85806:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec003ffffffffff; valaddr_reg:x3; val_offset:257418*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257418*0 + 3*558*FLEN/8, x4, x1, x2)

inst_85807:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec007ffffffffff; valaddr_reg:x3; val_offset:257421*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257421*0 + 3*559*FLEN/8, x4, x1, x2)

inst_85808:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec00fffffffffff; valaddr_reg:x3; val_offset:257424*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257424*0 + 3*560*FLEN/8, x4, x1, x2)

inst_85809:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec01fffffffffff; valaddr_reg:x3; val_offset:257427*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257427*0 + 3*561*FLEN/8, x4, x1, x2)

inst_85810:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec03fffffffffff; valaddr_reg:x3; val_offset:257430*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257430*0 + 3*562*FLEN/8, x4, x1, x2)

inst_85811:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec07fffffffffff; valaddr_reg:x3; val_offset:257433*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257433*0 + 3*563*FLEN/8, x4, x1, x2)

inst_85812:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec0ffffffffffff; valaddr_reg:x3; val_offset:257436*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257436*0 + 3*564*FLEN/8, x4, x1, x2)

inst_85813:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec1ffffffffffff; valaddr_reg:x3; val_offset:257439*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257439*0 + 3*565*FLEN/8, x4, x1, x2)

inst_85814:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec3ffffffffffff; valaddr_reg:x3; val_offset:257442*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257442*0 + 3*566*FLEN/8, x4, x1, x2)

inst_85815:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec7ffffffffffff; valaddr_reg:x3; val_offset:257445*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257445*0 + 3*567*FLEN/8, x4, x1, x2)

inst_85816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ec8000000000000; valaddr_reg:x3; val_offset:257448*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257448*0 + 3*568*FLEN/8, x4, x1, x2)

inst_85817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecc000000000000; valaddr_reg:x3; val_offset:257451*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257451*0 + 3*569*FLEN/8, x4, x1, x2)

inst_85818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ece000000000000; valaddr_reg:x3; val_offset:257454*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257454*0 + 3*570*FLEN/8, x4, x1, x2)

inst_85819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecf000000000000; valaddr_reg:x3; val_offset:257457*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257457*0 + 3*571*FLEN/8, x4, x1, x2)

inst_85820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecf800000000000; valaddr_reg:x3; val_offset:257460*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257460*0 + 3*572*FLEN/8, x4, x1, x2)

inst_85821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfc00000000000; valaddr_reg:x3; val_offset:257463*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257463*0 + 3*573*FLEN/8, x4, x1, x2)

inst_85822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfe00000000000; valaddr_reg:x3; val_offset:257466*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257466*0 + 3*574*FLEN/8, x4, x1, x2)

inst_85823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecff00000000000; valaddr_reg:x3; val_offset:257469*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257469*0 + 3*575*FLEN/8, x4, x1, x2)

inst_85824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecff80000000000; valaddr_reg:x3; val_offset:257472*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257472*0 + 3*576*FLEN/8, x4, x1, x2)

inst_85825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffc0000000000; valaddr_reg:x3; val_offset:257475*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257475*0 + 3*577*FLEN/8, x4, x1, x2)

inst_85826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffe0000000000; valaddr_reg:x3; val_offset:257478*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257478*0 + 3*578*FLEN/8, x4, x1, x2)

inst_85827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfff0000000000; valaddr_reg:x3; val_offset:257481*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257481*0 + 3*579*FLEN/8, x4, x1, x2)

inst_85828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfff8000000000; valaddr_reg:x3; val_offset:257484*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257484*0 + 3*580*FLEN/8, x4, x1, x2)

inst_85829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffc000000000; valaddr_reg:x3; val_offset:257487*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257487*0 + 3*581*FLEN/8, x4, x1, x2)

inst_85830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffe000000000; valaddr_reg:x3; val_offset:257490*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257490*0 + 3*582*FLEN/8, x4, x1, x2)

inst_85831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffff000000000; valaddr_reg:x3; val_offset:257493*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257493*0 + 3*583*FLEN/8, x4, x1, x2)

inst_85832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffff800000000; valaddr_reg:x3; val_offset:257496*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257496*0 + 3*584*FLEN/8, x4, x1, x2)

inst_85833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffc00000000; valaddr_reg:x3; val_offset:257499*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257499*0 + 3*585*FLEN/8, x4, x1, x2)

inst_85834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffe00000000; valaddr_reg:x3; val_offset:257502*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257502*0 + 3*586*FLEN/8, x4, x1, x2)

inst_85835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffff00000000; valaddr_reg:x3; val_offset:257505*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257505*0 + 3*587*FLEN/8, x4, x1, x2)

inst_85836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffff80000000; valaddr_reg:x3; val_offset:257508*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257508*0 + 3*588*FLEN/8, x4, x1, x2)

inst_85837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffc0000000; valaddr_reg:x3; val_offset:257511*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257511*0 + 3*589*FLEN/8, x4, x1, x2)

inst_85838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffe0000000; valaddr_reg:x3; val_offset:257514*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257514*0 + 3*590*FLEN/8, x4, x1, x2)

inst_85839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffff0000000; valaddr_reg:x3; val_offset:257517*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257517*0 + 3*591*FLEN/8, x4, x1, x2)

inst_85840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffff8000000; valaddr_reg:x3; val_offset:257520*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257520*0 + 3*592*FLEN/8, x4, x1, x2)

inst_85841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffc000000; valaddr_reg:x3; val_offset:257523*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257523*0 + 3*593*FLEN/8, x4, x1, x2)

inst_85842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffe000000; valaddr_reg:x3; val_offset:257526*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257526*0 + 3*594*FLEN/8, x4, x1, x2)

inst_85843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffff000000; valaddr_reg:x3; val_offset:257529*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257529*0 + 3*595*FLEN/8, x4, x1, x2)

inst_85844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffff800000; valaddr_reg:x3; val_offset:257532*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257532*0 + 3*596*FLEN/8, x4, x1, x2)

inst_85845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffc00000; valaddr_reg:x3; val_offset:257535*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257535*0 + 3*597*FLEN/8, x4, x1, x2)

inst_85846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffe00000; valaddr_reg:x3; val_offset:257538*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257538*0 + 3*598*FLEN/8, x4, x1, x2)

inst_85847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffff00000; valaddr_reg:x3; val_offset:257541*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257541*0 + 3*599*FLEN/8, x4, x1, x2)

inst_85848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffff80000; valaddr_reg:x3; val_offset:257544*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257544*0 + 3*600*FLEN/8, x4, x1, x2)

inst_85849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffc0000; valaddr_reg:x3; val_offset:257547*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257547*0 + 3*601*FLEN/8, x4, x1, x2)

inst_85850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffe0000; valaddr_reg:x3; val_offset:257550*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257550*0 + 3*602*FLEN/8, x4, x1, x2)

inst_85851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffff0000; valaddr_reg:x3; val_offset:257553*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257553*0 + 3*603*FLEN/8, x4, x1, x2)

inst_85852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffff8000; valaddr_reg:x3; val_offset:257556*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257556*0 + 3*604*FLEN/8, x4, x1, x2)

inst_85853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffffc000; valaddr_reg:x3; val_offset:257559*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257559*0 + 3*605*FLEN/8, x4, x1, x2)

inst_85854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffffe000; valaddr_reg:x3; val_offset:257562*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257562*0 + 3*606*FLEN/8, x4, x1, x2)

inst_85855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffff000; valaddr_reg:x3; val_offset:257565*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257565*0 + 3*607*FLEN/8, x4, x1, x2)

inst_85856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffff800; valaddr_reg:x3; val_offset:257568*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257568*0 + 3*608*FLEN/8, x4, x1, x2)

inst_85857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffffc00; valaddr_reg:x3; val_offset:257571*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257571*0 + 3*609*FLEN/8, x4, x1, x2)

inst_85858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffffe00; valaddr_reg:x3; val_offset:257574*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257574*0 + 3*610*FLEN/8, x4, x1, x2)

inst_85859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffffff00; valaddr_reg:x3; val_offset:257577*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257577*0 + 3*611*FLEN/8, x4, x1, x2)

inst_85860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffffff80; valaddr_reg:x3; val_offset:257580*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257580*0 + 3*612*FLEN/8, x4, x1, x2)

inst_85861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffffffc0; valaddr_reg:x3; val_offset:257583*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257583*0 + 3*613*FLEN/8, x4, x1, x2)

inst_85862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffffffe0; valaddr_reg:x3; val_offset:257586*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257586*0 + 3*614*FLEN/8, x4, x1, x2)

inst_85863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffffff0; valaddr_reg:x3; val_offset:257589*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257589*0 + 3*615*FLEN/8, x4, x1, x2)

inst_85864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffffff8; valaddr_reg:x3; val_offset:257592*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257592*0 + 3*616*FLEN/8, x4, x1, x2)

inst_85865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffffffc; valaddr_reg:x3; val_offset:257595*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257595*0 + 3*617*FLEN/8, x4, x1, x2)

inst_85866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecffffffffffffe; valaddr_reg:x3; val_offset:257598*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257598*0 + 3*618*FLEN/8, x4, x1, x2)

inst_85867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ec and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ecfffffffffffff; valaddr_reg:x3; val_offset:257601*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257601*0 + 3*619*FLEN/8, x4, x1, x2)

inst_85868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:257604*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257604*0 + 3*620*FLEN/8, x4, x1, x2)

inst_85869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:257607*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257607*0 + 3*621*FLEN/8, x4, x1, x2)

inst_85870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:257610*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257610*0 + 3*622*FLEN/8, x4, x1, x2)

inst_85871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:257613*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257613*0 + 3*623*FLEN/8, x4, x1, x2)

inst_85872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:257616*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257616*0 + 3*624*FLEN/8, x4, x1, x2)

inst_85873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:257619*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257619*0 + 3*625*FLEN/8, x4, x1, x2)

inst_85874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:257622*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257622*0 + 3*626*FLEN/8, x4, x1, x2)

inst_85875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:257625*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257625*0 + 3*627*FLEN/8, x4, x1, x2)

inst_85876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:257628*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257628*0 + 3*628*FLEN/8, x4, x1, x2)

inst_85877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:257631*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257631*0 + 3*629*FLEN/8, x4, x1, x2)

inst_85878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:257634*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257634*0 + 3*630*FLEN/8, x4, x1, x2)

inst_85879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:257637*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257637*0 + 3*631*FLEN/8, x4, x1, x2)

inst_85880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:257640*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257640*0 + 3*632*FLEN/8, x4, x1, x2)

inst_85881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:257643*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257643*0 + 3*633*FLEN/8, x4, x1, x2)

inst_85882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:257646*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257646*0 + 3*634*FLEN/8, x4, x1, x2)

inst_85883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:257649*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257649*0 + 3*635*FLEN/8, x4, x1, x2)

inst_85884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:257652*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257652*0 + 3*636*FLEN/8, x4, x1, x2)

inst_85885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:257655*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257655*0 + 3*637*FLEN/8, x4, x1, x2)

inst_85886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:257658*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257658*0 + 3*638*FLEN/8, x4, x1, x2)

inst_85887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:257661*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257661*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_85888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:257664*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257664*0 + 3*640*FLEN/8, x4, x1, x2)

inst_85889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3d5b24130525 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x2cbce2d4a8ad1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3d5b24130525; op2val:0x2032cbce2d4a8ad1;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:257667*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257667*0 + 3*641*FLEN/8, x4, x1, x2)

inst_85890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:257670*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257670*0 + 3*642*FLEN/8, x4, x1, x2)

inst_85891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:257673*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257673*0 + 3*643*FLEN/8, x4, x1, x2)

inst_85892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:257676*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257676*0 + 3*644*FLEN/8, x4, x1, x2)

inst_85893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:257679*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257679*0 + 3*645*FLEN/8, x4, x1, x2)

inst_85894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:257682*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257682*0 + 3*646*FLEN/8, x4, x1, x2)

inst_85895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:257685*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257685*0 + 3*647*FLEN/8, x4, x1, x2)

inst_85896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:257688*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257688*0 + 3*648*FLEN/8, x4, x1, x2)

inst_85897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:257691*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257691*0 + 3*649*FLEN/8, x4, x1, x2)

inst_85898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:257694*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257694*0 + 3*650*FLEN/8, x4, x1, x2)

inst_85899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:257697*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257697*0 + 3*651*FLEN/8, x4, x1, x2)

inst_85900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:257700*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257700*0 + 3*652*FLEN/8, x4, x1, x2)

inst_85901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:257703*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257703*0 + 3*653*FLEN/8, x4, x1, x2)

inst_85902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:257706*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257706*0 + 3*654*FLEN/8, x4, x1, x2)

inst_85903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:257709*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257709*0 + 3*655*FLEN/8, x4, x1, x2)

inst_85904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:257712*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257712*0 + 3*656*FLEN/8, x4, x1, x2)

inst_85905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:257715*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257715*0 + 3*657*FLEN/8, x4, x1, x2)

inst_85906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:257718*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257718*0 + 3*658*FLEN/8, x4, x1, x2)

inst_85907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:257721*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257721*0 + 3*659*FLEN/8, x4, x1, x2)

inst_85908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:257724*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257724*0 + 3*660*FLEN/8, x4, x1, x2)

inst_85909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:257727*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257727*0 + 3*661*FLEN/8, x4, x1, x2)

inst_85910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:257730*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257730*0 + 3*662*FLEN/8, x4, x1, x2)

inst_85911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:257733*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257733*0 + 3*663*FLEN/8, x4, x1, x2)

inst_85912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000000000; valaddr_reg:x3; val_offset:257736*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257736*0 + 3*664*FLEN/8, x4, x1, x2)

inst_85913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000000001; valaddr_reg:x3; val_offset:257739*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257739*0 + 3*665*FLEN/8, x4, x1, x2)

inst_85914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000000003; valaddr_reg:x3; val_offset:257742*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257742*0 + 3*666*FLEN/8, x4, x1, x2)

inst_85915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000000007; valaddr_reg:x3; val_offset:257745*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257745*0 + 3*667*FLEN/8, x4, x1, x2)

inst_85916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000000000f; valaddr_reg:x3; val_offset:257748*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257748*0 + 3*668*FLEN/8, x4, x1, x2)

inst_85917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000000001f; valaddr_reg:x3; val_offset:257751*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257751*0 + 3*669*FLEN/8, x4, x1, x2)

inst_85918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000000003f; valaddr_reg:x3; val_offset:257754*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257754*0 + 3*670*FLEN/8, x4, x1, x2)

inst_85919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000000007f; valaddr_reg:x3; val_offset:257757*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257757*0 + 3*671*FLEN/8, x4, x1, x2)

inst_85920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000000000ff; valaddr_reg:x3; val_offset:257760*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257760*0 + 3*672*FLEN/8, x4, x1, x2)

inst_85921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000000001ff; valaddr_reg:x3; val_offset:257763*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257763*0 + 3*673*FLEN/8, x4, x1, x2)

inst_85922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000000003ff; valaddr_reg:x3; val_offset:257766*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257766*0 + 3*674*FLEN/8, x4, x1, x2)

inst_85923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000000007ff; valaddr_reg:x3; val_offset:257769*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257769*0 + 3*675*FLEN/8, x4, x1, x2)

inst_85924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000000fff; valaddr_reg:x3; val_offset:257772*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257772*0 + 3*676*FLEN/8, x4, x1, x2)

inst_85925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000001fff; valaddr_reg:x3; val_offset:257775*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257775*0 + 3*677*FLEN/8, x4, x1, x2)

inst_85926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000003fff; valaddr_reg:x3; val_offset:257778*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257778*0 + 3*678*FLEN/8, x4, x1, x2)

inst_85927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000007fff; valaddr_reg:x3; val_offset:257781*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257781*0 + 3*679*FLEN/8, x4, x1, x2)

inst_85928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000000ffff; valaddr_reg:x3; val_offset:257784*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257784*0 + 3*680*FLEN/8, x4, x1, x2)

inst_85929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000001ffff; valaddr_reg:x3; val_offset:257787*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257787*0 + 3*681*FLEN/8, x4, x1, x2)

inst_85930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000003ffff; valaddr_reg:x3; val_offset:257790*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257790*0 + 3*682*FLEN/8, x4, x1, x2)

inst_85931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000007ffff; valaddr_reg:x3; val_offset:257793*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257793*0 + 3*683*FLEN/8, x4, x1, x2)

inst_85932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000000fffff; valaddr_reg:x3; val_offset:257796*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257796*0 + 3*684*FLEN/8, x4, x1, x2)

inst_85933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000001fffff; valaddr_reg:x3; val_offset:257799*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257799*0 + 3*685*FLEN/8, x4, x1, x2)

inst_85934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000003fffff; valaddr_reg:x3; val_offset:257802*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257802*0 + 3*686*FLEN/8, x4, x1, x2)

inst_85935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000007fffff; valaddr_reg:x3; val_offset:257805*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257805*0 + 3*687*FLEN/8, x4, x1, x2)

inst_85936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000000ffffff; valaddr_reg:x3; val_offset:257808*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257808*0 + 3*688*FLEN/8, x4, x1, x2)

inst_85937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000001ffffff; valaddr_reg:x3; val_offset:257811*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257811*0 + 3*689*FLEN/8, x4, x1, x2)

inst_85938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000003ffffff; valaddr_reg:x3; val_offset:257814*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257814*0 + 3*690*FLEN/8, x4, x1, x2)

inst_85939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000007ffffff; valaddr_reg:x3; val_offset:257817*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257817*0 + 3*691*FLEN/8, x4, x1, x2)

inst_85940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000000fffffff; valaddr_reg:x3; val_offset:257820*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257820*0 + 3*692*FLEN/8, x4, x1, x2)

inst_85941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000001fffffff; valaddr_reg:x3; val_offset:257823*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257823*0 + 3*693*FLEN/8, x4, x1, x2)

inst_85942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000003fffffff; valaddr_reg:x3; val_offset:257826*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257826*0 + 3*694*FLEN/8, x4, x1, x2)

inst_85943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000007fffffff; valaddr_reg:x3; val_offset:257829*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257829*0 + 3*695*FLEN/8, x4, x1, x2)

inst_85944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900000ffffffff; valaddr_reg:x3; val_offset:257832*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257832*0 + 3*696*FLEN/8, x4, x1, x2)

inst_85945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900001ffffffff; valaddr_reg:x3; val_offset:257835*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257835*0 + 3*697*FLEN/8, x4, x1, x2)

inst_85946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900003ffffffff; valaddr_reg:x3; val_offset:257838*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257838*0 + 3*698*FLEN/8, x4, x1, x2)

inst_85947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900007ffffffff; valaddr_reg:x3; val_offset:257841*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257841*0 + 3*699*FLEN/8, x4, x1, x2)

inst_85948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90000fffffffff; valaddr_reg:x3; val_offset:257844*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257844*0 + 3*700*FLEN/8, x4, x1, x2)

inst_85949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90001fffffffff; valaddr_reg:x3; val_offset:257847*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257847*0 + 3*701*FLEN/8, x4, x1, x2)

inst_85950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90003fffffffff; valaddr_reg:x3; val_offset:257850*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257850*0 + 3*702*FLEN/8, x4, x1, x2)

inst_85951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90007fffffffff; valaddr_reg:x3; val_offset:257853*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257853*0 + 3*703*FLEN/8, x4, x1, x2)

inst_85952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9000ffffffffff; valaddr_reg:x3; val_offset:257856*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257856*0 + 3*704*FLEN/8, x4, x1, x2)

inst_85953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9001ffffffffff; valaddr_reg:x3; val_offset:257859*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257859*0 + 3*705*FLEN/8, x4, x1, x2)

inst_85954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9003ffffffffff; valaddr_reg:x3; val_offset:257862*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257862*0 + 3*706*FLEN/8, x4, x1, x2)

inst_85955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9007ffffffffff; valaddr_reg:x3; val_offset:257865*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257865*0 + 3*707*FLEN/8, x4, x1, x2)

inst_85956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf900fffffffffff; valaddr_reg:x3; val_offset:257868*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257868*0 + 3*708*FLEN/8, x4, x1, x2)

inst_85957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf901fffffffffff; valaddr_reg:x3; val_offset:257871*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257871*0 + 3*709*FLEN/8, x4, x1, x2)

inst_85958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf903fffffffffff; valaddr_reg:x3; val_offset:257874*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257874*0 + 3*710*FLEN/8, x4, x1, x2)

inst_85959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf907fffffffffff; valaddr_reg:x3; val_offset:257877*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257877*0 + 3*711*FLEN/8, x4, x1, x2)

inst_85960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf90ffffffffffff; valaddr_reg:x3; val_offset:257880*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257880*0 + 3*712*FLEN/8, x4, x1, x2)

inst_85961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf91ffffffffffff; valaddr_reg:x3; val_offset:257883*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257883*0 + 3*713*FLEN/8, x4, x1, x2)

inst_85962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf93ffffffffffff; valaddr_reg:x3; val_offset:257886*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257886*0 + 3*714*FLEN/8, x4, x1, x2)

inst_85963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf97ffffffffffff; valaddr_reg:x3; val_offset:257889*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257889*0 + 3*715*FLEN/8, x4, x1, x2)

inst_85964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf98000000000000; valaddr_reg:x3; val_offset:257892*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257892*0 + 3*716*FLEN/8, x4, x1, x2)

inst_85965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9c000000000000; valaddr_reg:x3; val_offset:257895*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257895*0 + 3*717*FLEN/8, x4, x1, x2)

inst_85966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9e000000000000; valaddr_reg:x3; val_offset:257898*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257898*0 + 3*718*FLEN/8, x4, x1, x2)

inst_85967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9f000000000000; valaddr_reg:x3; val_offset:257901*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257901*0 + 3*719*FLEN/8, x4, x1, x2)

inst_85968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9f800000000000; valaddr_reg:x3; val_offset:257904*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257904*0 + 3*720*FLEN/8, x4, x1, x2)

inst_85969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fc00000000000; valaddr_reg:x3; val_offset:257907*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257907*0 + 3*721*FLEN/8, x4, x1, x2)

inst_85970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fe00000000000; valaddr_reg:x3; val_offset:257910*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257910*0 + 3*722*FLEN/8, x4, x1, x2)

inst_85971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ff00000000000; valaddr_reg:x3; val_offset:257913*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257913*0 + 3*723*FLEN/8, x4, x1, x2)

inst_85972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ff80000000000; valaddr_reg:x3; val_offset:257916*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257916*0 + 3*724*FLEN/8, x4, x1, x2)

inst_85973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffc0000000000; valaddr_reg:x3; val_offset:257919*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257919*0 + 3*725*FLEN/8, x4, x1, x2)

inst_85974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffe0000000000; valaddr_reg:x3; val_offset:257922*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257922*0 + 3*726*FLEN/8, x4, x1, x2)

inst_85975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fff0000000000; valaddr_reg:x3; val_offset:257925*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257925*0 + 3*727*FLEN/8, x4, x1, x2)

inst_85976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fff8000000000; valaddr_reg:x3; val_offset:257928*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257928*0 + 3*728*FLEN/8, x4, x1, x2)

inst_85977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffc000000000; valaddr_reg:x3; val_offset:257931*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257931*0 + 3*729*FLEN/8, x4, x1, x2)

inst_85978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffe000000000; valaddr_reg:x3; val_offset:257934*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257934*0 + 3*730*FLEN/8, x4, x1, x2)

inst_85979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffff000000000; valaddr_reg:x3; val_offset:257937*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257937*0 + 3*731*FLEN/8, x4, x1, x2)

inst_85980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffff800000000; valaddr_reg:x3; val_offset:257940*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257940*0 + 3*732*FLEN/8, x4, x1, x2)

inst_85981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffc00000000; valaddr_reg:x3; val_offset:257943*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257943*0 + 3*733*FLEN/8, x4, x1, x2)

inst_85982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffe00000000; valaddr_reg:x3; val_offset:257946*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257946*0 + 3*734*FLEN/8, x4, x1, x2)

inst_85983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffff00000000; valaddr_reg:x3; val_offset:257949*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257949*0 + 3*735*FLEN/8, x4, x1, x2)

inst_85984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffff80000000; valaddr_reg:x3; val_offset:257952*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257952*0 + 3*736*FLEN/8, x4, x1, x2)

inst_85985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffc0000000; valaddr_reg:x3; val_offset:257955*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257955*0 + 3*737*FLEN/8, x4, x1, x2)

inst_85986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffe0000000; valaddr_reg:x3; val_offset:257958*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257958*0 + 3*738*FLEN/8, x4, x1, x2)

inst_85987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffff0000000; valaddr_reg:x3; val_offset:257961*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257961*0 + 3*739*FLEN/8, x4, x1, x2)

inst_85988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffff8000000; valaddr_reg:x3; val_offset:257964*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257964*0 + 3*740*FLEN/8, x4, x1, x2)

inst_85989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffc000000; valaddr_reg:x3; val_offset:257967*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257967*0 + 3*741*FLEN/8, x4, x1, x2)

inst_85990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffe000000; valaddr_reg:x3; val_offset:257970*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257970*0 + 3*742*FLEN/8, x4, x1, x2)

inst_85991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffff000000; valaddr_reg:x3; val_offset:257973*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257973*0 + 3*743*FLEN/8, x4, x1, x2)

inst_85992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffff800000; valaddr_reg:x3; val_offset:257976*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257976*0 + 3*744*FLEN/8, x4, x1, x2)

inst_85993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffc00000; valaddr_reg:x3; val_offset:257979*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257979*0 + 3*745*FLEN/8, x4, x1, x2)

inst_85994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffe00000; valaddr_reg:x3; val_offset:257982*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257982*0 + 3*746*FLEN/8, x4, x1, x2)

inst_85995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffff00000; valaddr_reg:x3; val_offset:257985*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257985*0 + 3*747*FLEN/8, x4, x1, x2)

inst_85996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffff80000; valaddr_reg:x3; val_offset:257988*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257988*0 + 3*748*FLEN/8, x4, x1, x2)

inst_85997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffc0000; valaddr_reg:x3; val_offset:257991*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257991*0 + 3*749*FLEN/8, x4, x1, x2)

inst_85998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffe0000; valaddr_reg:x3; val_offset:257994*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257994*0 + 3*750*FLEN/8, x4, x1, x2)

inst_85999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffff0000; valaddr_reg:x3; val_offset:257997*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 257997*0 + 3*751*FLEN/8, x4, x1, x2)

inst_86000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffff8000; valaddr_reg:x3; val_offset:258000*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258000*0 + 3*752*FLEN/8, x4, x1, x2)

inst_86001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffffc000; valaddr_reg:x3; val_offset:258003*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258003*0 + 3*753*FLEN/8, x4, x1, x2)

inst_86002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffffe000; valaddr_reg:x3; val_offset:258006*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258006*0 + 3*754*FLEN/8, x4, x1, x2)

inst_86003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffff000; valaddr_reg:x3; val_offset:258009*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258009*0 + 3*755*FLEN/8, x4, x1, x2)

inst_86004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffff800; valaddr_reg:x3; val_offset:258012*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258012*0 + 3*756*FLEN/8, x4, x1, x2)

inst_86005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffffc00; valaddr_reg:x3; val_offset:258015*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258015*0 + 3*757*FLEN/8, x4, x1, x2)

inst_86006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffffe00; valaddr_reg:x3; val_offset:258018*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258018*0 + 3*758*FLEN/8, x4, x1, x2)

inst_86007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffffff00; valaddr_reg:x3; val_offset:258021*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258021*0 + 3*759*FLEN/8, x4, x1, x2)

inst_86008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffffff80; valaddr_reg:x3; val_offset:258024*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258024*0 + 3*760*FLEN/8, x4, x1, x2)

inst_86009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffffffc0; valaddr_reg:x3; val_offset:258027*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258027*0 + 3*761*FLEN/8, x4, x1, x2)

inst_86010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffffffe0; valaddr_reg:x3; val_offset:258030*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258030*0 + 3*762*FLEN/8, x4, x1, x2)

inst_86011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffffff0; valaddr_reg:x3; val_offset:258033*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258033*0 + 3*763*FLEN/8, x4, x1, x2)

inst_86012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffffff8; valaddr_reg:x3; val_offset:258036*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258036*0 + 3*764*FLEN/8, x4, x1, x2)

inst_86013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffffffc; valaddr_reg:x3; val_offset:258039*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258039*0 + 3*765*FLEN/8, x4, x1, x2)

inst_86014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9ffffffffffffe; valaddr_reg:x3; val_offset:258042*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258042*0 + 3*766*FLEN/8, x4, x1, x2)

inst_86015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xb3dfc53758807 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x2cb5ef700ec37 and fs3 == 1 and fe3 == 0x3f9 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fab3dfc53758807; op2val:0x9fc2cb5ef700ec37;
op3val:0xbf9fffffffffffff; valaddr_reg:x3; val_offset:258045*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 258045*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6893627162704682289,64,FLEN)
NAN_BOXED(2320171348461439689,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560832,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560833,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560835,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560839,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560847,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560863,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560895,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560959,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349561087,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349561343,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349561855,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349562879,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349564927,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349569023,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349577215,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349593599,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349626367,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349691903,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349822975,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184350085119,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184350609407,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184351657983,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184353755135,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184357949439,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184366338047,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184383115263,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184416669695,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184483778559,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184617996287,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184886431743,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151185423302655,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151186497044479,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151188644528127,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151192939495423,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151201529430015,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151218709299199,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151253069037567,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151321788514303,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151459227467775,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151734105374719,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189152283861188607,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189153383372816383,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189155582396071935,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189159980442583039,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189168776535605247,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189186368721649663,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189221553093738495,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189291921837916159,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189432659326271487,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189714134302982143,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(190277084256403455,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(191402984163246079,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(191402984163246080,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(192528884070088704,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193091834023510016,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193373309000220672,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193514046488576000,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193584415232753664,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193619599604842496,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193637191790886912,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193645987883909120,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193650385930420224,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193652584953675776,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193653684465303552,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654234221117440,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654509099024384,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654646537977856,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654715257454592,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654749617192960,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654766797062144,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654775386996736,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654779681964032,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654781829447680,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654782903189504,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783440060416,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783708495872,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783842713600,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783909822464,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783943376896,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783960154112,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783968542720,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783972737024,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783974834176,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783975882752,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976407040,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976669184,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976800256,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976865792,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976898560,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976914944,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976923136,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976927232,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976929280,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976930304,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976930816,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931072,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931200,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931264,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931296,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931312,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931320,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931324,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931326,64,FLEN)
NAN_BOXED(6893652127361673443,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931327,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571456,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571457,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571459,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571463,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571471,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571487,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571519,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571583,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571711,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271571967,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271572479,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271573503,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271575551,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271579647,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271587839,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271604223,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271636991,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271702527,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223271833599,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223272095743,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223272620031,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223273668607,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223275765759,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223279960063,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223288348671,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223305125887,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223338680319,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223405789183,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223540006911,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139223808442367,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139224345313279,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139225419055103,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139227566538751,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139231861506047,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139240451440639,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139257631309823,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139291991048191,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139360710524927,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139498149478399,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553139773027385343,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553140322783199231,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553141422294827007,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553143621318082559,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553148019364593663,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553156815457615871,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553174407643660287,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553209592015749119,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553279960759926783,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553420698248282111,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4553702173224992767,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4554265123178414079,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4555391023085256703,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4555391023085256704,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4556516922992099328,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557079872945520640,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557361347922231296,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557502085410586624,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557572454154764288,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557607638526853120,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557625230712897536,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557634026805919744,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557638424852430848,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557640623875686400,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557641723387314176,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642273143128064,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642548021035008,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642685459988480,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642754179465216,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642788539203584,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642805719072768,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642814309007360,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642818603974656,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642820751458304,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642821825200128,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822362071040,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822630506496,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822764724224,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822831833088,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822865387520,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822882164736,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822890553344,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822894747648,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822896844800,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822897893376,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898417664,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898679808,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898810880,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898876416,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898909184,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898925568,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898933760,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898937856,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898939904,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898940928,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941440,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941696,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941824,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941888,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941920,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941936,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941944,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941948,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941950,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4557642822898941951,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6893654885664490299,64,FLEN)
NAN_BOXED(2320152067755424984,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074240,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074241,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074243,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074247,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074255,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074271,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074303,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074367,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074495,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074751,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520075263,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520076287,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520078335,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520082431,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520090623,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520107007,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520139775,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520205311,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520336383,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520598527,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230521122815,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230522171391,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230524268543,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230528462847,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230536851455,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230553628671,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230587183103,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230654291967,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230788509695,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933231056945151,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933231593816063,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933232667557887,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933234815041535,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933239110008831,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933247699943423,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933264879812607,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933299239550975,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933367959027711,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933505397981183,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933780275888127,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299934330031702015,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299935429543329791,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299937628566585343,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299942026613096447,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299950822706118655,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299968414892163071,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300003599264251903,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300073968008429567,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300214705496784895,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300496180473495551,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9301059130426916863,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9302185030333759487,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9302185030333759488,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9303310930240602112,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9303873880194023424,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304155355170734080,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304296092659089408,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304366461403267072,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304401645775355904,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304419237961400320,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304428034054422528,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304432432100933632,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304434631124189184,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304435730635816960,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436280391630848,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436555269537792,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436692708491264,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436761427968000,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436795787706368,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436812967575552,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436821557510144,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436825852477440,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436827999961088,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829073702912,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829610573824,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829879009280,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830013227008,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830080335872,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830113890304,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830130667520,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830139056128,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830143250432,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830145347584,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830146396160,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830146920448,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147182592,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147313664,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147379200,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147411968,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147428352,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147436544,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147440640,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147442688,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147443712,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444224,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444480,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444608,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444672,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444704,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444720,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444728,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444732,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444734,64,FLEN)
NAN_BOXED(6893655319602027961,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444735,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409920,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409921,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409923,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409927,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409935,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409951,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409983,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547410047,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547410175,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547410431,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547410943,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547411967,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547414015,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547418111,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547426303,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547442687,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547475455,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547540991,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547672063,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547934207,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992548458495,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992549507071,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992551604223,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992555798527,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992564187135,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992580964351,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992614518783,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992681627647,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992815845375,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071993084280831,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071993621151743,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071994694893567,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071996842377215,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072001137344511,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072009727279103,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072026907148287,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072061266886655,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072129986363391,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072267425316863,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072542303223807,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90073092059037695,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90074191570665471,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90076390593921023,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90080788640432127,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90089584733454335,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90107176919498751,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90142361291587583,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90212730035765247,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90353467524120575,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90634942500831231,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(91197892454252543,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(92323792361095167,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(92323792361095168,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(93449692267937792,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94012642221359104,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94294117198069760,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94434854686425088,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94505223430602752,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94540407802691584,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94557999988736000,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94566796081758208,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94571194128269312,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94573393151524864,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94574492663152640,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575042418966528,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575317296873472,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575454735826944,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575523455303680,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575557815042048,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575574994911232,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575583584845824,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575587879813120,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575590027296768,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575591101038592,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575591637909504,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575591906344960,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592040562688,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592107671552,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592141225984,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592158003200,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592166391808,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592170586112,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592172683264,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592173731840,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174256128,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174518272,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174649344,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174714880,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174747648,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174764032,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174772224,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174776320,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174778368,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174779392,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174779904,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780160,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780288,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780352,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780384,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780400,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780408,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780412,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780414,64,FLEN)
NAN_BOXED(6893664217463547463,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780415,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879977984,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879977985,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879977987,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879977991,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879977999,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879978015,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879978047,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879978111,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879978239,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879978495,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879979007,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879980031,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879982079,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879986175,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025879994367,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025880010751,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025880043519,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025880109055,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025880240127,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025880502271,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025881026559,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025882075135,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025884172287,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025888366591,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025896755199,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025913532415,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614025947086847,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614026014195711,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614026148413439,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614026416848895,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614026953719807,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614028027461631,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614030174945279,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614034469912575,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614043059847167,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614060239716351,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614094599454719,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614163318931455,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614300757884927,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521614575635791871,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521615125391605759,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521616224903233535,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521618423926489087,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521622821973000191,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521631618066022399,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521649210252066815,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521684394624155647,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521754763368333311,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4521895500856688639,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4522176975833399295,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4522739925786820607,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4523865825693663231,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4523865825693663232,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4524991725600505856,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4525554675553927168,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4525836150530637824,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4525976888018993152,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526047256763170816,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526082441135259648,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526100033321304064,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526108829414326272,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526113227460837376,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526115426484092928,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526116525995720704,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117075751534592,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117350629441536,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117488068395008,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117556787871744,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117591147610112,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117608327479296,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117616917413888,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117621212381184,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117623359864832,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117624433606656,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117624970477568,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625238913024,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625373130752,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625440239616,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625473794048,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625490571264,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625498959872,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625503154176,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625505251328,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625506299904,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625506824192,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507086336,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507217408,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507282944,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507315712,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507332096,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507340288,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507344384,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507346432,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507347456,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507347968,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348224,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348352,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348416,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348448,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348464,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348472,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348476,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348478,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4526117625507348479,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6893671116277220645,64,FLEN)
NAN_BOXED(2320140844432788177,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570240,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570241,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570243,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570247,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570255,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570271,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570303,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570367,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570495,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890570751,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890571263,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890572287,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890574335,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890578431,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890586623,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890603007,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890635775,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890701311,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857890832383,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857891094527,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857891618815,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857892667391,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857894764543,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857898958847,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857907347455,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857924124671,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532857957679103,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532858024787967,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532858159005695,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532858427441151,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532858964312063,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532860038053887,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532862185537535,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532866480504831,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532875070439423,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532892250308607,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532926610046975,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803532995329523711,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803533132768477183,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803533407646384127,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803533957402198015,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803535056913825791,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803537255937081343,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803541653983592447,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803550450076614655,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803568042262659071,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803603226634747903,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803673595378925567,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13803814332867280895,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13804095807843991551,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13804658757797412863,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13805784657704255487,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13805784657704255488,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13806910557611098112,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13807473507564519424,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13807754982541230080,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13807895720029585408,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13807966088773763072,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808001273145851904,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808018865331896320,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808027661424918528,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808032059471429632,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808034258494685184,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808035358006312960,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808035907762126848,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036182640033792,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036320078987264,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036388798464000,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036423158202368,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036440338071552,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036448928006144,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036453222973440,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036455370457088,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036456444198912,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036456981069824,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457249505280,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457383723008,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457450831872,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457484386304,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457501163520,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457509552128,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457513746432,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457515843584,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457516892160,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517416448,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517678592,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517809664,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517875200,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517907968,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517924352,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517932544,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517936640,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517938688,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517939712,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940224,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940480,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940608,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940672,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940704,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940720,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940728,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940732,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940734,64,FLEN)
NAN_BOXED(6893671808561940487,64,FLEN)
NAN_BOXED(11511987206243806263,64,FLEN)
NAN_BOXED(13808036457517940735,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
