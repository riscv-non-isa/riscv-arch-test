
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_46080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c0000003ffffff; valaddr_reg:x3; val_offset:138240*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138240*0 + 3*0*FLEN/8, x4, x1, x2)

inst_46081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c0000007ffffff; valaddr_reg:x3; val_offset:138243*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138243*0 + 3*1*FLEN/8, x4, x1, x2)

inst_46082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c000000fffffff; valaddr_reg:x3; val_offset:138246*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138246*0 + 3*2*FLEN/8, x4, x1, x2)

inst_46083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c000001fffffff; valaddr_reg:x3; val_offset:138249*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138249*0 + 3*3*FLEN/8, x4, x1, x2)

inst_46084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c000003fffffff; valaddr_reg:x3; val_offset:138252*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138252*0 + 3*4*FLEN/8, x4, x1, x2)

inst_46085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c000007fffffff; valaddr_reg:x3; val_offset:138255*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138255*0 + 3*5*FLEN/8, x4, x1, x2)

inst_46086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c00000ffffffff; valaddr_reg:x3; val_offset:138258*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138258*0 + 3*6*FLEN/8, x4, x1, x2)

inst_46087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c00001ffffffff; valaddr_reg:x3; val_offset:138261*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138261*0 + 3*7*FLEN/8, x4, x1, x2)

inst_46088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c00003ffffffff; valaddr_reg:x3; val_offset:138264*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138264*0 + 3*8*FLEN/8, x4, x1, x2)

inst_46089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c00007ffffffff; valaddr_reg:x3; val_offset:138267*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138267*0 + 3*9*FLEN/8, x4, x1, x2)

inst_46090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c0000fffffffff; valaddr_reg:x3; val_offset:138270*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138270*0 + 3*10*FLEN/8, x4, x1, x2)

inst_46091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c0001fffffffff; valaddr_reg:x3; val_offset:138273*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138273*0 + 3*11*FLEN/8, x4, x1, x2)

inst_46092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c0003fffffffff; valaddr_reg:x3; val_offset:138276*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138276*0 + 3*12*FLEN/8, x4, x1, x2)

inst_46093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c0007fffffffff; valaddr_reg:x3; val_offset:138279*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138279*0 + 3*13*FLEN/8, x4, x1, x2)

inst_46094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c000ffffffffff; valaddr_reg:x3; val_offset:138282*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138282*0 + 3*14*FLEN/8, x4, x1, x2)

inst_46095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c001ffffffffff; valaddr_reg:x3; val_offset:138285*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138285*0 + 3*15*FLEN/8, x4, x1, x2)

inst_46096:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c003ffffffffff; valaddr_reg:x3; val_offset:138288*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138288*0 + 3*16*FLEN/8, x4, x1, x2)

inst_46097:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c007ffffffffff; valaddr_reg:x3; val_offset:138291*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138291*0 + 3*17*FLEN/8, x4, x1, x2)

inst_46098:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c00fffffffffff; valaddr_reg:x3; val_offset:138294*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138294*0 + 3*18*FLEN/8, x4, x1, x2)

inst_46099:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c01fffffffffff; valaddr_reg:x3; val_offset:138297*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138297*0 + 3*19*FLEN/8, x4, x1, x2)

inst_46100:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c03fffffffffff; valaddr_reg:x3; val_offset:138300*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138300*0 + 3*20*FLEN/8, x4, x1, x2)

inst_46101:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c07fffffffffff; valaddr_reg:x3; val_offset:138303*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138303*0 + 3*21*FLEN/8, x4, x1, x2)

inst_46102:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c0ffffffffffff; valaddr_reg:x3; val_offset:138306*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138306*0 + 3*22*FLEN/8, x4, x1, x2)

inst_46103:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c1ffffffffffff; valaddr_reg:x3; val_offset:138309*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138309*0 + 3*23*FLEN/8, x4, x1, x2)

inst_46104:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c3ffffffffffff; valaddr_reg:x3; val_offset:138312*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138312*0 + 3*24*FLEN/8, x4, x1, x2)

inst_46105:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c7ffffffffffff; valaddr_reg:x3; val_offset:138315*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138315*0 + 3*25*FLEN/8, x4, x1, x2)

inst_46106:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1c8000000000000; valaddr_reg:x3; val_offset:138318*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138318*0 + 3*26*FLEN/8, x4, x1, x2)

inst_46107:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cc000000000000; valaddr_reg:x3; val_offset:138321*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138321*0 + 3*27*FLEN/8, x4, x1, x2)

inst_46108:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1ce000000000000; valaddr_reg:x3; val_offset:138324*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138324*0 + 3*28*FLEN/8, x4, x1, x2)

inst_46109:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cf000000000000; valaddr_reg:x3; val_offset:138327*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138327*0 + 3*29*FLEN/8, x4, x1, x2)

inst_46110:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cf800000000000; valaddr_reg:x3; val_offset:138330*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138330*0 + 3*30*FLEN/8, x4, x1, x2)

inst_46111:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfc00000000000; valaddr_reg:x3; val_offset:138333*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138333*0 + 3*31*FLEN/8, x4, x1, x2)

inst_46112:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfe00000000000; valaddr_reg:x3; val_offset:138336*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138336*0 + 3*32*FLEN/8, x4, x1, x2)

inst_46113:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cff00000000000; valaddr_reg:x3; val_offset:138339*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138339*0 + 3*33*FLEN/8, x4, x1, x2)

inst_46114:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cff80000000000; valaddr_reg:x3; val_offset:138342*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138342*0 + 3*34*FLEN/8, x4, x1, x2)

inst_46115:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffc0000000000; valaddr_reg:x3; val_offset:138345*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138345*0 + 3*35*FLEN/8, x4, x1, x2)

inst_46116:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffe0000000000; valaddr_reg:x3; val_offset:138348*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138348*0 + 3*36*FLEN/8, x4, x1, x2)

inst_46117:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfff0000000000; valaddr_reg:x3; val_offset:138351*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138351*0 + 3*37*FLEN/8, x4, x1, x2)

inst_46118:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfff8000000000; valaddr_reg:x3; val_offset:138354*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138354*0 + 3*38*FLEN/8, x4, x1, x2)

inst_46119:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffc000000000; valaddr_reg:x3; val_offset:138357*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138357*0 + 3*39*FLEN/8, x4, x1, x2)

inst_46120:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffe000000000; valaddr_reg:x3; val_offset:138360*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138360*0 + 3*40*FLEN/8, x4, x1, x2)

inst_46121:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffff000000000; valaddr_reg:x3; val_offset:138363*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138363*0 + 3*41*FLEN/8, x4, x1, x2)

inst_46122:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffff800000000; valaddr_reg:x3; val_offset:138366*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138366*0 + 3*42*FLEN/8, x4, x1, x2)

inst_46123:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffc00000000; valaddr_reg:x3; val_offset:138369*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138369*0 + 3*43*FLEN/8, x4, x1, x2)

inst_46124:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffe00000000; valaddr_reg:x3; val_offset:138372*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138372*0 + 3*44*FLEN/8, x4, x1, x2)

inst_46125:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffff00000000; valaddr_reg:x3; val_offset:138375*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138375*0 + 3*45*FLEN/8, x4, x1, x2)

inst_46126:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffff80000000; valaddr_reg:x3; val_offset:138378*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138378*0 + 3*46*FLEN/8, x4, x1, x2)

inst_46127:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffc0000000; valaddr_reg:x3; val_offset:138381*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138381*0 + 3*47*FLEN/8, x4, x1, x2)

inst_46128:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffe0000000; valaddr_reg:x3; val_offset:138384*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138384*0 + 3*48*FLEN/8, x4, x1, x2)

inst_46129:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffff0000000; valaddr_reg:x3; val_offset:138387*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138387*0 + 3*49*FLEN/8, x4, x1, x2)

inst_46130:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffff8000000; valaddr_reg:x3; val_offset:138390*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138390*0 + 3*50*FLEN/8, x4, x1, x2)

inst_46131:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffc000000; valaddr_reg:x3; val_offset:138393*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138393*0 + 3*51*FLEN/8, x4, x1, x2)

inst_46132:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffe000000; valaddr_reg:x3; val_offset:138396*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138396*0 + 3*52*FLEN/8, x4, x1, x2)

inst_46133:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffff000000; valaddr_reg:x3; val_offset:138399*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138399*0 + 3*53*FLEN/8, x4, x1, x2)

inst_46134:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffff800000; valaddr_reg:x3; val_offset:138402*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138402*0 + 3*54*FLEN/8, x4, x1, x2)

inst_46135:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffc00000; valaddr_reg:x3; val_offset:138405*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138405*0 + 3*55*FLEN/8, x4, x1, x2)

inst_46136:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffe00000; valaddr_reg:x3; val_offset:138408*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138408*0 + 3*56*FLEN/8, x4, x1, x2)

inst_46137:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffff00000; valaddr_reg:x3; val_offset:138411*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138411*0 + 3*57*FLEN/8, x4, x1, x2)

inst_46138:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffff80000; valaddr_reg:x3; val_offset:138414*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138414*0 + 3*58*FLEN/8, x4, x1, x2)

inst_46139:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffc0000; valaddr_reg:x3; val_offset:138417*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138417*0 + 3*59*FLEN/8, x4, x1, x2)

inst_46140:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffe0000; valaddr_reg:x3; val_offset:138420*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138420*0 + 3*60*FLEN/8, x4, x1, x2)

inst_46141:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffff0000; valaddr_reg:x3; val_offset:138423*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138423*0 + 3*61*FLEN/8, x4, x1, x2)

inst_46142:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffff8000; valaddr_reg:x3; val_offset:138426*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138426*0 + 3*62*FLEN/8, x4, x1, x2)

inst_46143:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffffc000; valaddr_reg:x3; val_offset:138429*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138429*0 + 3*63*FLEN/8, x4, x1, x2)

inst_46144:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffffe000; valaddr_reg:x3; val_offset:138432*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138432*0 + 3*64*FLEN/8, x4, x1, x2)

inst_46145:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffff000; valaddr_reg:x3; val_offset:138435*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138435*0 + 3*65*FLEN/8, x4, x1, x2)

inst_46146:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffff800; valaddr_reg:x3; val_offset:138438*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138438*0 + 3*66*FLEN/8, x4, x1, x2)

inst_46147:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffffc00; valaddr_reg:x3; val_offset:138441*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138441*0 + 3*67*FLEN/8, x4, x1, x2)

inst_46148:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffffe00; valaddr_reg:x3; val_offset:138444*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138444*0 + 3*68*FLEN/8, x4, x1, x2)

inst_46149:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffffff00; valaddr_reg:x3; val_offset:138447*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138447*0 + 3*69*FLEN/8, x4, x1, x2)

inst_46150:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffffff80; valaddr_reg:x3; val_offset:138450*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138450*0 + 3*70*FLEN/8, x4, x1, x2)

inst_46151:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffffffc0; valaddr_reg:x3; val_offset:138453*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138453*0 + 3*71*FLEN/8, x4, x1, x2)

inst_46152:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffffffe0; valaddr_reg:x3; val_offset:138456*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138456*0 + 3*72*FLEN/8, x4, x1, x2)

inst_46153:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffffff0; valaddr_reg:x3; val_offset:138459*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138459*0 + 3*73*FLEN/8, x4, x1, x2)

inst_46154:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffffff8; valaddr_reg:x3; val_offset:138462*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138462*0 + 3*74*FLEN/8, x4, x1, x2)

inst_46155:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffffffc; valaddr_reg:x3; val_offset:138465*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138465*0 + 3*75*FLEN/8, x4, x1, x2)

inst_46156:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cffffffffffffe; valaddr_reg:x3; val_offset:138468*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138468*0 + 3*76*FLEN/8, x4, x1, x2)

inst_46157:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc551686ec279b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x01c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c551686ec279b; op2val:0x0;
op3val:0x1cfffffffffffff; valaddr_reg:x3; val_offset:138471*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138471*0 + 3*77*FLEN/8, x4, x1, x2)

inst_46158:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:138474*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138474*0 + 3*78*FLEN/8, x4, x1, x2)

inst_46159:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:138477*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138477*0 + 3*79*FLEN/8, x4, x1, x2)

inst_46160:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:138480*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138480*0 + 3*80*FLEN/8, x4, x1, x2)

inst_46161:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:138483*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138483*0 + 3*81*FLEN/8, x4, x1, x2)

inst_46162:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:138486*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138486*0 + 3*82*FLEN/8, x4, x1, x2)

inst_46163:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:138489*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138489*0 + 3*83*FLEN/8, x4, x1, x2)

inst_46164:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:138492*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138492*0 + 3*84*FLEN/8, x4, x1, x2)

inst_46165:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:138495*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138495*0 + 3*85*FLEN/8, x4, x1, x2)

inst_46166:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:138498*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138498*0 + 3*86*FLEN/8, x4, x1, x2)

inst_46167:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:138501*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138501*0 + 3*87*FLEN/8, x4, x1, x2)

inst_46168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:138504*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138504*0 + 3*88*FLEN/8, x4, x1, x2)

inst_46169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:138507*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138507*0 + 3*89*FLEN/8, x4, x1, x2)

inst_46170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:138510*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138510*0 + 3*90*FLEN/8, x4, x1, x2)

inst_46171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:138513*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138513*0 + 3*91*FLEN/8, x4, x1, x2)

inst_46172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:138516*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138516*0 + 3*92*FLEN/8, x4, x1, x2)

inst_46173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:138519*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138519*0 + 3*93*FLEN/8, x4, x1, x2)

inst_46174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:138522*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138522*0 + 3*94*FLEN/8, x4, x1, x2)

inst_46175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:138525*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138525*0 + 3*95*FLEN/8, x4, x1, x2)

inst_46176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:138528*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138528*0 + 3*96*FLEN/8, x4, x1, x2)

inst_46177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:138531*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138531*0 + 3*97*FLEN/8, x4, x1, x2)

inst_46178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:138534*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138534*0 + 3*98*FLEN/8, x4, x1, x2)

inst_46179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:138537*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138537*0 + 3*99*FLEN/8, x4, x1, x2)

inst_46180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000000000; valaddr_reg:x3; val_offset:138540*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138540*0 + 3*100*FLEN/8, x4, x1, x2)

inst_46181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000000001; valaddr_reg:x3; val_offset:138543*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138543*0 + 3*101*FLEN/8, x4, x1, x2)

inst_46182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000000003; valaddr_reg:x3; val_offset:138546*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138546*0 + 3*102*FLEN/8, x4, x1, x2)

inst_46183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000000007; valaddr_reg:x3; val_offset:138549*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138549*0 + 3*103*FLEN/8, x4, x1, x2)

inst_46184:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000000000f; valaddr_reg:x3; val_offset:138552*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138552*0 + 3*104*FLEN/8, x4, x1, x2)

inst_46185:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000000001f; valaddr_reg:x3; val_offset:138555*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138555*0 + 3*105*FLEN/8, x4, x1, x2)

inst_46186:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000000003f; valaddr_reg:x3; val_offset:138558*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138558*0 + 3*106*FLEN/8, x4, x1, x2)

inst_46187:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000000007f; valaddr_reg:x3; val_offset:138561*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138561*0 + 3*107*FLEN/8, x4, x1, x2)

inst_46188:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000000000ff; valaddr_reg:x3; val_offset:138564*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138564*0 + 3*108*FLEN/8, x4, x1, x2)

inst_46189:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000000001ff; valaddr_reg:x3; val_offset:138567*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138567*0 + 3*109*FLEN/8, x4, x1, x2)

inst_46190:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000000003ff; valaddr_reg:x3; val_offset:138570*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138570*0 + 3*110*FLEN/8, x4, x1, x2)

inst_46191:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000000007ff; valaddr_reg:x3; val_offset:138573*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138573*0 + 3*111*FLEN/8, x4, x1, x2)

inst_46192:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000000fff; valaddr_reg:x3; val_offset:138576*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138576*0 + 3*112*FLEN/8, x4, x1, x2)

inst_46193:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000001fff; valaddr_reg:x3; val_offset:138579*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138579*0 + 3*113*FLEN/8, x4, x1, x2)

inst_46194:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000003fff; valaddr_reg:x3; val_offset:138582*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138582*0 + 3*114*FLEN/8, x4, x1, x2)

inst_46195:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000007fff; valaddr_reg:x3; val_offset:138585*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138585*0 + 3*115*FLEN/8, x4, x1, x2)

inst_46196:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000000ffff; valaddr_reg:x3; val_offset:138588*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138588*0 + 3*116*FLEN/8, x4, x1, x2)

inst_46197:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000001ffff; valaddr_reg:x3; val_offset:138591*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138591*0 + 3*117*FLEN/8, x4, x1, x2)

inst_46198:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000003ffff; valaddr_reg:x3; val_offset:138594*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138594*0 + 3*118*FLEN/8, x4, x1, x2)

inst_46199:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000007ffff; valaddr_reg:x3; val_offset:138597*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138597*0 + 3*119*FLEN/8, x4, x1, x2)

inst_46200:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000000fffff; valaddr_reg:x3; val_offset:138600*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138600*0 + 3*120*FLEN/8, x4, x1, x2)

inst_46201:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000001fffff; valaddr_reg:x3; val_offset:138603*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138603*0 + 3*121*FLEN/8, x4, x1, x2)

inst_46202:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000003fffff; valaddr_reg:x3; val_offset:138606*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138606*0 + 3*122*FLEN/8, x4, x1, x2)

inst_46203:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000007fffff; valaddr_reg:x3; val_offset:138609*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138609*0 + 3*123*FLEN/8, x4, x1, x2)

inst_46204:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000000ffffff; valaddr_reg:x3; val_offset:138612*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138612*0 + 3*124*FLEN/8, x4, x1, x2)

inst_46205:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000001ffffff; valaddr_reg:x3; val_offset:138615*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138615*0 + 3*125*FLEN/8, x4, x1, x2)

inst_46206:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000003ffffff; valaddr_reg:x3; val_offset:138618*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138618*0 + 3*126*FLEN/8, x4, x1, x2)

inst_46207:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000007ffffff; valaddr_reg:x3; val_offset:138621*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138621*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_46208:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000000fffffff; valaddr_reg:x3; val_offset:138624*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138624*0 + 3*128*FLEN/8, x4, x1, x2)

inst_46209:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000001fffffff; valaddr_reg:x3; val_offset:138627*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138627*0 + 3*129*FLEN/8, x4, x1, x2)

inst_46210:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000003fffffff; valaddr_reg:x3; val_offset:138630*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138630*0 + 3*130*FLEN/8, x4, x1, x2)

inst_46211:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000007fffffff; valaddr_reg:x3; val_offset:138633*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138633*0 + 3*131*FLEN/8, x4, x1, x2)

inst_46212:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000000ffffffff; valaddr_reg:x3; val_offset:138636*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138636*0 + 3*132*FLEN/8, x4, x1, x2)

inst_46213:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000001ffffffff; valaddr_reg:x3; val_offset:138639*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138639*0 + 3*133*FLEN/8, x4, x1, x2)

inst_46214:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000003ffffffff; valaddr_reg:x3; val_offset:138642*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138642*0 + 3*134*FLEN/8, x4, x1, x2)

inst_46215:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000007ffffffff; valaddr_reg:x3; val_offset:138645*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138645*0 + 3*135*FLEN/8, x4, x1, x2)

inst_46216:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400000fffffffff; valaddr_reg:x3; val_offset:138648*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138648*0 + 3*136*FLEN/8, x4, x1, x2)

inst_46217:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400001fffffffff; valaddr_reg:x3; val_offset:138651*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138651*0 + 3*137*FLEN/8, x4, x1, x2)

inst_46218:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400003fffffffff; valaddr_reg:x3; val_offset:138654*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138654*0 + 3*138*FLEN/8, x4, x1, x2)

inst_46219:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400007fffffffff; valaddr_reg:x3; val_offset:138657*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138657*0 + 3*139*FLEN/8, x4, x1, x2)

inst_46220:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40000ffffffffff; valaddr_reg:x3; val_offset:138660*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138660*0 + 3*140*FLEN/8, x4, x1, x2)

inst_46221:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40001ffffffffff; valaddr_reg:x3; val_offset:138663*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138663*0 + 3*141*FLEN/8, x4, x1, x2)

inst_46222:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40003ffffffffff; valaddr_reg:x3; val_offset:138666*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138666*0 + 3*142*FLEN/8, x4, x1, x2)

inst_46223:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40007ffffffffff; valaddr_reg:x3; val_offset:138669*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138669*0 + 3*143*FLEN/8, x4, x1, x2)

inst_46224:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4000fffffffffff; valaddr_reg:x3; val_offset:138672*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138672*0 + 3*144*FLEN/8, x4, x1, x2)

inst_46225:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4001fffffffffff; valaddr_reg:x3; val_offset:138675*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138675*0 + 3*145*FLEN/8, x4, x1, x2)

inst_46226:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4003fffffffffff; valaddr_reg:x3; val_offset:138678*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138678*0 + 3*146*FLEN/8, x4, x1, x2)

inst_46227:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x4007fffffffffff; valaddr_reg:x3; val_offset:138681*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138681*0 + 3*147*FLEN/8, x4, x1, x2)

inst_46228:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x400ffffffffffff; valaddr_reg:x3; val_offset:138684*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138684*0 + 3*148*FLEN/8, x4, x1, x2)

inst_46229:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x401ffffffffffff; valaddr_reg:x3; val_offset:138687*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138687*0 + 3*149*FLEN/8, x4, x1, x2)

inst_46230:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x403ffffffffffff; valaddr_reg:x3; val_offset:138690*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138690*0 + 3*150*FLEN/8, x4, x1, x2)

inst_46231:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x407ffffffffffff; valaddr_reg:x3; val_offset:138693*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138693*0 + 3*151*FLEN/8, x4, x1, x2)

inst_46232:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x408000000000000; valaddr_reg:x3; val_offset:138696*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138696*0 + 3*152*FLEN/8, x4, x1, x2)

inst_46233:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40c000000000000; valaddr_reg:x3; val_offset:138699*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138699*0 + 3*153*FLEN/8, x4, x1, x2)

inst_46234:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40e000000000000; valaddr_reg:x3; val_offset:138702*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138702*0 + 3*154*FLEN/8, x4, x1, x2)

inst_46235:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40f000000000000; valaddr_reg:x3; val_offset:138705*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138705*0 + 3*155*FLEN/8, x4, x1, x2)

inst_46236:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40f800000000000; valaddr_reg:x3; val_offset:138708*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138708*0 + 3*156*FLEN/8, x4, x1, x2)

inst_46237:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fc00000000000; valaddr_reg:x3; val_offset:138711*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138711*0 + 3*157*FLEN/8, x4, x1, x2)

inst_46238:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fe00000000000; valaddr_reg:x3; val_offset:138714*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138714*0 + 3*158*FLEN/8, x4, x1, x2)

inst_46239:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ff00000000000; valaddr_reg:x3; val_offset:138717*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138717*0 + 3*159*FLEN/8, x4, x1, x2)

inst_46240:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ff80000000000; valaddr_reg:x3; val_offset:138720*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138720*0 + 3*160*FLEN/8, x4, x1, x2)

inst_46241:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffc0000000000; valaddr_reg:x3; val_offset:138723*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138723*0 + 3*161*FLEN/8, x4, x1, x2)

inst_46242:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffe0000000000; valaddr_reg:x3; val_offset:138726*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138726*0 + 3*162*FLEN/8, x4, x1, x2)

inst_46243:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fff0000000000; valaddr_reg:x3; val_offset:138729*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138729*0 + 3*163*FLEN/8, x4, x1, x2)

inst_46244:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fff8000000000; valaddr_reg:x3; val_offset:138732*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138732*0 + 3*164*FLEN/8, x4, x1, x2)

inst_46245:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffc000000000; valaddr_reg:x3; val_offset:138735*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138735*0 + 3*165*FLEN/8, x4, x1, x2)

inst_46246:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffe000000000; valaddr_reg:x3; val_offset:138738*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138738*0 + 3*166*FLEN/8, x4, x1, x2)

inst_46247:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffff000000000; valaddr_reg:x3; val_offset:138741*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138741*0 + 3*167*FLEN/8, x4, x1, x2)

inst_46248:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffff800000000; valaddr_reg:x3; val_offset:138744*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138744*0 + 3*168*FLEN/8, x4, x1, x2)

inst_46249:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffc00000000; valaddr_reg:x3; val_offset:138747*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138747*0 + 3*169*FLEN/8, x4, x1, x2)

inst_46250:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffe00000000; valaddr_reg:x3; val_offset:138750*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138750*0 + 3*170*FLEN/8, x4, x1, x2)

inst_46251:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffff00000000; valaddr_reg:x3; val_offset:138753*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138753*0 + 3*171*FLEN/8, x4, x1, x2)

inst_46252:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffff80000000; valaddr_reg:x3; val_offset:138756*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138756*0 + 3*172*FLEN/8, x4, x1, x2)

inst_46253:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffc0000000; valaddr_reg:x3; val_offset:138759*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138759*0 + 3*173*FLEN/8, x4, x1, x2)

inst_46254:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffe0000000; valaddr_reg:x3; val_offset:138762*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138762*0 + 3*174*FLEN/8, x4, x1, x2)

inst_46255:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffff0000000; valaddr_reg:x3; val_offset:138765*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138765*0 + 3*175*FLEN/8, x4, x1, x2)

inst_46256:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffff8000000; valaddr_reg:x3; val_offset:138768*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138768*0 + 3*176*FLEN/8, x4, x1, x2)

inst_46257:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffc000000; valaddr_reg:x3; val_offset:138771*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138771*0 + 3*177*FLEN/8, x4, x1, x2)

inst_46258:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffe000000; valaddr_reg:x3; val_offset:138774*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138774*0 + 3*178*FLEN/8, x4, x1, x2)

inst_46259:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffff000000; valaddr_reg:x3; val_offset:138777*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138777*0 + 3*179*FLEN/8, x4, x1, x2)

inst_46260:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffff800000; valaddr_reg:x3; val_offset:138780*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138780*0 + 3*180*FLEN/8, x4, x1, x2)

inst_46261:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffc00000; valaddr_reg:x3; val_offset:138783*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138783*0 + 3*181*FLEN/8, x4, x1, x2)

inst_46262:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffe00000; valaddr_reg:x3; val_offset:138786*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138786*0 + 3*182*FLEN/8, x4, x1, x2)

inst_46263:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffff00000; valaddr_reg:x3; val_offset:138789*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138789*0 + 3*183*FLEN/8, x4, x1, x2)

inst_46264:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffff80000; valaddr_reg:x3; val_offset:138792*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138792*0 + 3*184*FLEN/8, x4, x1, x2)

inst_46265:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffc0000; valaddr_reg:x3; val_offset:138795*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138795*0 + 3*185*FLEN/8, x4, x1, x2)

inst_46266:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffe0000; valaddr_reg:x3; val_offset:138798*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138798*0 + 3*186*FLEN/8, x4, x1, x2)

inst_46267:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffff0000; valaddr_reg:x3; val_offset:138801*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138801*0 + 3*187*FLEN/8, x4, x1, x2)

inst_46268:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffff8000; valaddr_reg:x3; val_offset:138804*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138804*0 + 3*188*FLEN/8, x4, x1, x2)

inst_46269:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffffc000; valaddr_reg:x3; val_offset:138807*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138807*0 + 3*189*FLEN/8, x4, x1, x2)

inst_46270:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffffe000; valaddr_reg:x3; val_offset:138810*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138810*0 + 3*190*FLEN/8, x4, x1, x2)

inst_46271:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffff000; valaddr_reg:x3; val_offset:138813*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138813*0 + 3*191*FLEN/8, x4, x1, x2)

inst_46272:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffff800; valaddr_reg:x3; val_offset:138816*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138816*0 + 3*192*FLEN/8, x4, x1, x2)

inst_46273:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffffc00; valaddr_reg:x3; val_offset:138819*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138819*0 + 3*193*FLEN/8, x4, x1, x2)

inst_46274:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffffe00; valaddr_reg:x3; val_offset:138822*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138822*0 + 3*194*FLEN/8, x4, x1, x2)

inst_46275:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffffff00; valaddr_reg:x3; val_offset:138825*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138825*0 + 3*195*FLEN/8, x4, x1, x2)

inst_46276:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffffff80; valaddr_reg:x3; val_offset:138828*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138828*0 + 3*196*FLEN/8, x4, x1, x2)

inst_46277:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffffffc0; valaddr_reg:x3; val_offset:138831*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138831*0 + 3*197*FLEN/8, x4, x1, x2)

inst_46278:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffffffe0; valaddr_reg:x3; val_offset:138834*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138834*0 + 3*198*FLEN/8, x4, x1, x2)

inst_46279:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffffff0; valaddr_reg:x3; val_offset:138837*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138837*0 + 3*199*FLEN/8, x4, x1, x2)

inst_46280:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffffff8; valaddr_reg:x3; val_offset:138840*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138840*0 + 3*200*FLEN/8, x4, x1, x2)

inst_46281:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffffffc; valaddr_reg:x3; val_offset:138843*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138843*0 + 3*201*FLEN/8, x4, x1, x2)

inst_46282:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40ffffffffffffe; valaddr_reg:x3; val_offset:138846*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138846*0 + 3*202*FLEN/8, x4, x1, x2)

inst_46283:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc7412c0d0f601 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c7412c0d0f601; op2val:0x0;
op3val:0x40fffffffffffff; valaddr_reg:x3; val_offset:138849*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138849*0 + 3*203*FLEN/8, x4, x1, x2)

inst_46284:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000000000; valaddr_reg:x3; val_offset:138852*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138852*0 + 3*204*FLEN/8, x4, x1, x2)

inst_46285:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000000001; valaddr_reg:x3; val_offset:138855*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138855*0 + 3*205*FLEN/8, x4, x1, x2)

inst_46286:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000000003; valaddr_reg:x3; val_offset:138858*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138858*0 + 3*206*FLEN/8, x4, x1, x2)

inst_46287:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000000007; valaddr_reg:x3; val_offset:138861*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138861*0 + 3*207*FLEN/8, x4, x1, x2)

inst_46288:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000000000f; valaddr_reg:x3; val_offset:138864*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138864*0 + 3*208*FLEN/8, x4, x1, x2)

inst_46289:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000000001f; valaddr_reg:x3; val_offset:138867*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138867*0 + 3*209*FLEN/8, x4, x1, x2)

inst_46290:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000000003f; valaddr_reg:x3; val_offset:138870*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138870*0 + 3*210*FLEN/8, x4, x1, x2)

inst_46291:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000000007f; valaddr_reg:x3; val_offset:138873*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138873*0 + 3*211*FLEN/8, x4, x1, x2)

inst_46292:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000000000ff; valaddr_reg:x3; val_offset:138876*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138876*0 + 3*212*FLEN/8, x4, x1, x2)

inst_46293:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000000001ff; valaddr_reg:x3; val_offset:138879*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138879*0 + 3*213*FLEN/8, x4, x1, x2)

inst_46294:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000000003ff; valaddr_reg:x3; val_offset:138882*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138882*0 + 3*214*FLEN/8, x4, x1, x2)

inst_46295:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000000007ff; valaddr_reg:x3; val_offset:138885*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138885*0 + 3*215*FLEN/8, x4, x1, x2)

inst_46296:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000000fff; valaddr_reg:x3; val_offset:138888*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138888*0 + 3*216*FLEN/8, x4, x1, x2)

inst_46297:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000001fff; valaddr_reg:x3; val_offset:138891*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138891*0 + 3*217*FLEN/8, x4, x1, x2)

inst_46298:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000003fff; valaddr_reg:x3; val_offset:138894*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138894*0 + 3*218*FLEN/8, x4, x1, x2)

inst_46299:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000007fff; valaddr_reg:x3; val_offset:138897*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138897*0 + 3*219*FLEN/8, x4, x1, x2)

inst_46300:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000000ffff; valaddr_reg:x3; val_offset:138900*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138900*0 + 3*220*FLEN/8, x4, x1, x2)

inst_46301:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000001ffff; valaddr_reg:x3; val_offset:138903*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138903*0 + 3*221*FLEN/8, x4, x1, x2)

inst_46302:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000003ffff; valaddr_reg:x3; val_offset:138906*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138906*0 + 3*222*FLEN/8, x4, x1, x2)

inst_46303:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000007ffff; valaddr_reg:x3; val_offset:138909*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138909*0 + 3*223*FLEN/8, x4, x1, x2)

inst_46304:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000000fffff; valaddr_reg:x3; val_offset:138912*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138912*0 + 3*224*FLEN/8, x4, x1, x2)

inst_46305:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000001fffff; valaddr_reg:x3; val_offset:138915*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138915*0 + 3*225*FLEN/8, x4, x1, x2)

inst_46306:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000003fffff; valaddr_reg:x3; val_offset:138918*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138918*0 + 3*226*FLEN/8, x4, x1, x2)

inst_46307:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000007fffff; valaddr_reg:x3; val_offset:138921*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138921*0 + 3*227*FLEN/8, x4, x1, x2)

inst_46308:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000000ffffff; valaddr_reg:x3; val_offset:138924*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138924*0 + 3*228*FLEN/8, x4, x1, x2)

inst_46309:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000001ffffff; valaddr_reg:x3; val_offset:138927*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138927*0 + 3*229*FLEN/8, x4, x1, x2)

inst_46310:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000003ffffff; valaddr_reg:x3; val_offset:138930*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138930*0 + 3*230*FLEN/8, x4, x1, x2)

inst_46311:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000007ffffff; valaddr_reg:x3; val_offset:138933*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138933*0 + 3*231*FLEN/8, x4, x1, x2)

inst_46312:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000000fffffff; valaddr_reg:x3; val_offset:138936*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138936*0 + 3*232*FLEN/8, x4, x1, x2)

inst_46313:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000001fffffff; valaddr_reg:x3; val_offset:138939*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138939*0 + 3*233*FLEN/8, x4, x1, x2)

inst_46314:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000003fffffff; valaddr_reg:x3; val_offset:138942*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138942*0 + 3*234*FLEN/8, x4, x1, x2)

inst_46315:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000007fffffff; valaddr_reg:x3; val_offset:138945*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138945*0 + 3*235*FLEN/8, x4, x1, x2)

inst_46316:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00000ffffffff; valaddr_reg:x3; val_offset:138948*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138948*0 + 3*236*FLEN/8, x4, x1, x2)

inst_46317:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00001ffffffff; valaddr_reg:x3; val_offset:138951*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138951*0 + 3*237*FLEN/8, x4, x1, x2)

inst_46318:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00003ffffffff; valaddr_reg:x3; val_offset:138954*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138954*0 + 3*238*FLEN/8, x4, x1, x2)

inst_46319:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00007ffffffff; valaddr_reg:x3; val_offset:138957*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138957*0 + 3*239*FLEN/8, x4, x1, x2)

inst_46320:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0000fffffffff; valaddr_reg:x3; val_offset:138960*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138960*0 + 3*240*FLEN/8, x4, x1, x2)

inst_46321:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0001fffffffff; valaddr_reg:x3; val_offset:138963*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138963*0 + 3*241*FLEN/8, x4, x1, x2)

inst_46322:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0003fffffffff; valaddr_reg:x3; val_offset:138966*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138966*0 + 3*242*FLEN/8, x4, x1, x2)

inst_46323:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0007fffffffff; valaddr_reg:x3; val_offset:138969*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138969*0 + 3*243*FLEN/8, x4, x1, x2)

inst_46324:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf000ffffffffff; valaddr_reg:x3; val_offset:138972*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138972*0 + 3*244*FLEN/8, x4, x1, x2)

inst_46325:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf001ffffffffff; valaddr_reg:x3; val_offset:138975*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138975*0 + 3*245*FLEN/8, x4, x1, x2)

inst_46326:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf003ffffffffff; valaddr_reg:x3; val_offset:138978*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138978*0 + 3*246*FLEN/8, x4, x1, x2)

inst_46327:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf007ffffffffff; valaddr_reg:x3; val_offset:138981*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138981*0 + 3*247*FLEN/8, x4, x1, x2)

inst_46328:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf00fffffffffff; valaddr_reg:x3; val_offset:138984*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138984*0 + 3*248*FLEN/8, x4, x1, x2)

inst_46329:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf01fffffffffff; valaddr_reg:x3; val_offset:138987*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138987*0 + 3*249*FLEN/8, x4, x1, x2)

inst_46330:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf03fffffffffff; valaddr_reg:x3; val_offset:138990*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138990*0 + 3*250*FLEN/8, x4, x1, x2)

inst_46331:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf07fffffffffff; valaddr_reg:x3; val_offset:138993*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138993*0 + 3*251*FLEN/8, x4, x1, x2)

inst_46332:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf0ffffffffffff; valaddr_reg:x3; val_offset:138996*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138996*0 + 3*252*FLEN/8, x4, x1, x2)

inst_46333:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf1ffffffffffff; valaddr_reg:x3; val_offset:138999*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 138999*0 + 3*253*FLEN/8, x4, x1, x2)

inst_46334:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf3ffffffffffff; valaddr_reg:x3; val_offset:139002*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139002*0 + 3*254*FLEN/8, x4, x1, x2)

inst_46335:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf7ffffffffffff; valaddr_reg:x3; val_offset:139005*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139005*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_46336:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bf8000000000000; valaddr_reg:x3; val_offset:139008*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139008*0 + 3*256*FLEN/8, x4, x1, x2)

inst_46337:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfc000000000000; valaddr_reg:x3; val_offset:139011*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139011*0 + 3*257*FLEN/8, x4, x1, x2)

inst_46338:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfe000000000000; valaddr_reg:x3; val_offset:139014*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139014*0 + 3*258*FLEN/8, x4, x1, x2)

inst_46339:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bff000000000000; valaddr_reg:x3; val_offset:139017*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139017*0 + 3*259*FLEN/8, x4, x1, x2)

inst_46340:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bff800000000000; valaddr_reg:x3; val_offset:139020*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139020*0 + 3*260*FLEN/8, x4, x1, x2)

inst_46341:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffc00000000000; valaddr_reg:x3; val_offset:139023*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139023*0 + 3*261*FLEN/8, x4, x1, x2)

inst_46342:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffe00000000000; valaddr_reg:x3; val_offset:139026*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139026*0 + 3*262*FLEN/8, x4, x1, x2)

inst_46343:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfff00000000000; valaddr_reg:x3; val_offset:139029*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139029*0 + 3*263*FLEN/8, x4, x1, x2)

inst_46344:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfff80000000000; valaddr_reg:x3; val_offset:139032*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139032*0 + 3*264*FLEN/8, x4, x1, x2)

inst_46345:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffc0000000000; valaddr_reg:x3; val_offset:139035*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139035*0 + 3*265*FLEN/8, x4, x1, x2)

inst_46346:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffe0000000000; valaddr_reg:x3; val_offset:139038*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139038*0 + 3*266*FLEN/8, x4, x1, x2)

inst_46347:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffff0000000000; valaddr_reg:x3; val_offset:139041*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139041*0 + 3*267*FLEN/8, x4, x1, x2)

inst_46348:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffff8000000000; valaddr_reg:x3; val_offset:139044*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139044*0 + 3*268*FLEN/8, x4, x1, x2)

inst_46349:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffc000000000; valaddr_reg:x3; val_offset:139047*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139047*0 + 3*269*FLEN/8, x4, x1, x2)

inst_46350:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffe000000000; valaddr_reg:x3; val_offset:139050*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139050*0 + 3*270*FLEN/8, x4, x1, x2)

inst_46351:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffff000000000; valaddr_reg:x3; val_offset:139053*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139053*0 + 3*271*FLEN/8, x4, x1, x2)

inst_46352:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffff800000000; valaddr_reg:x3; val_offset:139056*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139056*0 + 3*272*FLEN/8, x4, x1, x2)

inst_46353:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffc00000000; valaddr_reg:x3; val_offset:139059*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139059*0 + 3*273*FLEN/8, x4, x1, x2)

inst_46354:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffe00000000; valaddr_reg:x3; val_offset:139062*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139062*0 + 3*274*FLEN/8, x4, x1, x2)

inst_46355:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffff00000000; valaddr_reg:x3; val_offset:139065*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139065*0 + 3*275*FLEN/8, x4, x1, x2)

inst_46356:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffff80000000; valaddr_reg:x3; val_offset:139068*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139068*0 + 3*276*FLEN/8, x4, x1, x2)

inst_46357:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffc0000000; valaddr_reg:x3; val_offset:139071*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139071*0 + 3*277*FLEN/8, x4, x1, x2)

inst_46358:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffe0000000; valaddr_reg:x3; val_offset:139074*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139074*0 + 3*278*FLEN/8, x4, x1, x2)

inst_46359:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffff0000000; valaddr_reg:x3; val_offset:139077*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139077*0 + 3*279*FLEN/8, x4, x1, x2)

inst_46360:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffff8000000; valaddr_reg:x3; val_offset:139080*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139080*0 + 3*280*FLEN/8, x4, x1, x2)

inst_46361:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffc000000; valaddr_reg:x3; val_offset:139083*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139083*0 + 3*281*FLEN/8, x4, x1, x2)

inst_46362:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffe000000; valaddr_reg:x3; val_offset:139086*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139086*0 + 3*282*FLEN/8, x4, x1, x2)

inst_46363:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffff000000; valaddr_reg:x3; val_offset:139089*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139089*0 + 3*283*FLEN/8, x4, x1, x2)

inst_46364:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffff800000; valaddr_reg:x3; val_offset:139092*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139092*0 + 3*284*FLEN/8, x4, x1, x2)

inst_46365:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffc00000; valaddr_reg:x3; val_offset:139095*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139095*0 + 3*285*FLEN/8, x4, x1, x2)

inst_46366:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffe00000; valaddr_reg:x3; val_offset:139098*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139098*0 + 3*286*FLEN/8, x4, x1, x2)

inst_46367:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffff00000; valaddr_reg:x3; val_offset:139101*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139101*0 + 3*287*FLEN/8, x4, x1, x2)

inst_46368:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffff80000; valaddr_reg:x3; val_offset:139104*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139104*0 + 3*288*FLEN/8, x4, x1, x2)

inst_46369:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffc0000; valaddr_reg:x3; val_offset:139107*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139107*0 + 3*289*FLEN/8, x4, x1, x2)

inst_46370:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffe0000; valaddr_reg:x3; val_offset:139110*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139110*0 + 3*290*FLEN/8, x4, x1, x2)

inst_46371:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffff0000; valaddr_reg:x3; val_offset:139113*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139113*0 + 3*291*FLEN/8, x4, x1, x2)

inst_46372:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffff8000; valaddr_reg:x3; val_offset:139116*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139116*0 + 3*292*FLEN/8, x4, x1, x2)

inst_46373:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffffc000; valaddr_reg:x3; val_offset:139119*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139119*0 + 3*293*FLEN/8, x4, x1, x2)

inst_46374:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffffe000; valaddr_reg:x3; val_offset:139122*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139122*0 + 3*294*FLEN/8, x4, x1, x2)

inst_46375:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffff000; valaddr_reg:x3; val_offset:139125*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139125*0 + 3*295*FLEN/8, x4, x1, x2)

inst_46376:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffff800; valaddr_reg:x3; val_offset:139128*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139128*0 + 3*296*FLEN/8, x4, x1, x2)

inst_46377:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffffc00; valaddr_reg:x3; val_offset:139131*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139131*0 + 3*297*FLEN/8, x4, x1, x2)

inst_46378:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffffe00; valaddr_reg:x3; val_offset:139134*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139134*0 + 3*298*FLEN/8, x4, x1, x2)

inst_46379:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffffff00; valaddr_reg:x3; val_offset:139137*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139137*0 + 3*299*FLEN/8, x4, x1, x2)

inst_46380:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffffff80; valaddr_reg:x3; val_offset:139140*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139140*0 + 3*300*FLEN/8, x4, x1, x2)

inst_46381:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffffffc0; valaddr_reg:x3; val_offset:139143*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139143*0 + 3*301*FLEN/8, x4, x1, x2)

inst_46382:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffffffe0; valaddr_reg:x3; val_offset:139146*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139146*0 + 3*302*FLEN/8, x4, x1, x2)

inst_46383:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffffff0; valaddr_reg:x3; val_offset:139149*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139149*0 + 3*303*FLEN/8, x4, x1, x2)

inst_46384:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffffff8; valaddr_reg:x3; val_offset:139152*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139152*0 + 3*304*FLEN/8, x4, x1, x2)

inst_46385:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffffffc; valaddr_reg:x3; val_offset:139155*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139155*0 + 3*305*FLEN/8, x4, x1, x2)

inst_46386:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bfffffffffffffe; valaddr_reg:x3; val_offset:139158*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139158*0 + 3*306*FLEN/8, x4, x1, x2)

inst_46387:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3bf and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3bffffffffffffff; valaddr_reg:x3; val_offset:139161*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139161*0 + 3*307*FLEN/8, x4, x1, x2)

inst_46388:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:139164*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139164*0 + 3*308*FLEN/8, x4, x1, x2)

inst_46389:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:139167*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139167*0 + 3*309*FLEN/8, x4, x1, x2)

inst_46390:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:139170*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139170*0 + 3*310*FLEN/8, x4, x1, x2)

inst_46391:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:139173*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139173*0 + 3*311*FLEN/8, x4, x1, x2)

inst_46392:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:139176*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139176*0 + 3*312*FLEN/8, x4, x1, x2)

inst_46393:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:139179*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139179*0 + 3*313*FLEN/8, x4, x1, x2)

inst_46394:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:139182*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139182*0 + 3*314*FLEN/8, x4, x1, x2)

inst_46395:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:139185*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139185*0 + 3*315*FLEN/8, x4, x1, x2)

inst_46396:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:139188*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139188*0 + 3*316*FLEN/8, x4, x1, x2)

inst_46397:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:139191*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139191*0 + 3*317*FLEN/8, x4, x1, x2)

inst_46398:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:139194*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139194*0 + 3*318*FLEN/8, x4, x1, x2)

inst_46399:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:139197*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139197*0 + 3*319*FLEN/8, x4, x1, x2)

inst_46400:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:139200*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139200*0 + 3*320*FLEN/8, x4, x1, x2)

inst_46401:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:139203*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139203*0 + 3*321*FLEN/8, x4, x1, x2)

inst_46402:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:139206*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139206*0 + 3*322*FLEN/8, x4, x1, x2)

inst_46403:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:139209*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139209*0 + 3*323*FLEN/8, x4, x1, x2)

inst_46404:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:139212*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139212*0 + 3*324*FLEN/8, x4, x1, x2)

inst_46405:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:139215*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139215*0 + 3*325*FLEN/8, x4, x1, x2)

inst_46406:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:139218*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139218*0 + 3*326*FLEN/8, x4, x1, x2)

inst_46407:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:139221*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139221*0 + 3*327*FLEN/8, x4, x1, x2)

inst_46408:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:139224*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139224*0 + 3*328*FLEN/8, x4, x1, x2)

inst_46409:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc913d4c387841 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1ec2d22f13bee and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c913d4c387841; op2val:0x2041ec2d22f13bee;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:139227*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139227*0 + 3*329*FLEN/8, x4, x1, x2)

inst_46410:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:139230*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139230*0 + 3*330*FLEN/8, x4, x1, x2)

inst_46411:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:139233*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139233*0 + 3*331*FLEN/8, x4, x1, x2)

inst_46412:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:139236*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139236*0 + 3*332*FLEN/8, x4, x1, x2)

inst_46413:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:139239*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139239*0 + 3*333*FLEN/8, x4, x1, x2)

inst_46414:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:139242*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139242*0 + 3*334*FLEN/8, x4, x1, x2)

inst_46415:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:139245*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139245*0 + 3*335*FLEN/8, x4, x1, x2)

inst_46416:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:139248*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139248*0 + 3*336*FLEN/8, x4, x1, x2)

inst_46417:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:139251*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139251*0 + 3*337*FLEN/8, x4, x1, x2)

inst_46418:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:139254*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139254*0 + 3*338*FLEN/8, x4, x1, x2)

inst_46419:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:139257*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139257*0 + 3*339*FLEN/8, x4, x1, x2)

inst_46420:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:139260*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139260*0 + 3*340*FLEN/8, x4, x1, x2)

inst_46421:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:139263*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139263*0 + 3*341*FLEN/8, x4, x1, x2)

inst_46422:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:139266*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139266*0 + 3*342*FLEN/8, x4, x1, x2)

inst_46423:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:139269*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139269*0 + 3*343*FLEN/8, x4, x1, x2)

inst_46424:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:139272*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139272*0 + 3*344*FLEN/8, x4, x1, x2)

inst_46425:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:139275*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139275*0 + 3*345*FLEN/8, x4, x1, x2)

inst_46426:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:139278*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139278*0 + 3*346*FLEN/8, x4, x1, x2)

inst_46427:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:139281*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139281*0 + 3*347*FLEN/8, x4, x1, x2)

inst_46428:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:139284*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139284*0 + 3*348*FLEN/8, x4, x1, x2)

inst_46429:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:139287*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139287*0 + 3*349*FLEN/8, x4, x1, x2)

inst_46430:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:139290*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139290*0 + 3*350*FLEN/8, x4, x1, x2)

inst_46431:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:139293*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139293*0 + 3*351*FLEN/8, x4, x1, x2)

inst_46432:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000000000; valaddr_reg:x3; val_offset:139296*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139296*0 + 3*352*FLEN/8, x4, x1, x2)

inst_46433:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000000001; valaddr_reg:x3; val_offset:139299*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139299*0 + 3*353*FLEN/8, x4, x1, x2)

inst_46434:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000000003; valaddr_reg:x3; val_offset:139302*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139302*0 + 3*354*FLEN/8, x4, x1, x2)

inst_46435:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000000007; valaddr_reg:x3; val_offset:139305*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139305*0 + 3*355*FLEN/8, x4, x1, x2)

inst_46436:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000000000f; valaddr_reg:x3; val_offset:139308*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139308*0 + 3*356*FLEN/8, x4, x1, x2)

inst_46437:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000000001f; valaddr_reg:x3; val_offset:139311*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139311*0 + 3*357*FLEN/8, x4, x1, x2)

inst_46438:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000000003f; valaddr_reg:x3; val_offset:139314*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139314*0 + 3*358*FLEN/8, x4, x1, x2)

inst_46439:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000000007f; valaddr_reg:x3; val_offset:139317*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139317*0 + 3*359*FLEN/8, x4, x1, x2)

inst_46440:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000000000ff; valaddr_reg:x3; val_offset:139320*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139320*0 + 3*360*FLEN/8, x4, x1, x2)

inst_46441:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000000001ff; valaddr_reg:x3; val_offset:139323*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139323*0 + 3*361*FLEN/8, x4, x1, x2)

inst_46442:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000000003ff; valaddr_reg:x3; val_offset:139326*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139326*0 + 3*362*FLEN/8, x4, x1, x2)

inst_46443:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000000007ff; valaddr_reg:x3; val_offset:139329*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139329*0 + 3*363*FLEN/8, x4, x1, x2)

inst_46444:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000000fff; valaddr_reg:x3; val_offset:139332*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139332*0 + 3*364*FLEN/8, x4, x1, x2)

inst_46445:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000001fff; valaddr_reg:x3; val_offset:139335*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139335*0 + 3*365*FLEN/8, x4, x1, x2)

inst_46446:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000003fff; valaddr_reg:x3; val_offset:139338*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139338*0 + 3*366*FLEN/8, x4, x1, x2)

inst_46447:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000007fff; valaddr_reg:x3; val_offset:139341*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139341*0 + 3*367*FLEN/8, x4, x1, x2)

inst_46448:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000000ffff; valaddr_reg:x3; val_offset:139344*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139344*0 + 3*368*FLEN/8, x4, x1, x2)

inst_46449:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000001ffff; valaddr_reg:x3; val_offset:139347*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139347*0 + 3*369*FLEN/8, x4, x1, x2)

inst_46450:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000003ffff; valaddr_reg:x3; val_offset:139350*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139350*0 + 3*370*FLEN/8, x4, x1, x2)

inst_46451:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000007ffff; valaddr_reg:x3; val_offset:139353*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139353*0 + 3*371*FLEN/8, x4, x1, x2)

inst_46452:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000000fffff; valaddr_reg:x3; val_offset:139356*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139356*0 + 3*372*FLEN/8, x4, x1, x2)

inst_46453:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000001fffff; valaddr_reg:x3; val_offset:139359*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139359*0 + 3*373*FLEN/8, x4, x1, x2)

inst_46454:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000003fffff; valaddr_reg:x3; val_offset:139362*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139362*0 + 3*374*FLEN/8, x4, x1, x2)

inst_46455:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000007fffff; valaddr_reg:x3; val_offset:139365*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139365*0 + 3*375*FLEN/8, x4, x1, x2)

inst_46456:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000000ffffff; valaddr_reg:x3; val_offset:139368*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139368*0 + 3*376*FLEN/8, x4, x1, x2)

inst_46457:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000001ffffff; valaddr_reg:x3; val_offset:139371*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139371*0 + 3*377*FLEN/8, x4, x1, x2)

inst_46458:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000003ffffff; valaddr_reg:x3; val_offset:139374*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139374*0 + 3*378*FLEN/8, x4, x1, x2)

inst_46459:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000007ffffff; valaddr_reg:x3; val_offset:139377*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139377*0 + 3*379*FLEN/8, x4, x1, x2)

inst_46460:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000000fffffff; valaddr_reg:x3; val_offset:139380*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139380*0 + 3*380*FLEN/8, x4, x1, x2)

inst_46461:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000001fffffff; valaddr_reg:x3; val_offset:139383*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139383*0 + 3*381*FLEN/8, x4, x1, x2)

inst_46462:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000003fffffff; valaddr_reg:x3; val_offset:139386*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139386*0 + 3*382*FLEN/8, x4, x1, x2)

inst_46463:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000007fffffff; valaddr_reg:x3; val_offset:139389*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139389*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_46464:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000000ffffffff; valaddr_reg:x3; val_offset:139392*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139392*0 + 3*384*FLEN/8, x4, x1, x2)

inst_46465:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000001ffffffff; valaddr_reg:x3; val_offset:139395*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139395*0 + 3*385*FLEN/8, x4, x1, x2)

inst_46466:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000003ffffffff; valaddr_reg:x3; val_offset:139398*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139398*0 + 3*386*FLEN/8, x4, x1, x2)

inst_46467:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000007ffffffff; valaddr_reg:x3; val_offset:139401*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139401*0 + 3*387*FLEN/8, x4, x1, x2)

inst_46468:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100000fffffffff; valaddr_reg:x3; val_offset:139404*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139404*0 + 3*388*FLEN/8, x4, x1, x2)

inst_46469:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100001fffffffff; valaddr_reg:x3; val_offset:139407*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139407*0 + 3*389*FLEN/8, x4, x1, x2)

inst_46470:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100003fffffffff; valaddr_reg:x3; val_offset:139410*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139410*0 + 3*390*FLEN/8, x4, x1, x2)

inst_46471:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100007fffffffff; valaddr_reg:x3; val_offset:139413*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139413*0 + 3*391*FLEN/8, x4, x1, x2)

inst_46472:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810000ffffffffff; valaddr_reg:x3; val_offset:139416*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139416*0 + 3*392*FLEN/8, x4, x1, x2)

inst_46473:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810001ffffffffff; valaddr_reg:x3; val_offset:139419*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139419*0 + 3*393*FLEN/8, x4, x1, x2)

inst_46474:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810003ffffffffff; valaddr_reg:x3; val_offset:139422*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139422*0 + 3*394*FLEN/8, x4, x1, x2)

inst_46475:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810007ffffffffff; valaddr_reg:x3; val_offset:139425*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139425*0 + 3*395*FLEN/8, x4, x1, x2)

inst_46476:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81000fffffffffff; valaddr_reg:x3; val_offset:139428*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139428*0 + 3*396*FLEN/8, x4, x1, x2)

inst_46477:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81001fffffffffff; valaddr_reg:x3; val_offset:139431*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139431*0 + 3*397*FLEN/8, x4, x1, x2)

inst_46478:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81003fffffffffff; valaddr_reg:x3; val_offset:139434*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139434*0 + 3*398*FLEN/8, x4, x1, x2)

inst_46479:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x81007fffffffffff; valaddr_reg:x3; val_offset:139437*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139437*0 + 3*399*FLEN/8, x4, x1, x2)

inst_46480:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8100ffffffffffff; valaddr_reg:x3; val_offset:139440*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139440*0 + 3*400*FLEN/8, x4, x1, x2)

inst_46481:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8101ffffffffffff; valaddr_reg:x3; val_offset:139443*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139443*0 + 3*401*FLEN/8, x4, x1, x2)

inst_46482:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8103ffffffffffff; valaddr_reg:x3; val_offset:139446*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139446*0 + 3*402*FLEN/8, x4, x1, x2)

inst_46483:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8107ffffffffffff; valaddr_reg:x3; val_offset:139449*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139449*0 + 3*403*FLEN/8, x4, x1, x2)

inst_46484:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x8108000000000000; valaddr_reg:x3; val_offset:139452*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139452*0 + 3*404*FLEN/8, x4, x1, x2)

inst_46485:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810c000000000000; valaddr_reg:x3; val_offset:139455*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139455*0 + 3*405*FLEN/8, x4, x1, x2)

inst_46486:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810e000000000000; valaddr_reg:x3; val_offset:139458*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139458*0 + 3*406*FLEN/8, x4, x1, x2)

inst_46487:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810f000000000000; valaddr_reg:x3; val_offset:139461*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139461*0 + 3*407*FLEN/8, x4, x1, x2)

inst_46488:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810f800000000000; valaddr_reg:x3; val_offset:139464*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139464*0 + 3*408*FLEN/8, x4, x1, x2)

inst_46489:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fc00000000000; valaddr_reg:x3; val_offset:139467*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139467*0 + 3*409*FLEN/8, x4, x1, x2)

inst_46490:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fe00000000000; valaddr_reg:x3; val_offset:139470*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139470*0 + 3*410*FLEN/8, x4, x1, x2)

inst_46491:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ff00000000000; valaddr_reg:x3; val_offset:139473*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139473*0 + 3*411*FLEN/8, x4, x1, x2)

inst_46492:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ff80000000000; valaddr_reg:x3; val_offset:139476*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139476*0 + 3*412*FLEN/8, x4, x1, x2)

inst_46493:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffc0000000000; valaddr_reg:x3; val_offset:139479*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139479*0 + 3*413*FLEN/8, x4, x1, x2)

inst_46494:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffe0000000000; valaddr_reg:x3; val_offset:139482*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139482*0 + 3*414*FLEN/8, x4, x1, x2)

inst_46495:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fff0000000000; valaddr_reg:x3; val_offset:139485*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139485*0 + 3*415*FLEN/8, x4, x1, x2)

inst_46496:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fff8000000000; valaddr_reg:x3; val_offset:139488*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139488*0 + 3*416*FLEN/8, x4, x1, x2)

inst_46497:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffc000000000; valaddr_reg:x3; val_offset:139491*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139491*0 + 3*417*FLEN/8, x4, x1, x2)

inst_46498:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffe000000000; valaddr_reg:x3; val_offset:139494*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139494*0 + 3*418*FLEN/8, x4, x1, x2)

inst_46499:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffff000000000; valaddr_reg:x3; val_offset:139497*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139497*0 + 3*419*FLEN/8, x4, x1, x2)

inst_46500:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffff800000000; valaddr_reg:x3; val_offset:139500*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139500*0 + 3*420*FLEN/8, x4, x1, x2)

inst_46501:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffc00000000; valaddr_reg:x3; val_offset:139503*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139503*0 + 3*421*FLEN/8, x4, x1, x2)

inst_46502:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffe00000000; valaddr_reg:x3; val_offset:139506*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139506*0 + 3*422*FLEN/8, x4, x1, x2)

inst_46503:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffff00000000; valaddr_reg:x3; val_offset:139509*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139509*0 + 3*423*FLEN/8, x4, x1, x2)

inst_46504:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffff80000000; valaddr_reg:x3; val_offset:139512*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139512*0 + 3*424*FLEN/8, x4, x1, x2)

inst_46505:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffc0000000; valaddr_reg:x3; val_offset:139515*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139515*0 + 3*425*FLEN/8, x4, x1, x2)

inst_46506:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffe0000000; valaddr_reg:x3; val_offset:139518*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139518*0 + 3*426*FLEN/8, x4, x1, x2)

inst_46507:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffff0000000; valaddr_reg:x3; val_offset:139521*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139521*0 + 3*427*FLEN/8, x4, x1, x2)

inst_46508:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffff8000000; valaddr_reg:x3; val_offset:139524*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139524*0 + 3*428*FLEN/8, x4, x1, x2)

inst_46509:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffc000000; valaddr_reg:x3; val_offset:139527*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139527*0 + 3*429*FLEN/8, x4, x1, x2)

inst_46510:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffe000000; valaddr_reg:x3; val_offset:139530*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139530*0 + 3*430*FLEN/8, x4, x1, x2)

inst_46511:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffff000000; valaddr_reg:x3; val_offset:139533*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139533*0 + 3*431*FLEN/8, x4, x1, x2)

inst_46512:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffff800000; valaddr_reg:x3; val_offset:139536*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139536*0 + 3*432*FLEN/8, x4, x1, x2)

inst_46513:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffc00000; valaddr_reg:x3; val_offset:139539*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139539*0 + 3*433*FLEN/8, x4, x1, x2)

inst_46514:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffe00000; valaddr_reg:x3; val_offset:139542*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139542*0 + 3*434*FLEN/8, x4, x1, x2)

inst_46515:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffff00000; valaddr_reg:x3; val_offset:139545*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139545*0 + 3*435*FLEN/8, x4, x1, x2)

inst_46516:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffff80000; valaddr_reg:x3; val_offset:139548*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139548*0 + 3*436*FLEN/8, x4, x1, x2)

inst_46517:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffc0000; valaddr_reg:x3; val_offset:139551*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139551*0 + 3*437*FLEN/8, x4, x1, x2)

inst_46518:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffe0000; valaddr_reg:x3; val_offset:139554*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139554*0 + 3*438*FLEN/8, x4, x1, x2)

inst_46519:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffff0000; valaddr_reg:x3; val_offset:139557*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139557*0 + 3*439*FLEN/8, x4, x1, x2)

inst_46520:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffff8000; valaddr_reg:x3; val_offset:139560*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139560*0 + 3*440*FLEN/8, x4, x1, x2)

inst_46521:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffffc000; valaddr_reg:x3; val_offset:139563*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139563*0 + 3*441*FLEN/8, x4, x1, x2)

inst_46522:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffffe000; valaddr_reg:x3; val_offset:139566*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139566*0 + 3*442*FLEN/8, x4, x1, x2)

inst_46523:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffff000; valaddr_reg:x3; val_offset:139569*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139569*0 + 3*443*FLEN/8, x4, x1, x2)

inst_46524:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffff800; valaddr_reg:x3; val_offset:139572*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139572*0 + 3*444*FLEN/8, x4, x1, x2)

inst_46525:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffffc00; valaddr_reg:x3; val_offset:139575*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139575*0 + 3*445*FLEN/8, x4, x1, x2)

inst_46526:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffffe00; valaddr_reg:x3; val_offset:139578*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139578*0 + 3*446*FLEN/8, x4, x1, x2)

inst_46527:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffffff00; valaddr_reg:x3; val_offset:139581*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139581*0 + 3*447*FLEN/8, x4, x1, x2)

inst_46528:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffffff80; valaddr_reg:x3; val_offset:139584*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139584*0 + 3*448*FLEN/8, x4, x1, x2)

inst_46529:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffffffc0; valaddr_reg:x3; val_offset:139587*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139587*0 + 3*449*FLEN/8, x4, x1, x2)

inst_46530:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffffffe0; valaddr_reg:x3; val_offset:139590*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139590*0 + 3*450*FLEN/8, x4, x1, x2)

inst_46531:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffffff0; valaddr_reg:x3; val_offset:139593*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139593*0 + 3*451*FLEN/8, x4, x1, x2)

inst_46532:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffffff8; valaddr_reg:x3; val_offset:139596*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139596*0 + 3*452*FLEN/8, x4, x1, x2)

inst_46533:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffffffc; valaddr_reg:x3; val_offset:139599*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139599*0 + 3*453*FLEN/8, x4, x1, x2)

inst_46534:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810ffffffffffffe; valaddr_reg:x3; val_offset:139602*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139602*0 + 3*454*FLEN/8, x4, x1, x2)

inst_46535:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xc97099b72dd5f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9c97099b72dd5f; op2val:0x8000;
op3val:0x810fffffffffffff; valaddr_reg:x3; val_offset:139605*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139605*0 + 3*455*FLEN/8, x4, x1, x2)

inst_46536:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000000000; valaddr_reg:x3; val_offset:139608*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139608*0 + 3*456*FLEN/8, x4, x1, x2)

inst_46537:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000000001; valaddr_reg:x3; val_offset:139611*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139611*0 + 3*457*FLEN/8, x4, x1, x2)

inst_46538:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000000003; valaddr_reg:x3; val_offset:139614*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139614*0 + 3*458*FLEN/8, x4, x1, x2)

inst_46539:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000000007; valaddr_reg:x3; val_offset:139617*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139617*0 + 3*459*FLEN/8, x4, x1, x2)

inst_46540:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000000000f; valaddr_reg:x3; val_offset:139620*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139620*0 + 3*460*FLEN/8, x4, x1, x2)

inst_46541:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000000001f; valaddr_reg:x3; val_offset:139623*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139623*0 + 3*461*FLEN/8, x4, x1, x2)

inst_46542:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000000003f; valaddr_reg:x3; val_offset:139626*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139626*0 + 3*462*FLEN/8, x4, x1, x2)

inst_46543:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000000007f; valaddr_reg:x3; val_offset:139629*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139629*0 + 3*463*FLEN/8, x4, x1, x2)

inst_46544:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000000000ff; valaddr_reg:x3; val_offset:139632*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139632*0 + 3*464*FLEN/8, x4, x1, x2)

inst_46545:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000000001ff; valaddr_reg:x3; val_offset:139635*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139635*0 + 3*465*FLEN/8, x4, x1, x2)

inst_46546:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000000003ff; valaddr_reg:x3; val_offset:139638*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139638*0 + 3*466*FLEN/8, x4, x1, x2)

inst_46547:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000000007ff; valaddr_reg:x3; val_offset:139641*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139641*0 + 3*467*FLEN/8, x4, x1, x2)

inst_46548:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000000fff; valaddr_reg:x3; val_offset:139644*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139644*0 + 3*468*FLEN/8, x4, x1, x2)

inst_46549:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000001fff; valaddr_reg:x3; val_offset:139647*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139647*0 + 3*469*FLEN/8, x4, x1, x2)

inst_46550:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000003fff; valaddr_reg:x3; val_offset:139650*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139650*0 + 3*470*FLEN/8, x4, x1, x2)

inst_46551:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000007fff; valaddr_reg:x3; val_offset:139653*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139653*0 + 3*471*FLEN/8, x4, x1, x2)

inst_46552:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000000ffff; valaddr_reg:x3; val_offset:139656*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139656*0 + 3*472*FLEN/8, x4, x1, x2)

inst_46553:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000001ffff; valaddr_reg:x3; val_offset:139659*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139659*0 + 3*473*FLEN/8, x4, x1, x2)

inst_46554:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000003ffff; valaddr_reg:x3; val_offset:139662*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139662*0 + 3*474*FLEN/8, x4, x1, x2)

inst_46555:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000007ffff; valaddr_reg:x3; val_offset:139665*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139665*0 + 3*475*FLEN/8, x4, x1, x2)

inst_46556:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000000fffff; valaddr_reg:x3; val_offset:139668*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139668*0 + 3*476*FLEN/8, x4, x1, x2)

inst_46557:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000001fffff; valaddr_reg:x3; val_offset:139671*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139671*0 + 3*477*FLEN/8, x4, x1, x2)

inst_46558:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000003fffff; valaddr_reg:x3; val_offset:139674*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139674*0 + 3*478*FLEN/8, x4, x1, x2)

inst_46559:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000007fffff; valaddr_reg:x3; val_offset:139677*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139677*0 + 3*479*FLEN/8, x4, x1, x2)

inst_46560:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000000ffffff; valaddr_reg:x3; val_offset:139680*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139680*0 + 3*480*FLEN/8, x4, x1, x2)

inst_46561:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000001ffffff; valaddr_reg:x3; val_offset:139683*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139683*0 + 3*481*FLEN/8, x4, x1, x2)

inst_46562:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000003ffffff; valaddr_reg:x3; val_offset:139686*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139686*0 + 3*482*FLEN/8, x4, x1, x2)

inst_46563:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000007ffffff; valaddr_reg:x3; val_offset:139689*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139689*0 + 3*483*FLEN/8, x4, x1, x2)

inst_46564:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000000fffffff; valaddr_reg:x3; val_offset:139692*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139692*0 + 3*484*FLEN/8, x4, x1, x2)

inst_46565:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000001fffffff; valaddr_reg:x3; val_offset:139695*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139695*0 + 3*485*FLEN/8, x4, x1, x2)

inst_46566:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000003fffffff; valaddr_reg:x3; val_offset:139698*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139698*0 + 3*486*FLEN/8, x4, x1, x2)

inst_46567:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000007fffffff; valaddr_reg:x3; val_offset:139701*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139701*0 + 3*487*FLEN/8, x4, x1, x2)

inst_46568:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300000ffffffff; valaddr_reg:x3; val_offset:139704*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139704*0 + 3*488*FLEN/8, x4, x1, x2)

inst_46569:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300001ffffffff; valaddr_reg:x3; val_offset:139707*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139707*0 + 3*489*FLEN/8, x4, x1, x2)

inst_46570:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300003ffffffff; valaddr_reg:x3; val_offset:139710*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139710*0 + 3*490*FLEN/8, x4, x1, x2)

inst_46571:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300007ffffffff; valaddr_reg:x3; val_offset:139713*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139713*0 + 3*491*FLEN/8, x4, x1, x2)

inst_46572:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30000fffffffff; valaddr_reg:x3; val_offset:139716*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139716*0 + 3*492*FLEN/8, x4, x1, x2)

inst_46573:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30001fffffffff; valaddr_reg:x3; val_offset:139719*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139719*0 + 3*493*FLEN/8, x4, x1, x2)

inst_46574:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30003fffffffff; valaddr_reg:x3; val_offset:139722*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139722*0 + 3*494*FLEN/8, x4, x1, x2)

inst_46575:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30007fffffffff; valaddr_reg:x3; val_offset:139725*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139725*0 + 3*495*FLEN/8, x4, x1, x2)

inst_46576:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3000ffffffffff; valaddr_reg:x3; val_offset:139728*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139728*0 + 3*496*FLEN/8, x4, x1, x2)

inst_46577:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3001ffffffffff; valaddr_reg:x3; val_offset:139731*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139731*0 + 3*497*FLEN/8, x4, x1, x2)

inst_46578:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3003ffffffffff; valaddr_reg:x3; val_offset:139734*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139734*0 + 3*498*FLEN/8, x4, x1, x2)

inst_46579:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3007ffffffffff; valaddr_reg:x3; val_offset:139737*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139737*0 + 3*499*FLEN/8, x4, x1, x2)

inst_46580:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b300fffffffffff; valaddr_reg:x3; val_offset:139740*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139740*0 + 3*500*FLEN/8, x4, x1, x2)

inst_46581:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b301fffffffffff; valaddr_reg:x3; val_offset:139743*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139743*0 + 3*501*FLEN/8, x4, x1, x2)

inst_46582:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b303fffffffffff; valaddr_reg:x3; val_offset:139746*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139746*0 + 3*502*FLEN/8, x4, x1, x2)

inst_46583:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b307fffffffffff; valaddr_reg:x3; val_offset:139749*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139749*0 + 3*503*FLEN/8, x4, x1, x2)

inst_46584:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b30ffffffffffff; valaddr_reg:x3; val_offset:139752*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139752*0 + 3*504*FLEN/8, x4, x1, x2)

inst_46585:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b31ffffffffffff; valaddr_reg:x3; val_offset:139755*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139755*0 + 3*505*FLEN/8, x4, x1, x2)

inst_46586:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b33ffffffffffff; valaddr_reg:x3; val_offset:139758*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139758*0 + 3*506*FLEN/8, x4, x1, x2)

inst_46587:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b37ffffffffffff; valaddr_reg:x3; val_offset:139761*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139761*0 + 3*507*FLEN/8, x4, x1, x2)

inst_46588:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b38000000000000; valaddr_reg:x3; val_offset:139764*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139764*0 + 3*508*FLEN/8, x4, x1, x2)

inst_46589:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3c000000000000; valaddr_reg:x3; val_offset:139767*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139767*0 + 3*509*FLEN/8, x4, x1, x2)

inst_46590:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3e000000000000; valaddr_reg:x3; val_offset:139770*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139770*0 + 3*510*FLEN/8, x4, x1, x2)

inst_46591:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3f000000000000; valaddr_reg:x3; val_offset:139773*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139773*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_46592:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3f800000000000; valaddr_reg:x3; val_offset:139776*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139776*0 + 3*512*FLEN/8, x4, x1, x2)

inst_46593:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fc00000000000; valaddr_reg:x3; val_offset:139779*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139779*0 + 3*513*FLEN/8, x4, x1, x2)

inst_46594:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fe00000000000; valaddr_reg:x3; val_offset:139782*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139782*0 + 3*514*FLEN/8, x4, x1, x2)

inst_46595:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ff00000000000; valaddr_reg:x3; val_offset:139785*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139785*0 + 3*515*FLEN/8, x4, x1, x2)

inst_46596:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ff80000000000; valaddr_reg:x3; val_offset:139788*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139788*0 + 3*516*FLEN/8, x4, x1, x2)

inst_46597:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffc0000000000; valaddr_reg:x3; val_offset:139791*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139791*0 + 3*517*FLEN/8, x4, x1, x2)

inst_46598:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffe0000000000; valaddr_reg:x3; val_offset:139794*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139794*0 + 3*518*FLEN/8, x4, x1, x2)

inst_46599:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fff0000000000; valaddr_reg:x3; val_offset:139797*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139797*0 + 3*519*FLEN/8, x4, x1, x2)

inst_46600:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fff8000000000; valaddr_reg:x3; val_offset:139800*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139800*0 + 3*520*FLEN/8, x4, x1, x2)

inst_46601:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffc000000000; valaddr_reg:x3; val_offset:139803*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139803*0 + 3*521*FLEN/8, x4, x1, x2)

inst_46602:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffe000000000; valaddr_reg:x3; val_offset:139806*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139806*0 + 3*522*FLEN/8, x4, x1, x2)

inst_46603:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffff000000000; valaddr_reg:x3; val_offset:139809*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139809*0 + 3*523*FLEN/8, x4, x1, x2)

inst_46604:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffff800000000; valaddr_reg:x3; val_offset:139812*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139812*0 + 3*524*FLEN/8, x4, x1, x2)

inst_46605:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffc00000000; valaddr_reg:x3; val_offset:139815*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139815*0 + 3*525*FLEN/8, x4, x1, x2)

inst_46606:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffe00000000; valaddr_reg:x3; val_offset:139818*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139818*0 + 3*526*FLEN/8, x4, x1, x2)

inst_46607:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffff00000000; valaddr_reg:x3; val_offset:139821*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139821*0 + 3*527*FLEN/8, x4, x1, x2)

inst_46608:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffff80000000; valaddr_reg:x3; val_offset:139824*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139824*0 + 3*528*FLEN/8, x4, x1, x2)

inst_46609:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffc0000000; valaddr_reg:x3; val_offset:139827*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139827*0 + 3*529*FLEN/8, x4, x1, x2)

inst_46610:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffe0000000; valaddr_reg:x3; val_offset:139830*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139830*0 + 3*530*FLEN/8, x4, x1, x2)

inst_46611:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffff0000000; valaddr_reg:x3; val_offset:139833*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139833*0 + 3*531*FLEN/8, x4, x1, x2)

inst_46612:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffff8000000; valaddr_reg:x3; val_offset:139836*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139836*0 + 3*532*FLEN/8, x4, x1, x2)

inst_46613:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffc000000; valaddr_reg:x3; val_offset:139839*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139839*0 + 3*533*FLEN/8, x4, x1, x2)

inst_46614:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffe000000; valaddr_reg:x3; val_offset:139842*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139842*0 + 3*534*FLEN/8, x4, x1, x2)

inst_46615:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffff000000; valaddr_reg:x3; val_offset:139845*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139845*0 + 3*535*FLEN/8, x4, x1, x2)

inst_46616:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffff800000; valaddr_reg:x3; val_offset:139848*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139848*0 + 3*536*FLEN/8, x4, x1, x2)

inst_46617:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffc00000; valaddr_reg:x3; val_offset:139851*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139851*0 + 3*537*FLEN/8, x4, x1, x2)

inst_46618:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffe00000; valaddr_reg:x3; val_offset:139854*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139854*0 + 3*538*FLEN/8, x4, x1, x2)

inst_46619:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffff00000; valaddr_reg:x3; val_offset:139857*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139857*0 + 3*539*FLEN/8, x4, x1, x2)

inst_46620:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffff80000; valaddr_reg:x3; val_offset:139860*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139860*0 + 3*540*FLEN/8, x4, x1, x2)

inst_46621:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffc0000; valaddr_reg:x3; val_offset:139863*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139863*0 + 3*541*FLEN/8, x4, x1, x2)

inst_46622:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffe0000; valaddr_reg:x3; val_offset:139866*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139866*0 + 3*542*FLEN/8, x4, x1, x2)

inst_46623:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffff0000; valaddr_reg:x3; val_offset:139869*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139869*0 + 3*543*FLEN/8, x4, x1, x2)

inst_46624:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffff8000; valaddr_reg:x3; val_offset:139872*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139872*0 + 3*544*FLEN/8, x4, x1, x2)

inst_46625:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffffc000; valaddr_reg:x3; val_offset:139875*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139875*0 + 3*545*FLEN/8, x4, x1, x2)

inst_46626:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffffe000; valaddr_reg:x3; val_offset:139878*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139878*0 + 3*546*FLEN/8, x4, x1, x2)

inst_46627:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffff000; valaddr_reg:x3; val_offset:139881*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139881*0 + 3*547*FLEN/8, x4, x1, x2)

inst_46628:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffff800; valaddr_reg:x3; val_offset:139884*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139884*0 + 3*548*FLEN/8, x4, x1, x2)

inst_46629:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffffc00; valaddr_reg:x3; val_offset:139887*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139887*0 + 3*549*FLEN/8, x4, x1, x2)

inst_46630:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffffe00; valaddr_reg:x3; val_offset:139890*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139890*0 + 3*550*FLEN/8, x4, x1, x2)

inst_46631:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffffff00; valaddr_reg:x3; val_offset:139893*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139893*0 + 3*551*FLEN/8, x4, x1, x2)

inst_46632:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffffff80; valaddr_reg:x3; val_offset:139896*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139896*0 + 3*552*FLEN/8, x4, x1, x2)

inst_46633:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffffffc0; valaddr_reg:x3; val_offset:139899*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139899*0 + 3*553*FLEN/8, x4, x1, x2)

inst_46634:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffffffe0; valaddr_reg:x3; val_offset:139902*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139902*0 + 3*554*FLEN/8, x4, x1, x2)

inst_46635:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffffff0; valaddr_reg:x3; val_offset:139905*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139905*0 + 3*555*FLEN/8, x4, x1, x2)

inst_46636:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffffff8; valaddr_reg:x3; val_offset:139908*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139908*0 + 3*556*FLEN/8, x4, x1, x2)

inst_46637:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffffffc; valaddr_reg:x3; val_offset:139911*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139911*0 + 3*557*FLEN/8, x4, x1, x2)

inst_46638:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3ffffffffffffe; valaddr_reg:x3; val_offset:139914*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139914*0 + 3*558*FLEN/8, x4, x1, x2)

inst_46639:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3b3 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3b3fffffffffffff; valaddr_reg:x3; val_offset:139917*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139917*0 + 3*559*FLEN/8, x4, x1, x2)

inst_46640:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:139920*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139920*0 + 3*560*FLEN/8, x4, x1, x2)

inst_46641:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:139923*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139923*0 + 3*561*FLEN/8, x4, x1, x2)

inst_46642:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:139926*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139926*0 + 3*562*FLEN/8, x4, x1, x2)

inst_46643:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:139929*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139929*0 + 3*563*FLEN/8, x4, x1, x2)

inst_46644:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:139932*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139932*0 + 3*564*FLEN/8, x4, x1, x2)

inst_46645:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:139935*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139935*0 + 3*565*FLEN/8, x4, x1, x2)

inst_46646:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:139938*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139938*0 + 3*566*FLEN/8, x4, x1, x2)

inst_46647:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:139941*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139941*0 + 3*567*FLEN/8, x4, x1, x2)

inst_46648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:139944*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139944*0 + 3*568*FLEN/8, x4, x1, x2)

inst_46649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:139947*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139947*0 + 3*569*FLEN/8, x4, x1, x2)

inst_46650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:139950*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139950*0 + 3*570*FLEN/8, x4, x1, x2)

inst_46651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:139953*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139953*0 + 3*571*FLEN/8, x4, x1, x2)

inst_46652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:139956*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139956*0 + 3*572*FLEN/8, x4, x1, x2)

inst_46653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:139959*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139959*0 + 3*573*FLEN/8, x4, x1, x2)

inst_46654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:139962*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139962*0 + 3*574*FLEN/8, x4, x1, x2)

inst_46655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:139965*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139965*0 + 3*575*FLEN/8, x4, x1, x2)

inst_46656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:139968*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139968*0 + 3*576*FLEN/8, x4, x1, x2)

inst_46657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:139971*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139971*0 + 3*577*FLEN/8, x4, x1, x2)

inst_46658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:139974*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139974*0 + 3*578*FLEN/8, x4, x1, x2)

inst_46659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:139977*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139977*0 + 3*579*FLEN/8, x4, x1, x2)

inst_46660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:139980*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139980*0 + 3*580*FLEN/8, x4, x1, x2)

inst_46661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcae3fcb0778a1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x1da0c509051c2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cae3fcb0778a1; op2val:0x2041da0c509051c2;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:139983*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139983*0 + 3*581*FLEN/8, x4, x1, x2)

inst_46662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000000000; valaddr_reg:x3; val_offset:139986*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139986*0 + 3*582*FLEN/8, x4, x1, x2)

inst_46663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000000001; valaddr_reg:x3; val_offset:139989*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139989*0 + 3*583*FLEN/8, x4, x1, x2)

inst_46664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000000003; valaddr_reg:x3; val_offset:139992*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139992*0 + 3*584*FLEN/8, x4, x1, x2)

inst_46665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000000007; valaddr_reg:x3; val_offset:139995*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139995*0 + 3*585*FLEN/8, x4, x1, x2)

inst_46666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000000000f; valaddr_reg:x3; val_offset:139998*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 139998*0 + 3*586*FLEN/8, x4, x1, x2)

inst_46667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000000001f; valaddr_reg:x3; val_offset:140001*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140001*0 + 3*587*FLEN/8, x4, x1, x2)

inst_46668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000000003f; valaddr_reg:x3; val_offset:140004*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140004*0 + 3*588*FLEN/8, x4, x1, x2)

inst_46669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000000007f; valaddr_reg:x3; val_offset:140007*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140007*0 + 3*589*FLEN/8, x4, x1, x2)

inst_46670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000000000ff; valaddr_reg:x3; val_offset:140010*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140010*0 + 3*590*FLEN/8, x4, x1, x2)

inst_46671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000000001ff; valaddr_reg:x3; val_offset:140013*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140013*0 + 3*591*FLEN/8, x4, x1, x2)

inst_46672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000000003ff; valaddr_reg:x3; val_offset:140016*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140016*0 + 3*592*FLEN/8, x4, x1, x2)

inst_46673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000000007ff; valaddr_reg:x3; val_offset:140019*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140019*0 + 3*593*FLEN/8, x4, x1, x2)

inst_46674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000000fff; valaddr_reg:x3; val_offset:140022*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140022*0 + 3*594*FLEN/8, x4, x1, x2)

inst_46675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000001fff; valaddr_reg:x3; val_offset:140025*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140025*0 + 3*595*FLEN/8, x4, x1, x2)

inst_46676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000003fff; valaddr_reg:x3; val_offset:140028*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140028*0 + 3*596*FLEN/8, x4, x1, x2)

inst_46677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000007fff; valaddr_reg:x3; val_offset:140031*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140031*0 + 3*597*FLEN/8, x4, x1, x2)

inst_46678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000000ffff; valaddr_reg:x3; val_offset:140034*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140034*0 + 3*598*FLEN/8, x4, x1, x2)

inst_46679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000001ffff; valaddr_reg:x3; val_offset:140037*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140037*0 + 3*599*FLEN/8, x4, x1, x2)

inst_46680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000003ffff; valaddr_reg:x3; val_offset:140040*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140040*0 + 3*600*FLEN/8, x4, x1, x2)

inst_46681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000007ffff; valaddr_reg:x3; val_offset:140043*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140043*0 + 3*601*FLEN/8, x4, x1, x2)

inst_46682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000000fffff; valaddr_reg:x3; val_offset:140046*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140046*0 + 3*602*FLEN/8, x4, x1, x2)

inst_46683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000001fffff; valaddr_reg:x3; val_offset:140049*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140049*0 + 3*603*FLEN/8, x4, x1, x2)

inst_46684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000003fffff; valaddr_reg:x3; val_offset:140052*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140052*0 + 3*604*FLEN/8, x4, x1, x2)

inst_46685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000007fffff; valaddr_reg:x3; val_offset:140055*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140055*0 + 3*605*FLEN/8, x4, x1, x2)

inst_46686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000000ffffff; valaddr_reg:x3; val_offset:140058*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140058*0 + 3*606*FLEN/8, x4, x1, x2)

inst_46687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000001ffffff; valaddr_reg:x3; val_offset:140061*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140061*0 + 3*607*FLEN/8, x4, x1, x2)

inst_46688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000003ffffff; valaddr_reg:x3; val_offset:140064*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140064*0 + 3*608*FLEN/8, x4, x1, x2)

inst_46689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000007ffffff; valaddr_reg:x3; val_offset:140067*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140067*0 + 3*609*FLEN/8, x4, x1, x2)

inst_46690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000000fffffff; valaddr_reg:x3; val_offset:140070*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140070*0 + 3*610*FLEN/8, x4, x1, x2)

inst_46691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000001fffffff; valaddr_reg:x3; val_offset:140073*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140073*0 + 3*611*FLEN/8, x4, x1, x2)

inst_46692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000003fffffff; valaddr_reg:x3; val_offset:140076*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140076*0 + 3*612*FLEN/8, x4, x1, x2)

inst_46693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000007fffffff; valaddr_reg:x3; val_offset:140079*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140079*0 + 3*613*FLEN/8, x4, x1, x2)

inst_46694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300000ffffffff; valaddr_reg:x3; val_offset:140082*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140082*0 + 3*614*FLEN/8, x4, x1, x2)

inst_46695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300001ffffffff; valaddr_reg:x3; val_offset:140085*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140085*0 + 3*615*FLEN/8, x4, x1, x2)

inst_46696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300003ffffffff; valaddr_reg:x3; val_offset:140088*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140088*0 + 3*616*FLEN/8, x4, x1, x2)

inst_46697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300007ffffffff; valaddr_reg:x3; val_offset:140091*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140091*0 + 3*617*FLEN/8, x4, x1, x2)

inst_46698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30000fffffffff; valaddr_reg:x3; val_offset:140094*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140094*0 + 3*618*FLEN/8, x4, x1, x2)

inst_46699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30001fffffffff; valaddr_reg:x3; val_offset:140097*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140097*0 + 3*619*FLEN/8, x4, x1, x2)

inst_46700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30003fffffffff; valaddr_reg:x3; val_offset:140100*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140100*0 + 3*620*FLEN/8, x4, x1, x2)

inst_46701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30007fffffffff; valaddr_reg:x3; val_offset:140103*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140103*0 + 3*621*FLEN/8, x4, x1, x2)

inst_46702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3000ffffffffff; valaddr_reg:x3; val_offset:140106*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140106*0 + 3*622*FLEN/8, x4, x1, x2)

inst_46703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3001ffffffffff; valaddr_reg:x3; val_offset:140109*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140109*0 + 3*623*FLEN/8, x4, x1, x2)

inst_46704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3003ffffffffff; valaddr_reg:x3; val_offset:140112*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140112*0 + 3*624*FLEN/8, x4, x1, x2)

inst_46705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3007ffffffffff; valaddr_reg:x3; val_offset:140115*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140115*0 + 3*625*FLEN/8, x4, x1, x2)

inst_46706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba300fffffffffff; valaddr_reg:x3; val_offset:140118*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140118*0 + 3*626*FLEN/8, x4, x1, x2)

inst_46707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba301fffffffffff; valaddr_reg:x3; val_offset:140121*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140121*0 + 3*627*FLEN/8, x4, x1, x2)

inst_46708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba303fffffffffff; valaddr_reg:x3; val_offset:140124*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140124*0 + 3*628*FLEN/8, x4, x1, x2)

inst_46709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba307fffffffffff; valaddr_reg:x3; val_offset:140127*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140127*0 + 3*629*FLEN/8, x4, x1, x2)

inst_46710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba30ffffffffffff; valaddr_reg:x3; val_offset:140130*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140130*0 + 3*630*FLEN/8, x4, x1, x2)

inst_46711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba31ffffffffffff; valaddr_reg:x3; val_offset:140133*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140133*0 + 3*631*FLEN/8, x4, x1, x2)

inst_46712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba33ffffffffffff; valaddr_reg:x3; val_offset:140136*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140136*0 + 3*632*FLEN/8, x4, x1, x2)

inst_46713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba37ffffffffffff; valaddr_reg:x3; val_offset:140139*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140139*0 + 3*633*FLEN/8, x4, x1, x2)

inst_46714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba38000000000000; valaddr_reg:x3; val_offset:140142*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140142*0 + 3*634*FLEN/8, x4, x1, x2)

inst_46715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3c000000000000; valaddr_reg:x3; val_offset:140145*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140145*0 + 3*635*FLEN/8, x4, x1, x2)

inst_46716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3e000000000000; valaddr_reg:x3; val_offset:140148*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140148*0 + 3*636*FLEN/8, x4, x1, x2)

inst_46717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3f000000000000; valaddr_reg:x3; val_offset:140151*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140151*0 + 3*637*FLEN/8, x4, x1, x2)

inst_46718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3f800000000000; valaddr_reg:x3; val_offset:140154*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140154*0 + 3*638*FLEN/8, x4, x1, x2)

inst_46719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fc00000000000; valaddr_reg:x3; val_offset:140157*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140157*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_46720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fe00000000000; valaddr_reg:x3; val_offset:140160*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140160*0 + 3*640*FLEN/8, x4, x1, x2)

inst_46721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ff00000000000; valaddr_reg:x3; val_offset:140163*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140163*0 + 3*641*FLEN/8, x4, x1, x2)

inst_46722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ff80000000000; valaddr_reg:x3; val_offset:140166*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140166*0 + 3*642*FLEN/8, x4, x1, x2)

inst_46723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffc0000000000; valaddr_reg:x3; val_offset:140169*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140169*0 + 3*643*FLEN/8, x4, x1, x2)

inst_46724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffe0000000000; valaddr_reg:x3; val_offset:140172*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140172*0 + 3*644*FLEN/8, x4, x1, x2)

inst_46725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fff0000000000; valaddr_reg:x3; val_offset:140175*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140175*0 + 3*645*FLEN/8, x4, x1, x2)

inst_46726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fff8000000000; valaddr_reg:x3; val_offset:140178*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140178*0 + 3*646*FLEN/8, x4, x1, x2)

inst_46727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffc000000000; valaddr_reg:x3; val_offset:140181*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140181*0 + 3*647*FLEN/8, x4, x1, x2)

inst_46728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffe000000000; valaddr_reg:x3; val_offset:140184*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140184*0 + 3*648*FLEN/8, x4, x1, x2)

inst_46729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffff000000000; valaddr_reg:x3; val_offset:140187*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140187*0 + 3*649*FLEN/8, x4, x1, x2)

inst_46730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffff800000000; valaddr_reg:x3; val_offset:140190*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140190*0 + 3*650*FLEN/8, x4, x1, x2)

inst_46731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffc00000000; valaddr_reg:x3; val_offset:140193*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140193*0 + 3*651*FLEN/8, x4, x1, x2)

inst_46732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffe00000000; valaddr_reg:x3; val_offset:140196*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140196*0 + 3*652*FLEN/8, x4, x1, x2)

inst_46733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffff00000000; valaddr_reg:x3; val_offset:140199*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140199*0 + 3*653*FLEN/8, x4, x1, x2)

inst_46734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffff80000000; valaddr_reg:x3; val_offset:140202*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140202*0 + 3*654*FLEN/8, x4, x1, x2)

inst_46735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffc0000000; valaddr_reg:x3; val_offset:140205*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140205*0 + 3*655*FLEN/8, x4, x1, x2)

inst_46736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffe0000000; valaddr_reg:x3; val_offset:140208*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140208*0 + 3*656*FLEN/8, x4, x1, x2)

inst_46737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffff0000000; valaddr_reg:x3; val_offset:140211*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140211*0 + 3*657*FLEN/8, x4, x1, x2)

inst_46738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffff8000000; valaddr_reg:x3; val_offset:140214*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140214*0 + 3*658*FLEN/8, x4, x1, x2)

inst_46739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffc000000; valaddr_reg:x3; val_offset:140217*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140217*0 + 3*659*FLEN/8, x4, x1, x2)

inst_46740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffe000000; valaddr_reg:x3; val_offset:140220*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140220*0 + 3*660*FLEN/8, x4, x1, x2)

inst_46741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffff000000; valaddr_reg:x3; val_offset:140223*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140223*0 + 3*661*FLEN/8, x4, x1, x2)

inst_46742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffff800000; valaddr_reg:x3; val_offset:140226*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140226*0 + 3*662*FLEN/8, x4, x1, x2)

inst_46743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffc00000; valaddr_reg:x3; val_offset:140229*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140229*0 + 3*663*FLEN/8, x4, x1, x2)

inst_46744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffe00000; valaddr_reg:x3; val_offset:140232*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140232*0 + 3*664*FLEN/8, x4, x1, x2)

inst_46745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffff00000; valaddr_reg:x3; val_offset:140235*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140235*0 + 3*665*FLEN/8, x4, x1, x2)

inst_46746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffff80000; valaddr_reg:x3; val_offset:140238*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140238*0 + 3*666*FLEN/8, x4, x1, x2)

inst_46747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffc0000; valaddr_reg:x3; val_offset:140241*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140241*0 + 3*667*FLEN/8, x4, x1, x2)

inst_46748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffe0000; valaddr_reg:x3; val_offset:140244*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140244*0 + 3*668*FLEN/8, x4, x1, x2)

inst_46749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffff0000; valaddr_reg:x3; val_offset:140247*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140247*0 + 3*669*FLEN/8, x4, x1, x2)

inst_46750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffff8000; valaddr_reg:x3; val_offset:140250*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140250*0 + 3*670*FLEN/8, x4, x1, x2)

inst_46751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffffc000; valaddr_reg:x3; val_offset:140253*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140253*0 + 3*671*FLEN/8, x4, x1, x2)

inst_46752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffffe000; valaddr_reg:x3; val_offset:140256*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140256*0 + 3*672*FLEN/8, x4, x1, x2)

inst_46753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffff000; valaddr_reg:x3; val_offset:140259*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140259*0 + 3*673*FLEN/8, x4, x1, x2)

inst_46754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffff800; valaddr_reg:x3; val_offset:140262*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140262*0 + 3*674*FLEN/8, x4, x1, x2)

inst_46755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffffc00; valaddr_reg:x3; val_offset:140265*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140265*0 + 3*675*FLEN/8, x4, x1, x2)

inst_46756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffffe00; valaddr_reg:x3; val_offset:140268*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140268*0 + 3*676*FLEN/8, x4, x1, x2)

inst_46757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffffff00; valaddr_reg:x3; val_offset:140271*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140271*0 + 3*677*FLEN/8, x4, x1, x2)

inst_46758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffffff80; valaddr_reg:x3; val_offset:140274*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140274*0 + 3*678*FLEN/8, x4, x1, x2)

inst_46759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffffffc0; valaddr_reg:x3; val_offset:140277*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140277*0 + 3*679*FLEN/8, x4, x1, x2)

inst_46760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffffffe0; valaddr_reg:x3; val_offset:140280*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140280*0 + 3*680*FLEN/8, x4, x1, x2)

inst_46761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffffff0; valaddr_reg:x3; val_offset:140283*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140283*0 + 3*681*FLEN/8, x4, x1, x2)

inst_46762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffffff8; valaddr_reg:x3; val_offset:140286*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140286*0 + 3*682*FLEN/8, x4, x1, x2)

inst_46763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffffffc; valaddr_reg:x3; val_offset:140289*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140289*0 + 3*683*FLEN/8, x4, x1, x2)

inst_46764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3ffffffffffffe; valaddr_reg:x3; val_offset:140292*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140292*0 + 3*684*FLEN/8, x4, x1, x2)

inst_46765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3a3 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xba3fffffffffffff; valaddr_reg:x3; val_offset:140295*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140295*0 + 3*685*FLEN/8, x4, x1, x2)

inst_46766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:140298*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140298*0 + 3*686*FLEN/8, x4, x1, x2)

inst_46767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:140301*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140301*0 + 3*687*FLEN/8, x4, x1, x2)

inst_46768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:140304*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140304*0 + 3*688*FLEN/8, x4, x1, x2)

inst_46769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:140307*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140307*0 + 3*689*FLEN/8, x4, x1, x2)

inst_46770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:140310*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140310*0 + 3*690*FLEN/8, x4, x1, x2)

inst_46771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:140313*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140313*0 + 3*691*FLEN/8, x4, x1, x2)

inst_46772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:140316*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140316*0 + 3*692*FLEN/8, x4, x1, x2)

inst_46773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:140319*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140319*0 + 3*693*FLEN/8, x4, x1, x2)

inst_46774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:140322*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140322*0 + 3*694*FLEN/8, x4, x1, x2)

inst_46775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:140325*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140325*0 + 3*695*FLEN/8, x4, x1, x2)

inst_46776:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:140328*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140328*0 + 3*696*FLEN/8, x4, x1, x2)

inst_46777:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:140331*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140331*0 + 3*697*FLEN/8, x4, x1, x2)

inst_46778:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:140334*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140334*0 + 3*698*FLEN/8, x4, x1, x2)

inst_46779:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:140337*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140337*0 + 3*699*FLEN/8, x4, x1, x2)

inst_46780:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:140340*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140340*0 + 3*700*FLEN/8, x4, x1, x2)

inst_46781:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:140343*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140343*0 + 3*701*FLEN/8, x4, x1, x2)

inst_46782:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:140346*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140346*0 + 3*702*FLEN/8, x4, x1, x2)

inst_46783:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:140349*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140349*0 + 3*703*FLEN/8, x4, x1, x2)

inst_46784:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:140352*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140352*0 + 3*704*FLEN/8, x4, x1, x2)

inst_46785:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:140355*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140355*0 + 3*705*FLEN/8, x4, x1, x2)

inst_46786:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:140358*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140358*0 + 3*706*FLEN/8, x4, x1, x2)

inst_46787:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcb4f3175c7901 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x1d5e1a1dea6b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cb4f3175c7901; op2val:0x9fd1d5e1a1dea6b4;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:140361*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140361*0 + 3*707*FLEN/8, x4, x1, x2)

inst_46788:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:140364*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140364*0 + 3*708*FLEN/8, x4, x1, x2)

inst_46789:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:140367*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140367*0 + 3*709*FLEN/8, x4, x1, x2)

inst_46790:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:140370*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140370*0 + 3*710*FLEN/8, x4, x1, x2)

inst_46791:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:140373*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140373*0 + 3*711*FLEN/8, x4, x1, x2)

inst_46792:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:140376*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140376*0 + 3*712*FLEN/8, x4, x1, x2)

inst_46793:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:140379*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140379*0 + 3*713*FLEN/8, x4, x1, x2)

inst_46794:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:140382*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140382*0 + 3*714*FLEN/8, x4, x1, x2)

inst_46795:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:140385*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140385*0 + 3*715*FLEN/8, x4, x1, x2)

inst_46796:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:140388*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140388*0 + 3*716*FLEN/8, x4, x1, x2)

inst_46797:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:140391*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140391*0 + 3*717*FLEN/8, x4, x1, x2)

inst_46798:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:140394*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140394*0 + 3*718*FLEN/8, x4, x1, x2)

inst_46799:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:140397*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140397*0 + 3*719*FLEN/8, x4, x1, x2)

inst_46800:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:140400*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140400*0 + 3*720*FLEN/8, x4, x1, x2)

inst_46801:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:140403*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140403*0 + 3*721*FLEN/8, x4, x1, x2)

inst_46802:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:140406*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140406*0 + 3*722*FLEN/8, x4, x1, x2)

inst_46803:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:140409*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140409*0 + 3*723*FLEN/8, x4, x1, x2)

inst_46804:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:140412*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140412*0 + 3*724*FLEN/8, x4, x1, x2)

inst_46805:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:140415*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140415*0 + 3*725*FLEN/8, x4, x1, x2)

inst_46806:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:140418*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140418*0 + 3*726*FLEN/8, x4, x1, x2)

inst_46807:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:140421*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140421*0 + 3*727*FLEN/8, x4, x1, x2)

inst_46808:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:140424*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140424*0 + 3*728*FLEN/8, x4, x1, x2)

inst_46809:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:140427*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140427*0 + 3*729*FLEN/8, x4, x1, x2)

inst_46810:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000000000; valaddr_reg:x3; val_offset:140430*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140430*0 + 3*730*FLEN/8, x4, x1, x2)

inst_46811:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000000001; valaddr_reg:x3; val_offset:140433*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140433*0 + 3*731*FLEN/8, x4, x1, x2)

inst_46812:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000000003; valaddr_reg:x3; val_offset:140436*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140436*0 + 3*732*FLEN/8, x4, x1, x2)

inst_46813:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000000007; valaddr_reg:x3; val_offset:140439*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140439*0 + 3*733*FLEN/8, x4, x1, x2)

inst_46814:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000000000f; valaddr_reg:x3; val_offset:140442*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140442*0 + 3*734*FLEN/8, x4, x1, x2)

inst_46815:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000000001f; valaddr_reg:x3; val_offset:140445*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140445*0 + 3*735*FLEN/8, x4, x1, x2)

inst_46816:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000000003f; valaddr_reg:x3; val_offset:140448*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140448*0 + 3*736*FLEN/8, x4, x1, x2)

inst_46817:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000000007f; valaddr_reg:x3; val_offset:140451*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140451*0 + 3*737*FLEN/8, x4, x1, x2)

inst_46818:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000000000ff; valaddr_reg:x3; val_offset:140454*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140454*0 + 3*738*FLEN/8, x4, x1, x2)

inst_46819:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000000001ff; valaddr_reg:x3; val_offset:140457*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140457*0 + 3*739*FLEN/8, x4, x1, x2)

inst_46820:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000000003ff; valaddr_reg:x3; val_offset:140460*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140460*0 + 3*740*FLEN/8, x4, x1, x2)

inst_46821:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000000007ff; valaddr_reg:x3; val_offset:140463*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140463*0 + 3*741*FLEN/8, x4, x1, x2)

inst_46822:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000000fff; valaddr_reg:x3; val_offset:140466*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140466*0 + 3*742*FLEN/8, x4, x1, x2)

inst_46823:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000001fff; valaddr_reg:x3; val_offset:140469*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140469*0 + 3*743*FLEN/8, x4, x1, x2)

inst_46824:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000003fff; valaddr_reg:x3; val_offset:140472*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140472*0 + 3*744*FLEN/8, x4, x1, x2)

inst_46825:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000007fff; valaddr_reg:x3; val_offset:140475*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140475*0 + 3*745*FLEN/8, x4, x1, x2)

inst_46826:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000000ffff; valaddr_reg:x3; val_offset:140478*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140478*0 + 3*746*FLEN/8, x4, x1, x2)

inst_46827:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000001ffff; valaddr_reg:x3; val_offset:140481*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140481*0 + 3*747*FLEN/8, x4, x1, x2)

inst_46828:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000003ffff; valaddr_reg:x3; val_offset:140484*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140484*0 + 3*748*FLEN/8, x4, x1, x2)

inst_46829:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000007ffff; valaddr_reg:x3; val_offset:140487*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140487*0 + 3*749*FLEN/8, x4, x1, x2)

inst_46830:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000000fffff; valaddr_reg:x3; val_offset:140490*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140490*0 + 3*750*FLEN/8, x4, x1, x2)

inst_46831:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000001fffff; valaddr_reg:x3; val_offset:140493*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140493*0 + 3*751*FLEN/8, x4, x1, x2)

inst_46832:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000003fffff; valaddr_reg:x3; val_offset:140496*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140496*0 + 3*752*FLEN/8, x4, x1, x2)

inst_46833:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000007fffff; valaddr_reg:x3; val_offset:140499*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140499*0 + 3*753*FLEN/8, x4, x1, x2)

inst_46834:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000000ffffff; valaddr_reg:x3; val_offset:140502*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140502*0 + 3*754*FLEN/8, x4, x1, x2)

inst_46835:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000001ffffff; valaddr_reg:x3; val_offset:140505*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140505*0 + 3*755*FLEN/8, x4, x1, x2)

inst_46836:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000003ffffff; valaddr_reg:x3; val_offset:140508*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140508*0 + 3*756*FLEN/8, x4, x1, x2)

inst_46837:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000007ffffff; valaddr_reg:x3; val_offset:140511*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140511*0 + 3*757*FLEN/8, x4, x1, x2)

inst_46838:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000000fffffff; valaddr_reg:x3; val_offset:140514*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140514*0 + 3*758*FLEN/8, x4, x1, x2)

inst_46839:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000001fffffff; valaddr_reg:x3; val_offset:140517*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140517*0 + 3*759*FLEN/8, x4, x1, x2)

inst_46840:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000003fffffff; valaddr_reg:x3; val_offset:140520*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140520*0 + 3*760*FLEN/8, x4, x1, x2)

inst_46841:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a000007fffffff; valaddr_reg:x3; val_offset:140523*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140523*0 + 3*761*FLEN/8, x4, x1, x2)

inst_46842:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00000ffffffff; valaddr_reg:x3; val_offset:140526*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140526*0 + 3*762*FLEN/8, x4, x1, x2)

inst_46843:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00001ffffffff; valaddr_reg:x3; val_offset:140529*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140529*0 + 3*763*FLEN/8, x4, x1, x2)

inst_46844:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00003ffffffff; valaddr_reg:x3; val_offset:140532*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140532*0 + 3*764*FLEN/8, x4, x1, x2)

inst_46845:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a00007ffffffff; valaddr_reg:x3; val_offset:140535*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140535*0 + 3*765*FLEN/8, x4, x1, x2)

inst_46846:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0000fffffffff; valaddr_reg:x3; val_offset:140538*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140538*0 + 3*766*FLEN/8, x4, x1, x2)

inst_46847:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xcbddd2cf32b99 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02a and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9cbddd2cf32b99; op2val:0x0;
op3val:0x2a0001fffffffff; valaddr_reg:x3; val_offset:140541*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 140541*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789633482751,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789700591615,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100789834809343,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100790103244799,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100790640115711,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100791713857535,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100793861341183,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100798156308479,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100806746243071,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100823926112255,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100858285850623,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126100927005327359,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126101064444280831,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126101339322187775,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126101889078001663,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126102988589629439,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126105187612884991,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126109585659396095,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126118381752418303,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126135973938462719,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126171158310551551,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126241527054729215,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126382264543084543,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(126663739519795199,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(127226689473216511,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(128352589380059135,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(128352589380059136,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(129478489286901760,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130041439240323072,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130322914217033728,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130463651705389056,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130534020449566720,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130569204821655552,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130586797007699968,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130595593100722176,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130599991147233280,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130602190170488832,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130603289682116608,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130603839437930496,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604114315837440,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604251754790912,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604320474267648,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604354834006016,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604372013875200,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604380603809792,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604384898777088,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604387046260736,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604388120002560,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604388656873472,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604388925308928,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389059526656,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389126635520,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389160189952,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389176967168,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389185355776,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389189550080,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389191647232,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389192695808,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193220096,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193482240,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193613312,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193678848,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193711616,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193728000,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193736192,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193740288,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193742336,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193743360,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193743872,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744128,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744256,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744320,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744352,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744368,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744376,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744380,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744382,64,FLEN)
NAN_BOXED(6889475085211281307,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(130604389193744383,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711744,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711745,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711747,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711751,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711759,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711775,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711807,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711871,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711999,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151712255,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151712767,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151713791,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151715839,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151719935,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151728127,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151744511,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151777279,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151842815,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151973887,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376152236031,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376152760319,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376153808895,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376155906047,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376160100351,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376168488959,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376185266175,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376218820607,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376285929471,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376420147199,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376688582655,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230377225453567,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230378299195391,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230380446679039,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230384741646335,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230393331580927,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230410511450111,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230444871188479,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230513590665215,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230651029618687,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230925907525631,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288231475663339519,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288232575174967295,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288234774198222847,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288239172244733951,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288247968337756159,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288265560523800575,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288300744895889407,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288371113640067071,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288511851128422399,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288793326105133055,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(289356276058554367,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(290482175965396991,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(290482175965396992,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(291608075872239616,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292171025825660928,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292452500802371584,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292593238290726912,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292663607034904576,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292698791406993408,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292716383593037824,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292725179686060032,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292729577732571136,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292731776755826688,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292732876267454464,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733426023268352,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733700901175296,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733838340128768,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733907059605504,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733941419343872,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733958599213056,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733967189147648,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733971484114944,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733973631598592,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733974705340416,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975242211328,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975510646784,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975644864512,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975711973376,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975745527808,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975762305024,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975770693632,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975774887936,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975776985088,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778033664,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778557952,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778820096,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778951168,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779016704,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779049472,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779065856,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779074048,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779078144,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779080192,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081216,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081728,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081984,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082112,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082176,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082208,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082224,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082232,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082236,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082238,64,FLEN)
NAN_BOXED(6889509153863169537,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082239,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305664,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305665,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305667,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305671,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305679,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305695,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305727,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305791,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648305919,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648306175,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648306687,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648307711,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648309759,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648313855,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648322047,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648338431,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648371199,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648436735,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648567807,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042648829951,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042649354239,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042650402815,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042652499967,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042656694271,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042665082879,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042681860095,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042715414527,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042782523391,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952042916741119,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952043185176575,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952043722047487,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952044795789311,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952046943272959,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952051238240255,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952059828174847,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952077008044031,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952111367782399,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952180087259135,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952317526212607,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318952592404119551,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318953142159933439,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318954241671561215,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318956440694816767,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318960838741327871,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318969634834350079,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4318987227020394495,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4319022411392483327,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4319092780136660991,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4319233517625016319,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4319514992601726975,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4320077942555148287,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4321203842461990911,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4321203842461990912,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4322329742368833536,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4322892692322254848,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323174167298965504,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323314904787320832,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323385273531498496,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323420457903587328,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323438050089631744,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323446846182653952,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323451244229165056,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323453443252420608,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323454542764048384,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455092519862272,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455367397769216,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455504836722688,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455573556199424,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455607915937792,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455625095806976,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455633685741568,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455637980708864,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455640128192512,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455641201934336,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455641738805248,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642007240704,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642141458432,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642208567296,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642242121728,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642258898944,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642267287552,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642271481856,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642273579008,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642274627584,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275151872,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275414016,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275545088,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275610624,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275643392,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275659776,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275667968,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275672064,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275674112,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275675136,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275675648,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275675904,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275676032,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275676096,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275676128,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275676144,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275676152,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275676156,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275676158,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4323455642275676159,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6889541222427818049,64,FLEN)
NAN_BOXED(2324398561303804910,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703744,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703745,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703747,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703751,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703759,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703775,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703807,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703871,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703999,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892704255,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892704767,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892705791,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892707839,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892711935,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892720127,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892736511,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892769279,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892834815,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892965887,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630893228031,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630893752319,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630894800895,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630896898047,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630901092351,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630909480959,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630926258175,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630959812607,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429631026921471,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429631161139199,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429631429574655,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429631966445567,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429633040187391,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429635187671039,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429639482638335,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429648072572927,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429665252442111,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429699612180479,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429768331657215,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429905770610687,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295430180648517631,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295430730404331519,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295431829915959295,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295434028939214847,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295438426985725951,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295447223078748159,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295464815264792575,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295499999636881407,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295570368381059071,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295711105869414399,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295992580846125055,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9296555530799546367,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9297681430706388991,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9297681430706388992,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9298807330613231616,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299370280566652928,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299651755543363584,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299792493031718912,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299862861775896576,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299898046147985408,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299915638334029824,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299924434427052032,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299928832473563136,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299931031496818688,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299932131008446464,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299932680764260352,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299932955642167296,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933093081120768,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933161800597504,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933196160335872,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933213340205056,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933221930139648,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933226225106944,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933228372590592,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933229446332416,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933229983203328,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230251638784,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230385856512,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230452965376,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230486519808,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230503297024,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230511685632,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230515879936,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230517977088,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230519025664,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230519549952,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230519812096,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230519943168,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520008704,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520041472,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520057856,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520066048,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520070144,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520072192,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520073216,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520073728,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520073984,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074112,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074176,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074208,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074224,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074232,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074236,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074238,64,FLEN)
NAN_BOXED(6889547597488512351,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074239,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859712,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859713,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859715,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859719,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859727,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859743,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859775,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859839,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119859967,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119860223,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119860735,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119861759,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119863807,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119867903,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119876095,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119892479,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119925247,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847119990783,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847120121855,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847120383999,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847120908287,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847121956863,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847124054015,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847128248319,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847136636927,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847153414143,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847186968575,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847254077439,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847388295167,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908847656730623,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908848193601535,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908849267343359,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908851414827007,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908855709794303,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908864299728895,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908881479598079,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908915839336447,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264908984558813183,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264909121997766655,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264909396875673599,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264909946631487487,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264911046143115263,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264913245166370815,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264917643212881919,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264926439305904127,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264944031491948543,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4264979215864037375,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4265049584608215039,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4265190322096570367,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4265471797073281023,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4266034747026702335,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4267160646933544959,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4267160646933544960,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4268286546840387584,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4268849496793808896,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269130971770519552,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269271709258874880,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269342078003052544,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269377262375141376,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269394854561185792,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269403650654208000,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269408048700719104,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269410247723974656,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269411347235602432,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269411896991416320,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412171869323264,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412309308276736,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412378027753472,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412412387491840,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412429567361024,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412438157295616,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412442452262912,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412444599746560,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412445673488384,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446210359296,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446478794752,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446613012480,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446680121344,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446713675776,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446730452992,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446738841600,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446743035904,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446745133056,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446746181632,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446746705920,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446746968064,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747099136,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747164672,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747197440,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747213824,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747222016,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747226112,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747228160,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747229184,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747229696,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747229952,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747230080,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747230144,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747230176,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747230192,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747230200,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747230204,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747230206,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4269412446747230207,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6889573118982453409,64,FLEN)
NAN_BOXED(2324378629125984706,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707584,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707585,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707587,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707591,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707599,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707615,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707647,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707711,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936707839,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936708095,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936708607,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936709631,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936711679,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936715775,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936723967,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936740351,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936773119,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936838655,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289936969727,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289937231871,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289937756159,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289938804735,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289940901887,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289945096191,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289953484799,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223289970262015,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223290003816447,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223290070925311,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223290205143039,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223290473578495,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223291010449407,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223292084191231,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223294231674879,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223298526642175,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223307116576767,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223324296445951,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223358656184319,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223427375661055,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223564814614527,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416223839692521471,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416224389448335359,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416225488959963135,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416227687983218687,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416232086029729791,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416240882122751999,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416258474308796415,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416293658680885247,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416364027425062911,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416504764913418239,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13416786239890128895,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13417349189843550207,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13418475089750392831,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13418475089750392832,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13419600989657235456,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420163939610656768,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420445414587367424,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420586152075722752,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420656520819900416,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420691705191989248,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420709297378033664,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420718093471055872,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420722491517566976,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420724690540822528,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420725790052450304,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726339808264192,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726614686171136,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726752125124608,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726820844601344,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726855204339712,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726872384208896,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726880974143488,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726885269110784,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726887416594432,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726888490336256,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889027207168,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889295642624,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889429860352,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889496969216,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889530523648,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889547300864,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889555689472,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889559883776,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889561980928,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889563029504,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889563553792,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889563815936,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889563947008,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564012544,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564045312,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564061696,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564069888,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564073984,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564076032,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564077056,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564077568,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564077824,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564077952,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564078016,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564078048,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564078064,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564078072,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564078076,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564078078,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13420726889564078079,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6889580486132005121,64,FLEN)
NAN_BOXED(11516220887223150260,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560832,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560833,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560835,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560839,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560847,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560863,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560895,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349560959,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349561087,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349561343,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349561855,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349562879,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349564927,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349569023,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349577215,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349593599,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349626367,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349691903,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184349822975,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184350085119,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184350609407,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184351657983,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184353755135,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184357949439,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184366338047,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184383115263,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184416669695,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184483778559,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184617996287,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151184886431743,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151185423302655,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151186497044479,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151188644528127,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151192939495423,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151201529430015,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151218709299199,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151253069037567,64,FLEN)
NAN_BOXED(6889590287609572249,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(189151321788514303,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
