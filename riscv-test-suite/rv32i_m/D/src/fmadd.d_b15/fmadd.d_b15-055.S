
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_41472:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3a1 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xba1ffffffffffffe; valaddr_reg:x3; val_offset:124416*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124416*0 + 3*0*FLEN/8, x4, x1, x2)

inst_41473:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3a1 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xba1fffffffffffff; valaddr_reg:x3; val_offset:124419*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124419*0 + 3*1*FLEN/8, x4, x1, x2)

inst_41474:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:124422*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124422*0 + 3*2*FLEN/8, x4, x1, x2)

inst_41475:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:124425*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124425*0 + 3*3*FLEN/8, x4, x1, x2)

inst_41476:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:124428*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124428*0 + 3*4*FLEN/8, x4, x1, x2)

inst_41477:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:124431*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124431*0 + 3*5*FLEN/8, x4, x1, x2)

inst_41478:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:124434*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124434*0 + 3*6*FLEN/8, x4, x1, x2)

inst_41479:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:124437*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124437*0 + 3*7*FLEN/8, x4, x1, x2)

inst_41480:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:124440*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124440*0 + 3*8*FLEN/8, x4, x1, x2)

inst_41481:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:124443*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124443*0 + 3*9*FLEN/8, x4, x1, x2)

inst_41482:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:124446*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124446*0 + 3*10*FLEN/8, x4, x1, x2)

inst_41483:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:124449*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124449*0 + 3*11*FLEN/8, x4, x1, x2)

inst_41484:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:124452*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124452*0 + 3*12*FLEN/8, x4, x1, x2)

inst_41485:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:124455*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124455*0 + 3*13*FLEN/8, x4, x1, x2)

inst_41486:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:124458*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124458*0 + 3*14*FLEN/8, x4, x1, x2)

inst_41487:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:124461*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124461*0 + 3*15*FLEN/8, x4, x1, x2)

inst_41488:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:124464*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124464*0 + 3*16*FLEN/8, x4, x1, x2)

inst_41489:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:124467*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124467*0 + 3*17*FLEN/8, x4, x1, x2)

inst_41490:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:124470*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124470*0 + 3*18*FLEN/8, x4, x1, x2)

inst_41491:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:124473*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124473*0 + 3*19*FLEN/8, x4, x1, x2)

inst_41492:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:124476*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124476*0 + 3*20*FLEN/8, x4, x1, x2)

inst_41493:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:124479*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124479*0 + 3*21*FLEN/8, x4, x1, x2)

inst_41494:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:124482*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124482*0 + 3*22*FLEN/8, x4, x1, x2)

inst_41495:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x934264473a8f3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4508122b05dbd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9934264473a8f3; op2val:0x9fd4508122b05dbd;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:124485*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124485*0 + 3*23*FLEN/8, x4, x1, x2)

inst_41496:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000000000; valaddr_reg:x3; val_offset:124488*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124488*0 + 3*24*FLEN/8, x4, x1, x2)

inst_41497:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000000001; valaddr_reg:x3; val_offset:124491*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124491*0 + 3*25*FLEN/8, x4, x1, x2)

inst_41498:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000000003; valaddr_reg:x3; val_offset:124494*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124494*0 + 3*26*FLEN/8, x4, x1, x2)

inst_41499:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000000007; valaddr_reg:x3; val_offset:124497*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124497*0 + 3*27*FLEN/8, x4, x1, x2)

inst_41500:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000000000f; valaddr_reg:x3; val_offset:124500*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124500*0 + 3*28*FLEN/8, x4, x1, x2)

inst_41501:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000000001f; valaddr_reg:x3; val_offset:124503*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124503*0 + 3*29*FLEN/8, x4, x1, x2)

inst_41502:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000000003f; valaddr_reg:x3; val_offset:124506*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124506*0 + 3*30*FLEN/8, x4, x1, x2)

inst_41503:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000000007f; valaddr_reg:x3; val_offset:124509*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124509*0 + 3*31*FLEN/8, x4, x1, x2)

inst_41504:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000000000ff; valaddr_reg:x3; val_offset:124512*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124512*0 + 3*32*FLEN/8, x4, x1, x2)

inst_41505:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000000001ff; valaddr_reg:x3; val_offset:124515*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124515*0 + 3*33*FLEN/8, x4, x1, x2)

inst_41506:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000000003ff; valaddr_reg:x3; val_offset:124518*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124518*0 + 3*34*FLEN/8, x4, x1, x2)

inst_41507:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000000007ff; valaddr_reg:x3; val_offset:124521*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124521*0 + 3*35*FLEN/8, x4, x1, x2)

inst_41508:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000000fff; valaddr_reg:x3; val_offset:124524*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124524*0 + 3*36*FLEN/8, x4, x1, x2)

inst_41509:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000001fff; valaddr_reg:x3; val_offset:124527*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124527*0 + 3*37*FLEN/8, x4, x1, x2)

inst_41510:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000003fff; valaddr_reg:x3; val_offset:124530*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124530*0 + 3*38*FLEN/8, x4, x1, x2)

inst_41511:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000007fff; valaddr_reg:x3; val_offset:124533*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124533*0 + 3*39*FLEN/8, x4, x1, x2)

inst_41512:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000000ffff; valaddr_reg:x3; val_offset:124536*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124536*0 + 3*40*FLEN/8, x4, x1, x2)

inst_41513:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000001ffff; valaddr_reg:x3; val_offset:124539*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124539*0 + 3*41*FLEN/8, x4, x1, x2)

inst_41514:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000003ffff; valaddr_reg:x3; val_offset:124542*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124542*0 + 3*42*FLEN/8, x4, x1, x2)

inst_41515:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000007ffff; valaddr_reg:x3; val_offset:124545*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124545*0 + 3*43*FLEN/8, x4, x1, x2)

inst_41516:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000000fffff; valaddr_reg:x3; val_offset:124548*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124548*0 + 3*44*FLEN/8, x4, x1, x2)

inst_41517:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000001fffff; valaddr_reg:x3; val_offset:124551*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124551*0 + 3*45*FLEN/8, x4, x1, x2)

inst_41518:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000003fffff; valaddr_reg:x3; val_offset:124554*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124554*0 + 3*46*FLEN/8, x4, x1, x2)

inst_41519:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000007fffff; valaddr_reg:x3; val_offset:124557*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124557*0 + 3*47*FLEN/8, x4, x1, x2)

inst_41520:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000000ffffff; valaddr_reg:x3; val_offset:124560*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124560*0 + 3*48*FLEN/8, x4, x1, x2)

inst_41521:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000001ffffff; valaddr_reg:x3; val_offset:124563*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124563*0 + 3*49*FLEN/8, x4, x1, x2)

inst_41522:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000003ffffff; valaddr_reg:x3; val_offset:124566*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124566*0 + 3*50*FLEN/8, x4, x1, x2)

inst_41523:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000007ffffff; valaddr_reg:x3; val_offset:124569*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124569*0 + 3*51*FLEN/8, x4, x1, x2)

inst_41524:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000000fffffff; valaddr_reg:x3; val_offset:124572*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124572*0 + 3*52*FLEN/8, x4, x1, x2)

inst_41525:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000001fffffff; valaddr_reg:x3; val_offset:124575*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124575*0 + 3*53*FLEN/8, x4, x1, x2)

inst_41526:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000003fffffff; valaddr_reg:x3; val_offset:124578*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124578*0 + 3*54*FLEN/8, x4, x1, x2)

inst_41527:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000007fffffff; valaddr_reg:x3; val_offset:124581*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124581*0 + 3*55*FLEN/8, x4, x1, x2)

inst_41528:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00000ffffffff; valaddr_reg:x3; val_offset:124584*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124584*0 + 3*56*FLEN/8, x4, x1, x2)

inst_41529:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00001ffffffff; valaddr_reg:x3; val_offset:124587*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124587*0 + 3*57*FLEN/8, x4, x1, x2)

inst_41530:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00003ffffffff; valaddr_reg:x3; val_offset:124590*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124590*0 + 3*58*FLEN/8, x4, x1, x2)

inst_41531:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00007ffffffff; valaddr_reg:x3; val_offset:124593*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124593*0 + 3*59*FLEN/8, x4, x1, x2)

inst_41532:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0000fffffffff; valaddr_reg:x3; val_offset:124596*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124596*0 + 3*60*FLEN/8, x4, x1, x2)

inst_41533:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0001fffffffff; valaddr_reg:x3; val_offset:124599*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124599*0 + 3*61*FLEN/8, x4, x1, x2)

inst_41534:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0003fffffffff; valaddr_reg:x3; val_offset:124602*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124602*0 + 3*62*FLEN/8, x4, x1, x2)

inst_41535:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0007fffffffff; valaddr_reg:x3; val_offset:124605*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124605*0 + 3*63*FLEN/8, x4, x1, x2)

inst_41536:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f000ffffffffff; valaddr_reg:x3; val_offset:124608*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124608*0 + 3*64*FLEN/8, x4, x1, x2)

inst_41537:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f001ffffffffff; valaddr_reg:x3; val_offset:124611*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124611*0 + 3*65*FLEN/8, x4, x1, x2)

inst_41538:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f003ffffffffff; valaddr_reg:x3; val_offset:124614*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124614*0 + 3*66*FLEN/8, x4, x1, x2)

inst_41539:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f007ffffffffff; valaddr_reg:x3; val_offset:124617*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124617*0 + 3*67*FLEN/8, x4, x1, x2)

inst_41540:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f00fffffffffff; valaddr_reg:x3; val_offset:124620*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124620*0 + 3*68*FLEN/8, x4, x1, x2)

inst_41541:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f01fffffffffff; valaddr_reg:x3; val_offset:124623*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124623*0 + 3*69*FLEN/8, x4, x1, x2)

inst_41542:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f03fffffffffff; valaddr_reg:x3; val_offset:124626*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124626*0 + 3*70*FLEN/8, x4, x1, x2)

inst_41543:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f07fffffffffff; valaddr_reg:x3; val_offset:124629*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124629*0 + 3*71*FLEN/8, x4, x1, x2)

inst_41544:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f0ffffffffffff; valaddr_reg:x3; val_offset:124632*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124632*0 + 3*72*FLEN/8, x4, x1, x2)

inst_41545:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f1ffffffffffff; valaddr_reg:x3; val_offset:124635*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124635*0 + 3*73*FLEN/8, x4, x1, x2)

inst_41546:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f3ffffffffffff; valaddr_reg:x3; val_offset:124638*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124638*0 + 3*74*FLEN/8, x4, x1, x2)

inst_41547:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f7ffffffffffff; valaddr_reg:x3; val_offset:124641*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124641*0 + 3*75*FLEN/8, x4, x1, x2)

inst_41548:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7f8000000000000; valaddr_reg:x3; val_offset:124644*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124644*0 + 3*76*FLEN/8, x4, x1, x2)

inst_41549:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fc000000000000; valaddr_reg:x3; val_offset:124647*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124647*0 + 3*77*FLEN/8, x4, x1, x2)

inst_41550:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fe000000000000; valaddr_reg:x3; val_offset:124650*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124650*0 + 3*78*FLEN/8, x4, x1, x2)

inst_41551:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ff000000000000; valaddr_reg:x3; val_offset:124653*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124653*0 + 3*79*FLEN/8, x4, x1, x2)

inst_41552:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ff800000000000; valaddr_reg:x3; val_offset:124656*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124656*0 + 3*80*FLEN/8, x4, x1, x2)

inst_41553:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffc00000000000; valaddr_reg:x3; val_offset:124659*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124659*0 + 3*81*FLEN/8, x4, x1, x2)

inst_41554:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffe00000000000; valaddr_reg:x3; val_offset:124662*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124662*0 + 3*82*FLEN/8, x4, x1, x2)

inst_41555:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fff00000000000; valaddr_reg:x3; val_offset:124665*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124665*0 + 3*83*FLEN/8, x4, x1, x2)

inst_41556:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fff80000000000; valaddr_reg:x3; val_offset:124668*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124668*0 + 3*84*FLEN/8, x4, x1, x2)

inst_41557:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffc0000000000; valaddr_reg:x3; val_offset:124671*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124671*0 + 3*85*FLEN/8, x4, x1, x2)

inst_41558:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffe0000000000; valaddr_reg:x3; val_offset:124674*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124674*0 + 3*86*FLEN/8, x4, x1, x2)

inst_41559:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffff0000000000; valaddr_reg:x3; val_offset:124677*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124677*0 + 3*87*FLEN/8, x4, x1, x2)

inst_41560:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffff8000000000; valaddr_reg:x3; val_offset:124680*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124680*0 + 3*88*FLEN/8, x4, x1, x2)

inst_41561:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffc000000000; valaddr_reg:x3; val_offset:124683*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124683*0 + 3*89*FLEN/8, x4, x1, x2)

inst_41562:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffe000000000; valaddr_reg:x3; val_offset:124686*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124686*0 + 3*90*FLEN/8, x4, x1, x2)

inst_41563:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffff000000000; valaddr_reg:x3; val_offset:124689*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124689*0 + 3*91*FLEN/8, x4, x1, x2)

inst_41564:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffff800000000; valaddr_reg:x3; val_offset:124692*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124692*0 + 3*92*FLEN/8, x4, x1, x2)

inst_41565:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffc00000000; valaddr_reg:x3; val_offset:124695*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124695*0 + 3*93*FLEN/8, x4, x1, x2)

inst_41566:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffe00000000; valaddr_reg:x3; val_offset:124698*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124698*0 + 3*94*FLEN/8, x4, x1, x2)

inst_41567:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffff00000000; valaddr_reg:x3; val_offset:124701*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124701*0 + 3*95*FLEN/8, x4, x1, x2)

inst_41568:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffff80000000; valaddr_reg:x3; val_offset:124704*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124704*0 + 3*96*FLEN/8, x4, x1, x2)

inst_41569:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffc0000000; valaddr_reg:x3; val_offset:124707*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124707*0 + 3*97*FLEN/8, x4, x1, x2)

inst_41570:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffe0000000; valaddr_reg:x3; val_offset:124710*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124710*0 + 3*98*FLEN/8, x4, x1, x2)

inst_41571:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffff0000000; valaddr_reg:x3; val_offset:124713*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124713*0 + 3*99*FLEN/8, x4, x1, x2)

inst_41572:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffff8000000; valaddr_reg:x3; val_offset:124716*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124716*0 + 3*100*FLEN/8, x4, x1, x2)

inst_41573:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffc000000; valaddr_reg:x3; val_offset:124719*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124719*0 + 3*101*FLEN/8, x4, x1, x2)

inst_41574:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffe000000; valaddr_reg:x3; val_offset:124722*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124722*0 + 3*102*FLEN/8, x4, x1, x2)

inst_41575:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffff000000; valaddr_reg:x3; val_offset:124725*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124725*0 + 3*103*FLEN/8, x4, x1, x2)

inst_41576:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffff800000; valaddr_reg:x3; val_offset:124728*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124728*0 + 3*104*FLEN/8, x4, x1, x2)

inst_41577:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffc00000; valaddr_reg:x3; val_offset:124731*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124731*0 + 3*105*FLEN/8, x4, x1, x2)

inst_41578:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffe00000; valaddr_reg:x3; val_offset:124734*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124734*0 + 3*106*FLEN/8, x4, x1, x2)

inst_41579:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffff00000; valaddr_reg:x3; val_offset:124737*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124737*0 + 3*107*FLEN/8, x4, x1, x2)

inst_41580:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffff80000; valaddr_reg:x3; val_offset:124740*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124740*0 + 3*108*FLEN/8, x4, x1, x2)

inst_41581:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffc0000; valaddr_reg:x3; val_offset:124743*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124743*0 + 3*109*FLEN/8, x4, x1, x2)

inst_41582:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffe0000; valaddr_reg:x3; val_offset:124746*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124746*0 + 3*110*FLEN/8, x4, x1, x2)

inst_41583:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffff0000; valaddr_reg:x3; val_offset:124749*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124749*0 + 3*111*FLEN/8, x4, x1, x2)

inst_41584:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffff8000; valaddr_reg:x3; val_offset:124752*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124752*0 + 3*112*FLEN/8, x4, x1, x2)

inst_41585:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffffc000; valaddr_reg:x3; val_offset:124755*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124755*0 + 3*113*FLEN/8, x4, x1, x2)

inst_41586:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffffe000; valaddr_reg:x3; val_offset:124758*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124758*0 + 3*114*FLEN/8, x4, x1, x2)

inst_41587:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffff000; valaddr_reg:x3; val_offset:124761*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124761*0 + 3*115*FLEN/8, x4, x1, x2)

inst_41588:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffff800; valaddr_reg:x3; val_offset:124764*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124764*0 + 3*116*FLEN/8, x4, x1, x2)

inst_41589:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffffc00; valaddr_reg:x3; val_offset:124767*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124767*0 + 3*117*FLEN/8, x4, x1, x2)

inst_41590:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffffe00; valaddr_reg:x3; val_offset:124770*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124770*0 + 3*118*FLEN/8, x4, x1, x2)

inst_41591:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffffff00; valaddr_reg:x3; val_offset:124773*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124773*0 + 3*119*FLEN/8, x4, x1, x2)

inst_41592:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffffff80; valaddr_reg:x3; val_offset:124776*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124776*0 + 3*120*FLEN/8, x4, x1, x2)

inst_41593:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffffffc0; valaddr_reg:x3; val_offset:124779*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124779*0 + 3*121*FLEN/8, x4, x1, x2)

inst_41594:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffffffe0; valaddr_reg:x3; val_offset:124782*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124782*0 + 3*122*FLEN/8, x4, x1, x2)

inst_41595:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffffff0; valaddr_reg:x3; val_offset:124785*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124785*0 + 3*123*FLEN/8, x4, x1, x2)

inst_41596:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffffff8; valaddr_reg:x3; val_offset:124788*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124788*0 + 3*124*FLEN/8, x4, x1, x2)

inst_41597:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffffffc; valaddr_reg:x3; val_offset:124791*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124791*0 + 3*125*FLEN/8, x4, x1, x2)

inst_41598:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7fffffffffffffe; valaddr_reg:x3; val_offset:124794*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124794*0 + 3*126*FLEN/8, x4, x1, x2)

inst_41599:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x37f and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xb7ffffffffffffff; valaddr_reg:x3; val_offset:124797*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124797*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_41600:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:124800*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124800*0 + 3*128*FLEN/8, x4, x1, x2)

inst_41601:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:124803*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124803*0 + 3*129*FLEN/8, x4, x1, x2)

inst_41602:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:124806*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124806*0 + 3*130*FLEN/8, x4, x1, x2)

inst_41603:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:124809*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124809*0 + 3*131*FLEN/8, x4, x1, x2)

inst_41604:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:124812*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124812*0 + 3*132*FLEN/8, x4, x1, x2)

inst_41605:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:124815*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124815*0 + 3*133*FLEN/8, x4, x1, x2)

inst_41606:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:124818*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124818*0 + 3*134*FLEN/8, x4, x1, x2)

inst_41607:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:124821*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124821*0 + 3*135*FLEN/8, x4, x1, x2)

inst_41608:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:124824*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124824*0 + 3*136*FLEN/8, x4, x1, x2)

inst_41609:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:124827*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124827*0 + 3*137*FLEN/8, x4, x1, x2)

inst_41610:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:124830*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124830*0 + 3*138*FLEN/8, x4, x1, x2)

inst_41611:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:124833*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124833*0 + 3*139*FLEN/8, x4, x1, x2)

inst_41612:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:124836*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124836*0 + 3*140*FLEN/8, x4, x1, x2)

inst_41613:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:124839*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124839*0 + 3*141*FLEN/8, x4, x1, x2)

inst_41614:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:124842*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124842*0 + 3*142*FLEN/8, x4, x1, x2)

inst_41615:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:124845*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124845*0 + 3*143*FLEN/8, x4, x1, x2)

inst_41616:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:124848*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124848*0 + 3*144*FLEN/8, x4, x1, x2)

inst_41617:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:124851*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124851*0 + 3*145*FLEN/8, x4, x1, x2)

inst_41618:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:124854*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124854*0 + 3*146*FLEN/8, x4, x1, x2)

inst_41619:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:124857*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124857*0 + 3*147*FLEN/8, x4, x1, x2)

inst_41620:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:124860*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124860*0 + 3*148*FLEN/8, x4, x1, x2)

inst_41621:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9444597ea17b3 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x4438ac1abe83a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99444597ea17b3; op2val:0x9fd4438ac1abe83a;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:124863*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124863*0 + 3*149*FLEN/8, x4, x1, x2)

inst_41622:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000000000; valaddr_reg:x3; val_offset:124866*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124866*0 + 3*150*FLEN/8, x4, x1, x2)

inst_41623:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000000001; valaddr_reg:x3; val_offset:124869*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124869*0 + 3*151*FLEN/8, x4, x1, x2)

inst_41624:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000000003; valaddr_reg:x3; val_offset:124872*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124872*0 + 3*152*FLEN/8, x4, x1, x2)

inst_41625:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000000007; valaddr_reg:x3; val_offset:124875*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124875*0 + 3*153*FLEN/8, x4, x1, x2)

inst_41626:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000000000f; valaddr_reg:x3; val_offset:124878*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124878*0 + 3*154*FLEN/8, x4, x1, x2)

inst_41627:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000000001f; valaddr_reg:x3; val_offset:124881*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124881*0 + 3*155*FLEN/8, x4, x1, x2)

inst_41628:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000000003f; valaddr_reg:x3; val_offset:124884*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124884*0 + 3*156*FLEN/8, x4, x1, x2)

inst_41629:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000000007f; valaddr_reg:x3; val_offset:124887*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124887*0 + 3*157*FLEN/8, x4, x1, x2)

inst_41630:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000000000ff; valaddr_reg:x3; val_offset:124890*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124890*0 + 3*158*FLEN/8, x4, x1, x2)

inst_41631:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000000001ff; valaddr_reg:x3; val_offset:124893*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124893*0 + 3*159*FLEN/8, x4, x1, x2)

inst_41632:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000000003ff; valaddr_reg:x3; val_offset:124896*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124896*0 + 3*160*FLEN/8, x4, x1, x2)

inst_41633:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000000007ff; valaddr_reg:x3; val_offset:124899*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124899*0 + 3*161*FLEN/8, x4, x1, x2)

inst_41634:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000000fff; valaddr_reg:x3; val_offset:124902*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124902*0 + 3*162*FLEN/8, x4, x1, x2)

inst_41635:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000001fff; valaddr_reg:x3; val_offset:124905*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124905*0 + 3*163*FLEN/8, x4, x1, x2)

inst_41636:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000003fff; valaddr_reg:x3; val_offset:124908*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124908*0 + 3*164*FLEN/8, x4, x1, x2)

inst_41637:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000007fff; valaddr_reg:x3; val_offset:124911*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124911*0 + 3*165*FLEN/8, x4, x1, x2)

inst_41638:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000000ffff; valaddr_reg:x3; val_offset:124914*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124914*0 + 3*166*FLEN/8, x4, x1, x2)

inst_41639:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000001ffff; valaddr_reg:x3; val_offset:124917*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124917*0 + 3*167*FLEN/8, x4, x1, x2)

inst_41640:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000003ffff; valaddr_reg:x3; val_offset:124920*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124920*0 + 3*168*FLEN/8, x4, x1, x2)

inst_41641:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000007ffff; valaddr_reg:x3; val_offset:124923*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124923*0 + 3*169*FLEN/8, x4, x1, x2)

inst_41642:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000000fffff; valaddr_reg:x3; val_offset:124926*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124926*0 + 3*170*FLEN/8, x4, x1, x2)

inst_41643:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000001fffff; valaddr_reg:x3; val_offset:124929*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124929*0 + 3*171*FLEN/8, x4, x1, x2)

inst_41644:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000003fffff; valaddr_reg:x3; val_offset:124932*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124932*0 + 3*172*FLEN/8, x4, x1, x2)

inst_41645:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000007fffff; valaddr_reg:x3; val_offset:124935*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124935*0 + 3*173*FLEN/8, x4, x1, x2)

inst_41646:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000000ffffff; valaddr_reg:x3; val_offset:124938*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124938*0 + 3*174*FLEN/8, x4, x1, x2)

inst_41647:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000001ffffff; valaddr_reg:x3; val_offset:124941*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124941*0 + 3*175*FLEN/8, x4, x1, x2)

inst_41648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000003ffffff; valaddr_reg:x3; val_offset:124944*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124944*0 + 3*176*FLEN/8, x4, x1, x2)

inst_41649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000007ffffff; valaddr_reg:x3; val_offset:124947*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124947*0 + 3*177*FLEN/8, x4, x1, x2)

inst_41650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000000fffffff; valaddr_reg:x3; val_offset:124950*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124950*0 + 3*178*FLEN/8, x4, x1, x2)

inst_41651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000001fffffff; valaddr_reg:x3; val_offset:124953*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124953*0 + 3*179*FLEN/8, x4, x1, x2)

inst_41652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000003fffffff; valaddr_reg:x3; val_offset:124956*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124956*0 + 3*180*FLEN/8, x4, x1, x2)

inst_41653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000007fffffff; valaddr_reg:x3; val_offset:124959*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124959*0 + 3*181*FLEN/8, x4, x1, x2)

inst_41654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500000ffffffff; valaddr_reg:x3; val_offset:124962*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124962*0 + 3*182*FLEN/8, x4, x1, x2)

inst_41655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500001ffffffff; valaddr_reg:x3; val_offset:124965*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124965*0 + 3*183*FLEN/8, x4, x1, x2)

inst_41656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500003ffffffff; valaddr_reg:x3; val_offset:124968*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124968*0 + 3*184*FLEN/8, x4, x1, x2)

inst_41657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500007ffffffff; valaddr_reg:x3; val_offset:124971*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124971*0 + 3*185*FLEN/8, x4, x1, x2)

inst_41658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50000fffffffff; valaddr_reg:x3; val_offset:124974*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124974*0 + 3*186*FLEN/8, x4, x1, x2)

inst_41659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50001fffffffff; valaddr_reg:x3; val_offset:124977*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124977*0 + 3*187*FLEN/8, x4, x1, x2)

inst_41660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50003fffffffff; valaddr_reg:x3; val_offset:124980*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124980*0 + 3*188*FLEN/8, x4, x1, x2)

inst_41661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50007fffffffff; valaddr_reg:x3; val_offset:124983*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124983*0 + 3*189*FLEN/8, x4, x1, x2)

inst_41662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5000ffffffffff; valaddr_reg:x3; val_offset:124986*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124986*0 + 3*190*FLEN/8, x4, x1, x2)

inst_41663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5001ffffffffff; valaddr_reg:x3; val_offset:124989*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124989*0 + 3*191*FLEN/8, x4, x1, x2)

inst_41664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5003ffffffffff; valaddr_reg:x3; val_offset:124992*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124992*0 + 3*192*FLEN/8, x4, x1, x2)

inst_41665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5007ffffffffff; valaddr_reg:x3; val_offset:124995*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124995*0 + 3*193*FLEN/8, x4, x1, x2)

inst_41666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb500fffffffffff; valaddr_reg:x3; val_offset:124998*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 124998*0 + 3*194*FLEN/8, x4, x1, x2)

inst_41667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb501fffffffffff; valaddr_reg:x3; val_offset:125001*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125001*0 + 3*195*FLEN/8, x4, x1, x2)

inst_41668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb503fffffffffff; valaddr_reg:x3; val_offset:125004*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125004*0 + 3*196*FLEN/8, x4, x1, x2)

inst_41669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb507fffffffffff; valaddr_reg:x3; val_offset:125007*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125007*0 + 3*197*FLEN/8, x4, x1, x2)

inst_41670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb50ffffffffffff; valaddr_reg:x3; val_offset:125010*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125010*0 + 3*198*FLEN/8, x4, x1, x2)

inst_41671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb51ffffffffffff; valaddr_reg:x3; val_offset:125013*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125013*0 + 3*199*FLEN/8, x4, x1, x2)

inst_41672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb53ffffffffffff; valaddr_reg:x3; val_offset:125016*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125016*0 + 3*200*FLEN/8, x4, x1, x2)

inst_41673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb57ffffffffffff; valaddr_reg:x3; val_offset:125019*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125019*0 + 3*201*FLEN/8, x4, x1, x2)

inst_41674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb58000000000000; valaddr_reg:x3; val_offset:125022*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125022*0 + 3*202*FLEN/8, x4, x1, x2)

inst_41675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5c000000000000; valaddr_reg:x3; val_offset:125025*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125025*0 + 3*203*FLEN/8, x4, x1, x2)

inst_41676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5e000000000000; valaddr_reg:x3; val_offset:125028*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125028*0 + 3*204*FLEN/8, x4, x1, x2)

inst_41677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5f000000000000; valaddr_reg:x3; val_offset:125031*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125031*0 + 3*205*FLEN/8, x4, x1, x2)

inst_41678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5f800000000000; valaddr_reg:x3; val_offset:125034*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125034*0 + 3*206*FLEN/8, x4, x1, x2)

inst_41679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fc00000000000; valaddr_reg:x3; val_offset:125037*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125037*0 + 3*207*FLEN/8, x4, x1, x2)

inst_41680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fe00000000000; valaddr_reg:x3; val_offset:125040*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125040*0 + 3*208*FLEN/8, x4, x1, x2)

inst_41681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ff00000000000; valaddr_reg:x3; val_offset:125043*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125043*0 + 3*209*FLEN/8, x4, x1, x2)

inst_41682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ff80000000000; valaddr_reg:x3; val_offset:125046*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125046*0 + 3*210*FLEN/8, x4, x1, x2)

inst_41683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffc0000000000; valaddr_reg:x3; val_offset:125049*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125049*0 + 3*211*FLEN/8, x4, x1, x2)

inst_41684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffe0000000000; valaddr_reg:x3; val_offset:125052*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125052*0 + 3*212*FLEN/8, x4, x1, x2)

inst_41685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fff0000000000; valaddr_reg:x3; val_offset:125055*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125055*0 + 3*213*FLEN/8, x4, x1, x2)

inst_41686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fff8000000000; valaddr_reg:x3; val_offset:125058*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125058*0 + 3*214*FLEN/8, x4, x1, x2)

inst_41687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffc000000000; valaddr_reg:x3; val_offset:125061*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125061*0 + 3*215*FLEN/8, x4, x1, x2)

inst_41688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffe000000000; valaddr_reg:x3; val_offset:125064*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125064*0 + 3*216*FLEN/8, x4, x1, x2)

inst_41689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffff000000000; valaddr_reg:x3; val_offset:125067*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125067*0 + 3*217*FLEN/8, x4, x1, x2)

inst_41690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffff800000000; valaddr_reg:x3; val_offset:125070*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125070*0 + 3*218*FLEN/8, x4, x1, x2)

inst_41691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffc00000000; valaddr_reg:x3; val_offset:125073*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125073*0 + 3*219*FLEN/8, x4, x1, x2)

inst_41692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffe00000000; valaddr_reg:x3; val_offset:125076*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125076*0 + 3*220*FLEN/8, x4, x1, x2)

inst_41693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffff00000000; valaddr_reg:x3; val_offset:125079*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125079*0 + 3*221*FLEN/8, x4, x1, x2)

inst_41694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffff80000000; valaddr_reg:x3; val_offset:125082*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125082*0 + 3*222*FLEN/8, x4, x1, x2)

inst_41695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffc0000000; valaddr_reg:x3; val_offset:125085*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125085*0 + 3*223*FLEN/8, x4, x1, x2)

inst_41696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffe0000000; valaddr_reg:x3; val_offset:125088*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125088*0 + 3*224*FLEN/8, x4, x1, x2)

inst_41697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffff0000000; valaddr_reg:x3; val_offset:125091*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125091*0 + 3*225*FLEN/8, x4, x1, x2)

inst_41698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffff8000000; valaddr_reg:x3; val_offset:125094*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125094*0 + 3*226*FLEN/8, x4, x1, x2)

inst_41699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffc000000; valaddr_reg:x3; val_offset:125097*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125097*0 + 3*227*FLEN/8, x4, x1, x2)

inst_41700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffe000000; valaddr_reg:x3; val_offset:125100*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125100*0 + 3*228*FLEN/8, x4, x1, x2)

inst_41701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffff000000; valaddr_reg:x3; val_offset:125103*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125103*0 + 3*229*FLEN/8, x4, x1, x2)

inst_41702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffff800000; valaddr_reg:x3; val_offset:125106*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125106*0 + 3*230*FLEN/8, x4, x1, x2)

inst_41703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffc00000; valaddr_reg:x3; val_offset:125109*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125109*0 + 3*231*FLEN/8, x4, x1, x2)

inst_41704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffe00000; valaddr_reg:x3; val_offset:125112*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125112*0 + 3*232*FLEN/8, x4, x1, x2)

inst_41705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffff00000; valaddr_reg:x3; val_offset:125115*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125115*0 + 3*233*FLEN/8, x4, x1, x2)

inst_41706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffff80000; valaddr_reg:x3; val_offset:125118*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125118*0 + 3*234*FLEN/8, x4, x1, x2)

inst_41707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffc0000; valaddr_reg:x3; val_offset:125121*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125121*0 + 3*235*FLEN/8, x4, x1, x2)

inst_41708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffe0000; valaddr_reg:x3; val_offset:125124*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125124*0 + 3*236*FLEN/8, x4, x1, x2)

inst_41709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffff0000; valaddr_reg:x3; val_offset:125127*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125127*0 + 3*237*FLEN/8, x4, x1, x2)

inst_41710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffff8000; valaddr_reg:x3; val_offset:125130*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125130*0 + 3*238*FLEN/8, x4, x1, x2)

inst_41711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffffc000; valaddr_reg:x3; val_offset:125133*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125133*0 + 3*239*FLEN/8, x4, x1, x2)

inst_41712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffffe000; valaddr_reg:x3; val_offset:125136*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125136*0 + 3*240*FLEN/8, x4, x1, x2)

inst_41713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffff000; valaddr_reg:x3; val_offset:125139*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125139*0 + 3*241*FLEN/8, x4, x1, x2)

inst_41714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffff800; valaddr_reg:x3; val_offset:125142*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125142*0 + 3*242*FLEN/8, x4, x1, x2)

inst_41715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffffc00; valaddr_reg:x3; val_offset:125145*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125145*0 + 3*243*FLEN/8, x4, x1, x2)

inst_41716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffffe00; valaddr_reg:x3; val_offset:125148*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125148*0 + 3*244*FLEN/8, x4, x1, x2)

inst_41717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffffff00; valaddr_reg:x3; val_offset:125151*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125151*0 + 3*245*FLEN/8, x4, x1, x2)

inst_41718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffffff80; valaddr_reg:x3; val_offset:125154*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125154*0 + 3*246*FLEN/8, x4, x1, x2)

inst_41719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffffffc0; valaddr_reg:x3; val_offset:125157*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125157*0 + 3*247*FLEN/8, x4, x1, x2)

inst_41720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffffffe0; valaddr_reg:x3; val_offset:125160*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125160*0 + 3*248*FLEN/8, x4, x1, x2)

inst_41721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffffff0; valaddr_reg:x3; val_offset:125163*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125163*0 + 3*249*FLEN/8, x4, x1, x2)

inst_41722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffffff8; valaddr_reg:x3; val_offset:125166*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125166*0 + 3*250*FLEN/8, x4, x1, x2)

inst_41723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffffffc; valaddr_reg:x3; val_offset:125169*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125169*0 + 3*251*FLEN/8, x4, x1, x2)

inst_41724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5ffffffffffffe; valaddr_reg:x3; val_offset:125172*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125172*0 + 3*252*FLEN/8, x4, x1, x2)

inst_41725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3b5 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbb5fffffffffffff; valaddr_reg:x3; val_offset:125175*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125175*0 + 3*253*FLEN/8, x4, x1, x2)

inst_41726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:125178*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125178*0 + 3*254*FLEN/8, x4, x1, x2)

inst_41727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:125181*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125181*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_41728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:125184*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125184*0 + 3*256*FLEN/8, x4, x1, x2)

inst_41729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:125187*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125187*0 + 3*257*FLEN/8, x4, x1, x2)

inst_41730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:125190*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125190*0 + 3*258*FLEN/8, x4, x1, x2)

inst_41731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:125193*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125193*0 + 3*259*FLEN/8, x4, x1, x2)

inst_41732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:125196*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125196*0 + 3*260*FLEN/8, x4, x1, x2)

inst_41733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:125199*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125199*0 + 3*261*FLEN/8, x4, x1, x2)

inst_41734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:125202*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125202*0 + 3*262*FLEN/8, x4, x1, x2)

inst_41735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:125205*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125205*0 + 3*263*FLEN/8, x4, x1, x2)

inst_41736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:125208*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125208*0 + 3*264*FLEN/8, x4, x1, x2)

inst_41737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:125211*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125211*0 + 3*265*FLEN/8, x4, x1, x2)

inst_41738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:125214*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125214*0 + 3*266*FLEN/8, x4, x1, x2)

inst_41739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:125217*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125217*0 + 3*267*FLEN/8, x4, x1, x2)

inst_41740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:125220*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125220*0 + 3*268*FLEN/8, x4, x1, x2)

inst_41741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:125223*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125223*0 + 3*269*FLEN/8, x4, x1, x2)

inst_41742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:125226*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125226*0 + 3*270*FLEN/8, x4, x1, x2)

inst_41743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:125229*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125229*0 + 3*271*FLEN/8, x4, x1, x2)

inst_41744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:125232*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125232*0 + 3*272*FLEN/8, x4, x1, x2)

inst_41745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:125235*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125235*0 + 3*273*FLEN/8, x4, x1, x2)

inst_41746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:125238*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125238*0 + 3*274*FLEN/8, x4, x1, x2)

inst_41747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97812620d4535 and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x41a541ee632ab and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997812620d4535; op2val:0x9fd41a541ee632ab;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:125241*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125241*0 + 3*275*FLEN/8, x4, x1, x2)

inst_41748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:125244*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125244*0 + 3*276*FLEN/8, x4, x1, x2)

inst_41749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:125247*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125247*0 + 3*277*FLEN/8, x4, x1, x2)

inst_41750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:125250*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125250*0 + 3*278*FLEN/8, x4, x1, x2)

inst_41751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:125253*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125253*0 + 3*279*FLEN/8, x4, x1, x2)

inst_41752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:125256*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125256*0 + 3*280*FLEN/8, x4, x1, x2)

inst_41753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:125259*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125259*0 + 3*281*FLEN/8, x4, x1, x2)

inst_41754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:125262*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125262*0 + 3*282*FLEN/8, x4, x1, x2)

inst_41755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:125265*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125265*0 + 3*283*FLEN/8, x4, x1, x2)

inst_41756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:125268*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125268*0 + 3*284*FLEN/8, x4, x1, x2)

inst_41757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:125271*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125271*0 + 3*285*FLEN/8, x4, x1, x2)

inst_41758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:125274*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125274*0 + 3*286*FLEN/8, x4, x1, x2)

inst_41759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:125277*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125277*0 + 3*287*FLEN/8, x4, x1, x2)

inst_41760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:125280*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125280*0 + 3*288*FLEN/8, x4, x1, x2)

inst_41761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:125283*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125283*0 + 3*289*FLEN/8, x4, x1, x2)

inst_41762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:125286*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125286*0 + 3*290*FLEN/8, x4, x1, x2)

inst_41763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:125289*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125289*0 + 3*291*FLEN/8, x4, x1, x2)

inst_41764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:125292*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125292*0 + 3*292*FLEN/8, x4, x1, x2)

inst_41765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:125295*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125295*0 + 3*293*FLEN/8, x4, x1, x2)

inst_41766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:125298*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125298*0 + 3*294*FLEN/8, x4, x1, x2)

inst_41767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:125301*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125301*0 + 3*295*FLEN/8, x4, x1, x2)

inst_41768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:125304*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125304*0 + 3*296*FLEN/8, x4, x1, x2)

inst_41769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:125307*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125307*0 + 3*297*FLEN/8, x4, x1, x2)

inst_41770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000000000; valaddr_reg:x3; val_offset:125310*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125310*0 + 3*298*FLEN/8, x4, x1, x2)

inst_41771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000000001; valaddr_reg:x3; val_offset:125313*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125313*0 + 3*299*FLEN/8, x4, x1, x2)

inst_41772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000000003; valaddr_reg:x3; val_offset:125316*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125316*0 + 3*300*FLEN/8, x4, x1, x2)

inst_41773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000000007; valaddr_reg:x3; val_offset:125319*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125319*0 + 3*301*FLEN/8, x4, x1, x2)

inst_41774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000000000f; valaddr_reg:x3; val_offset:125322*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125322*0 + 3*302*FLEN/8, x4, x1, x2)

inst_41775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000000001f; valaddr_reg:x3; val_offset:125325*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125325*0 + 3*303*FLEN/8, x4, x1, x2)

inst_41776:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000000003f; valaddr_reg:x3; val_offset:125328*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125328*0 + 3*304*FLEN/8, x4, x1, x2)

inst_41777:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000000007f; valaddr_reg:x3; val_offset:125331*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125331*0 + 3*305*FLEN/8, x4, x1, x2)

inst_41778:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000000000ff; valaddr_reg:x3; val_offset:125334*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125334*0 + 3*306*FLEN/8, x4, x1, x2)

inst_41779:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000000001ff; valaddr_reg:x3; val_offset:125337*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125337*0 + 3*307*FLEN/8, x4, x1, x2)

inst_41780:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000000003ff; valaddr_reg:x3; val_offset:125340*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125340*0 + 3*308*FLEN/8, x4, x1, x2)

inst_41781:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000000007ff; valaddr_reg:x3; val_offset:125343*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125343*0 + 3*309*FLEN/8, x4, x1, x2)

inst_41782:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000000fff; valaddr_reg:x3; val_offset:125346*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125346*0 + 3*310*FLEN/8, x4, x1, x2)

inst_41783:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000001fff; valaddr_reg:x3; val_offset:125349*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125349*0 + 3*311*FLEN/8, x4, x1, x2)

inst_41784:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000003fff; valaddr_reg:x3; val_offset:125352*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125352*0 + 3*312*FLEN/8, x4, x1, x2)

inst_41785:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000007fff; valaddr_reg:x3; val_offset:125355*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125355*0 + 3*313*FLEN/8, x4, x1, x2)

inst_41786:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000000ffff; valaddr_reg:x3; val_offset:125358*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125358*0 + 3*314*FLEN/8, x4, x1, x2)

inst_41787:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000001ffff; valaddr_reg:x3; val_offset:125361*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125361*0 + 3*315*FLEN/8, x4, x1, x2)

inst_41788:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000003ffff; valaddr_reg:x3; val_offset:125364*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125364*0 + 3*316*FLEN/8, x4, x1, x2)

inst_41789:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000007ffff; valaddr_reg:x3; val_offset:125367*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125367*0 + 3*317*FLEN/8, x4, x1, x2)

inst_41790:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000000fffff; valaddr_reg:x3; val_offset:125370*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125370*0 + 3*318*FLEN/8, x4, x1, x2)

inst_41791:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000001fffff; valaddr_reg:x3; val_offset:125373*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125373*0 + 3*319*FLEN/8, x4, x1, x2)

inst_41792:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000003fffff; valaddr_reg:x3; val_offset:125376*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125376*0 + 3*320*FLEN/8, x4, x1, x2)

inst_41793:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000007fffff; valaddr_reg:x3; val_offset:125379*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125379*0 + 3*321*FLEN/8, x4, x1, x2)

inst_41794:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000000ffffff; valaddr_reg:x3; val_offset:125382*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125382*0 + 3*322*FLEN/8, x4, x1, x2)

inst_41795:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000001ffffff; valaddr_reg:x3; val_offset:125385*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125385*0 + 3*323*FLEN/8, x4, x1, x2)

inst_41796:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000003ffffff; valaddr_reg:x3; val_offset:125388*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125388*0 + 3*324*FLEN/8, x4, x1, x2)

inst_41797:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000007ffffff; valaddr_reg:x3; val_offset:125391*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125391*0 + 3*325*FLEN/8, x4, x1, x2)

inst_41798:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000000fffffff; valaddr_reg:x3; val_offset:125394*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125394*0 + 3*326*FLEN/8, x4, x1, x2)

inst_41799:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000001fffffff; valaddr_reg:x3; val_offset:125397*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125397*0 + 3*327*FLEN/8, x4, x1, x2)

inst_41800:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000003fffffff; valaddr_reg:x3; val_offset:125400*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125400*0 + 3*328*FLEN/8, x4, x1, x2)

inst_41801:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000007fffffff; valaddr_reg:x3; val_offset:125403*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125403*0 + 3*329*FLEN/8, x4, x1, x2)

inst_41802:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00000ffffffff; valaddr_reg:x3; val_offset:125406*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125406*0 + 3*330*FLEN/8, x4, x1, x2)

inst_41803:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00001ffffffff; valaddr_reg:x3; val_offset:125409*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125409*0 + 3*331*FLEN/8, x4, x1, x2)

inst_41804:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00003ffffffff; valaddr_reg:x3; val_offset:125412*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125412*0 + 3*332*FLEN/8, x4, x1, x2)

inst_41805:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00007ffffffff; valaddr_reg:x3; val_offset:125415*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125415*0 + 3*333*FLEN/8, x4, x1, x2)

inst_41806:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0000fffffffff; valaddr_reg:x3; val_offset:125418*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125418*0 + 3*334*FLEN/8, x4, x1, x2)

inst_41807:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0001fffffffff; valaddr_reg:x3; val_offset:125421*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125421*0 + 3*335*FLEN/8, x4, x1, x2)

inst_41808:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0003fffffffff; valaddr_reg:x3; val_offset:125424*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125424*0 + 3*336*FLEN/8, x4, x1, x2)

inst_41809:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0007fffffffff; valaddr_reg:x3; val_offset:125427*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125427*0 + 3*337*FLEN/8, x4, x1, x2)

inst_41810:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d000ffffffffff; valaddr_reg:x3; val_offset:125430*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125430*0 + 3*338*FLEN/8, x4, x1, x2)

inst_41811:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d001ffffffffff; valaddr_reg:x3; val_offset:125433*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125433*0 + 3*339*FLEN/8, x4, x1, x2)

inst_41812:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d003ffffffffff; valaddr_reg:x3; val_offset:125436*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125436*0 + 3*340*FLEN/8, x4, x1, x2)

inst_41813:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d007ffffffffff; valaddr_reg:x3; val_offset:125439*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125439*0 + 3*341*FLEN/8, x4, x1, x2)

inst_41814:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d00fffffffffff; valaddr_reg:x3; val_offset:125442*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125442*0 + 3*342*FLEN/8, x4, x1, x2)

inst_41815:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d01fffffffffff; valaddr_reg:x3; val_offset:125445*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125445*0 + 3*343*FLEN/8, x4, x1, x2)

inst_41816:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d03fffffffffff; valaddr_reg:x3; val_offset:125448*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125448*0 + 3*344*FLEN/8, x4, x1, x2)

inst_41817:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d07fffffffffff; valaddr_reg:x3; val_offset:125451*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125451*0 + 3*345*FLEN/8, x4, x1, x2)

inst_41818:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d0ffffffffffff; valaddr_reg:x3; val_offset:125454*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125454*0 + 3*346*FLEN/8, x4, x1, x2)

inst_41819:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d1ffffffffffff; valaddr_reg:x3; val_offset:125457*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125457*0 + 3*347*FLEN/8, x4, x1, x2)

inst_41820:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d3ffffffffffff; valaddr_reg:x3; val_offset:125460*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125460*0 + 3*348*FLEN/8, x4, x1, x2)

inst_41821:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d7ffffffffffff; valaddr_reg:x3; val_offset:125463*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125463*0 + 3*349*FLEN/8, x4, x1, x2)

inst_41822:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3d8000000000000; valaddr_reg:x3; val_offset:125466*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125466*0 + 3*350*FLEN/8, x4, x1, x2)

inst_41823:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dc000000000000; valaddr_reg:x3; val_offset:125469*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125469*0 + 3*351*FLEN/8, x4, x1, x2)

inst_41824:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3de000000000000; valaddr_reg:x3; val_offset:125472*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125472*0 + 3*352*FLEN/8, x4, x1, x2)

inst_41825:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3df000000000000; valaddr_reg:x3; val_offset:125475*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125475*0 + 3*353*FLEN/8, x4, x1, x2)

inst_41826:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3df800000000000; valaddr_reg:x3; val_offset:125478*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125478*0 + 3*354*FLEN/8, x4, x1, x2)

inst_41827:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfc00000000000; valaddr_reg:x3; val_offset:125481*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125481*0 + 3*355*FLEN/8, x4, x1, x2)

inst_41828:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfe00000000000; valaddr_reg:x3; val_offset:125484*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125484*0 + 3*356*FLEN/8, x4, x1, x2)

inst_41829:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dff00000000000; valaddr_reg:x3; val_offset:125487*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125487*0 + 3*357*FLEN/8, x4, x1, x2)

inst_41830:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dff80000000000; valaddr_reg:x3; val_offset:125490*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125490*0 + 3*358*FLEN/8, x4, x1, x2)

inst_41831:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffc0000000000; valaddr_reg:x3; val_offset:125493*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125493*0 + 3*359*FLEN/8, x4, x1, x2)

inst_41832:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffe0000000000; valaddr_reg:x3; val_offset:125496*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125496*0 + 3*360*FLEN/8, x4, x1, x2)

inst_41833:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfff0000000000; valaddr_reg:x3; val_offset:125499*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125499*0 + 3*361*FLEN/8, x4, x1, x2)

inst_41834:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfff8000000000; valaddr_reg:x3; val_offset:125502*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125502*0 + 3*362*FLEN/8, x4, x1, x2)

inst_41835:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffc000000000; valaddr_reg:x3; val_offset:125505*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125505*0 + 3*363*FLEN/8, x4, x1, x2)

inst_41836:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffe000000000; valaddr_reg:x3; val_offset:125508*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125508*0 + 3*364*FLEN/8, x4, x1, x2)

inst_41837:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffff000000000; valaddr_reg:x3; val_offset:125511*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125511*0 + 3*365*FLEN/8, x4, x1, x2)

inst_41838:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffff800000000; valaddr_reg:x3; val_offset:125514*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125514*0 + 3*366*FLEN/8, x4, x1, x2)

inst_41839:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffc00000000; valaddr_reg:x3; val_offset:125517*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125517*0 + 3*367*FLEN/8, x4, x1, x2)

inst_41840:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffe00000000; valaddr_reg:x3; val_offset:125520*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125520*0 + 3*368*FLEN/8, x4, x1, x2)

inst_41841:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffff00000000; valaddr_reg:x3; val_offset:125523*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125523*0 + 3*369*FLEN/8, x4, x1, x2)

inst_41842:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffff80000000; valaddr_reg:x3; val_offset:125526*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125526*0 + 3*370*FLEN/8, x4, x1, x2)

inst_41843:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffc0000000; valaddr_reg:x3; val_offset:125529*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125529*0 + 3*371*FLEN/8, x4, x1, x2)

inst_41844:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffe0000000; valaddr_reg:x3; val_offset:125532*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125532*0 + 3*372*FLEN/8, x4, x1, x2)

inst_41845:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffff0000000; valaddr_reg:x3; val_offset:125535*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125535*0 + 3*373*FLEN/8, x4, x1, x2)

inst_41846:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffff8000000; valaddr_reg:x3; val_offset:125538*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125538*0 + 3*374*FLEN/8, x4, x1, x2)

inst_41847:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffc000000; valaddr_reg:x3; val_offset:125541*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125541*0 + 3*375*FLEN/8, x4, x1, x2)

inst_41848:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffe000000; valaddr_reg:x3; val_offset:125544*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125544*0 + 3*376*FLEN/8, x4, x1, x2)

inst_41849:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffff000000; valaddr_reg:x3; val_offset:125547*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125547*0 + 3*377*FLEN/8, x4, x1, x2)

inst_41850:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffff800000; valaddr_reg:x3; val_offset:125550*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125550*0 + 3*378*FLEN/8, x4, x1, x2)

inst_41851:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffc00000; valaddr_reg:x3; val_offset:125553*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125553*0 + 3*379*FLEN/8, x4, x1, x2)

inst_41852:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffe00000; valaddr_reg:x3; val_offset:125556*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125556*0 + 3*380*FLEN/8, x4, x1, x2)

inst_41853:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffff00000; valaddr_reg:x3; val_offset:125559*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125559*0 + 3*381*FLEN/8, x4, x1, x2)

inst_41854:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffff80000; valaddr_reg:x3; val_offset:125562*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125562*0 + 3*382*FLEN/8, x4, x1, x2)

inst_41855:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffc0000; valaddr_reg:x3; val_offset:125565*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125565*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_41856:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffe0000; valaddr_reg:x3; val_offset:125568*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125568*0 + 3*384*FLEN/8, x4, x1, x2)

inst_41857:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffff0000; valaddr_reg:x3; val_offset:125571*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125571*0 + 3*385*FLEN/8, x4, x1, x2)

inst_41858:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffff8000; valaddr_reg:x3; val_offset:125574*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125574*0 + 3*386*FLEN/8, x4, x1, x2)

inst_41859:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffffc000; valaddr_reg:x3; val_offset:125577*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125577*0 + 3*387*FLEN/8, x4, x1, x2)

inst_41860:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffffe000; valaddr_reg:x3; val_offset:125580*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125580*0 + 3*388*FLEN/8, x4, x1, x2)

inst_41861:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffff000; valaddr_reg:x3; val_offset:125583*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125583*0 + 3*389*FLEN/8, x4, x1, x2)

inst_41862:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffff800; valaddr_reg:x3; val_offset:125586*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125586*0 + 3*390*FLEN/8, x4, x1, x2)

inst_41863:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffffc00; valaddr_reg:x3; val_offset:125589*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125589*0 + 3*391*FLEN/8, x4, x1, x2)

inst_41864:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffffe00; valaddr_reg:x3; val_offset:125592*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125592*0 + 3*392*FLEN/8, x4, x1, x2)

inst_41865:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffffff00; valaddr_reg:x3; val_offset:125595*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125595*0 + 3*393*FLEN/8, x4, x1, x2)

inst_41866:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffffff80; valaddr_reg:x3; val_offset:125598*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125598*0 + 3*394*FLEN/8, x4, x1, x2)

inst_41867:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffffffc0; valaddr_reg:x3; val_offset:125601*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125601*0 + 3*395*FLEN/8, x4, x1, x2)

inst_41868:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffffffe0; valaddr_reg:x3; val_offset:125604*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125604*0 + 3*396*FLEN/8, x4, x1, x2)

inst_41869:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffffff0; valaddr_reg:x3; val_offset:125607*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125607*0 + 3*397*FLEN/8, x4, x1, x2)

inst_41870:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffffff8; valaddr_reg:x3; val_offset:125610*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125610*0 + 3*398*FLEN/8, x4, x1, x2)

inst_41871:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffffffc; valaddr_reg:x3; val_offset:125613*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125613*0 + 3*399*FLEN/8, x4, x1, x2)

inst_41872:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dffffffffffffe; valaddr_reg:x3; val_offset:125616*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125616*0 + 3*400*FLEN/8, x4, x1, x2)

inst_41873:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x97fdab43574e9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f997fdab43574e9; op2val:0x0;
op3val:0x3dfffffffffffff; valaddr_reg:x3; val_offset:125619*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125619*0 + 3*401*FLEN/8, x4, x1, x2)

inst_41874:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000000000; valaddr_reg:x3; val_offset:125622*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125622*0 + 3*402*FLEN/8, x4, x1, x2)

inst_41875:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000000001; valaddr_reg:x3; val_offset:125625*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125625*0 + 3*403*FLEN/8, x4, x1, x2)

inst_41876:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000000003; valaddr_reg:x3; val_offset:125628*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125628*0 + 3*404*FLEN/8, x4, x1, x2)

inst_41877:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000000007; valaddr_reg:x3; val_offset:125631*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125631*0 + 3*405*FLEN/8, x4, x1, x2)

inst_41878:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000000000f; valaddr_reg:x3; val_offset:125634*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125634*0 + 3*406*FLEN/8, x4, x1, x2)

inst_41879:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000000001f; valaddr_reg:x3; val_offset:125637*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125637*0 + 3*407*FLEN/8, x4, x1, x2)

inst_41880:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000000003f; valaddr_reg:x3; val_offset:125640*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125640*0 + 3*408*FLEN/8, x4, x1, x2)

inst_41881:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000000007f; valaddr_reg:x3; val_offset:125643*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125643*0 + 3*409*FLEN/8, x4, x1, x2)

inst_41882:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000000000ff; valaddr_reg:x3; val_offset:125646*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125646*0 + 3*410*FLEN/8, x4, x1, x2)

inst_41883:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000000001ff; valaddr_reg:x3; val_offset:125649*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125649*0 + 3*411*FLEN/8, x4, x1, x2)

inst_41884:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000000003ff; valaddr_reg:x3; val_offset:125652*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125652*0 + 3*412*FLEN/8, x4, x1, x2)

inst_41885:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000000007ff; valaddr_reg:x3; val_offset:125655*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125655*0 + 3*413*FLEN/8, x4, x1, x2)

inst_41886:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000000fff; valaddr_reg:x3; val_offset:125658*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125658*0 + 3*414*FLEN/8, x4, x1, x2)

inst_41887:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000001fff; valaddr_reg:x3; val_offset:125661*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125661*0 + 3*415*FLEN/8, x4, x1, x2)

inst_41888:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000003fff; valaddr_reg:x3; val_offset:125664*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125664*0 + 3*416*FLEN/8, x4, x1, x2)

inst_41889:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000007fff; valaddr_reg:x3; val_offset:125667*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125667*0 + 3*417*FLEN/8, x4, x1, x2)

inst_41890:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000000ffff; valaddr_reg:x3; val_offset:125670*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125670*0 + 3*418*FLEN/8, x4, x1, x2)

inst_41891:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000001ffff; valaddr_reg:x3; val_offset:125673*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125673*0 + 3*419*FLEN/8, x4, x1, x2)

inst_41892:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000003ffff; valaddr_reg:x3; val_offset:125676*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125676*0 + 3*420*FLEN/8, x4, x1, x2)

inst_41893:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000007ffff; valaddr_reg:x3; val_offset:125679*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125679*0 + 3*421*FLEN/8, x4, x1, x2)

inst_41894:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000000fffff; valaddr_reg:x3; val_offset:125682*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125682*0 + 3*422*FLEN/8, x4, x1, x2)

inst_41895:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000001fffff; valaddr_reg:x3; val_offset:125685*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125685*0 + 3*423*FLEN/8, x4, x1, x2)

inst_41896:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000003fffff; valaddr_reg:x3; val_offset:125688*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125688*0 + 3*424*FLEN/8, x4, x1, x2)

inst_41897:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000007fffff; valaddr_reg:x3; val_offset:125691*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125691*0 + 3*425*FLEN/8, x4, x1, x2)

inst_41898:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000000ffffff; valaddr_reg:x3; val_offset:125694*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125694*0 + 3*426*FLEN/8, x4, x1, x2)

inst_41899:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000001ffffff; valaddr_reg:x3; val_offset:125697*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125697*0 + 3*427*FLEN/8, x4, x1, x2)

inst_41900:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000003ffffff; valaddr_reg:x3; val_offset:125700*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125700*0 + 3*428*FLEN/8, x4, x1, x2)

inst_41901:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000007ffffff; valaddr_reg:x3; val_offset:125703*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125703*0 + 3*429*FLEN/8, x4, x1, x2)

inst_41902:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000000fffffff; valaddr_reg:x3; val_offset:125706*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125706*0 + 3*430*FLEN/8, x4, x1, x2)

inst_41903:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000001fffffff; valaddr_reg:x3; val_offset:125709*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125709*0 + 3*431*FLEN/8, x4, x1, x2)

inst_41904:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000003fffffff; valaddr_reg:x3; val_offset:125712*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125712*0 + 3*432*FLEN/8, x4, x1, x2)

inst_41905:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000007fffffff; valaddr_reg:x3; val_offset:125715*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125715*0 + 3*433*FLEN/8, x4, x1, x2)

inst_41906:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800000ffffffff; valaddr_reg:x3; val_offset:125718*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125718*0 + 3*434*FLEN/8, x4, x1, x2)

inst_41907:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800001ffffffff; valaddr_reg:x3; val_offset:125721*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125721*0 + 3*435*FLEN/8, x4, x1, x2)

inst_41908:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800003ffffffff; valaddr_reg:x3; val_offset:125724*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125724*0 + 3*436*FLEN/8, x4, x1, x2)

inst_41909:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800007ffffffff; valaddr_reg:x3; val_offset:125727*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125727*0 + 3*437*FLEN/8, x4, x1, x2)

inst_41910:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880000fffffffff; valaddr_reg:x3; val_offset:125730*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125730*0 + 3*438*FLEN/8, x4, x1, x2)

inst_41911:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880001fffffffff; valaddr_reg:x3; val_offset:125733*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125733*0 + 3*439*FLEN/8, x4, x1, x2)

inst_41912:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880003fffffffff; valaddr_reg:x3; val_offset:125736*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125736*0 + 3*440*FLEN/8, x4, x1, x2)

inst_41913:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880007fffffffff; valaddr_reg:x3; val_offset:125739*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125739*0 + 3*441*FLEN/8, x4, x1, x2)

inst_41914:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88000ffffffffff; valaddr_reg:x3; val_offset:125742*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125742*0 + 3*442*FLEN/8, x4, x1, x2)

inst_41915:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88001ffffffffff; valaddr_reg:x3; val_offset:125745*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125745*0 + 3*443*FLEN/8, x4, x1, x2)

inst_41916:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88003ffffffffff; valaddr_reg:x3; val_offset:125748*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125748*0 + 3*444*FLEN/8, x4, x1, x2)

inst_41917:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88007ffffffffff; valaddr_reg:x3; val_offset:125751*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125751*0 + 3*445*FLEN/8, x4, x1, x2)

inst_41918:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8800fffffffffff; valaddr_reg:x3; val_offset:125754*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125754*0 + 3*446*FLEN/8, x4, x1, x2)

inst_41919:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8801fffffffffff; valaddr_reg:x3; val_offset:125757*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125757*0 + 3*447*FLEN/8, x4, x1, x2)

inst_41920:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8803fffffffffff; valaddr_reg:x3; val_offset:125760*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125760*0 + 3*448*FLEN/8, x4, x1, x2)

inst_41921:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb8807fffffffffff; valaddr_reg:x3; val_offset:125763*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125763*0 + 3*449*FLEN/8, x4, x1, x2)

inst_41922:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb880ffffffffffff; valaddr_reg:x3; val_offset:125766*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125766*0 + 3*450*FLEN/8, x4, x1, x2)

inst_41923:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb881ffffffffffff; valaddr_reg:x3; val_offset:125769*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125769*0 + 3*451*FLEN/8, x4, x1, x2)

inst_41924:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb883ffffffffffff; valaddr_reg:x3; val_offset:125772*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125772*0 + 3*452*FLEN/8, x4, x1, x2)

inst_41925:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb887ffffffffffff; valaddr_reg:x3; val_offset:125775*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125775*0 + 3*453*FLEN/8, x4, x1, x2)

inst_41926:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb888000000000000; valaddr_reg:x3; val_offset:125778*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125778*0 + 3*454*FLEN/8, x4, x1, x2)

inst_41927:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88c000000000000; valaddr_reg:x3; val_offset:125781*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125781*0 + 3*455*FLEN/8, x4, x1, x2)

inst_41928:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88e000000000000; valaddr_reg:x3; val_offset:125784*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125784*0 + 3*456*FLEN/8, x4, x1, x2)

inst_41929:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88f000000000000; valaddr_reg:x3; val_offset:125787*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125787*0 + 3*457*FLEN/8, x4, x1, x2)

inst_41930:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88f800000000000; valaddr_reg:x3; val_offset:125790*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125790*0 + 3*458*FLEN/8, x4, x1, x2)

inst_41931:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fc00000000000; valaddr_reg:x3; val_offset:125793*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125793*0 + 3*459*FLEN/8, x4, x1, x2)

inst_41932:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fe00000000000; valaddr_reg:x3; val_offset:125796*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125796*0 + 3*460*FLEN/8, x4, x1, x2)

inst_41933:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ff00000000000; valaddr_reg:x3; val_offset:125799*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125799*0 + 3*461*FLEN/8, x4, x1, x2)

inst_41934:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ff80000000000; valaddr_reg:x3; val_offset:125802*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125802*0 + 3*462*FLEN/8, x4, x1, x2)

inst_41935:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffc0000000000; valaddr_reg:x3; val_offset:125805*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125805*0 + 3*463*FLEN/8, x4, x1, x2)

inst_41936:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffe0000000000; valaddr_reg:x3; val_offset:125808*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125808*0 + 3*464*FLEN/8, x4, x1, x2)

inst_41937:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fff0000000000; valaddr_reg:x3; val_offset:125811*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125811*0 + 3*465*FLEN/8, x4, x1, x2)

inst_41938:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fff8000000000; valaddr_reg:x3; val_offset:125814*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125814*0 + 3*466*FLEN/8, x4, x1, x2)

inst_41939:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffc000000000; valaddr_reg:x3; val_offset:125817*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125817*0 + 3*467*FLEN/8, x4, x1, x2)

inst_41940:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffe000000000; valaddr_reg:x3; val_offset:125820*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125820*0 + 3*468*FLEN/8, x4, x1, x2)

inst_41941:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffff000000000; valaddr_reg:x3; val_offset:125823*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125823*0 + 3*469*FLEN/8, x4, x1, x2)

inst_41942:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffff800000000; valaddr_reg:x3; val_offset:125826*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125826*0 + 3*470*FLEN/8, x4, x1, x2)

inst_41943:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffc00000000; valaddr_reg:x3; val_offset:125829*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125829*0 + 3*471*FLEN/8, x4, x1, x2)

inst_41944:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffe00000000; valaddr_reg:x3; val_offset:125832*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125832*0 + 3*472*FLEN/8, x4, x1, x2)

inst_41945:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffff00000000; valaddr_reg:x3; val_offset:125835*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125835*0 + 3*473*FLEN/8, x4, x1, x2)

inst_41946:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffff80000000; valaddr_reg:x3; val_offset:125838*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125838*0 + 3*474*FLEN/8, x4, x1, x2)

inst_41947:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffc0000000; valaddr_reg:x3; val_offset:125841*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125841*0 + 3*475*FLEN/8, x4, x1, x2)

inst_41948:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffe0000000; valaddr_reg:x3; val_offset:125844*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125844*0 + 3*476*FLEN/8, x4, x1, x2)

inst_41949:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffff0000000; valaddr_reg:x3; val_offset:125847*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125847*0 + 3*477*FLEN/8, x4, x1, x2)

inst_41950:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffff8000000; valaddr_reg:x3; val_offset:125850*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125850*0 + 3*478*FLEN/8, x4, x1, x2)

inst_41951:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffc000000; valaddr_reg:x3; val_offset:125853*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125853*0 + 3*479*FLEN/8, x4, x1, x2)

inst_41952:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffe000000; valaddr_reg:x3; val_offset:125856*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125856*0 + 3*480*FLEN/8, x4, x1, x2)

inst_41953:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffff000000; valaddr_reg:x3; val_offset:125859*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125859*0 + 3*481*FLEN/8, x4, x1, x2)

inst_41954:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffff800000; valaddr_reg:x3; val_offset:125862*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125862*0 + 3*482*FLEN/8, x4, x1, x2)

inst_41955:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffc00000; valaddr_reg:x3; val_offset:125865*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125865*0 + 3*483*FLEN/8, x4, x1, x2)

inst_41956:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffe00000; valaddr_reg:x3; val_offset:125868*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125868*0 + 3*484*FLEN/8, x4, x1, x2)

inst_41957:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffff00000; valaddr_reg:x3; val_offset:125871*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125871*0 + 3*485*FLEN/8, x4, x1, x2)

inst_41958:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffff80000; valaddr_reg:x3; val_offset:125874*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125874*0 + 3*486*FLEN/8, x4, x1, x2)

inst_41959:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffc0000; valaddr_reg:x3; val_offset:125877*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125877*0 + 3*487*FLEN/8, x4, x1, x2)

inst_41960:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffe0000; valaddr_reg:x3; val_offset:125880*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125880*0 + 3*488*FLEN/8, x4, x1, x2)

inst_41961:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffff0000; valaddr_reg:x3; val_offset:125883*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125883*0 + 3*489*FLEN/8, x4, x1, x2)

inst_41962:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffff8000; valaddr_reg:x3; val_offset:125886*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125886*0 + 3*490*FLEN/8, x4, x1, x2)

inst_41963:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffffc000; valaddr_reg:x3; val_offset:125889*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125889*0 + 3*491*FLEN/8, x4, x1, x2)

inst_41964:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffffe000; valaddr_reg:x3; val_offset:125892*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125892*0 + 3*492*FLEN/8, x4, x1, x2)

inst_41965:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffff000; valaddr_reg:x3; val_offset:125895*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125895*0 + 3*493*FLEN/8, x4, x1, x2)

inst_41966:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffff800; valaddr_reg:x3; val_offset:125898*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125898*0 + 3*494*FLEN/8, x4, x1, x2)

inst_41967:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffffc00; valaddr_reg:x3; val_offset:125901*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125901*0 + 3*495*FLEN/8, x4, x1, x2)

inst_41968:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffffe00; valaddr_reg:x3; val_offset:125904*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125904*0 + 3*496*FLEN/8, x4, x1, x2)

inst_41969:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffffff00; valaddr_reg:x3; val_offset:125907*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125907*0 + 3*497*FLEN/8, x4, x1, x2)

inst_41970:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffffff80; valaddr_reg:x3; val_offset:125910*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125910*0 + 3*498*FLEN/8, x4, x1, x2)

inst_41971:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffffffc0; valaddr_reg:x3; val_offset:125913*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125913*0 + 3*499*FLEN/8, x4, x1, x2)

inst_41972:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffffffe0; valaddr_reg:x3; val_offset:125916*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125916*0 + 3*500*FLEN/8, x4, x1, x2)

inst_41973:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffffff0; valaddr_reg:x3; val_offset:125919*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125919*0 + 3*501*FLEN/8, x4, x1, x2)

inst_41974:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffffff8; valaddr_reg:x3; val_offset:125922*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125922*0 + 3*502*FLEN/8, x4, x1, x2)

inst_41975:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffffffc; valaddr_reg:x3; val_offset:125925*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125925*0 + 3*503*FLEN/8, x4, x1, x2)

inst_41976:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88ffffffffffffe; valaddr_reg:x3; val_offset:125928*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125928*0 + 3*504*FLEN/8, x4, x1, x2)

inst_41977:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x388 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xb88fffffffffffff; valaddr_reg:x3; val_offset:125931*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125931*0 + 3*505*FLEN/8, x4, x1, x2)

inst_41978:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:125934*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125934*0 + 3*506*FLEN/8, x4, x1, x2)

inst_41979:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:125937*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125937*0 + 3*507*FLEN/8, x4, x1, x2)

inst_41980:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:125940*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125940*0 + 3*508*FLEN/8, x4, x1, x2)

inst_41981:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:125943*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125943*0 + 3*509*FLEN/8, x4, x1, x2)

inst_41982:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:125946*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125946*0 + 3*510*FLEN/8, x4, x1, x2)

inst_41983:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:125949*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125949*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_41984:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:125952*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125952*0 + 3*512*FLEN/8, x4, x1, x2)

inst_41985:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:125955*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125955*0 + 3*513*FLEN/8, x4, x1, x2)

inst_41986:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:125958*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125958*0 + 3*514*FLEN/8, x4, x1, x2)

inst_41987:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:125961*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125961*0 + 3*515*FLEN/8, x4, x1, x2)

inst_41988:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:125964*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125964*0 + 3*516*FLEN/8, x4, x1, x2)

inst_41989:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:125967*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125967*0 + 3*517*FLEN/8, x4, x1, x2)

inst_41990:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:125970*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125970*0 + 3*518*FLEN/8, x4, x1, x2)

inst_41991:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:125973*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125973*0 + 3*519*FLEN/8, x4, x1, x2)

inst_41992:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:125976*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125976*0 + 3*520*FLEN/8, x4, x1, x2)

inst_41993:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:125979*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125979*0 + 3*521*FLEN/8, x4, x1, x2)

inst_41994:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:125982*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125982*0 + 3*522*FLEN/8, x4, x1, x2)

inst_41995:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:125985*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125985*0 + 3*523*FLEN/8, x4, x1, x2)

inst_41996:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:125988*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125988*0 + 3*524*FLEN/8, x4, x1, x2)

inst_41997:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:125991*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125991*0 + 3*525*FLEN/8, x4, x1, x2)

inst_41998:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:125994*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125994*0 + 3*526*FLEN/8, x4, x1, x2)

inst_41999:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9cd85f6af39ef and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x3d7c0f86f912f and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99cd85f6af39ef; op2val:0x9fd3d7c0f86f912f;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:125997*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 125997*0 + 3*527*FLEN/8, x4, x1, x2)

inst_42000:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:126000*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126000*0 + 3*528*FLEN/8, x4, x1, x2)

inst_42001:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:126003*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126003*0 + 3*529*FLEN/8, x4, x1, x2)

inst_42002:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:126006*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126006*0 + 3*530*FLEN/8, x4, x1, x2)

inst_42003:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:126009*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126009*0 + 3*531*FLEN/8, x4, x1, x2)

inst_42004:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:126012*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126012*0 + 3*532*FLEN/8, x4, x1, x2)

inst_42005:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:126015*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126015*0 + 3*533*FLEN/8, x4, x1, x2)

inst_42006:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:126018*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126018*0 + 3*534*FLEN/8, x4, x1, x2)

inst_42007:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:126021*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126021*0 + 3*535*FLEN/8, x4, x1, x2)

inst_42008:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:126024*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126024*0 + 3*536*FLEN/8, x4, x1, x2)

inst_42009:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:126027*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126027*0 + 3*537*FLEN/8, x4, x1, x2)

inst_42010:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:126030*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126030*0 + 3*538*FLEN/8, x4, x1, x2)

inst_42011:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:126033*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126033*0 + 3*539*FLEN/8, x4, x1, x2)

inst_42012:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:126036*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126036*0 + 3*540*FLEN/8, x4, x1, x2)

inst_42013:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:126039*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126039*0 + 3*541*FLEN/8, x4, x1, x2)

inst_42014:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:126042*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126042*0 + 3*542*FLEN/8, x4, x1, x2)

inst_42015:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:126045*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126045*0 + 3*543*FLEN/8, x4, x1, x2)

inst_42016:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:126048*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126048*0 + 3*544*FLEN/8, x4, x1, x2)

inst_42017:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:126051*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126051*0 + 3*545*FLEN/8, x4, x1, x2)

inst_42018:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:126054*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126054*0 + 3*546*FLEN/8, x4, x1, x2)

inst_42019:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:126057*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126057*0 + 3*547*FLEN/8, x4, x1, x2)

inst_42020:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:126060*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126060*0 + 3*548*FLEN/8, x4, x1, x2)

inst_42021:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:126063*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126063*0 + 3*549*FLEN/8, x4, x1, x2)

inst_42022:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000000000; valaddr_reg:x3; val_offset:126066*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126066*0 + 3*550*FLEN/8, x4, x1, x2)

inst_42023:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000000001; valaddr_reg:x3; val_offset:126069*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126069*0 + 3*551*FLEN/8, x4, x1, x2)

inst_42024:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000000003; valaddr_reg:x3; val_offset:126072*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126072*0 + 3*552*FLEN/8, x4, x1, x2)

inst_42025:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000000007; valaddr_reg:x3; val_offset:126075*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126075*0 + 3*553*FLEN/8, x4, x1, x2)

inst_42026:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000000000f; valaddr_reg:x3; val_offset:126078*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126078*0 + 3*554*FLEN/8, x4, x1, x2)

inst_42027:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000000001f; valaddr_reg:x3; val_offset:126081*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126081*0 + 3*555*FLEN/8, x4, x1, x2)

inst_42028:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000000003f; valaddr_reg:x3; val_offset:126084*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126084*0 + 3*556*FLEN/8, x4, x1, x2)

inst_42029:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000000007f; valaddr_reg:x3; val_offset:126087*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126087*0 + 3*557*FLEN/8, x4, x1, x2)

inst_42030:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000000000ff; valaddr_reg:x3; val_offset:126090*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126090*0 + 3*558*FLEN/8, x4, x1, x2)

inst_42031:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000000001ff; valaddr_reg:x3; val_offset:126093*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126093*0 + 3*559*FLEN/8, x4, x1, x2)

inst_42032:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000000003ff; valaddr_reg:x3; val_offset:126096*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126096*0 + 3*560*FLEN/8, x4, x1, x2)

inst_42033:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000000007ff; valaddr_reg:x3; val_offset:126099*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126099*0 + 3*561*FLEN/8, x4, x1, x2)

inst_42034:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000000fff; valaddr_reg:x3; val_offset:126102*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126102*0 + 3*562*FLEN/8, x4, x1, x2)

inst_42035:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000001fff; valaddr_reg:x3; val_offset:126105*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126105*0 + 3*563*FLEN/8, x4, x1, x2)

inst_42036:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000003fff; valaddr_reg:x3; val_offset:126108*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126108*0 + 3*564*FLEN/8, x4, x1, x2)

inst_42037:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000007fff; valaddr_reg:x3; val_offset:126111*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126111*0 + 3*565*FLEN/8, x4, x1, x2)

inst_42038:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000000ffff; valaddr_reg:x3; val_offset:126114*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126114*0 + 3*566*FLEN/8, x4, x1, x2)

inst_42039:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000001ffff; valaddr_reg:x3; val_offset:126117*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126117*0 + 3*567*FLEN/8, x4, x1, x2)

inst_42040:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000003ffff; valaddr_reg:x3; val_offset:126120*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126120*0 + 3*568*FLEN/8, x4, x1, x2)

inst_42041:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000007ffff; valaddr_reg:x3; val_offset:126123*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126123*0 + 3*569*FLEN/8, x4, x1, x2)

inst_42042:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000000fffff; valaddr_reg:x3; val_offset:126126*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126126*0 + 3*570*FLEN/8, x4, x1, x2)

inst_42043:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000001fffff; valaddr_reg:x3; val_offset:126129*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126129*0 + 3*571*FLEN/8, x4, x1, x2)

inst_42044:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000003fffff; valaddr_reg:x3; val_offset:126132*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126132*0 + 3*572*FLEN/8, x4, x1, x2)

inst_42045:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000007fffff; valaddr_reg:x3; val_offset:126135*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126135*0 + 3*573*FLEN/8, x4, x1, x2)

inst_42046:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000000ffffff; valaddr_reg:x3; val_offset:126138*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126138*0 + 3*574*FLEN/8, x4, x1, x2)

inst_42047:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000001ffffff; valaddr_reg:x3; val_offset:126141*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126141*0 + 3*575*FLEN/8, x4, x1, x2)

inst_42048:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000003ffffff; valaddr_reg:x3; val_offset:126144*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126144*0 + 3*576*FLEN/8, x4, x1, x2)

inst_42049:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000007ffffff; valaddr_reg:x3; val_offset:126147*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126147*0 + 3*577*FLEN/8, x4, x1, x2)

inst_42050:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000000fffffff; valaddr_reg:x3; val_offset:126150*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126150*0 + 3*578*FLEN/8, x4, x1, x2)

inst_42051:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000001fffffff; valaddr_reg:x3; val_offset:126153*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126153*0 + 3*579*FLEN/8, x4, x1, x2)

inst_42052:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000003fffffff; valaddr_reg:x3; val_offset:126156*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126156*0 + 3*580*FLEN/8, x4, x1, x2)

inst_42053:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000007fffffff; valaddr_reg:x3; val_offset:126159*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126159*0 + 3*581*FLEN/8, x4, x1, x2)

inst_42054:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300000ffffffff; valaddr_reg:x3; val_offset:126162*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126162*0 + 3*582*FLEN/8, x4, x1, x2)

inst_42055:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300001ffffffff; valaddr_reg:x3; val_offset:126165*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126165*0 + 3*583*FLEN/8, x4, x1, x2)

inst_42056:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300003ffffffff; valaddr_reg:x3; val_offset:126168*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126168*0 + 3*584*FLEN/8, x4, x1, x2)

inst_42057:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300007ffffffff; valaddr_reg:x3; val_offset:126171*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126171*0 + 3*585*FLEN/8, x4, x1, x2)

inst_42058:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130000fffffffff; valaddr_reg:x3; val_offset:126174*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126174*0 + 3*586*FLEN/8, x4, x1, x2)

inst_42059:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130001fffffffff; valaddr_reg:x3; val_offset:126177*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126177*0 + 3*587*FLEN/8, x4, x1, x2)

inst_42060:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130003fffffffff; valaddr_reg:x3; val_offset:126180*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126180*0 + 3*588*FLEN/8, x4, x1, x2)

inst_42061:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130007fffffffff; valaddr_reg:x3; val_offset:126183*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126183*0 + 3*589*FLEN/8, x4, x1, x2)

inst_42062:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813000ffffffffff; valaddr_reg:x3; val_offset:126186*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126186*0 + 3*590*FLEN/8, x4, x1, x2)

inst_42063:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813001ffffffffff; valaddr_reg:x3; val_offset:126189*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126189*0 + 3*591*FLEN/8, x4, x1, x2)

inst_42064:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813003ffffffffff; valaddr_reg:x3; val_offset:126192*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126192*0 + 3*592*FLEN/8, x4, x1, x2)

inst_42065:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813007ffffffffff; valaddr_reg:x3; val_offset:126195*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126195*0 + 3*593*FLEN/8, x4, x1, x2)

inst_42066:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81300fffffffffff; valaddr_reg:x3; val_offset:126198*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126198*0 + 3*594*FLEN/8, x4, x1, x2)

inst_42067:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81301fffffffffff; valaddr_reg:x3; val_offset:126201*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126201*0 + 3*595*FLEN/8, x4, x1, x2)

inst_42068:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81303fffffffffff; valaddr_reg:x3; val_offset:126204*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126204*0 + 3*596*FLEN/8, x4, x1, x2)

inst_42069:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x81307fffffffffff; valaddr_reg:x3; val_offset:126207*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126207*0 + 3*597*FLEN/8, x4, x1, x2)

inst_42070:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8130ffffffffffff; valaddr_reg:x3; val_offset:126210*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126210*0 + 3*598*FLEN/8, x4, x1, x2)

inst_42071:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8131ffffffffffff; valaddr_reg:x3; val_offset:126213*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126213*0 + 3*599*FLEN/8, x4, x1, x2)

inst_42072:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8133ffffffffffff; valaddr_reg:x3; val_offset:126216*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126216*0 + 3*600*FLEN/8, x4, x1, x2)

inst_42073:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8137ffffffffffff; valaddr_reg:x3; val_offset:126219*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126219*0 + 3*601*FLEN/8, x4, x1, x2)

inst_42074:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x8138000000000000; valaddr_reg:x3; val_offset:126222*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126222*0 + 3*602*FLEN/8, x4, x1, x2)

inst_42075:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813c000000000000; valaddr_reg:x3; val_offset:126225*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126225*0 + 3*603*FLEN/8, x4, x1, x2)

inst_42076:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813e000000000000; valaddr_reg:x3; val_offset:126228*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126228*0 + 3*604*FLEN/8, x4, x1, x2)

inst_42077:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813f000000000000; valaddr_reg:x3; val_offset:126231*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126231*0 + 3*605*FLEN/8, x4, x1, x2)

inst_42078:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813f800000000000; valaddr_reg:x3; val_offset:126234*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126234*0 + 3*606*FLEN/8, x4, x1, x2)

inst_42079:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fc00000000000; valaddr_reg:x3; val_offset:126237*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126237*0 + 3*607*FLEN/8, x4, x1, x2)

inst_42080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fe00000000000; valaddr_reg:x3; val_offset:126240*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126240*0 + 3*608*FLEN/8, x4, x1, x2)

inst_42081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ff00000000000; valaddr_reg:x3; val_offset:126243*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126243*0 + 3*609*FLEN/8, x4, x1, x2)

inst_42082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ff80000000000; valaddr_reg:x3; val_offset:126246*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126246*0 + 3*610*FLEN/8, x4, x1, x2)

inst_42083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffc0000000000; valaddr_reg:x3; val_offset:126249*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126249*0 + 3*611*FLEN/8, x4, x1, x2)

inst_42084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffe0000000000; valaddr_reg:x3; val_offset:126252*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126252*0 + 3*612*FLEN/8, x4, x1, x2)

inst_42085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fff0000000000; valaddr_reg:x3; val_offset:126255*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126255*0 + 3*613*FLEN/8, x4, x1, x2)

inst_42086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fff8000000000; valaddr_reg:x3; val_offset:126258*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126258*0 + 3*614*FLEN/8, x4, x1, x2)

inst_42087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffc000000000; valaddr_reg:x3; val_offset:126261*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126261*0 + 3*615*FLEN/8, x4, x1, x2)

inst_42088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffe000000000; valaddr_reg:x3; val_offset:126264*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126264*0 + 3*616*FLEN/8, x4, x1, x2)

inst_42089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffff000000000; valaddr_reg:x3; val_offset:126267*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126267*0 + 3*617*FLEN/8, x4, x1, x2)

inst_42090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffff800000000; valaddr_reg:x3; val_offset:126270*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126270*0 + 3*618*FLEN/8, x4, x1, x2)

inst_42091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffc00000000; valaddr_reg:x3; val_offset:126273*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126273*0 + 3*619*FLEN/8, x4, x1, x2)

inst_42092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffe00000000; valaddr_reg:x3; val_offset:126276*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126276*0 + 3*620*FLEN/8, x4, x1, x2)

inst_42093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffff00000000; valaddr_reg:x3; val_offset:126279*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126279*0 + 3*621*FLEN/8, x4, x1, x2)

inst_42094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffff80000000; valaddr_reg:x3; val_offset:126282*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126282*0 + 3*622*FLEN/8, x4, x1, x2)

inst_42095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffc0000000; valaddr_reg:x3; val_offset:126285*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126285*0 + 3*623*FLEN/8, x4, x1, x2)

inst_42096:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffe0000000; valaddr_reg:x3; val_offset:126288*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126288*0 + 3*624*FLEN/8, x4, x1, x2)

inst_42097:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffff0000000; valaddr_reg:x3; val_offset:126291*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126291*0 + 3*625*FLEN/8, x4, x1, x2)

inst_42098:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffff8000000; valaddr_reg:x3; val_offset:126294*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126294*0 + 3*626*FLEN/8, x4, x1, x2)

inst_42099:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffc000000; valaddr_reg:x3; val_offset:126297*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126297*0 + 3*627*FLEN/8, x4, x1, x2)

inst_42100:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffe000000; valaddr_reg:x3; val_offset:126300*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126300*0 + 3*628*FLEN/8, x4, x1, x2)

inst_42101:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffff000000; valaddr_reg:x3; val_offset:126303*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126303*0 + 3*629*FLEN/8, x4, x1, x2)

inst_42102:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffff800000; valaddr_reg:x3; val_offset:126306*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126306*0 + 3*630*FLEN/8, x4, x1, x2)

inst_42103:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffc00000; valaddr_reg:x3; val_offset:126309*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126309*0 + 3*631*FLEN/8, x4, x1, x2)

inst_42104:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffe00000; valaddr_reg:x3; val_offset:126312*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126312*0 + 3*632*FLEN/8, x4, x1, x2)

inst_42105:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffff00000; valaddr_reg:x3; val_offset:126315*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126315*0 + 3*633*FLEN/8, x4, x1, x2)

inst_42106:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffff80000; valaddr_reg:x3; val_offset:126318*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126318*0 + 3*634*FLEN/8, x4, x1, x2)

inst_42107:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffc0000; valaddr_reg:x3; val_offset:126321*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126321*0 + 3*635*FLEN/8, x4, x1, x2)

inst_42108:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffe0000; valaddr_reg:x3; val_offset:126324*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126324*0 + 3*636*FLEN/8, x4, x1, x2)

inst_42109:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffff0000; valaddr_reg:x3; val_offset:126327*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126327*0 + 3*637*FLEN/8, x4, x1, x2)

inst_42110:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffff8000; valaddr_reg:x3; val_offset:126330*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126330*0 + 3*638*FLEN/8, x4, x1, x2)

inst_42111:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffffc000; valaddr_reg:x3; val_offset:126333*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126333*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_42112:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffffe000; valaddr_reg:x3; val_offset:126336*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126336*0 + 3*640*FLEN/8, x4, x1, x2)

inst_42113:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffff000; valaddr_reg:x3; val_offset:126339*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126339*0 + 3*641*FLEN/8, x4, x1, x2)

inst_42114:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffff800; valaddr_reg:x3; val_offset:126342*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126342*0 + 3*642*FLEN/8, x4, x1, x2)

inst_42115:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffffc00; valaddr_reg:x3; val_offset:126345*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126345*0 + 3*643*FLEN/8, x4, x1, x2)

inst_42116:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffffe00; valaddr_reg:x3; val_offset:126348*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126348*0 + 3*644*FLEN/8, x4, x1, x2)

inst_42117:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffffff00; valaddr_reg:x3; val_offset:126351*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126351*0 + 3*645*FLEN/8, x4, x1, x2)

inst_42118:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffffff80; valaddr_reg:x3; val_offset:126354*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126354*0 + 3*646*FLEN/8, x4, x1, x2)

inst_42119:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffffffc0; valaddr_reg:x3; val_offset:126357*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126357*0 + 3*647*FLEN/8, x4, x1, x2)

inst_42120:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffffffe0; valaddr_reg:x3; val_offset:126360*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126360*0 + 3*648*FLEN/8, x4, x1, x2)

inst_42121:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffffff0; valaddr_reg:x3; val_offset:126363*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126363*0 + 3*649*FLEN/8, x4, x1, x2)

inst_42122:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffffff8; valaddr_reg:x3; val_offset:126366*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126366*0 + 3*650*FLEN/8, x4, x1, x2)

inst_42123:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffffffc; valaddr_reg:x3; val_offset:126369*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126369*0 + 3*651*FLEN/8, x4, x1, x2)

inst_42124:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813ffffffffffffe; valaddr_reg:x3; val_offset:126372*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126372*0 + 3*652*FLEN/8, x4, x1, x2)

inst_42125:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9d1843dee714d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x013 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99d1843dee714d; op2val:0x8000;
op3val:0x813fffffffffffff; valaddr_reg:x3; val_offset:126375*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126375*0 + 3*653*FLEN/8, x4, x1, x2)

inst_42126:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:126378*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126378*0 + 3*654*FLEN/8, x4, x1, x2)

inst_42127:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:126381*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126381*0 + 3*655*FLEN/8, x4, x1, x2)

inst_42128:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:126384*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126384*0 + 3*656*FLEN/8, x4, x1, x2)

inst_42129:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:126387*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126387*0 + 3*657*FLEN/8, x4, x1, x2)

inst_42130:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:126390*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126390*0 + 3*658*FLEN/8, x4, x1, x2)

inst_42131:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:126393*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126393*0 + 3*659*FLEN/8, x4, x1, x2)

inst_42132:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:126396*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126396*0 + 3*660*FLEN/8, x4, x1, x2)

inst_42133:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:126399*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126399*0 + 3*661*FLEN/8, x4, x1, x2)

inst_42134:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:126402*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126402*0 + 3*662*FLEN/8, x4, x1, x2)

inst_42135:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:126405*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126405*0 + 3*663*FLEN/8, x4, x1, x2)

inst_42136:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:126408*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126408*0 + 3*664*FLEN/8, x4, x1, x2)

inst_42137:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:126411*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126411*0 + 3*665*FLEN/8, x4, x1, x2)

inst_42138:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:126414*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126414*0 + 3*666*FLEN/8, x4, x1, x2)

inst_42139:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:126417*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126417*0 + 3*667*FLEN/8, x4, x1, x2)

inst_42140:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:126420*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126420*0 + 3*668*FLEN/8, x4, x1, x2)

inst_42141:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:126423*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126423*0 + 3*669*FLEN/8, x4, x1, x2)

inst_42142:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:126426*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126426*0 + 3*670*FLEN/8, x4, x1, x2)

inst_42143:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:126429*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126429*0 + 3*671*FLEN/8, x4, x1, x2)

inst_42144:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:126432*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126432*0 + 3*672*FLEN/8, x4, x1, x2)

inst_42145:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:126435*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126435*0 + 3*673*FLEN/8, x4, x1, x2)

inst_42146:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:126438*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126438*0 + 3*674*FLEN/8, x4, x1, x2)

inst_42147:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:126441*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126441*0 + 3*675*FLEN/8, x4, x1, x2)

inst_42148:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000000000; valaddr_reg:x3; val_offset:126444*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126444*0 + 3*676*FLEN/8, x4, x1, x2)

inst_42149:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000000001; valaddr_reg:x3; val_offset:126447*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126447*0 + 3*677*FLEN/8, x4, x1, x2)

inst_42150:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000000003; valaddr_reg:x3; val_offset:126450*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126450*0 + 3*678*FLEN/8, x4, x1, x2)

inst_42151:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000000007; valaddr_reg:x3; val_offset:126453*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126453*0 + 3*679*FLEN/8, x4, x1, x2)

inst_42152:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000000000f; valaddr_reg:x3; val_offset:126456*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126456*0 + 3*680*FLEN/8, x4, x1, x2)

inst_42153:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000000001f; valaddr_reg:x3; val_offset:126459*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126459*0 + 3*681*FLEN/8, x4, x1, x2)

inst_42154:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000000003f; valaddr_reg:x3; val_offset:126462*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126462*0 + 3*682*FLEN/8, x4, x1, x2)

inst_42155:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000000007f; valaddr_reg:x3; val_offset:126465*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126465*0 + 3*683*FLEN/8, x4, x1, x2)

inst_42156:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000000000ff; valaddr_reg:x3; val_offset:126468*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126468*0 + 3*684*FLEN/8, x4, x1, x2)

inst_42157:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000000001ff; valaddr_reg:x3; val_offset:126471*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126471*0 + 3*685*FLEN/8, x4, x1, x2)

inst_42158:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000000003ff; valaddr_reg:x3; val_offset:126474*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126474*0 + 3*686*FLEN/8, x4, x1, x2)

inst_42159:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000000007ff; valaddr_reg:x3; val_offset:126477*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126477*0 + 3*687*FLEN/8, x4, x1, x2)

inst_42160:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000000fff; valaddr_reg:x3; val_offset:126480*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126480*0 + 3*688*FLEN/8, x4, x1, x2)

inst_42161:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000001fff; valaddr_reg:x3; val_offset:126483*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126483*0 + 3*689*FLEN/8, x4, x1, x2)

inst_42162:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000003fff; valaddr_reg:x3; val_offset:126486*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126486*0 + 3*690*FLEN/8, x4, x1, x2)

inst_42163:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000007fff; valaddr_reg:x3; val_offset:126489*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126489*0 + 3*691*FLEN/8, x4, x1, x2)

inst_42164:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000000ffff; valaddr_reg:x3; val_offset:126492*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126492*0 + 3*692*FLEN/8, x4, x1, x2)

inst_42165:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000001ffff; valaddr_reg:x3; val_offset:126495*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126495*0 + 3*693*FLEN/8, x4, x1, x2)

inst_42166:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000003ffff; valaddr_reg:x3; val_offset:126498*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126498*0 + 3*694*FLEN/8, x4, x1, x2)

inst_42167:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000007ffff; valaddr_reg:x3; val_offset:126501*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126501*0 + 3*695*FLEN/8, x4, x1, x2)

inst_42168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000000fffff; valaddr_reg:x3; val_offset:126504*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126504*0 + 3*696*FLEN/8, x4, x1, x2)

inst_42169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000001fffff; valaddr_reg:x3; val_offset:126507*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126507*0 + 3*697*FLEN/8, x4, x1, x2)

inst_42170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000003fffff; valaddr_reg:x3; val_offset:126510*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126510*0 + 3*698*FLEN/8, x4, x1, x2)

inst_42171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000007fffff; valaddr_reg:x3; val_offset:126513*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126513*0 + 3*699*FLEN/8, x4, x1, x2)

inst_42172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000000ffffff; valaddr_reg:x3; val_offset:126516*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126516*0 + 3*700*FLEN/8, x4, x1, x2)

inst_42173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000001ffffff; valaddr_reg:x3; val_offset:126519*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126519*0 + 3*701*FLEN/8, x4, x1, x2)

inst_42174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000003ffffff; valaddr_reg:x3; val_offset:126522*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126522*0 + 3*702*FLEN/8, x4, x1, x2)

inst_42175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000007ffffff; valaddr_reg:x3; val_offset:126525*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126525*0 + 3*703*FLEN/8, x4, x1, x2)

inst_42176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000000fffffff; valaddr_reg:x3; val_offset:126528*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126528*0 + 3*704*FLEN/8, x4, x1, x2)

inst_42177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000001fffffff; valaddr_reg:x3; val_offset:126531*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126531*0 + 3*705*FLEN/8, x4, x1, x2)

inst_42178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000003fffffff; valaddr_reg:x3; val_offset:126534*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126534*0 + 3*706*FLEN/8, x4, x1, x2)

inst_42179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000007fffffff; valaddr_reg:x3; val_offset:126537*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126537*0 + 3*707*FLEN/8, x4, x1, x2)

inst_42180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700000ffffffff; valaddr_reg:x3; val_offset:126540*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126540*0 + 3*708*FLEN/8, x4, x1, x2)

inst_42181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700001ffffffff; valaddr_reg:x3; val_offset:126543*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126543*0 + 3*709*FLEN/8, x4, x1, x2)

inst_42182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700003ffffffff; valaddr_reg:x3; val_offset:126546*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126546*0 + 3*710*FLEN/8, x4, x1, x2)

inst_42183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700007ffffffff; valaddr_reg:x3; val_offset:126549*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126549*0 + 3*711*FLEN/8, x4, x1, x2)

inst_42184:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370000fffffffff; valaddr_reg:x3; val_offset:126552*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126552*0 + 3*712*FLEN/8, x4, x1, x2)

inst_42185:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370001fffffffff; valaddr_reg:x3; val_offset:126555*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126555*0 + 3*713*FLEN/8, x4, x1, x2)

inst_42186:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370003fffffffff; valaddr_reg:x3; val_offset:126558*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126558*0 + 3*714*FLEN/8, x4, x1, x2)

inst_42187:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370007fffffffff; valaddr_reg:x3; val_offset:126561*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126561*0 + 3*715*FLEN/8, x4, x1, x2)

inst_42188:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37000ffffffffff; valaddr_reg:x3; val_offset:126564*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126564*0 + 3*716*FLEN/8, x4, x1, x2)

inst_42189:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37001ffffffffff; valaddr_reg:x3; val_offset:126567*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126567*0 + 3*717*FLEN/8, x4, x1, x2)

inst_42190:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37003ffffffffff; valaddr_reg:x3; val_offset:126570*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126570*0 + 3*718*FLEN/8, x4, x1, x2)

inst_42191:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37007ffffffffff; valaddr_reg:x3; val_offset:126573*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126573*0 + 3*719*FLEN/8, x4, x1, x2)

inst_42192:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3700fffffffffff; valaddr_reg:x3; val_offset:126576*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126576*0 + 3*720*FLEN/8, x4, x1, x2)

inst_42193:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3701fffffffffff; valaddr_reg:x3; val_offset:126579*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126579*0 + 3*721*FLEN/8, x4, x1, x2)

inst_42194:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3703fffffffffff; valaddr_reg:x3; val_offset:126582*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126582*0 + 3*722*FLEN/8, x4, x1, x2)

inst_42195:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x3707fffffffffff; valaddr_reg:x3; val_offset:126585*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126585*0 + 3*723*FLEN/8, x4, x1, x2)

inst_42196:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x370ffffffffffff; valaddr_reg:x3; val_offset:126588*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126588*0 + 3*724*FLEN/8, x4, x1, x2)

inst_42197:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x371ffffffffffff; valaddr_reg:x3; val_offset:126591*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126591*0 + 3*725*FLEN/8, x4, x1, x2)

inst_42198:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x373ffffffffffff; valaddr_reg:x3; val_offset:126594*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126594*0 + 3*726*FLEN/8, x4, x1, x2)

inst_42199:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x377ffffffffffff; valaddr_reg:x3; val_offset:126597*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126597*0 + 3*727*FLEN/8, x4, x1, x2)

inst_42200:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x378000000000000; valaddr_reg:x3; val_offset:126600*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126600*0 + 3*728*FLEN/8, x4, x1, x2)

inst_42201:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37c000000000000; valaddr_reg:x3; val_offset:126603*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126603*0 + 3*729*FLEN/8, x4, x1, x2)

inst_42202:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37e000000000000; valaddr_reg:x3; val_offset:126606*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126606*0 + 3*730*FLEN/8, x4, x1, x2)

inst_42203:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37f000000000000; valaddr_reg:x3; val_offset:126609*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126609*0 + 3*731*FLEN/8, x4, x1, x2)

inst_42204:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37f800000000000; valaddr_reg:x3; val_offset:126612*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126612*0 + 3*732*FLEN/8, x4, x1, x2)

inst_42205:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fc00000000000; valaddr_reg:x3; val_offset:126615*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126615*0 + 3*733*FLEN/8, x4, x1, x2)

inst_42206:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fe00000000000; valaddr_reg:x3; val_offset:126618*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126618*0 + 3*734*FLEN/8, x4, x1, x2)

inst_42207:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ff00000000000; valaddr_reg:x3; val_offset:126621*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126621*0 + 3*735*FLEN/8, x4, x1, x2)

inst_42208:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ff80000000000; valaddr_reg:x3; val_offset:126624*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126624*0 + 3*736*FLEN/8, x4, x1, x2)

inst_42209:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffc0000000000; valaddr_reg:x3; val_offset:126627*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126627*0 + 3*737*FLEN/8, x4, x1, x2)

inst_42210:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffe0000000000; valaddr_reg:x3; val_offset:126630*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126630*0 + 3*738*FLEN/8, x4, x1, x2)

inst_42211:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fff0000000000; valaddr_reg:x3; val_offset:126633*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126633*0 + 3*739*FLEN/8, x4, x1, x2)

inst_42212:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fff8000000000; valaddr_reg:x3; val_offset:126636*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126636*0 + 3*740*FLEN/8, x4, x1, x2)

inst_42213:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffc000000000; valaddr_reg:x3; val_offset:126639*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126639*0 + 3*741*FLEN/8, x4, x1, x2)

inst_42214:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffe000000000; valaddr_reg:x3; val_offset:126642*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126642*0 + 3*742*FLEN/8, x4, x1, x2)

inst_42215:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffff000000000; valaddr_reg:x3; val_offset:126645*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126645*0 + 3*743*FLEN/8, x4, x1, x2)

inst_42216:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffff800000000; valaddr_reg:x3; val_offset:126648*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126648*0 + 3*744*FLEN/8, x4, x1, x2)

inst_42217:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffc00000000; valaddr_reg:x3; val_offset:126651*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126651*0 + 3*745*FLEN/8, x4, x1, x2)

inst_42218:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffe00000000; valaddr_reg:x3; val_offset:126654*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126654*0 + 3*746*FLEN/8, x4, x1, x2)

inst_42219:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffff00000000; valaddr_reg:x3; val_offset:126657*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126657*0 + 3*747*FLEN/8, x4, x1, x2)

inst_42220:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffff80000000; valaddr_reg:x3; val_offset:126660*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126660*0 + 3*748*FLEN/8, x4, x1, x2)

inst_42221:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffc0000000; valaddr_reg:x3; val_offset:126663*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126663*0 + 3*749*FLEN/8, x4, x1, x2)

inst_42222:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffe0000000; valaddr_reg:x3; val_offset:126666*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126666*0 + 3*750*FLEN/8, x4, x1, x2)

inst_42223:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffff0000000; valaddr_reg:x3; val_offset:126669*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126669*0 + 3*751*FLEN/8, x4, x1, x2)

inst_42224:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffff8000000; valaddr_reg:x3; val_offset:126672*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126672*0 + 3*752*FLEN/8, x4, x1, x2)

inst_42225:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffffc000000; valaddr_reg:x3; val_offset:126675*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126675*0 + 3*753*FLEN/8, x4, x1, x2)

inst_42226:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffffe000000; valaddr_reg:x3; val_offset:126678*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126678*0 + 3*754*FLEN/8, x4, x1, x2)

inst_42227:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffff000000; valaddr_reg:x3; val_offset:126681*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126681*0 + 3*755*FLEN/8, x4, x1, x2)

inst_42228:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffff800000; valaddr_reg:x3; val_offset:126684*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126684*0 + 3*756*FLEN/8, x4, x1, x2)

inst_42229:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffffc00000; valaddr_reg:x3; val_offset:126687*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126687*0 + 3*757*FLEN/8, x4, x1, x2)

inst_42230:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffffe00000; valaddr_reg:x3; val_offset:126690*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126690*0 + 3*758*FLEN/8, x4, x1, x2)

inst_42231:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffffff00000; valaddr_reg:x3; val_offset:126693*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126693*0 + 3*759*FLEN/8, x4, x1, x2)

inst_42232:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffffff80000; valaddr_reg:x3; val_offset:126696*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126696*0 + 3*760*FLEN/8, x4, x1, x2)

inst_42233:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffffffc0000; valaddr_reg:x3; val_offset:126699*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126699*0 + 3*761*FLEN/8, x4, x1, x2)

inst_42234:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffffffe0000; valaddr_reg:x3; val_offset:126702*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126702*0 + 3*762*FLEN/8, x4, x1, x2)

inst_42235:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffffff0000; valaddr_reg:x3; val_offset:126705*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126705*0 + 3*763*FLEN/8, x4, x1, x2)

inst_42236:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffffff8000; valaddr_reg:x3; val_offset:126708*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126708*0 + 3*764*FLEN/8, x4, x1, x2)

inst_42237:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffffffc000; valaddr_reg:x3; val_offset:126711*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126711*0 + 3*765*FLEN/8, x4, x1, x2)

inst_42238:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37fffffffffe000; valaddr_reg:x3; val_offset:126714*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126714*0 + 3*766*FLEN/8, x4, x1, x2)

inst_42239:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x9f084d23d9ef9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x037 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f99f084d23d9ef9; op2val:0x0;
op3val:0x37ffffffffff000; valaddr_reg:x3; val_offset:126717*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 126717*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13411719690309337086,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13411719690309337087,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6888594444001716467,64,FLEN)
NAN_BOXED(11516918662656187837,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369728,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369729,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369731,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369735,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369743,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369759,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369791,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369855,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351369983,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351370239,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351370751,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351371775,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351373823,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351377919,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351386111,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351402495,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351435263,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351500799,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351631871,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703351894015,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703352418303,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703353466879,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703355564031,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703359758335,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703368146943,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703384924159,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703418478591,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703485587455,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703619805183,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093703888240639,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093704425111551,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093705498853375,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093707646337023,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093711941304319,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093720531238911,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093737711108095,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093772070846463,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093840790323199,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254093978229276671,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254094253107183615,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254094802862997503,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254095902374625279,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254098101397880831,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254102499444391935,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254111295537414143,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254128887723458559,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254164072095547391,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254234440839725055,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254375178328080383,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13254656653304791039,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13255219603258212351,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13256345503165054975,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13256345503165054976,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13257471403071897600,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258034353025318912,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258315828002029568,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258456565490384896,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258526934234562560,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258562118606651392,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258579710792695808,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258588506885718016,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258592904932229120,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258595103955484672,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258596203467112448,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258596753222926336,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597028100833280,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597165539786752,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597234259263488,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597268619001856,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597285798871040,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597294388805632,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597298683772928,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597300831256576,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597301904998400,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302441869312,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302710304768,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302844522496,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302911631360,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302945185792,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302961963008,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302970351616,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302974545920,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302976643072,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302977691648,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978215936,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978478080,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978609152,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978674688,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978707456,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978723840,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978732032,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978736128,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978738176,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978739200,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978739712,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978739968,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978740096,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978740160,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978740192,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978740208,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978740216,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978740220,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978740222,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13258597302978740223,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6888612170732017587,64,FLEN)
NAN_BOXED(11516904410327017530,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376512,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376513,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376515,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376519,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376527,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376543,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376575,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376639,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229376767,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229377023,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229377535,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229378559,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229380607,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229384703,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229392895,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229409279,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229442047,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229507583,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229638655,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083229900799,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083230425087,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083231473663,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083233570815,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083237765119,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083246153727,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083262930943,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083296485375,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083363594239,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083497811967,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288083766247423,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288084303118335,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288085376860159,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288087524343807,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288091819311103,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288100409245695,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288117589114879,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288151948853247,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288220668329983,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288358107283455,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497288632985190399,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497289182741004287,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497290282252632063,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497292481275887615,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497296879322398719,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497305675415420927,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497323267601465343,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497358451973554175,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497428820717731839,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497569558206087167,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13497851033182797823,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13498413983136219135,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13499539883043061759,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13499539883043061760,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13500665782949904384,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501228732903325696,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501510207880036352,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501650945368391680,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501721314112569344,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501756498484658176,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501774090670702592,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501782886763724800,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501787284810235904,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501789483833491456,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501790583345119232,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791133100933120,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791407978840064,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791545417793536,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791614137270272,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791648497008640,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791665676877824,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791674266812416,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791678561779712,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791680709263360,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791681783005184,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682319876096,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682588311552,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682722529280,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682789638144,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682823192576,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682839969792,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682848358400,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682852552704,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682854649856,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682855698432,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856222720,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856484864,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856615936,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856681472,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856714240,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856730624,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856738816,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856742912,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856744960,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856745984,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856746496,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856746752,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856746880,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856746944,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856746976,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856746992,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856747000,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856747004,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856747006,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13501791682856747007,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6888669125389665589,64,FLEN)
NAN_BOXED(11516859095691178667,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600256,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600257,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600259,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600263,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600271,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600287,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600319,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600383,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600511,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600767,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269601279,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269602303,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269604351,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269608447,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269616639,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269633023,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269665791,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269731327,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269862399,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577270124543,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577270648831,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577271697407,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577273794559,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577277988863,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577286377471,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577303154687,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577336709119,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577403817983,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577538035711,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577806471167,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719578343342079,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719579417083903,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719581564567551,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719585859534847,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719594449469439,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719611629338623,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719645989076991,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719714708553727,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719852147507199,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274720127025414143,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274720676781228031,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274721776292855807,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274723975316111359,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274728373362622463,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274737169455644671,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274754761641689087,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274789946013777919,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274860314757955583,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(275001052246310911,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(275282527223021567,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(275845477176442879,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(276971377083285503,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(276971377083285504,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(278097276990128128,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(278660226943549440,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(278941701920260096,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279082439408615424,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279152808152793088,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279187992524881920,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279205584710926336,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279214380803948544,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279218778850459648,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279220977873715200,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279222077385342976,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279222627141156864,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279222902019063808,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223039458017280,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223108177494016,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223142537232384,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223159717101568,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223168307036160,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223172602003456,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223174749487104,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223175823228928,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176360099840,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176628535296,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176762753024,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176829861888,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176863416320,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176880193536,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176888582144,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176892776448,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176894873600,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176895922176,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896446464,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896708608,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896839680,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896905216,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896937984,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896954368,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896962560,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896966656,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896968704,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896969728,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970240,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970496,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970624,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970688,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970720,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970736,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970744,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970748,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970750,64,FLEN)
NAN_BOXED(6888677682342884585,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(279223176896970751,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704192,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704193,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704195,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704199,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704207,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704223,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704255,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704319,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704447,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997704703,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997705215,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997706239,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997708287,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997712383,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997720575,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997736959,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997769727,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997835263,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099997966335,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099998228479,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099998752767,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626099999801343,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626100001898495,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626100006092799,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626100014481407,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626100031258623,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626100064813055,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626100131921919,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626100266139647,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626100534575103,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626101071446015,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626102145187839,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626104292671487,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626108587638783,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626117177573375,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626134357442559,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626168717180927,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626237436657663,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626374875611135,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294626649753518079,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294627199509331967,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294628299020959743,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294630498044215295,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294634896090726399,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294643692183748607,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294661284369793023,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294696468741881855,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294766837486059519,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13294907574974414847,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13295189049951125503,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13295751999904546815,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13296877899811389439,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13296877899811389440,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13298003799718232064,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13298566749671653376,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13298848224648364032,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13298988962136719360,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299059330880897024,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299094515252985856,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299112107439030272,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299120903532052480,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299125301578563584,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299127500601819136,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299128600113446912,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129149869260800,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129424747167744,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129562186121216,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129630905597952,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129665265336320,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129682445205504,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129691035140096,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129695330107392,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129697477591040,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129698551332864,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699088203776,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699356639232,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699490856960,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699557965824,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699591520256,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699608297472,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699616686080,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699620880384,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699622977536,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699624026112,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699624550400,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699624812544,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699624943616,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625009152,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625041920,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625058304,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625066496,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625070592,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625072640,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625073664,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074176,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074432,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074560,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074624,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074656,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074672,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074680,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074684,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074686,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13299129699625074687,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6888763080292907503,64,FLEN)
NAN_BOXED(11516785895918244143,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815232,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815233,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815235,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815239,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815247,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815263,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815295,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815359,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815487,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774815743,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774816255,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774817279,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774819327,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774823423,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774831615,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774847999,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774880767,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429774946303,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429775077375,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429775339519,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429775863807,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429776912383,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429779009535,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429783203839,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429791592447,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429808369663,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429841924095,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940429909032959,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940430043250687,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940430311686143,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940430848557055,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940431922298879,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940434069782527,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940438364749823,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940446954684415,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940464134553599,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940498494291967,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940567213768703,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940704652722175,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308940979530629119,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308941529286443007,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308942628798070783,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308944827821326335,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308949225867837439,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308958021960859647,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9308975614146904063,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9309010798518992895,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9309081167263170559,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9309221904751525887,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9309503379728236543,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9310066329681657855,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9311192229588500479,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9311192229588500480,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9312318129495343104,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9312881079448764416,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313162554425475072,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313303291913830400,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313373660658008064,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313408845030096896,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313426437216141312,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313435233309163520,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313439631355674624,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313441830378930176,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313442929890557952,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313443479646371840,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313443754524278784,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313443891963232256,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313443960682708992,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313443995042447360,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444012222316544,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444020812251136,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444025107218432,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444027254702080,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444028328443904,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444028865314816,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029133750272,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029267968000,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029335076864,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029368631296,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029385408512,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029393797120,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029397991424,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029400088576,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029401137152,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029401661440,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029401923584,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402054656,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402120192,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402152960,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402169344,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402177536,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402181632,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402183680,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402184704,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185216,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185472,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185600,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185664,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185696,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185712,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185720,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185724,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185726,64,FLEN)
NAN_BOXED(6888767470944809293,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9313444029402185727,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377280,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377281,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377283,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377287,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377295,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377311,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377343,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377407,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377535,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377791,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505378303,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505379327,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505381375,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505385471,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505393663,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505410047,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505442815,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505508351,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505639423,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505901567,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979506425855,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979507474431,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979509571583,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979513765887,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979522154495,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979538931711,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979572486143,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979639595007,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979773812735,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697980042248191,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697980579119103,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697981652860927,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697983800344575,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697988095311871,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697996685246463,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247698013865115647,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247698048224854015,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247698116944330751,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247698254383284223,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247698529261191167,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247699079017005055,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247700178528632831,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247702377551888383,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247706775598399487,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247715571691421695,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247733163877466111,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247768348249554943,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247838716993732607,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247979454482087935,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(248260929458798591,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(248823879412219903,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(249949779319062527,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(249949779319062528,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(251075679225905152,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(251638629179326464,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(251920104156037120,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252060841644392448,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252131210388570112,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252166394760658944,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252183986946703360,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252192783039725568,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252197181086236672,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252199380109492224,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252200479621120000,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201029376933888,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201304254840832,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201441693794304,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201510413271040,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201544773009408,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201561952878592,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201570542813184,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201574837780480,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201576985264128,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201578059005952,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201578595876864,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201578864312320,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201578998530048,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579065638912,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579099193344,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579115970560,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579124359168,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579128553472,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579130650624,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579131699200,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579132223488,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579132485632,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579132616704,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579132682240,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579132715008,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579132731392,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579132739584,64,FLEN)
NAN_BOXED(6888801558293487353,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(252201579132743680,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
