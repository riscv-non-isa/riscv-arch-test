
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_99840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2effffffffff800; valaddr_reg:x3; val_offset:299520*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299520*0 + 3*0*FLEN/8, x4, x1, x2)

inst_99841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2effffffffffc00; valaddr_reg:x3; val_offset:299523*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299523*0 + 3*1*FLEN/8, x4, x1, x2)

inst_99842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2effffffffffe00; valaddr_reg:x3; val_offset:299526*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299526*0 + 3*2*FLEN/8, x4, x1, x2)

inst_99843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2efffffffffff00; valaddr_reg:x3; val_offset:299529*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299529*0 + 3*3*FLEN/8, x4, x1, x2)

inst_99844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2efffffffffff80; valaddr_reg:x3; val_offset:299532*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299532*0 + 3*4*FLEN/8, x4, x1, x2)

inst_99845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2efffffffffffc0; valaddr_reg:x3; val_offset:299535*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299535*0 + 3*5*FLEN/8, x4, x1, x2)

inst_99846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2efffffffffffe0; valaddr_reg:x3; val_offset:299538*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299538*0 + 3*6*FLEN/8, x4, x1, x2)

inst_99847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2effffffffffff0; valaddr_reg:x3; val_offset:299541*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299541*0 + 3*7*FLEN/8, x4, x1, x2)

inst_99848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2effffffffffff8; valaddr_reg:x3; val_offset:299544*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299544*0 + 3*8*FLEN/8, x4, x1, x2)

inst_99849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2effffffffffffc; valaddr_reg:x3; val_offset:299547*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299547*0 + 3*9*FLEN/8, x4, x1, x2)

inst_99850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2effffffffffffe; valaddr_reg:x3; val_offset:299550*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299550*0 + 3*10*FLEN/8, x4, x1, x2)

inst_99851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5259a68403b3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5259a68403b3; op2val:0x0;
op3val:0x2efffffffffffff; valaddr_reg:x3; val_offset:299553*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299553*0 + 3*11*FLEN/8, x4, x1, x2)

inst_99852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:299556*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299556*0 + 3*12*FLEN/8, x4, x1, x2)

inst_99853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:299559*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299559*0 + 3*13*FLEN/8, x4, x1, x2)

inst_99854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:299562*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299562*0 + 3*14*FLEN/8, x4, x1, x2)

inst_99855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:299565*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299565*0 + 3*15*FLEN/8, x4, x1, x2)

inst_99856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:299568*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299568*0 + 3*16*FLEN/8, x4, x1, x2)

inst_99857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:299571*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299571*0 + 3*17*FLEN/8, x4, x1, x2)

inst_99858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:299574*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299574*0 + 3*18*FLEN/8, x4, x1, x2)

inst_99859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:299577*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299577*0 + 3*19*FLEN/8, x4, x1, x2)

inst_99860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:299580*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299580*0 + 3*20*FLEN/8, x4, x1, x2)

inst_99861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:299583*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299583*0 + 3*21*FLEN/8, x4, x1, x2)

inst_99862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:299586*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299586*0 + 3*22*FLEN/8, x4, x1, x2)

inst_99863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:299589*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299589*0 + 3*23*FLEN/8, x4, x1, x2)

inst_99864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:299592*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299592*0 + 3*24*FLEN/8, x4, x1, x2)

inst_99865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:299595*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299595*0 + 3*25*FLEN/8, x4, x1, x2)

inst_99866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:299598*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299598*0 + 3*26*FLEN/8, x4, x1, x2)

inst_99867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:299601*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299601*0 + 3*27*FLEN/8, x4, x1, x2)

inst_99868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:299604*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299604*0 + 3*28*FLEN/8, x4, x1, x2)

inst_99869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:299607*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299607*0 + 3*29*FLEN/8, x4, x1, x2)

inst_99870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:299610*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299610*0 + 3*30*FLEN/8, x4, x1, x2)

inst_99871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:299613*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299613*0 + 3*31*FLEN/8, x4, x1, x2)

inst_99872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:299616*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299616*0 + 3*32*FLEN/8, x4, x1, x2)

inst_99873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:299619*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299619*0 + 3*33*FLEN/8, x4, x1, x2)

inst_99874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000000000; valaddr_reg:x3; val_offset:299622*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299622*0 + 3*34*FLEN/8, x4, x1, x2)

inst_99875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000000001; valaddr_reg:x3; val_offset:299625*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299625*0 + 3*35*FLEN/8, x4, x1, x2)

inst_99876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000000003; valaddr_reg:x3; val_offset:299628*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299628*0 + 3*36*FLEN/8, x4, x1, x2)

inst_99877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000000007; valaddr_reg:x3; val_offset:299631*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299631*0 + 3*37*FLEN/8, x4, x1, x2)

inst_99878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000000000f; valaddr_reg:x3; val_offset:299634*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299634*0 + 3*38*FLEN/8, x4, x1, x2)

inst_99879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000000001f; valaddr_reg:x3; val_offset:299637*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299637*0 + 3*39*FLEN/8, x4, x1, x2)

inst_99880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000000003f; valaddr_reg:x3; val_offset:299640*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299640*0 + 3*40*FLEN/8, x4, x1, x2)

inst_99881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000000007f; valaddr_reg:x3; val_offset:299643*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299643*0 + 3*41*FLEN/8, x4, x1, x2)

inst_99882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000000000ff; valaddr_reg:x3; val_offset:299646*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299646*0 + 3*42*FLEN/8, x4, x1, x2)

inst_99883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000000001ff; valaddr_reg:x3; val_offset:299649*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299649*0 + 3*43*FLEN/8, x4, x1, x2)

inst_99884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000000003ff; valaddr_reg:x3; val_offset:299652*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299652*0 + 3*44*FLEN/8, x4, x1, x2)

inst_99885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000000007ff; valaddr_reg:x3; val_offset:299655*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299655*0 + 3*45*FLEN/8, x4, x1, x2)

inst_99886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000000fff; valaddr_reg:x3; val_offset:299658*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299658*0 + 3*46*FLEN/8, x4, x1, x2)

inst_99887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000001fff; valaddr_reg:x3; val_offset:299661*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299661*0 + 3*47*FLEN/8, x4, x1, x2)

inst_99888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000003fff; valaddr_reg:x3; val_offset:299664*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299664*0 + 3*48*FLEN/8, x4, x1, x2)

inst_99889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000007fff; valaddr_reg:x3; val_offset:299667*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299667*0 + 3*49*FLEN/8, x4, x1, x2)

inst_99890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000000ffff; valaddr_reg:x3; val_offset:299670*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299670*0 + 3*50*FLEN/8, x4, x1, x2)

inst_99891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000001ffff; valaddr_reg:x3; val_offset:299673*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299673*0 + 3*51*FLEN/8, x4, x1, x2)

inst_99892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000003ffff; valaddr_reg:x3; val_offset:299676*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299676*0 + 3*52*FLEN/8, x4, x1, x2)

inst_99893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000007ffff; valaddr_reg:x3; val_offset:299679*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299679*0 + 3*53*FLEN/8, x4, x1, x2)

inst_99894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000000fffff; valaddr_reg:x3; val_offset:299682*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299682*0 + 3*54*FLEN/8, x4, x1, x2)

inst_99895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000001fffff; valaddr_reg:x3; val_offset:299685*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299685*0 + 3*55*FLEN/8, x4, x1, x2)

inst_99896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000003fffff; valaddr_reg:x3; val_offset:299688*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299688*0 + 3*56*FLEN/8, x4, x1, x2)

inst_99897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000007fffff; valaddr_reg:x3; val_offset:299691*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299691*0 + 3*57*FLEN/8, x4, x1, x2)

inst_99898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000000ffffff; valaddr_reg:x3; val_offset:299694*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299694*0 + 3*58*FLEN/8, x4, x1, x2)

inst_99899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000001ffffff; valaddr_reg:x3; val_offset:299697*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299697*0 + 3*59*FLEN/8, x4, x1, x2)

inst_99900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000003ffffff; valaddr_reg:x3; val_offset:299700*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299700*0 + 3*60*FLEN/8, x4, x1, x2)

inst_99901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000007ffffff; valaddr_reg:x3; val_offset:299703*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299703*0 + 3*61*FLEN/8, x4, x1, x2)

inst_99902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000000fffffff; valaddr_reg:x3; val_offset:299706*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299706*0 + 3*62*FLEN/8, x4, x1, x2)

inst_99903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000001fffffff; valaddr_reg:x3; val_offset:299709*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299709*0 + 3*63*FLEN/8, x4, x1, x2)

inst_99904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000003fffffff; valaddr_reg:x3; val_offset:299712*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299712*0 + 3*64*FLEN/8, x4, x1, x2)

inst_99905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000007fffffff; valaddr_reg:x3; val_offset:299715*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299715*0 + 3*65*FLEN/8, x4, x1, x2)

inst_99906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00000ffffffff; valaddr_reg:x3; val_offset:299718*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299718*0 + 3*66*FLEN/8, x4, x1, x2)

inst_99907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00001ffffffff; valaddr_reg:x3; val_offset:299721*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299721*0 + 3*67*FLEN/8, x4, x1, x2)

inst_99908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00003ffffffff; valaddr_reg:x3; val_offset:299724*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299724*0 + 3*68*FLEN/8, x4, x1, x2)

inst_99909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00007ffffffff; valaddr_reg:x3; val_offset:299727*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299727*0 + 3*69*FLEN/8, x4, x1, x2)

inst_99910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0000fffffffff; valaddr_reg:x3; val_offset:299730*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299730*0 + 3*70*FLEN/8, x4, x1, x2)

inst_99911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0001fffffffff; valaddr_reg:x3; val_offset:299733*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299733*0 + 3*71*FLEN/8, x4, x1, x2)

inst_99912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0003fffffffff; valaddr_reg:x3; val_offset:299736*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299736*0 + 3*72*FLEN/8, x4, x1, x2)

inst_99913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0007fffffffff; valaddr_reg:x3; val_offset:299739*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299739*0 + 3*73*FLEN/8, x4, x1, x2)

inst_99914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e000ffffffffff; valaddr_reg:x3; val_offset:299742*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299742*0 + 3*74*FLEN/8, x4, x1, x2)

inst_99915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e001ffffffffff; valaddr_reg:x3; val_offset:299745*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299745*0 + 3*75*FLEN/8, x4, x1, x2)

inst_99916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e003ffffffffff; valaddr_reg:x3; val_offset:299748*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299748*0 + 3*76*FLEN/8, x4, x1, x2)

inst_99917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e007ffffffffff; valaddr_reg:x3; val_offset:299751*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299751*0 + 3*77*FLEN/8, x4, x1, x2)

inst_99918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e00fffffffffff; valaddr_reg:x3; val_offset:299754*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299754*0 + 3*78*FLEN/8, x4, x1, x2)

inst_99919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e01fffffffffff; valaddr_reg:x3; val_offset:299757*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299757*0 + 3*79*FLEN/8, x4, x1, x2)

inst_99920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e03fffffffffff; valaddr_reg:x3; val_offset:299760*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299760*0 + 3*80*FLEN/8, x4, x1, x2)

inst_99921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e07fffffffffff; valaddr_reg:x3; val_offset:299763*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299763*0 + 3*81*FLEN/8, x4, x1, x2)

inst_99922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e0ffffffffffff; valaddr_reg:x3; val_offset:299766*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299766*0 + 3*82*FLEN/8, x4, x1, x2)

inst_99923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e1ffffffffffff; valaddr_reg:x3; val_offset:299769*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299769*0 + 3*83*FLEN/8, x4, x1, x2)

inst_99924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e3ffffffffffff; valaddr_reg:x3; val_offset:299772*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299772*0 + 3*84*FLEN/8, x4, x1, x2)

inst_99925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e7ffffffffffff; valaddr_reg:x3; val_offset:299775*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299775*0 + 3*85*FLEN/8, x4, x1, x2)

inst_99926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80e8000000000000; valaddr_reg:x3; val_offset:299778*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299778*0 + 3*86*FLEN/8, x4, x1, x2)

inst_99927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80ec000000000000; valaddr_reg:x3; val_offset:299781*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299781*0 + 3*87*FLEN/8, x4, x1, x2)

inst_99928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80ee000000000000; valaddr_reg:x3; val_offset:299784*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299784*0 + 3*88*FLEN/8, x4, x1, x2)

inst_99929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80ef000000000000; valaddr_reg:x3; val_offset:299787*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299787*0 + 3*89*FLEN/8, x4, x1, x2)

inst_99930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80ef800000000000; valaddr_reg:x3; val_offset:299790*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299790*0 + 3*90*FLEN/8, x4, x1, x2)

inst_99931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efc00000000000; valaddr_reg:x3; val_offset:299793*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299793*0 + 3*91*FLEN/8, x4, x1, x2)

inst_99932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efe00000000000; valaddr_reg:x3; val_offset:299796*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299796*0 + 3*92*FLEN/8, x4, x1, x2)

inst_99933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80eff00000000000; valaddr_reg:x3; val_offset:299799*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299799*0 + 3*93*FLEN/8, x4, x1, x2)

inst_99934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80eff80000000000; valaddr_reg:x3; val_offset:299802*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299802*0 + 3*94*FLEN/8, x4, x1, x2)

inst_99935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effc0000000000; valaddr_reg:x3; val_offset:299805*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299805*0 + 3*95*FLEN/8, x4, x1, x2)

inst_99936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effe0000000000; valaddr_reg:x3; val_offset:299808*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299808*0 + 3*96*FLEN/8, x4, x1, x2)

inst_99937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efff0000000000; valaddr_reg:x3; val_offset:299811*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299811*0 + 3*97*FLEN/8, x4, x1, x2)

inst_99938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efff8000000000; valaddr_reg:x3; val_offset:299814*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299814*0 + 3*98*FLEN/8, x4, x1, x2)

inst_99939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffc000000000; valaddr_reg:x3; val_offset:299817*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299817*0 + 3*99*FLEN/8, x4, x1, x2)

inst_99940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffe000000000; valaddr_reg:x3; val_offset:299820*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299820*0 + 3*100*FLEN/8, x4, x1, x2)

inst_99941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effff000000000; valaddr_reg:x3; val_offset:299823*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299823*0 + 3*101*FLEN/8, x4, x1, x2)

inst_99942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effff800000000; valaddr_reg:x3; val_offset:299826*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299826*0 + 3*102*FLEN/8, x4, x1, x2)

inst_99943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffc00000000; valaddr_reg:x3; val_offset:299829*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299829*0 + 3*103*FLEN/8, x4, x1, x2)

inst_99944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffe00000000; valaddr_reg:x3; val_offset:299832*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299832*0 + 3*104*FLEN/8, x4, x1, x2)

inst_99945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffff00000000; valaddr_reg:x3; val_offset:299835*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299835*0 + 3*105*FLEN/8, x4, x1, x2)

inst_99946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffff80000000; valaddr_reg:x3; val_offset:299838*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299838*0 + 3*106*FLEN/8, x4, x1, x2)

inst_99947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffc0000000; valaddr_reg:x3; val_offset:299841*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299841*0 + 3*107*FLEN/8, x4, x1, x2)

inst_99948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffe0000000; valaddr_reg:x3; val_offset:299844*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299844*0 + 3*108*FLEN/8, x4, x1, x2)

inst_99949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffff0000000; valaddr_reg:x3; val_offset:299847*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299847*0 + 3*109*FLEN/8, x4, x1, x2)

inst_99950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffff8000000; valaddr_reg:x3; val_offset:299850*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299850*0 + 3*110*FLEN/8, x4, x1, x2)

inst_99951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffc000000; valaddr_reg:x3; val_offset:299853*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299853*0 + 3*111*FLEN/8, x4, x1, x2)

inst_99952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffe000000; valaddr_reg:x3; val_offset:299856*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299856*0 + 3*112*FLEN/8, x4, x1, x2)

inst_99953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffff000000; valaddr_reg:x3; val_offset:299859*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299859*0 + 3*113*FLEN/8, x4, x1, x2)

inst_99954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffff800000; valaddr_reg:x3; val_offset:299862*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299862*0 + 3*114*FLEN/8, x4, x1, x2)

inst_99955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffc00000; valaddr_reg:x3; val_offset:299865*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299865*0 + 3*115*FLEN/8, x4, x1, x2)

inst_99956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffe00000; valaddr_reg:x3; val_offset:299868*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299868*0 + 3*116*FLEN/8, x4, x1, x2)

inst_99957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffff00000; valaddr_reg:x3; val_offset:299871*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299871*0 + 3*117*FLEN/8, x4, x1, x2)

inst_99958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffff80000; valaddr_reg:x3; val_offset:299874*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299874*0 + 3*118*FLEN/8, x4, x1, x2)

inst_99959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffc0000; valaddr_reg:x3; val_offset:299877*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299877*0 + 3*119*FLEN/8, x4, x1, x2)

inst_99960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffe0000; valaddr_reg:x3; val_offset:299880*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299880*0 + 3*120*FLEN/8, x4, x1, x2)

inst_99961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffff0000; valaddr_reg:x3; val_offset:299883*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299883*0 + 3*121*FLEN/8, x4, x1, x2)

inst_99962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffff8000; valaddr_reg:x3; val_offset:299886*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299886*0 + 3*122*FLEN/8, x4, x1, x2)

inst_99963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffffc000; valaddr_reg:x3; val_offset:299889*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299889*0 + 3*123*FLEN/8, x4, x1, x2)

inst_99964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffffe000; valaddr_reg:x3; val_offset:299892*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299892*0 + 3*124*FLEN/8, x4, x1, x2)

inst_99965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffff000; valaddr_reg:x3; val_offset:299895*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299895*0 + 3*125*FLEN/8, x4, x1, x2)

inst_99966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffff800; valaddr_reg:x3; val_offset:299898*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299898*0 + 3*126*FLEN/8, x4, x1, x2)

inst_99967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffffc00; valaddr_reg:x3; val_offset:299901*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299901*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_99968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffffe00; valaddr_reg:x3; val_offset:299904*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299904*0 + 3*128*FLEN/8, x4, x1, x2)

inst_99969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffffff00; valaddr_reg:x3; val_offset:299907*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299907*0 + 3*129*FLEN/8, x4, x1, x2)

inst_99970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffffff80; valaddr_reg:x3; val_offset:299910*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299910*0 + 3*130*FLEN/8, x4, x1, x2)

inst_99971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffffffc0; valaddr_reg:x3; val_offset:299913*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299913*0 + 3*131*FLEN/8, x4, x1, x2)

inst_99972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffffffe0; valaddr_reg:x3; val_offset:299916*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299916*0 + 3*132*FLEN/8, x4, x1, x2)

inst_99973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffffff0; valaddr_reg:x3; val_offset:299919*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299919*0 + 3*133*FLEN/8, x4, x1, x2)

inst_99974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffffff8; valaddr_reg:x3; val_offset:299922*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299922*0 + 3*134*FLEN/8, x4, x1, x2)

inst_99975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffffffc; valaddr_reg:x3; val_offset:299925*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299925*0 + 3*135*FLEN/8, x4, x1, x2)

inst_99976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80effffffffffffe; valaddr_reg:x3; val_offset:299928*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299928*0 + 3*136*FLEN/8, x4, x1, x2)

inst_99977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf531821f96d8c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00e and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf531821f96d8c; op2val:0x8000;
op3val:0x80efffffffffffff; valaddr_reg:x3; val_offset:299931*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299931*0 + 3*137*FLEN/8, x4, x1, x2)

inst_99978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000000000; valaddr_reg:x3; val_offset:299934*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299934*0 + 3*138*FLEN/8, x4, x1, x2)

inst_99979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000000001; valaddr_reg:x3; val_offset:299937*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299937*0 + 3*139*FLEN/8, x4, x1, x2)

inst_99980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000000003; valaddr_reg:x3; val_offset:299940*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299940*0 + 3*140*FLEN/8, x4, x1, x2)

inst_99981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000000007; valaddr_reg:x3; val_offset:299943*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299943*0 + 3*141*FLEN/8, x4, x1, x2)

inst_99982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000000000f; valaddr_reg:x3; val_offset:299946*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299946*0 + 3*142*FLEN/8, x4, x1, x2)

inst_99983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000000001f; valaddr_reg:x3; val_offset:299949*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299949*0 + 3*143*FLEN/8, x4, x1, x2)

inst_99984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000000003f; valaddr_reg:x3; val_offset:299952*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299952*0 + 3*144*FLEN/8, x4, x1, x2)

inst_99985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000000007f; valaddr_reg:x3; val_offset:299955*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299955*0 + 3*145*FLEN/8, x4, x1, x2)

inst_99986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000000000ff; valaddr_reg:x3; val_offset:299958*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299958*0 + 3*146*FLEN/8, x4, x1, x2)

inst_99987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000000001ff; valaddr_reg:x3; val_offset:299961*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299961*0 + 3*147*FLEN/8, x4, x1, x2)

inst_99988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000000003ff; valaddr_reg:x3; val_offset:299964*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299964*0 + 3*148*FLEN/8, x4, x1, x2)

inst_99989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000000007ff; valaddr_reg:x3; val_offset:299967*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299967*0 + 3*149*FLEN/8, x4, x1, x2)

inst_99990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000000fff; valaddr_reg:x3; val_offset:299970*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299970*0 + 3*150*FLEN/8, x4, x1, x2)

inst_99991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000001fff; valaddr_reg:x3; val_offset:299973*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299973*0 + 3*151*FLEN/8, x4, x1, x2)

inst_99992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000003fff; valaddr_reg:x3; val_offset:299976*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299976*0 + 3*152*FLEN/8, x4, x1, x2)

inst_99993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000007fff; valaddr_reg:x3; val_offset:299979*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299979*0 + 3*153*FLEN/8, x4, x1, x2)

inst_99994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000000ffff; valaddr_reg:x3; val_offset:299982*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299982*0 + 3*154*FLEN/8, x4, x1, x2)

inst_99995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000001ffff; valaddr_reg:x3; val_offset:299985*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299985*0 + 3*155*FLEN/8, x4, x1, x2)

inst_99996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000003ffff; valaddr_reg:x3; val_offset:299988*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299988*0 + 3*156*FLEN/8, x4, x1, x2)

inst_99997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000007ffff; valaddr_reg:x3; val_offset:299991*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299991*0 + 3*157*FLEN/8, x4, x1, x2)

inst_99998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000000fffff; valaddr_reg:x3; val_offset:299994*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299994*0 + 3*158*FLEN/8, x4, x1, x2)

inst_99999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000001fffff; valaddr_reg:x3; val_offset:299997*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 299997*0 + 3*159*FLEN/8, x4, x1, x2)

inst_100000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000003fffff; valaddr_reg:x3; val_offset:300000*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300000*0 + 3*160*FLEN/8, x4, x1, x2)

inst_100001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000007fffff; valaddr_reg:x3; val_offset:300003*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300003*0 + 3*161*FLEN/8, x4, x1, x2)

inst_100002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000000ffffff; valaddr_reg:x3; val_offset:300006*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300006*0 + 3*162*FLEN/8, x4, x1, x2)

inst_100003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000001ffffff; valaddr_reg:x3; val_offset:300009*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300009*0 + 3*163*FLEN/8, x4, x1, x2)

inst_100004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000003ffffff; valaddr_reg:x3; val_offset:300012*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300012*0 + 3*164*FLEN/8, x4, x1, x2)

inst_100005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000007ffffff; valaddr_reg:x3; val_offset:300015*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300015*0 + 3*165*FLEN/8, x4, x1, x2)

inst_100006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000000fffffff; valaddr_reg:x3; val_offset:300018*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300018*0 + 3*166*FLEN/8, x4, x1, x2)

inst_100007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000001fffffff; valaddr_reg:x3; val_offset:300021*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300021*0 + 3*167*FLEN/8, x4, x1, x2)

inst_100008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000003fffffff; valaddr_reg:x3; val_offset:300024*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300024*0 + 3*168*FLEN/8, x4, x1, x2)

inst_100009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000007fffffff; valaddr_reg:x3; val_offset:300027*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300027*0 + 3*169*FLEN/8, x4, x1, x2)

inst_100010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600000ffffffff; valaddr_reg:x3; val_offset:300030*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300030*0 + 3*170*FLEN/8, x4, x1, x2)

inst_100011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600001ffffffff; valaddr_reg:x3; val_offset:300033*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300033*0 + 3*171*FLEN/8, x4, x1, x2)

inst_100012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600003ffffffff; valaddr_reg:x3; val_offset:300036*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300036*0 + 3*172*FLEN/8, x4, x1, x2)

inst_100013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600007ffffffff; valaddr_reg:x3; val_offset:300039*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300039*0 + 3*173*FLEN/8, x4, x1, x2)

inst_100014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60000fffffffff; valaddr_reg:x3; val_offset:300042*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300042*0 + 3*174*FLEN/8, x4, x1, x2)

inst_100015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60001fffffffff; valaddr_reg:x3; val_offset:300045*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300045*0 + 3*175*FLEN/8, x4, x1, x2)

inst_100016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60003fffffffff; valaddr_reg:x3; val_offset:300048*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300048*0 + 3*176*FLEN/8, x4, x1, x2)

inst_100017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60007fffffffff; valaddr_reg:x3; val_offset:300051*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300051*0 + 3*177*FLEN/8, x4, x1, x2)

inst_100018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6000ffffffffff; valaddr_reg:x3; val_offset:300054*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300054*0 + 3*178*FLEN/8, x4, x1, x2)

inst_100019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6001ffffffffff; valaddr_reg:x3; val_offset:300057*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300057*0 + 3*179*FLEN/8, x4, x1, x2)

inst_100020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6003ffffffffff; valaddr_reg:x3; val_offset:300060*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300060*0 + 3*180*FLEN/8, x4, x1, x2)

inst_100021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6007ffffffffff; valaddr_reg:x3; val_offset:300063*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300063*0 + 3*181*FLEN/8, x4, x1, x2)

inst_100022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d600fffffffffff; valaddr_reg:x3; val_offset:300066*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300066*0 + 3*182*FLEN/8, x4, x1, x2)

inst_100023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d601fffffffffff; valaddr_reg:x3; val_offset:300069*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300069*0 + 3*183*FLEN/8, x4, x1, x2)

inst_100024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d603fffffffffff; valaddr_reg:x3; val_offset:300072*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300072*0 + 3*184*FLEN/8, x4, x1, x2)

inst_100025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d607fffffffffff; valaddr_reg:x3; val_offset:300075*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300075*0 + 3*185*FLEN/8, x4, x1, x2)

inst_100026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d60ffffffffffff; valaddr_reg:x3; val_offset:300078*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300078*0 + 3*186*FLEN/8, x4, x1, x2)

inst_100027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d61ffffffffffff; valaddr_reg:x3; val_offset:300081*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300081*0 + 3*187*FLEN/8, x4, x1, x2)

inst_100028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d63ffffffffffff; valaddr_reg:x3; val_offset:300084*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300084*0 + 3*188*FLEN/8, x4, x1, x2)

inst_100029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d67ffffffffffff; valaddr_reg:x3; val_offset:300087*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300087*0 + 3*189*FLEN/8, x4, x1, x2)

inst_100030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d68000000000000; valaddr_reg:x3; val_offset:300090*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300090*0 + 3*190*FLEN/8, x4, x1, x2)

inst_100031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6c000000000000; valaddr_reg:x3; val_offset:300093*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300093*0 + 3*191*FLEN/8, x4, x1, x2)

inst_100032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6e000000000000; valaddr_reg:x3; val_offset:300096*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300096*0 + 3*192*FLEN/8, x4, x1, x2)

inst_100033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6f000000000000; valaddr_reg:x3; val_offset:300099*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300099*0 + 3*193*FLEN/8, x4, x1, x2)

inst_100034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6f800000000000; valaddr_reg:x3; val_offset:300102*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300102*0 + 3*194*FLEN/8, x4, x1, x2)

inst_100035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fc00000000000; valaddr_reg:x3; val_offset:300105*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300105*0 + 3*195*FLEN/8, x4, x1, x2)

inst_100036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fe00000000000; valaddr_reg:x3; val_offset:300108*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300108*0 + 3*196*FLEN/8, x4, x1, x2)

inst_100037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ff00000000000; valaddr_reg:x3; val_offset:300111*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300111*0 + 3*197*FLEN/8, x4, x1, x2)

inst_100038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ff80000000000; valaddr_reg:x3; val_offset:300114*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300114*0 + 3*198*FLEN/8, x4, x1, x2)

inst_100039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffc0000000000; valaddr_reg:x3; val_offset:300117*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300117*0 + 3*199*FLEN/8, x4, x1, x2)

inst_100040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffe0000000000; valaddr_reg:x3; val_offset:300120*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300120*0 + 3*200*FLEN/8, x4, x1, x2)

inst_100041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fff0000000000; valaddr_reg:x3; val_offset:300123*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300123*0 + 3*201*FLEN/8, x4, x1, x2)

inst_100042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fff8000000000; valaddr_reg:x3; val_offset:300126*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300126*0 + 3*202*FLEN/8, x4, x1, x2)

inst_100043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffc000000000; valaddr_reg:x3; val_offset:300129*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300129*0 + 3*203*FLEN/8, x4, x1, x2)

inst_100044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffe000000000; valaddr_reg:x3; val_offset:300132*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300132*0 + 3*204*FLEN/8, x4, x1, x2)

inst_100045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffff000000000; valaddr_reg:x3; val_offset:300135*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300135*0 + 3*205*FLEN/8, x4, x1, x2)

inst_100046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffff800000000; valaddr_reg:x3; val_offset:300138*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300138*0 + 3*206*FLEN/8, x4, x1, x2)

inst_100047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffc00000000; valaddr_reg:x3; val_offset:300141*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300141*0 + 3*207*FLEN/8, x4, x1, x2)

inst_100048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffe00000000; valaddr_reg:x3; val_offset:300144*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300144*0 + 3*208*FLEN/8, x4, x1, x2)

inst_100049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffff00000000; valaddr_reg:x3; val_offset:300147*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300147*0 + 3*209*FLEN/8, x4, x1, x2)

inst_100050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffff80000000; valaddr_reg:x3; val_offset:300150*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300150*0 + 3*210*FLEN/8, x4, x1, x2)

inst_100051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffc0000000; valaddr_reg:x3; val_offset:300153*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300153*0 + 3*211*FLEN/8, x4, x1, x2)

inst_100052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffe0000000; valaddr_reg:x3; val_offset:300156*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300156*0 + 3*212*FLEN/8, x4, x1, x2)

inst_100053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffff0000000; valaddr_reg:x3; val_offset:300159*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300159*0 + 3*213*FLEN/8, x4, x1, x2)

inst_100054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffff8000000; valaddr_reg:x3; val_offset:300162*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300162*0 + 3*214*FLEN/8, x4, x1, x2)

inst_100055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffc000000; valaddr_reg:x3; val_offset:300165*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300165*0 + 3*215*FLEN/8, x4, x1, x2)

inst_100056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffe000000; valaddr_reg:x3; val_offset:300168*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300168*0 + 3*216*FLEN/8, x4, x1, x2)

inst_100057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffff000000; valaddr_reg:x3; val_offset:300171*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300171*0 + 3*217*FLEN/8, x4, x1, x2)

inst_100058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffff800000; valaddr_reg:x3; val_offset:300174*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300174*0 + 3*218*FLEN/8, x4, x1, x2)

inst_100059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffc00000; valaddr_reg:x3; val_offset:300177*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300177*0 + 3*219*FLEN/8, x4, x1, x2)

inst_100060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffe00000; valaddr_reg:x3; val_offset:300180*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300180*0 + 3*220*FLEN/8, x4, x1, x2)

inst_100061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffff00000; valaddr_reg:x3; val_offset:300183*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300183*0 + 3*221*FLEN/8, x4, x1, x2)

inst_100062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffff80000; valaddr_reg:x3; val_offset:300186*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300186*0 + 3*222*FLEN/8, x4, x1, x2)

inst_100063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffc0000; valaddr_reg:x3; val_offset:300189*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300189*0 + 3*223*FLEN/8, x4, x1, x2)

inst_100064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffe0000; valaddr_reg:x3; val_offset:300192*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300192*0 + 3*224*FLEN/8, x4, x1, x2)

inst_100065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffff0000; valaddr_reg:x3; val_offset:300195*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300195*0 + 3*225*FLEN/8, x4, x1, x2)

inst_100066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffff8000; valaddr_reg:x3; val_offset:300198*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300198*0 + 3*226*FLEN/8, x4, x1, x2)

inst_100067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffffc000; valaddr_reg:x3; val_offset:300201*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300201*0 + 3*227*FLEN/8, x4, x1, x2)

inst_100068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffffe000; valaddr_reg:x3; val_offset:300204*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300204*0 + 3*228*FLEN/8, x4, x1, x2)

inst_100069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffff000; valaddr_reg:x3; val_offset:300207*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300207*0 + 3*229*FLEN/8, x4, x1, x2)

inst_100070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffff800; valaddr_reg:x3; val_offset:300210*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300210*0 + 3*230*FLEN/8, x4, x1, x2)

inst_100071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffffc00; valaddr_reg:x3; val_offset:300213*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300213*0 + 3*231*FLEN/8, x4, x1, x2)

inst_100072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffffe00; valaddr_reg:x3; val_offset:300216*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300216*0 + 3*232*FLEN/8, x4, x1, x2)

inst_100073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffffff00; valaddr_reg:x3; val_offset:300219*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300219*0 + 3*233*FLEN/8, x4, x1, x2)

inst_100074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffffff80; valaddr_reg:x3; val_offset:300222*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300222*0 + 3*234*FLEN/8, x4, x1, x2)

inst_100075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffffffc0; valaddr_reg:x3; val_offset:300225*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300225*0 + 3*235*FLEN/8, x4, x1, x2)

inst_100076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffffffe0; valaddr_reg:x3; val_offset:300228*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300228*0 + 3*236*FLEN/8, x4, x1, x2)

inst_100077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffffff0; valaddr_reg:x3; val_offset:300231*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300231*0 + 3*237*FLEN/8, x4, x1, x2)

inst_100078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffffff8; valaddr_reg:x3; val_offset:300234*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300234*0 + 3*238*FLEN/8, x4, x1, x2)

inst_100079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffffffc; valaddr_reg:x3; val_offset:300237*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300237*0 + 3*239*FLEN/8, x4, x1, x2)

inst_100080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6ffffffffffffe; valaddr_reg:x3; val_offset:300240*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300240*0 + 3*240*FLEN/8, x4, x1, x2)

inst_100081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3d6 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3d6fffffffffffff; valaddr_reg:x3; val_offset:300243*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300243*0 + 3*241*FLEN/8, x4, x1, x2)

inst_100082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:300246*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300246*0 + 3*242*FLEN/8, x4, x1, x2)

inst_100083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:300249*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300249*0 + 3*243*FLEN/8, x4, x1, x2)

inst_100084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:300252*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300252*0 + 3*244*FLEN/8, x4, x1, x2)

inst_100085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:300255*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300255*0 + 3*245*FLEN/8, x4, x1, x2)

inst_100086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:300258*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300258*0 + 3*246*FLEN/8, x4, x1, x2)

inst_100087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:300261*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300261*0 + 3*247*FLEN/8, x4, x1, x2)

inst_100088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:300264*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300264*0 + 3*248*FLEN/8, x4, x1, x2)

inst_100089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:300267*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300267*0 + 3*249*FLEN/8, x4, x1, x2)

inst_100090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:300270*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300270*0 + 3*250*FLEN/8, x4, x1, x2)

inst_100091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:300273*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300273*0 + 3*251*FLEN/8, x4, x1, x2)

inst_100092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:300276*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300276*0 + 3*252*FLEN/8, x4, x1, x2)

inst_100093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:300279*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300279*0 + 3*253*FLEN/8, x4, x1, x2)

inst_100094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:300282*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300282*0 + 3*254*FLEN/8, x4, x1, x2)

inst_100095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:300285*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300285*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_100096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:300288*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300288*0 + 3*256*FLEN/8, x4, x1, x2)

inst_100097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:300291*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300291*0 + 3*257*FLEN/8, x4, x1, x2)

inst_100098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:300294*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300294*0 + 3*258*FLEN/8, x4, x1, x2)

inst_100099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:300297*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300297*0 + 3*259*FLEN/8, x4, x1, x2)

inst_100100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:300300*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300300*0 + 3*260*FLEN/8, x4, x1, x2)

inst_100101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:300303*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300303*0 + 3*261*FLEN/8, x4, x1, x2)

inst_100102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:300306*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300306*0 + 3*262*FLEN/8, x4, x1, x2)

inst_100103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf5e2a034a7a19 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x0528c791f1405 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf5e2a034a7a19; op2val:0x2030528c791f1405;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:300309*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300309*0 + 3*263*FLEN/8, x4, x1, x2)

inst_100104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:300312*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300312*0 + 3*264*FLEN/8, x4, x1, x2)

inst_100105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:300315*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300315*0 + 3*265*FLEN/8, x4, x1, x2)

inst_100106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:300318*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300318*0 + 3*266*FLEN/8, x4, x1, x2)

inst_100107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:300321*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300321*0 + 3*267*FLEN/8, x4, x1, x2)

inst_100108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:300324*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300324*0 + 3*268*FLEN/8, x4, x1, x2)

inst_100109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:300327*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300327*0 + 3*269*FLEN/8, x4, x1, x2)

inst_100110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:300330*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300330*0 + 3*270*FLEN/8, x4, x1, x2)

inst_100111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:300333*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300333*0 + 3*271*FLEN/8, x4, x1, x2)

inst_100112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:300336*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300336*0 + 3*272*FLEN/8, x4, x1, x2)

inst_100113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:300339*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300339*0 + 3*273*FLEN/8, x4, x1, x2)

inst_100114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:300342*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300342*0 + 3*274*FLEN/8, x4, x1, x2)

inst_100115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:300345*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300345*0 + 3*275*FLEN/8, x4, x1, x2)

inst_100116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:300348*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300348*0 + 3*276*FLEN/8, x4, x1, x2)

inst_100117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:300351*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300351*0 + 3*277*FLEN/8, x4, x1, x2)

inst_100118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:300354*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300354*0 + 3*278*FLEN/8, x4, x1, x2)

inst_100119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:300357*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300357*0 + 3*279*FLEN/8, x4, x1, x2)

inst_100120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:300360*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300360*0 + 3*280*FLEN/8, x4, x1, x2)

inst_100121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:300363*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300363*0 + 3*281*FLEN/8, x4, x1, x2)

inst_100122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:300366*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300366*0 + 3*282*FLEN/8, x4, x1, x2)

inst_100123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:300369*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300369*0 + 3*283*FLEN/8, x4, x1, x2)

inst_100124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:300372*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300372*0 + 3*284*FLEN/8, x4, x1, x2)

inst_100125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:300375*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300375*0 + 3*285*FLEN/8, x4, x1, x2)

inst_100126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000000000; valaddr_reg:x3; val_offset:300378*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300378*0 + 3*286*FLEN/8, x4, x1, x2)

inst_100127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000000001; valaddr_reg:x3; val_offset:300381*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300381*0 + 3*287*FLEN/8, x4, x1, x2)

inst_100128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000000003; valaddr_reg:x3; val_offset:300384*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300384*0 + 3*288*FLEN/8, x4, x1, x2)

inst_100129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000000007; valaddr_reg:x3; val_offset:300387*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300387*0 + 3*289*FLEN/8, x4, x1, x2)

inst_100130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000000000f; valaddr_reg:x3; val_offset:300390*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300390*0 + 3*290*FLEN/8, x4, x1, x2)

inst_100131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000000001f; valaddr_reg:x3; val_offset:300393*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300393*0 + 3*291*FLEN/8, x4, x1, x2)

inst_100132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000000003f; valaddr_reg:x3; val_offset:300396*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300396*0 + 3*292*FLEN/8, x4, x1, x2)

inst_100133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000000007f; valaddr_reg:x3; val_offset:300399*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300399*0 + 3*293*FLEN/8, x4, x1, x2)

inst_100134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000000000ff; valaddr_reg:x3; val_offset:300402*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300402*0 + 3*294*FLEN/8, x4, x1, x2)

inst_100135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000000001ff; valaddr_reg:x3; val_offset:300405*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300405*0 + 3*295*FLEN/8, x4, x1, x2)

inst_100136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000000003ff; valaddr_reg:x3; val_offset:300408*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300408*0 + 3*296*FLEN/8, x4, x1, x2)

inst_100137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000000007ff; valaddr_reg:x3; val_offset:300411*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300411*0 + 3*297*FLEN/8, x4, x1, x2)

inst_100138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000000fff; valaddr_reg:x3; val_offset:300414*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300414*0 + 3*298*FLEN/8, x4, x1, x2)

inst_100139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000001fff; valaddr_reg:x3; val_offset:300417*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300417*0 + 3*299*FLEN/8, x4, x1, x2)

inst_100140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000003fff; valaddr_reg:x3; val_offset:300420*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300420*0 + 3*300*FLEN/8, x4, x1, x2)

inst_100141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000007fff; valaddr_reg:x3; val_offset:300423*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300423*0 + 3*301*FLEN/8, x4, x1, x2)

inst_100142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000000ffff; valaddr_reg:x3; val_offset:300426*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300426*0 + 3*302*FLEN/8, x4, x1, x2)

inst_100143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000001ffff; valaddr_reg:x3; val_offset:300429*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300429*0 + 3*303*FLEN/8, x4, x1, x2)

inst_100144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000003ffff; valaddr_reg:x3; val_offset:300432*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300432*0 + 3*304*FLEN/8, x4, x1, x2)

inst_100145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000007ffff; valaddr_reg:x3; val_offset:300435*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300435*0 + 3*305*FLEN/8, x4, x1, x2)

inst_100146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000000fffff; valaddr_reg:x3; val_offset:300438*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300438*0 + 3*306*FLEN/8, x4, x1, x2)

inst_100147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000001fffff; valaddr_reg:x3; val_offset:300441*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300441*0 + 3*307*FLEN/8, x4, x1, x2)

inst_100148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000003fffff; valaddr_reg:x3; val_offset:300444*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300444*0 + 3*308*FLEN/8, x4, x1, x2)

inst_100149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000007fffff; valaddr_reg:x3; val_offset:300447*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300447*0 + 3*309*FLEN/8, x4, x1, x2)

inst_100150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000000ffffff; valaddr_reg:x3; val_offset:300450*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300450*0 + 3*310*FLEN/8, x4, x1, x2)

inst_100151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000001ffffff; valaddr_reg:x3; val_offset:300453*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300453*0 + 3*311*FLEN/8, x4, x1, x2)

inst_100152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000003ffffff; valaddr_reg:x3; val_offset:300456*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300456*0 + 3*312*FLEN/8, x4, x1, x2)

inst_100153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000007ffffff; valaddr_reg:x3; val_offset:300459*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300459*0 + 3*313*FLEN/8, x4, x1, x2)

inst_100154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000000fffffff; valaddr_reg:x3; val_offset:300462*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300462*0 + 3*314*FLEN/8, x4, x1, x2)

inst_100155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000001fffffff; valaddr_reg:x3; val_offset:300465*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300465*0 + 3*315*FLEN/8, x4, x1, x2)

inst_100156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000003fffffff; valaddr_reg:x3; val_offset:300468*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300468*0 + 3*316*FLEN/8, x4, x1, x2)

inst_100157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000007fffffff; valaddr_reg:x3; val_offset:300471*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300471*0 + 3*317*FLEN/8, x4, x1, x2)

inst_100158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500000ffffffff; valaddr_reg:x3; val_offset:300474*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300474*0 + 3*318*FLEN/8, x4, x1, x2)

inst_100159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500001ffffffff; valaddr_reg:x3; val_offset:300477*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300477*0 + 3*319*FLEN/8, x4, x1, x2)

inst_100160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500003ffffffff; valaddr_reg:x3; val_offset:300480*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300480*0 + 3*320*FLEN/8, x4, x1, x2)

inst_100161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500007ffffffff; valaddr_reg:x3; val_offset:300483*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300483*0 + 3*321*FLEN/8, x4, x1, x2)

inst_100162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350000fffffffff; valaddr_reg:x3; val_offset:300486*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300486*0 + 3*322*FLEN/8, x4, x1, x2)

inst_100163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350001fffffffff; valaddr_reg:x3; val_offset:300489*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300489*0 + 3*323*FLEN/8, x4, x1, x2)

inst_100164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350003fffffffff; valaddr_reg:x3; val_offset:300492*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300492*0 + 3*324*FLEN/8, x4, x1, x2)

inst_100165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350007fffffffff; valaddr_reg:x3; val_offset:300495*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300495*0 + 3*325*FLEN/8, x4, x1, x2)

inst_100166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835000ffffffffff; valaddr_reg:x3; val_offset:300498*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300498*0 + 3*326*FLEN/8, x4, x1, x2)

inst_100167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835001ffffffffff; valaddr_reg:x3; val_offset:300501*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300501*0 + 3*327*FLEN/8, x4, x1, x2)

inst_100168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835003ffffffffff; valaddr_reg:x3; val_offset:300504*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300504*0 + 3*328*FLEN/8, x4, x1, x2)

inst_100169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835007ffffffffff; valaddr_reg:x3; val_offset:300507*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300507*0 + 3*329*FLEN/8, x4, x1, x2)

inst_100170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83500fffffffffff; valaddr_reg:x3; val_offset:300510*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300510*0 + 3*330*FLEN/8, x4, x1, x2)

inst_100171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83501fffffffffff; valaddr_reg:x3; val_offset:300513*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300513*0 + 3*331*FLEN/8, x4, x1, x2)

inst_100172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83503fffffffffff; valaddr_reg:x3; val_offset:300516*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300516*0 + 3*332*FLEN/8, x4, x1, x2)

inst_100173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x83507fffffffffff; valaddr_reg:x3; val_offset:300519*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300519*0 + 3*333*FLEN/8, x4, x1, x2)

inst_100174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8350ffffffffffff; valaddr_reg:x3; val_offset:300522*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300522*0 + 3*334*FLEN/8, x4, x1, x2)

inst_100175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8351ffffffffffff; valaddr_reg:x3; val_offset:300525*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300525*0 + 3*335*FLEN/8, x4, x1, x2)

inst_100176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8353ffffffffffff; valaddr_reg:x3; val_offset:300528*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300528*0 + 3*336*FLEN/8, x4, x1, x2)

inst_100177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8357ffffffffffff; valaddr_reg:x3; val_offset:300531*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300531*0 + 3*337*FLEN/8, x4, x1, x2)

inst_100178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x8358000000000000; valaddr_reg:x3; val_offset:300534*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300534*0 + 3*338*FLEN/8, x4, x1, x2)

inst_100179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835c000000000000; valaddr_reg:x3; val_offset:300537*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300537*0 + 3*339*FLEN/8, x4, x1, x2)

inst_100180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835e000000000000; valaddr_reg:x3; val_offset:300540*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300540*0 + 3*340*FLEN/8, x4, x1, x2)

inst_100181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835f000000000000; valaddr_reg:x3; val_offset:300543*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300543*0 + 3*341*FLEN/8, x4, x1, x2)

inst_100182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835f800000000000; valaddr_reg:x3; val_offset:300546*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300546*0 + 3*342*FLEN/8, x4, x1, x2)

inst_100183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fc00000000000; valaddr_reg:x3; val_offset:300549*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300549*0 + 3*343*FLEN/8, x4, x1, x2)

inst_100184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fe00000000000; valaddr_reg:x3; val_offset:300552*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300552*0 + 3*344*FLEN/8, x4, x1, x2)

inst_100185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ff00000000000; valaddr_reg:x3; val_offset:300555*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300555*0 + 3*345*FLEN/8, x4, x1, x2)

inst_100186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ff80000000000; valaddr_reg:x3; val_offset:300558*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300558*0 + 3*346*FLEN/8, x4, x1, x2)

inst_100187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffc0000000000; valaddr_reg:x3; val_offset:300561*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300561*0 + 3*347*FLEN/8, x4, x1, x2)

inst_100188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffe0000000000; valaddr_reg:x3; val_offset:300564*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300564*0 + 3*348*FLEN/8, x4, x1, x2)

inst_100189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fff0000000000; valaddr_reg:x3; val_offset:300567*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300567*0 + 3*349*FLEN/8, x4, x1, x2)

inst_100190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fff8000000000; valaddr_reg:x3; val_offset:300570*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300570*0 + 3*350*FLEN/8, x4, x1, x2)

inst_100191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffc000000000; valaddr_reg:x3; val_offset:300573*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300573*0 + 3*351*FLEN/8, x4, x1, x2)

inst_100192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffe000000000; valaddr_reg:x3; val_offset:300576*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300576*0 + 3*352*FLEN/8, x4, x1, x2)

inst_100193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffff000000000; valaddr_reg:x3; val_offset:300579*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300579*0 + 3*353*FLEN/8, x4, x1, x2)

inst_100194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffff800000000; valaddr_reg:x3; val_offset:300582*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300582*0 + 3*354*FLEN/8, x4, x1, x2)

inst_100195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffc00000000; valaddr_reg:x3; val_offset:300585*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300585*0 + 3*355*FLEN/8, x4, x1, x2)

inst_100196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffe00000000; valaddr_reg:x3; val_offset:300588*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300588*0 + 3*356*FLEN/8, x4, x1, x2)

inst_100197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffff00000000; valaddr_reg:x3; val_offset:300591*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300591*0 + 3*357*FLEN/8, x4, x1, x2)

inst_100198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffff80000000; valaddr_reg:x3; val_offset:300594*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300594*0 + 3*358*FLEN/8, x4, x1, x2)

inst_100199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffc0000000; valaddr_reg:x3; val_offset:300597*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300597*0 + 3*359*FLEN/8, x4, x1, x2)

inst_100200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffe0000000; valaddr_reg:x3; val_offset:300600*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300600*0 + 3*360*FLEN/8, x4, x1, x2)

inst_100201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffff0000000; valaddr_reg:x3; val_offset:300603*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300603*0 + 3*361*FLEN/8, x4, x1, x2)

inst_100202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffff8000000; valaddr_reg:x3; val_offset:300606*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300606*0 + 3*362*FLEN/8, x4, x1, x2)

inst_100203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffc000000; valaddr_reg:x3; val_offset:300609*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300609*0 + 3*363*FLEN/8, x4, x1, x2)

inst_100204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffe000000; valaddr_reg:x3; val_offset:300612*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300612*0 + 3*364*FLEN/8, x4, x1, x2)

inst_100205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffff000000; valaddr_reg:x3; val_offset:300615*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300615*0 + 3*365*FLEN/8, x4, x1, x2)

inst_100206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffff800000; valaddr_reg:x3; val_offset:300618*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300618*0 + 3*366*FLEN/8, x4, x1, x2)

inst_100207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffc00000; valaddr_reg:x3; val_offset:300621*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300621*0 + 3*367*FLEN/8, x4, x1, x2)

inst_100208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffe00000; valaddr_reg:x3; val_offset:300624*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300624*0 + 3*368*FLEN/8, x4, x1, x2)

inst_100209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffff00000; valaddr_reg:x3; val_offset:300627*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300627*0 + 3*369*FLEN/8, x4, x1, x2)

inst_100210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffff80000; valaddr_reg:x3; val_offset:300630*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300630*0 + 3*370*FLEN/8, x4, x1, x2)

inst_100211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffc0000; valaddr_reg:x3; val_offset:300633*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300633*0 + 3*371*FLEN/8, x4, x1, x2)

inst_100212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffe0000; valaddr_reg:x3; val_offset:300636*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300636*0 + 3*372*FLEN/8, x4, x1, x2)

inst_100213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffff0000; valaddr_reg:x3; val_offset:300639*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300639*0 + 3*373*FLEN/8, x4, x1, x2)

inst_100214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffff8000; valaddr_reg:x3; val_offset:300642*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300642*0 + 3*374*FLEN/8, x4, x1, x2)

inst_100215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffffc000; valaddr_reg:x3; val_offset:300645*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300645*0 + 3*375*FLEN/8, x4, x1, x2)

inst_100216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffffe000; valaddr_reg:x3; val_offset:300648*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300648*0 + 3*376*FLEN/8, x4, x1, x2)

inst_100217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffff000; valaddr_reg:x3; val_offset:300651*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300651*0 + 3*377*FLEN/8, x4, x1, x2)

inst_100218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffff800; valaddr_reg:x3; val_offset:300654*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300654*0 + 3*378*FLEN/8, x4, x1, x2)

inst_100219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffffc00; valaddr_reg:x3; val_offset:300657*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300657*0 + 3*379*FLEN/8, x4, x1, x2)

inst_100220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffffe00; valaddr_reg:x3; val_offset:300660*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300660*0 + 3*380*FLEN/8, x4, x1, x2)

inst_100221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffffff00; valaddr_reg:x3; val_offset:300663*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300663*0 + 3*381*FLEN/8, x4, x1, x2)

inst_100222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffffff80; valaddr_reg:x3; val_offset:300666*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300666*0 + 3*382*FLEN/8, x4, x1, x2)

inst_100223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffffffc0; valaddr_reg:x3; val_offset:300669*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300669*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_100224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffffffe0; valaddr_reg:x3; val_offset:300672*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300672*0 + 3*384*FLEN/8, x4, x1, x2)

inst_100225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffffff0; valaddr_reg:x3; val_offset:300675*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300675*0 + 3*385*FLEN/8, x4, x1, x2)

inst_100226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffffff8; valaddr_reg:x3; val_offset:300678*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300678*0 + 3*386*FLEN/8, x4, x1, x2)

inst_100227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffffffc; valaddr_reg:x3; val_offset:300681*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300681*0 + 3*387*FLEN/8, x4, x1, x2)

inst_100228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835ffffffffffffe; valaddr_reg:x3; val_offset:300684*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300684*0 + 3*388*FLEN/8, x4, x1, x2)

inst_100229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf60647476d4cb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf60647476d4cb; op2val:0x8000;
op3val:0x835fffffffffffff; valaddr_reg:x3; val_offset:300687*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300687*0 + 3*389*FLEN/8, x4, x1, x2)

inst_100230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000000000; valaddr_reg:x3; val_offset:300690*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300690*0 + 3*390*FLEN/8, x4, x1, x2)

inst_100231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000000001; valaddr_reg:x3; val_offset:300693*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300693*0 + 3*391*FLEN/8, x4, x1, x2)

inst_100232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000000003; valaddr_reg:x3; val_offset:300696*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300696*0 + 3*392*FLEN/8, x4, x1, x2)

inst_100233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000000007; valaddr_reg:x3; val_offset:300699*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300699*0 + 3*393*FLEN/8, x4, x1, x2)

inst_100234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000000000f; valaddr_reg:x3; val_offset:300702*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300702*0 + 3*394*FLEN/8, x4, x1, x2)

inst_100235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000000001f; valaddr_reg:x3; val_offset:300705*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300705*0 + 3*395*FLEN/8, x4, x1, x2)

inst_100236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000000003f; valaddr_reg:x3; val_offset:300708*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300708*0 + 3*396*FLEN/8, x4, x1, x2)

inst_100237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000000007f; valaddr_reg:x3; val_offset:300711*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300711*0 + 3*397*FLEN/8, x4, x1, x2)

inst_100238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000000000ff; valaddr_reg:x3; val_offset:300714*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300714*0 + 3*398*FLEN/8, x4, x1, x2)

inst_100239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000000001ff; valaddr_reg:x3; val_offset:300717*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300717*0 + 3*399*FLEN/8, x4, x1, x2)

inst_100240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000000003ff; valaddr_reg:x3; val_offset:300720*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300720*0 + 3*400*FLEN/8, x4, x1, x2)

inst_100241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000000007ff; valaddr_reg:x3; val_offset:300723*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300723*0 + 3*401*FLEN/8, x4, x1, x2)

inst_100242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000000fff; valaddr_reg:x3; val_offset:300726*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300726*0 + 3*402*FLEN/8, x4, x1, x2)

inst_100243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000001fff; valaddr_reg:x3; val_offset:300729*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300729*0 + 3*403*FLEN/8, x4, x1, x2)

inst_100244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000003fff; valaddr_reg:x3; val_offset:300732*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300732*0 + 3*404*FLEN/8, x4, x1, x2)

inst_100245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000007fff; valaddr_reg:x3; val_offset:300735*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300735*0 + 3*405*FLEN/8, x4, x1, x2)

inst_100246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000000ffff; valaddr_reg:x3; val_offset:300738*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300738*0 + 3*406*FLEN/8, x4, x1, x2)

inst_100247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000001ffff; valaddr_reg:x3; val_offset:300741*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300741*0 + 3*407*FLEN/8, x4, x1, x2)

inst_100248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000003ffff; valaddr_reg:x3; val_offset:300744*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300744*0 + 3*408*FLEN/8, x4, x1, x2)

inst_100249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000007ffff; valaddr_reg:x3; val_offset:300747*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300747*0 + 3*409*FLEN/8, x4, x1, x2)

inst_100250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000000fffff; valaddr_reg:x3; val_offset:300750*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300750*0 + 3*410*FLEN/8, x4, x1, x2)

inst_100251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000001fffff; valaddr_reg:x3; val_offset:300753*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300753*0 + 3*411*FLEN/8, x4, x1, x2)

inst_100252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000003fffff; valaddr_reg:x3; val_offset:300756*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300756*0 + 3*412*FLEN/8, x4, x1, x2)

inst_100253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000007fffff; valaddr_reg:x3; val_offset:300759*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300759*0 + 3*413*FLEN/8, x4, x1, x2)

inst_100254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000000ffffff; valaddr_reg:x3; val_offset:300762*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300762*0 + 3*414*FLEN/8, x4, x1, x2)

inst_100255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000001ffffff; valaddr_reg:x3; val_offset:300765*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300765*0 + 3*415*FLEN/8, x4, x1, x2)

inst_100256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000003ffffff; valaddr_reg:x3; val_offset:300768*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300768*0 + 3*416*FLEN/8, x4, x1, x2)

inst_100257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000007ffffff; valaddr_reg:x3; val_offset:300771*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300771*0 + 3*417*FLEN/8, x4, x1, x2)

inst_100258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000000fffffff; valaddr_reg:x3; val_offset:300774*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300774*0 + 3*418*FLEN/8, x4, x1, x2)

inst_100259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000001fffffff; valaddr_reg:x3; val_offset:300777*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300777*0 + 3*419*FLEN/8, x4, x1, x2)

inst_100260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000003fffffff; valaddr_reg:x3; val_offset:300780*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300780*0 + 3*420*FLEN/8, x4, x1, x2)

inst_100261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000007fffffff; valaddr_reg:x3; val_offset:300783*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300783*0 + 3*421*FLEN/8, x4, x1, x2)

inst_100262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00000ffffffff; valaddr_reg:x3; val_offset:300786*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300786*0 + 3*422*FLEN/8, x4, x1, x2)

inst_100263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00001ffffffff; valaddr_reg:x3; val_offset:300789*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300789*0 + 3*423*FLEN/8, x4, x1, x2)

inst_100264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00003ffffffff; valaddr_reg:x3; val_offset:300792*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300792*0 + 3*424*FLEN/8, x4, x1, x2)

inst_100265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00007ffffffff; valaddr_reg:x3; val_offset:300795*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300795*0 + 3*425*FLEN/8, x4, x1, x2)

inst_100266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0000fffffffff; valaddr_reg:x3; val_offset:300798*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300798*0 + 3*426*FLEN/8, x4, x1, x2)

inst_100267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0001fffffffff; valaddr_reg:x3; val_offset:300801*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300801*0 + 3*427*FLEN/8, x4, x1, x2)

inst_100268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0003fffffffff; valaddr_reg:x3; val_offset:300804*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300804*0 + 3*428*FLEN/8, x4, x1, x2)

inst_100269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0007fffffffff; valaddr_reg:x3; val_offset:300807*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300807*0 + 3*429*FLEN/8, x4, x1, x2)

inst_100270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d000ffffffffff; valaddr_reg:x3; val_offset:300810*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300810*0 + 3*430*FLEN/8, x4, x1, x2)

inst_100271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d001ffffffffff; valaddr_reg:x3; val_offset:300813*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300813*0 + 3*431*FLEN/8, x4, x1, x2)

inst_100272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d003ffffffffff; valaddr_reg:x3; val_offset:300816*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300816*0 + 3*432*FLEN/8, x4, x1, x2)

inst_100273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d007ffffffffff; valaddr_reg:x3; val_offset:300819*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300819*0 + 3*433*FLEN/8, x4, x1, x2)

inst_100274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d00fffffffffff; valaddr_reg:x3; val_offset:300822*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300822*0 + 3*434*FLEN/8, x4, x1, x2)

inst_100275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d01fffffffffff; valaddr_reg:x3; val_offset:300825*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300825*0 + 3*435*FLEN/8, x4, x1, x2)

inst_100276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d03fffffffffff; valaddr_reg:x3; val_offset:300828*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300828*0 + 3*436*FLEN/8, x4, x1, x2)

inst_100277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d07fffffffffff; valaddr_reg:x3; val_offset:300831*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300831*0 + 3*437*FLEN/8, x4, x1, x2)

inst_100278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d0ffffffffffff; valaddr_reg:x3; val_offset:300834*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300834*0 + 3*438*FLEN/8, x4, x1, x2)

inst_100279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d1ffffffffffff; valaddr_reg:x3; val_offset:300837*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300837*0 + 3*439*FLEN/8, x4, x1, x2)

inst_100280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d3ffffffffffff; valaddr_reg:x3; val_offset:300840*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300840*0 + 3*440*FLEN/8, x4, x1, x2)

inst_100281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d7ffffffffffff; valaddr_reg:x3; val_offset:300843*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300843*0 + 3*441*FLEN/8, x4, x1, x2)

inst_100282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7d8000000000000; valaddr_reg:x3; val_offset:300846*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300846*0 + 3*442*FLEN/8, x4, x1, x2)

inst_100283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dc000000000000; valaddr_reg:x3; val_offset:300849*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300849*0 + 3*443*FLEN/8, x4, x1, x2)

inst_100284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7de000000000000; valaddr_reg:x3; val_offset:300852*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300852*0 + 3*444*FLEN/8, x4, x1, x2)

inst_100285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7df000000000000; valaddr_reg:x3; val_offset:300855*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300855*0 + 3*445*FLEN/8, x4, x1, x2)

inst_100286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7df800000000000; valaddr_reg:x3; val_offset:300858*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300858*0 + 3*446*FLEN/8, x4, x1, x2)

inst_100287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfc00000000000; valaddr_reg:x3; val_offset:300861*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300861*0 + 3*447*FLEN/8, x4, x1, x2)

inst_100288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfe00000000000; valaddr_reg:x3; val_offset:300864*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300864*0 + 3*448*FLEN/8, x4, x1, x2)

inst_100289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dff00000000000; valaddr_reg:x3; val_offset:300867*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300867*0 + 3*449*FLEN/8, x4, x1, x2)

inst_100290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dff80000000000; valaddr_reg:x3; val_offset:300870*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300870*0 + 3*450*FLEN/8, x4, x1, x2)

inst_100291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffc0000000000; valaddr_reg:x3; val_offset:300873*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300873*0 + 3*451*FLEN/8, x4, x1, x2)

inst_100292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffe0000000000; valaddr_reg:x3; val_offset:300876*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300876*0 + 3*452*FLEN/8, x4, x1, x2)

inst_100293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfff0000000000; valaddr_reg:x3; val_offset:300879*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300879*0 + 3*453*FLEN/8, x4, x1, x2)

inst_100294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfff8000000000; valaddr_reg:x3; val_offset:300882*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300882*0 + 3*454*FLEN/8, x4, x1, x2)

inst_100295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffc000000000; valaddr_reg:x3; val_offset:300885*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300885*0 + 3*455*FLEN/8, x4, x1, x2)

inst_100296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffe000000000; valaddr_reg:x3; val_offset:300888*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300888*0 + 3*456*FLEN/8, x4, x1, x2)

inst_100297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffff000000000; valaddr_reg:x3; val_offset:300891*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300891*0 + 3*457*FLEN/8, x4, x1, x2)

inst_100298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffff800000000; valaddr_reg:x3; val_offset:300894*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300894*0 + 3*458*FLEN/8, x4, x1, x2)

inst_100299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffc00000000; valaddr_reg:x3; val_offset:300897*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300897*0 + 3*459*FLEN/8, x4, x1, x2)

inst_100300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffe00000000; valaddr_reg:x3; val_offset:300900*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300900*0 + 3*460*FLEN/8, x4, x1, x2)

inst_100301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffff00000000; valaddr_reg:x3; val_offset:300903*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300903*0 + 3*461*FLEN/8, x4, x1, x2)

inst_100302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffff80000000; valaddr_reg:x3; val_offset:300906*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300906*0 + 3*462*FLEN/8, x4, x1, x2)

inst_100303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffc0000000; valaddr_reg:x3; val_offset:300909*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300909*0 + 3*463*FLEN/8, x4, x1, x2)

inst_100304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffe0000000; valaddr_reg:x3; val_offset:300912*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300912*0 + 3*464*FLEN/8, x4, x1, x2)

inst_100305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffff0000000; valaddr_reg:x3; val_offset:300915*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300915*0 + 3*465*FLEN/8, x4, x1, x2)

inst_100306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffff8000000; valaddr_reg:x3; val_offset:300918*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300918*0 + 3*466*FLEN/8, x4, x1, x2)

inst_100307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffc000000; valaddr_reg:x3; val_offset:300921*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300921*0 + 3*467*FLEN/8, x4, x1, x2)

inst_100308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffe000000; valaddr_reg:x3; val_offset:300924*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300924*0 + 3*468*FLEN/8, x4, x1, x2)

inst_100309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffff000000; valaddr_reg:x3; val_offset:300927*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300927*0 + 3*469*FLEN/8, x4, x1, x2)

inst_100310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffff800000; valaddr_reg:x3; val_offset:300930*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300930*0 + 3*470*FLEN/8, x4, x1, x2)

inst_100311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffc00000; valaddr_reg:x3; val_offset:300933*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300933*0 + 3*471*FLEN/8, x4, x1, x2)

inst_100312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffe00000; valaddr_reg:x3; val_offset:300936*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300936*0 + 3*472*FLEN/8, x4, x1, x2)

inst_100313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffff00000; valaddr_reg:x3; val_offset:300939*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300939*0 + 3*473*FLEN/8, x4, x1, x2)

inst_100314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffff80000; valaddr_reg:x3; val_offset:300942*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300942*0 + 3*474*FLEN/8, x4, x1, x2)

inst_100315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffc0000; valaddr_reg:x3; val_offset:300945*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300945*0 + 3*475*FLEN/8, x4, x1, x2)

inst_100316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffe0000; valaddr_reg:x3; val_offset:300948*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300948*0 + 3*476*FLEN/8, x4, x1, x2)

inst_100317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffff0000; valaddr_reg:x3; val_offset:300951*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300951*0 + 3*477*FLEN/8, x4, x1, x2)

inst_100318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffff8000; valaddr_reg:x3; val_offset:300954*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300954*0 + 3*478*FLEN/8, x4, x1, x2)

inst_100319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffffc000; valaddr_reg:x3; val_offset:300957*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300957*0 + 3*479*FLEN/8, x4, x1, x2)

inst_100320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffffe000; valaddr_reg:x3; val_offset:300960*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300960*0 + 3*480*FLEN/8, x4, x1, x2)

inst_100321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffff000; valaddr_reg:x3; val_offset:300963*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300963*0 + 3*481*FLEN/8, x4, x1, x2)

inst_100322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffff800; valaddr_reg:x3; val_offset:300966*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300966*0 + 3*482*FLEN/8, x4, x1, x2)

inst_100323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffffc00; valaddr_reg:x3; val_offset:300969*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300969*0 + 3*483*FLEN/8, x4, x1, x2)

inst_100324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffffe00; valaddr_reg:x3; val_offset:300972*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300972*0 + 3*484*FLEN/8, x4, x1, x2)

inst_100325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffffff00; valaddr_reg:x3; val_offset:300975*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300975*0 + 3*485*FLEN/8, x4, x1, x2)

inst_100326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffffff80; valaddr_reg:x3; val_offset:300978*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300978*0 + 3*486*FLEN/8, x4, x1, x2)

inst_100327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffffffc0; valaddr_reg:x3; val_offset:300981*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300981*0 + 3*487*FLEN/8, x4, x1, x2)

inst_100328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffffffe0; valaddr_reg:x3; val_offset:300984*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300984*0 + 3*488*FLEN/8, x4, x1, x2)

inst_100329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffffff0; valaddr_reg:x3; val_offset:300987*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300987*0 + 3*489*FLEN/8, x4, x1, x2)

inst_100330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffffff8; valaddr_reg:x3; val_offset:300990*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300990*0 + 3*490*FLEN/8, x4, x1, x2)

inst_100331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffffffc; valaddr_reg:x3; val_offset:300993*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300993*0 + 3*491*FLEN/8, x4, x1, x2)

inst_100332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dffffffffffffe; valaddr_reg:x3; val_offset:300996*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300996*0 + 3*492*FLEN/8, x4, x1, x2)

inst_100333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x37d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xb7dfffffffffffff; valaddr_reg:x3; val_offset:300999*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 300999*0 + 3*493*FLEN/8, x4, x1, x2)

inst_100334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:301002*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301002*0 + 3*494*FLEN/8, x4, x1, x2)

inst_100335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:301005*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301005*0 + 3*495*FLEN/8, x4, x1, x2)

inst_100336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:301008*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301008*0 + 3*496*FLEN/8, x4, x1, x2)

inst_100337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:301011*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301011*0 + 3*497*FLEN/8, x4, x1, x2)

inst_100338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:301014*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301014*0 + 3*498*FLEN/8, x4, x1, x2)

inst_100339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:301017*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301017*0 + 3*499*FLEN/8, x4, x1, x2)

inst_100340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:301020*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301020*0 + 3*500*FLEN/8, x4, x1, x2)

inst_100341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:301023*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301023*0 + 3*501*FLEN/8, x4, x1, x2)

inst_100342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:301026*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301026*0 + 3*502*FLEN/8, x4, x1, x2)

inst_100343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:301029*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301029*0 + 3*503*FLEN/8, x4, x1, x2)

inst_100344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:301032*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301032*0 + 3*504*FLEN/8, x4, x1, x2)

inst_100345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:301035*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301035*0 + 3*505*FLEN/8, x4, x1, x2)

inst_100346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:301038*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301038*0 + 3*506*FLEN/8, x4, x1, x2)

inst_100347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:301041*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301041*0 + 3*507*FLEN/8, x4, x1, x2)

inst_100348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:301044*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301044*0 + 3*508*FLEN/8, x4, x1, x2)

inst_100349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:301047*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301047*0 + 3*509*FLEN/8, x4, x1, x2)

inst_100350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:301050*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301050*0 + 3*510*FLEN/8, x4, x1, x2)

inst_100351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:301053*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301053*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_100352:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:301056*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301056*0 + 3*512*FLEN/8, x4, x1, x2)

inst_100353:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:301059*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301059*0 + 3*513*FLEN/8, x4, x1, x2)

inst_100354:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:301062*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301062*0 + 3*514*FLEN/8, x4, x1, x2)

inst_100355:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf6bd70e557438 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x04b71c798632a and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf6bd70e557438; op2val:0x9fc04b71c798632a;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:301065*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301065*0 + 3*515*FLEN/8, x4, x1, x2)

inst_100356:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000000000; valaddr_reg:x3; val_offset:301068*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301068*0 + 3*516*FLEN/8, x4, x1, x2)

inst_100357:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000000001; valaddr_reg:x3; val_offset:301071*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301071*0 + 3*517*FLEN/8, x4, x1, x2)

inst_100358:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000000003; valaddr_reg:x3; val_offset:301074*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301074*0 + 3*518*FLEN/8, x4, x1, x2)

inst_100359:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000000007; valaddr_reg:x3; val_offset:301077*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301077*0 + 3*519*FLEN/8, x4, x1, x2)

inst_100360:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000000000f; valaddr_reg:x3; val_offset:301080*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301080*0 + 3*520*FLEN/8, x4, x1, x2)

inst_100361:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000000001f; valaddr_reg:x3; val_offset:301083*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301083*0 + 3*521*FLEN/8, x4, x1, x2)

inst_100362:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000000003f; valaddr_reg:x3; val_offset:301086*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301086*0 + 3*522*FLEN/8, x4, x1, x2)

inst_100363:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000000007f; valaddr_reg:x3; val_offset:301089*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301089*0 + 3*523*FLEN/8, x4, x1, x2)

inst_100364:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000000000ff; valaddr_reg:x3; val_offset:301092*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301092*0 + 3*524*FLEN/8, x4, x1, x2)

inst_100365:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000000001ff; valaddr_reg:x3; val_offset:301095*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301095*0 + 3*525*FLEN/8, x4, x1, x2)

inst_100366:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000000003ff; valaddr_reg:x3; val_offset:301098*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301098*0 + 3*526*FLEN/8, x4, x1, x2)

inst_100367:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000000007ff; valaddr_reg:x3; val_offset:301101*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301101*0 + 3*527*FLEN/8, x4, x1, x2)

inst_100368:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000000fff; valaddr_reg:x3; val_offset:301104*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301104*0 + 3*528*FLEN/8, x4, x1, x2)

inst_100369:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000001fff; valaddr_reg:x3; val_offset:301107*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301107*0 + 3*529*FLEN/8, x4, x1, x2)

inst_100370:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000003fff; valaddr_reg:x3; val_offset:301110*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301110*0 + 3*530*FLEN/8, x4, x1, x2)

inst_100371:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000007fff; valaddr_reg:x3; val_offset:301113*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301113*0 + 3*531*FLEN/8, x4, x1, x2)

inst_100372:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000000ffff; valaddr_reg:x3; val_offset:301116*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301116*0 + 3*532*FLEN/8, x4, x1, x2)

inst_100373:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000001ffff; valaddr_reg:x3; val_offset:301119*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301119*0 + 3*533*FLEN/8, x4, x1, x2)

inst_100374:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000003ffff; valaddr_reg:x3; val_offset:301122*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301122*0 + 3*534*FLEN/8, x4, x1, x2)

inst_100375:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000007ffff; valaddr_reg:x3; val_offset:301125*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301125*0 + 3*535*FLEN/8, x4, x1, x2)

inst_100376:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000000fffff; valaddr_reg:x3; val_offset:301128*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301128*0 + 3*536*FLEN/8, x4, x1, x2)

inst_100377:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000001fffff; valaddr_reg:x3; val_offset:301131*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301131*0 + 3*537*FLEN/8, x4, x1, x2)

inst_100378:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000003fffff; valaddr_reg:x3; val_offset:301134*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301134*0 + 3*538*FLEN/8, x4, x1, x2)

inst_100379:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000007fffff; valaddr_reg:x3; val_offset:301137*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301137*0 + 3*539*FLEN/8, x4, x1, x2)

inst_100380:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000000ffffff; valaddr_reg:x3; val_offset:301140*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301140*0 + 3*540*FLEN/8, x4, x1, x2)

inst_100381:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000001ffffff; valaddr_reg:x3; val_offset:301143*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301143*0 + 3*541*FLEN/8, x4, x1, x2)

inst_100382:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000003ffffff; valaddr_reg:x3; val_offset:301146*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301146*0 + 3*542*FLEN/8, x4, x1, x2)

inst_100383:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000007ffffff; valaddr_reg:x3; val_offset:301149*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301149*0 + 3*543*FLEN/8, x4, x1, x2)

inst_100384:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000000fffffff; valaddr_reg:x3; val_offset:301152*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301152*0 + 3*544*FLEN/8, x4, x1, x2)

inst_100385:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000001fffffff; valaddr_reg:x3; val_offset:301155*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301155*0 + 3*545*FLEN/8, x4, x1, x2)

inst_100386:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000003fffffff; valaddr_reg:x3; val_offset:301158*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301158*0 + 3*546*FLEN/8, x4, x1, x2)

inst_100387:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000007fffffff; valaddr_reg:x3; val_offset:301161*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301161*0 + 3*547*FLEN/8, x4, x1, x2)

inst_100388:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000000ffffffff; valaddr_reg:x3; val_offset:301164*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301164*0 + 3*548*FLEN/8, x4, x1, x2)

inst_100389:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000001ffffffff; valaddr_reg:x3; val_offset:301167*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301167*0 + 3*549*FLEN/8, x4, x1, x2)

inst_100390:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000003ffffffff; valaddr_reg:x3; val_offset:301170*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301170*0 + 3*550*FLEN/8, x4, x1, x2)

inst_100391:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000007ffffffff; valaddr_reg:x3; val_offset:301173*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301173*0 + 3*551*FLEN/8, x4, x1, x2)

inst_100392:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00000fffffffff; valaddr_reg:x3; val_offset:301176*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301176*0 + 3*552*FLEN/8, x4, x1, x2)

inst_100393:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00001fffffffff; valaddr_reg:x3; val_offset:301179*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301179*0 + 3*553*FLEN/8, x4, x1, x2)

inst_100394:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00003fffffffff; valaddr_reg:x3; val_offset:301182*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301182*0 + 3*554*FLEN/8, x4, x1, x2)

inst_100395:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00007fffffffff; valaddr_reg:x3; val_offset:301185*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301185*0 + 3*555*FLEN/8, x4, x1, x2)

inst_100396:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0000ffffffffff; valaddr_reg:x3; val_offset:301188*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301188*0 + 3*556*FLEN/8, x4, x1, x2)

inst_100397:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0001ffffffffff; valaddr_reg:x3; val_offset:301191*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301191*0 + 3*557*FLEN/8, x4, x1, x2)

inst_100398:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0003ffffffffff; valaddr_reg:x3; val_offset:301194*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301194*0 + 3*558*FLEN/8, x4, x1, x2)

inst_100399:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0007ffffffffff; valaddr_reg:x3; val_offset:301197*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301197*0 + 3*559*FLEN/8, x4, x1, x2)

inst_100400:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc000fffffffffff; valaddr_reg:x3; val_offset:301200*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301200*0 + 3*560*FLEN/8, x4, x1, x2)

inst_100401:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc001fffffffffff; valaddr_reg:x3; val_offset:301203*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301203*0 + 3*561*FLEN/8, x4, x1, x2)

inst_100402:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc003fffffffffff; valaddr_reg:x3; val_offset:301206*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301206*0 + 3*562*FLEN/8, x4, x1, x2)

inst_100403:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc007fffffffffff; valaddr_reg:x3; val_offset:301209*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301209*0 + 3*563*FLEN/8, x4, x1, x2)

inst_100404:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc00ffffffffffff; valaddr_reg:x3; val_offset:301212*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301212*0 + 3*564*FLEN/8, x4, x1, x2)

inst_100405:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc01ffffffffffff; valaddr_reg:x3; val_offset:301215*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301215*0 + 3*565*FLEN/8, x4, x1, x2)

inst_100406:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc03ffffffffffff; valaddr_reg:x3; val_offset:301218*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301218*0 + 3*566*FLEN/8, x4, x1, x2)

inst_100407:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc07ffffffffffff; valaddr_reg:x3; val_offset:301221*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301221*0 + 3*567*FLEN/8, x4, x1, x2)

inst_100408:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc08000000000000; valaddr_reg:x3; val_offset:301224*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301224*0 + 3*568*FLEN/8, x4, x1, x2)

inst_100409:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0c000000000000; valaddr_reg:x3; val_offset:301227*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301227*0 + 3*569*FLEN/8, x4, x1, x2)

inst_100410:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0e000000000000; valaddr_reg:x3; val_offset:301230*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301230*0 + 3*570*FLEN/8, x4, x1, x2)

inst_100411:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0f000000000000; valaddr_reg:x3; val_offset:301233*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301233*0 + 3*571*FLEN/8, x4, x1, x2)

inst_100412:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0f800000000000; valaddr_reg:x3; val_offset:301236*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301236*0 + 3*572*FLEN/8, x4, x1, x2)

inst_100413:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fc00000000000; valaddr_reg:x3; val_offset:301239*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301239*0 + 3*573*FLEN/8, x4, x1, x2)

inst_100414:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fe00000000000; valaddr_reg:x3; val_offset:301242*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301242*0 + 3*574*FLEN/8, x4, x1, x2)

inst_100415:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ff00000000000; valaddr_reg:x3; val_offset:301245*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301245*0 + 3*575*FLEN/8, x4, x1, x2)

inst_100416:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ff80000000000; valaddr_reg:x3; val_offset:301248*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301248*0 + 3*576*FLEN/8, x4, x1, x2)

inst_100417:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffc0000000000; valaddr_reg:x3; val_offset:301251*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301251*0 + 3*577*FLEN/8, x4, x1, x2)

inst_100418:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffe0000000000; valaddr_reg:x3; val_offset:301254*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301254*0 + 3*578*FLEN/8, x4, x1, x2)

inst_100419:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fff0000000000; valaddr_reg:x3; val_offset:301257*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301257*0 + 3*579*FLEN/8, x4, x1, x2)

inst_100420:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fff8000000000; valaddr_reg:x3; val_offset:301260*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301260*0 + 3*580*FLEN/8, x4, x1, x2)

inst_100421:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffc000000000; valaddr_reg:x3; val_offset:301263*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301263*0 + 3*581*FLEN/8, x4, x1, x2)

inst_100422:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffe000000000; valaddr_reg:x3; val_offset:301266*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301266*0 + 3*582*FLEN/8, x4, x1, x2)

inst_100423:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffff000000000; valaddr_reg:x3; val_offset:301269*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301269*0 + 3*583*FLEN/8, x4, x1, x2)

inst_100424:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffff800000000; valaddr_reg:x3; val_offset:301272*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301272*0 + 3*584*FLEN/8, x4, x1, x2)

inst_100425:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffc00000000; valaddr_reg:x3; val_offset:301275*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301275*0 + 3*585*FLEN/8, x4, x1, x2)

inst_100426:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffe00000000; valaddr_reg:x3; val_offset:301278*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301278*0 + 3*586*FLEN/8, x4, x1, x2)

inst_100427:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffff00000000; valaddr_reg:x3; val_offset:301281*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301281*0 + 3*587*FLEN/8, x4, x1, x2)

inst_100428:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffff80000000; valaddr_reg:x3; val_offset:301284*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301284*0 + 3*588*FLEN/8, x4, x1, x2)

inst_100429:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffc0000000; valaddr_reg:x3; val_offset:301287*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301287*0 + 3*589*FLEN/8, x4, x1, x2)

inst_100430:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffe0000000; valaddr_reg:x3; val_offset:301290*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301290*0 + 3*590*FLEN/8, x4, x1, x2)

inst_100431:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffff0000000; valaddr_reg:x3; val_offset:301293*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301293*0 + 3*591*FLEN/8, x4, x1, x2)

inst_100432:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffff8000000; valaddr_reg:x3; val_offset:301296*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301296*0 + 3*592*FLEN/8, x4, x1, x2)

inst_100433:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffc000000; valaddr_reg:x3; val_offset:301299*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301299*0 + 3*593*FLEN/8, x4, x1, x2)

inst_100434:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffe000000; valaddr_reg:x3; val_offset:301302*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301302*0 + 3*594*FLEN/8, x4, x1, x2)

inst_100435:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffff000000; valaddr_reg:x3; val_offset:301305*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301305*0 + 3*595*FLEN/8, x4, x1, x2)

inst_100436:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffff800000; valaddr_reg:x3; val_offset:301308*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301308*0 + 3*596*FLEN/8, x4, x1, x2)

inst_100437:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffc00000; valaddr_reg:x3; val_offset:301311*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301311*0 + 3*597*FLEN/8, x4, x1, x2)

inst_100438:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffe00000; valaddr_reg:x3; val_offset:301314*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301314*0 + 3*598*FLEN/8, x4, x1, x2)

inst_100439:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffff00000; valaddr_reg:x3; val_offset:301317*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301317*0 + 3*599*FLEN/8, x4, x1, x2)

inst_100440:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffff80000; valaddr_reg:x3; val_offset:301320*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301320*0 + 3*600*FLEN/8, x4, x1, x2)

inst_100441:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffc0000; valaddr_reg:x3; val_offset:301323*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301323*0 + 3*601*FLEN/8, x4, x1, x2)

inst_100442:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffe0000; valaddr_reg:x3; val_offset:301326*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301326*0 + 3*602*FLEN/8, x4, x1, x2)

inst_100443:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffff0000; valaddr_reg:x3; val_offset:301329*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301329*0 + 3*603*FLEN/8, x4, x1, x2)

inst_100444:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffff8000; valaddr_reg:x3; val_offset:301332*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301332*0 + 3*604*FLEN/8, x4, x1, x2)

inst_100445:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffffc000; valaddr_reg:x3; val_offset:301335*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301335*0 + 3*605*FLEN/8, x4, x1, x2)

inst_100446:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffffe000; valaddr_reg:x3; val_offset:301338*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301338*0 + 3*606*FLEN/8, x4, x1, x2)

inst_100447:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffff000; valaddr_reg:x3; val_offset:301341*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301341*0 + 3*607*FLEN/8, x4, x1, x2)

inst_100448:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffff800; valaddr_reg:x3; val_offset:301344*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301344*0 + 3*608*FLEN/8, x4, x1, x2)

inst_100449:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffffc00; valaddr_reg:x3; val_offset:301347*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301347*0 + 3*609*FLEN/8, x4, x1, x2)

inst_100450:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffffe00; valaddr_reg:x3; val_offset:301350*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301350*0 + 3*610*FLEN/8, x4, x1, x2)

inst_100451:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffffff00; valaddr_reg:x3; val_offset:301353*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301353*0 + 3*611*FLEN/8, x4, x1, x2)

inst_100452:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffffff80; valaddr_reg:x3; val_offset:301356*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301356*0 + 3*612*FLEN/8, x4, x1, x2)

inst_100453:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffffffc0; valaddr_reg:x3; val_offset:301359*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301359*0 + 3*613*FLEN/8, x4, x1, x2)

inst_100454:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffffffe0; valaddr_reg:x3; val_offset:301362*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301362*0 + 3*614*FLEN/8, x4, x1, x2)

inst_100455:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffffff0; valaddr_reg:x3; val_offset:301365*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301365*0 + 3*615*FLEN/8, x4, x1, x2)

inst_100456:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffffff8; valaddr_reg:x3; val_offset:301368*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301368*0 + 3*616*FLEN/8, x4, x1, x2)

inst_100457:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffffffc; valaddr_reg:x3; val_offset:301371*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301371*0 + 3*617*FLEN/8, x4, x1, x2)

inst_100458:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0ffffffffffffe; valaddr_reg:x3; val_offset:301374*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301374*0 + 3*618*FLEN/8, x4, x1, x2)

inst_100459:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3c0 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbc0fffffffffffff; valaddr_reg:x3; val_offset:301377*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301377*0 + 3*619*FLEN/8, x4, x1, x2)

inst_100460:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:301380*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301380*0 + 3*620*FLEN/8, x4, x1, x2)

inst_100461:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:301383*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301383*0 + 3*621*FLEN/8, x4, x1, x2)

inst_100462:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:301386*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301386*0 + 3*622*FLEN/8, x4, x1, x2)

inst_100463:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:301389*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301389*0 + 3*623*FLEN/8, x4, x1, x2)

inst_100464:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:301392*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301392*0 + 3*624*FLEN/8, x4, x1, x2)

inst_100465:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:301395*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301395*0 + 3*625*FLEN/8, x4, x1, x2)

inst_100466:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:301398*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301398*0 + 3*626*FLEN/8, x4, x1, x2)

inst_100467:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:301401*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301401*0 + 3*627*FLEN/8, x4, x1, x2)

inst_100468:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:301404*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301404*0 + 3*628*FLEN/8, x4, x1, x2)

inst_100469:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:301407*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301407*0 + 3*629*FLEN/8, x4, x1, x2)

inst_100470:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:301410*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301410*0 + 3*630*FLEN/8, x4, x1, x2)

inst_100471:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:301413*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301413*0 + 3*631*FLEN/8, x4, x1, x2)

inst_100472:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:301416*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301416*0 + 3*632*FLEN/8, x4, x1, x2)

inst_100473:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:301419*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301419*0 + 3*633*FLEN/8, x4, x1, x2)

inst_100474:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:301422*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301422*0 + 3*634*FLEN/8, x4, x1, x2)

inst_100475:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:301425*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301425*0 + 3*635*FLEN/8, x4, x1, x2)

inst_100476:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:301428*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301428*0 + 3*636*FLEN/8, x4, x1, x2)

inst_100477:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:301431*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301431*0 + 3*637*FLEN/8, x4, x1, x2)

inst_100478:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:301434*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301434*0 + 3*638*FLEN/8, x4, x1, x2)

inst_100479:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:301437*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301437*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_100480:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:301440*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301440*0 + 3*640*FLEN/8, x4, x1, x2)

inst_100481:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf74a5c9f39c6c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x046e1c793d5b4 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf74a5c9f39c6c; op2val:0x9fc046e1c793d5b4;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:301443*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301443*0 + 3*641*FLEN/8, x4, x1, x2)

inst_100482:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:301446*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301446*0 + 3*642*FLEN/8, x4, x1, x2)

inst_100483:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:301449*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301449*0 + 3*643*FLEN/8, x4, x1, x2)

inst_100484:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:301452*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301452*0 + 3*644*FLEN/8, x4, x1, x2)

inst_100485:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:301455*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301455*0 + 3*645*FLEN/8, x4, x1, x2)

inst_100486:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:301458*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301458*0 + 3*646*FLEN/8, x4, x1, x2)

inst_100487:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:301461*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301461*0 + 3*647*FLEN/8, x4, x1, x2)

inst_100488:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:301464*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301464*0 + 3*648*FLEN/8, x4, x1, x2)

inst_100489:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:301467*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301467*0 + 3*649*FLEN/8, x4, x1, x2)

inst_100490:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:301470*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301470*0 + 3*650*FLEN/8, x4, x1, x2)

inst_100491:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:301473*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301473*0 + 3*651*FLEN/8, x4, x1, x2)

inst_100492:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:301476*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301476*0 + 3*652*FLEN/8, x4, x1, x2)

inst_100493:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:301479*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301479*0 + 3*653*FLEN/8, x4, x1, x2)

inst_100494:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:301482*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301482*0 + 3*654*FLEN/8, x4, x1, x2)

inst_100495:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:301485*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301485*0 + 3*655*FLEN/8, x4, x1, x2)

inst_100496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:301488*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301488*0 + 3*656*FLEN/8, x4, x1, x2)

inst_100497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:301491*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301491*0 + 3*657*FLEN/8, x4, x1, x2)

inst_100498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:301494*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301494*0 + 3*658*FLEN/8, x4, x1, x2)

inst_100499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:301497*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301497*0 + 3*659*FLEN/8, x4, x1, x2)

inst_100500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:301500*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301500*0 + 3*660*FLEN/8, x4, x1, x2)

inst_100501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:301503*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301503*0 + 3*661*FLEN/8, x4, x1, x2)

inst_100502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:301506*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301506*0 + 3*662*FLEN/8, x4, x1, x2)

inst_100503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:301509*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301509*0 + 3*663*FLEN/8, x4, x1, x2)

inst_100504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000000000; valaddr_reg:x3; val_offset:301512*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301512*0 + 3*664*FLEN/8, x4, x1, x2)

inst_100505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000000001; valaddr_reg:x3; val_offset:301515*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301515*0 + 3*665*FLEN/8, x4, x1, x2)

inst_100506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000000003; valaddr_reg:x3; val_offset:301518*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301518*0 + 3*666*FLEN/8, x4, x1, x2)

inst_100507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000000007; valaddr_reg:x3; val_offset:301521*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301521*0 + 3*667*FLEN/8, x4, x1, x2)

inst_100508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000000000f; valaddr_reg:x3; val_offset:301524*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301524*0 + 3*668*FLEN/8, x4, x1, x2)

inst_100509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000000001f; valaddr_reg:x3; val_offset:301527*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301527*0 + 3*669*FLEN/8, x4, x1, x2)

inst_100510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000000003f; valaddr_reg:x3; val_offset:301530*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301530*0 + 3*670*FLEN/8, x4, x1, x2)

inst_100511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000000007f; valaddr_reg:x3; val_offset:301533*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301533*0 + 3*671*FLEN/8, x4, x1, x2)

inst_100512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000000000ff; valaddr_reg:x3; val_offset:301536*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301536*0 + 3*672*FLEN/8, x4, x1, x2)

inst_100513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000000001ff; valaddr_reg:x3; val_offset:301539*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301539*0 + 3*673*FLEN/8, x4, x1, x2)

inst_100514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000000003ff; valaddr_reg:x3; val_offset:301542*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301542*0 + 3*674*FLEN/8, x4, x1, x2)

inst_100515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000000007ff; valaddr_reg:x3; val_offset:301545*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301545*0 + 3*675*FLEN/8, x4, x1, x2)

inst_100516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000000fff; valaddr_reg:x3; val_offset:301548*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301548*0 + 3*676*FLEN/8, x4, x1, x2)

inst_100517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000001fff; valaddr_reg:x3; val_offset:301551*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301551*0 + 3*677*FLEN/8, x4, x1, x2)

inst_100518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000003fff; valaddr_reg:x3; val_offset:301554*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301554*0 + 3*678*FLEN/8, x4, x1, x2)

inst_100519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000007fff; valaddr_reg:x3; val_offset:301557*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301557*0 + 3*679*FLEN/8, x4, x1, x2)

inst_100520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000000ffff; valaddr_reg:x3; val_offset:301560*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301560*0 + 3*680*FLEN/8, x4, x1, x2)

inst_100521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000001ffff; valaddr_reg:x3; val_offset:301563*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301563*0 + 3*681*FLEN/8, x4, x1, x2)

inst_100522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000003ffff; valaddr_reg:x3; val_offset:301566*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301566*0 + 3*682*FLEN/8, x4, x1, x2)

inst_100523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000007ffff; valaddr_reg:x3; val_offset:301569*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301569*0 + 3*683*FLEN/8, x4, x1, x2)

inst_100524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000000fffff; valaddr_reg:x3; val_offset:301572*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301572*0 + 3*684*FLEN/8, x4, x1, x2)

inst_100525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000001fffff; valaddr_reg:x3; val_offset:301575*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301575*0 + 3*685*FLEN/8, x4, x1, x2)

inst_100526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000003fffff; valaddr_reg:x3; val_offset:301578*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301578*0 + 3*686*FLEN/8, x4, x1, x2)

inst_100527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000007fffff; valaddr_reg:x3; val_offset:301581*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301581*0 + 3*687*FLEN/8, x4, x1, x2)

inst_100528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000000ffffff; valaddr_reg:x3; val_offset:301584*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301584*0 + 3*688*FLEN/8, x4, x1, x2)

inst_100529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000001ffffff; valaddr_reg:x3; val_offset:301587*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301587*0 + 3*689*FLEN/8, x4, x1, x2)

inst_100530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000003ffffff; valaddr_reg:x3; val_offset:301590*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301590*0 + 3*690*FLEN/8, x4, x1, x2)

inst_100531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000007ffffff; valaddr_reg:x3; val_offset:301593*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301593*0 + 3*691*FLEN/8, x4, x1, x2)

inst_100532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000000fffffff; valaddr_reg:x3; val_offset:301596*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301596*0 + 3*692*FLEN/8, x4, x1, x2)

inst_100533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000001fffffff; valaddr_reg:x3; val_offset:301599*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301599*0 + 3*693*FLEN/8, x4, x1, x2)

inst_100534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000003fffffff; valaddr_reg:x3; val_offset:301602*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301602*0 + 3*694*FLEN/8, x4, x1, x2)

inst_100535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000007fffffff; valaddr_reg:x3; val_offset:301605*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301605*0 + 3*695*FLEN/8, x4, x1, x2)

inst_100536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000000ffffffff; valaddr_reg:x3; val_offset:301608*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301608*0 + 3*696*FLEN/8, x4, x1, x2)

inst_100537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000001ffffffff; valaddr_reg:x3; val_offset:301611*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301611*0 + 3*697*FLEN/8, x4, x1, x2)

inst_100538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000003ffffffff; valaddr_reg:x3; val_offset:301614*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301614*0 + 3*698*FLEN/8, x4, x1, x2)

inst_100539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000007ffffffff; valaddr_reg:x3; val_offset:301617*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301617*0 + 3*699*FLEN/8, x4, x1, x2)

inst_100540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300000fffffffff; valaddr_reg:x3; val_offset:301620*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301620*0 + 3*700*FLEN/8, x4, x1, x2)

inst_100541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300001fffffffff; valaddr_reg:x3; val_offset:301623*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301623*0 + 3*701*FLEN/8, x4, x1, x2)

inst_100542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300003fffffffff; valaddr_reg:x3; val_offset:301626*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301626*0 + 3*702*FLEN/8, x4, x1, x2)

inst_100543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300007fffffffff; valaddr_reg:x3; val_offset:301629*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301629*0 + 3*703*FLEN/8, x4, x1, x2)

inst_100544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30000ffffffffff; valaddr_reg:x3; val_offset:301632*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301632*0 + 3*704*FLEN/8, x4, x1, x2)

inst_100545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30001ffffffffff; valaddr_reg:x3; val_offset:301635*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301635*0 + 3*705*FLEN/8, x4, x1, x2)

inst_100546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30003ffffffffff; valaddr_reg:x3; val_offset:301638*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301638*0 + 3*706*FLEN/8, x4, x1, x2)

inst_100547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30007ffffffffff; valaddr_reg:x3; val_offset:301641*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301641*0 + 3*707*FLEN/8, x4, x1, x2)

inst_100548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3000fffffffffff; valaddr_reg:x3; val_offset:301644*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301644*0 + 3*708*FLEN/8, x4, x1, x2)

inst_100549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3001fffffffffff; valaddr_reg:x3; val_offset:301647*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301647*0 + 3*709*FLEN/8, x4, x1, x2)

inst_100550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3003fffffffffff; valaddr_reg:x3; val_offset:301650*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301650*0 + 3*710*FLEN/8, x4, x1, x2)

inst_100551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x3007fffffffffff; valaddr_reg:x3; val_offset:301653*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301653*0 + 3*711*FLEN/8, x4, x1, x2)

inst_100552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x300ffffffffffff; valaddr_reg:x3; val_offset:301656*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301656*0 + 3*712*FLEN/8, x4, x1, x2)

inst_100553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x301ffffffffffff; valaddr_reg:x3; val_offset:301659*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301659*0 + 3*713*FLEN/8, x4, x1, x2)

inst_100554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x303ffffffffffff; valaddr_reg:x3; val_offset:301662*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301662*0 + 3*714*FLEN/8, x4, x1, x2)

inst_100555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x307ffffffffffff; valaddr_reg:x3; val_offset:301665*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301665*0 + 3*715*FLEN/8, x4, x1, x2)

inst_100556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x308000000000000; valaddr_reg:x3; val_offset:301668*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301668*0 + 3*716*FLEN/8, x4, x1, x2)

inst_100557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30c000000000000; valaddr_reg:x3; val_offset:301671*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301671*0 + 3*717*FLEN/8, x4, x1, x2)

inst_100558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30e000000000000; valaddr_reg:x3; val_offset:301674*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301674*0 + 3*718*FLEN/8, x4, x1, x2)

inst_100559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30f000000000000; valaddr_reg:x3; val_offset:301677*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301677*0 + 3*719*FLEN/8, x4, x1, x2)

inst_100560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30f800000000000; valaddr_reg:x3; val_offset:301680*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301680*0 + 3*720*FLEN/8, x4, x1, x2)

inst_100561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fc00000000000; valaddr_reg:x3; val_offset:301683*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301683*0 + 3*721*FLEN/8, x4, x1, x2)

inst_100562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fe00000000000; valaddr_reg:x3; val_offset:301686*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301686*0 + 3*722*FLEN/8, x4, x1, x2)

inst_100563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ff00000000000; valaddr_reg:x3; val_offset:301689*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301689*0 + 3*723*FLEN/8, x4, x1, x2)

inst_100564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ff80000000000; valaddr_reg:x3; val_offset:301692*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301692*0 + 3*724*FLEN/8, x4, x1, x2)

inst_100565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffc0000000000; valaddr_reg:x3; val_offset:301695*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301695*0 + 3*725*FLEN/8, x4, x1, x2)

inst_100566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffe0000000000; valaddr_reg:x3; val_offset:301698*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301698*0 + 3*726*FLEN/8, x4, x1, x2)

inst_100567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fff0000000000; valaddr_reg:x3; val_offset:301701*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301701*0 + 3*727*FLEN/8, x4, x1, x2)

inst_100568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fff8000000000; valaddr_reg:x3; val_offset:301704*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301704*0 + 3*728*FLEN/8, x4, x1, x2)

inst_100569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffc000000000; valaddr_reg:x3; val_offset:301707*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301707*0 + 3*729*FLEN/8, x4, x1, x2)

inst_100570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffe000000000; valaddr_reg:x3; val_offset:301710*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301710*0 + 3*730*FLEN/8, x4, x1, x2)

inst_100571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffff000000000; valaddr_reg:x3; val_offset:301713*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301713*0 + 3*731*FLEN/8, x4, x1, x2)

inst_100572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffff800000000; valaddr_reg:x3; val_offset:301716*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301716*0 + 3*732*FLEN/8, x4, x1, x2)

inst_100573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffc00000000; valaddr_reg:x3; val_offset:301719*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301719*0 + 3*733*FLEN/8, x4, x1, x2)

inst_100574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffe00000000; valaddr_reg:x3; val_offset:301722*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301722*0 + 3*734*FLEN/8, x4, x1, x2)

inst_100575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffff00000000; valaddr_reg:x3; val_offset:301725*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301725*0 + 3*735*FLEN/8, x4, x1, x2)

inst_100576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffff80000000; valaddr_reg:x3; val_offset:301728*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301728*0 + 3*736*FLEN/8, x4, x1, x2)

inst_100577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffc0000000; valaddr_reg:x3; val_offset:301731*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301731*0 + 3*737*FLEN/8, x4, x1, x2)

inst_100578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffe0000000; valaddr_reg:x3; val_offset:301734*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301734*0 + 3*738*FLEN/8, x4, x1, x2)

inst_100579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffff0000000; valaddr_reg:x3; val_offset:301737*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301737*0 + 3*739*FLEN/8, x4, x1, x2)

inst_100580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffff8000000; valaddr_reg:x3; val_offset:301740*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301740*0 + 3*740*FLEN/8, x4, x1, x2)

inst_100581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffc000000; valaddr_reg:x3; val_offset:301743*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301743*0 + 3*741*FLEN/8, x4, x1, x2)

inst_100582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffe000000; valaddr_reg:x3; val_offset:301746*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301746*0 + 3*742*FLEN/8, x4, x1, x2)

inst_100583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffff000000; valaddr_reg:x3; val_offset:301749*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301749*0 + 3*743*FLEN/8, x4, x1, x2)

inst_100584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffff800000; valaddr_reg:x3; val_offset:301752*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301752*0 + 3*744*FLEN/8, x4, x1, x2)

inst_100585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffc00000; valaddr_reg:x3; val_offset:301755*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301755*0 + 3*745*FLEN/8, x4, x1, x2)

inst_100586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffe00000; valaddr_reg:x3; val_offset:301758*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301758*0 + 3*746*FLEN/8, x4, x1, x2)

inst_100587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffff00000; valaddr_reg:x3; val_offset:301761*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301761*0 + 3*747*FLEN/8, x4, x1, x2)

inst_100588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffff80000; valaddr_reg:x3; val_offset:301764*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301764*0 + 3*748*FLEN/8, x4, x1, x2)

inst_100589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffc0000; valaddr_reg:x3; val_offset:301767*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301767*0 + 3*749*FLEN/8, x4, x1, x2)

inst_100590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffe0000; valaddr_reg:x3; val_offset:301770*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301770*0 + 3*750*FLEN/8, x4, x1, x2)

inst_100591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffff0000; valaddr_reg:x3; val_offset:301773*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301773*0 + 3*751*FLEN/8, x4, x1, x2)

inst_100592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffff8000; valaddr_reg:x3; val_offset:301776*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301776*0 + 3*752*FLEN/8, x4, x1, x2)

inst_100593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffffc000; valaddr_reg:x3; val_offset:301779*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301779*0 + 3*753*FLEN/8, x4, x1, x2)

inst_100594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffffe000; valaddr_reg:x3; val_offset:301782*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301782*0 + 3*754*FLEN/8, x4, x1, x2)

inst_100595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffff000; valaddr_reg:x3; val_offset:301785*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301785*0 + 3*755*FLEN/8, x4, x1, x2)

inst_100596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffff800; valaddr_reg:x3; val_offset:301788*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301788*0 + 3*756*FLEN/8, x4, x1, x2)

inst_100597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffffc00; valaddr_reg:x3; val_offset:301791*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301791*0 + 3*757*FLEN/8, x4, x1, x2)

inst_100598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffffe00; valaddr_reg:x3; val_offset:301794*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301794*0 + 3*758*FLEN/8, x4, x1, x2)

inst_100599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffffff00; valaddr_reg:x3; val_offset:301797*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301797*0 + 3*759*FLEN/8, x4, x1, x2)

inst_100600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffffff80; valaddr_reg:x3; val_offset:301800*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301800*0 + 3*760*FLEN/8, x4, x1, x2)

inst_100601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffffffc0; valaddr_reg:x3; val_offset:301803*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301803*0 + 3*761*FLEN/8, x4, x1, x2)

inst_100602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffffffe0; valaddr_reg:x3; val_offset:301806*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301806*0 + 3*762*FLEN/8, x4, x1, x2)

inst_100603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffffff0; valaddr_reg:x3; val_offset:301809*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301809*0 + 3*763*FLEN/8, x4, x1, x2)

inst_100604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffffff8; valaddr_reg:x3; val_offset:301812*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301812*0 + 3*764*FLEN/8, x4, x1, x2)

inst_100605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffffffc; valaddr_reg:x3; val_offset:301815*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301815*0 + 3*765*FLEN/8, x4, x1, x2)

inst_100606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30ffffffffffffe; valaddr_reg:x3; val_offset:301818*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301818*0 + 3*766*FLEN/8, x4, x1, x2)

inst_100607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf77ff3f3db265 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x030 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf77ff3f3db265; op2val:0x0;
op3val:0x30fffffffffffff; valaddr_reg:x3; val_offset:301821*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301821*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486411264,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486412288,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486412800,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413056,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413184,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413248,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413280,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413296,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413304,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413308,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413310,64,FLEN)
NAN_BOXED(6894820099526755251,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413311,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962752,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962753,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962755,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962759,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962767,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962783,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962815,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962879,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637963007,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637963263,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637963775,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637964799,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637966847,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637970943,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637979135,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637995519,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431638028287,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431638093823,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431638224895,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431638487039,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431639011327,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431640059903,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431642157055,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431646351359,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431654739967,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431671517183,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431705071615,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431772180479,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431906398207,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422432174833663,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422432711704575,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422433785446399,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422435932930047,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422440227897343,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422448817831935,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422465997701119,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422500357439487,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422569076916223,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422706515869695,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422981393776639,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286423531149590527,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286424630661218303,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286426829684473855,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286431227730984959,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286440023824007167,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286457616010051583,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286492800382140415,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286563169126318079,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286703906614673407,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286985381591384063,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9287548331544805375,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9288674231451647999,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9288674231451648000,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9289800131358490624,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290363081311911936,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290644556288622592,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290785293776977920,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290855662521155584,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290890846893244416,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290908439079288832,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290917235172311040,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290921633218822144,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290923832242077696,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290924931753705472,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290925481509519360,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290925756387426304,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290925893826379776,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290925962545856512,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290925996905594880,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926014085464064,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926022675398656,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926026970365952,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926029117849600,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926030191591424,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926030728462336,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926030996897792,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031131115520,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031198224384,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031231778816,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031248556032,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031256944640,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031261138944,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031263236096,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031264284672,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031264808960,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265071104,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265202176,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265267712,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265300480,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265316864,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265325056,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265329152,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265331200,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265332224,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265332736,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265332992,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265333120,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265333184,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265333216,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265333232,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265333240,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265333244,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265333246,64,FLEN)
NAN_BOXED(6894820917641833868,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9290926031265333247,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827072,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827073,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827075,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827079,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827087,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827103,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827135,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827199,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827327,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077827583,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077828095,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077829119,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077831167,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077835263,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077843455,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077859839,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077892607,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834077958143,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834078089215,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834078351359,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834078875647,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834079924223,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834082021375,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834086215679,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834094604287,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834111381503,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834144935935,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834212044799,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834346262527,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534834614697983,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534835151568895,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534836225310719,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534838372794367,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534842667761663,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534851257696255,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534868437565439,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534902797303807,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422534971516780543,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422535108955734015,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422535383833640959,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422535933589454847,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422537033101082623,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422539232124338175,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422543630170849279,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422552426263871487,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422570018449915903,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422605202822004735,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422675571566182399,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4422816309054537727,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4423097784031248383,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4423660733984669695,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4424786633891512319,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4424786633891512320,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4425912533798354944,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4426475483751776256,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4426756958728486912,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4426897696216842240,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4426968064961019904,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427003249333108736,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427020841519153152,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427029637612175360,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427034035658686464,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427036234681942016,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427037334193569792,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427037883949383680,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038158827290624,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038296266244096,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038364985720832,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038399345459200,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038416525328384,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038425115262976,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038429410230272,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038431557713920,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038432631455744,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433168326656,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433436762112,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433570979840,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433638088704,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433671643136,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433688420352,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433696808960,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433701003264,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433703100416,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433704148992,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433704673280,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433704935424,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705066496,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705132032,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705164800,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705181184,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705189376,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705193472,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705195520,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705196544,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197056,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197312,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197440,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197504,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197536,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197552,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197560,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197564,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197566,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4427038433705197567,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6894833089064368665,64,FLEN)
NAN_BOXED(2319444571376784389,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412096,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412097,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412099,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412103,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412111,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412127,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412159,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412223,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412351,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412607,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105413119,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105414143,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105416191,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105420287,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105428479,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105444863,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105477631,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105543167,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105674239,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105936383,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817106460671,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817107509247,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817109606399,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817113800703,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817122189311,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817138966527,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817172520959,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817239629823,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817373847551,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817642283007,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062818179153919,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062819252895743,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062821400379391,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062825695346687,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062834285281279,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062851465150463,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062885824888831,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062954544365567,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462063091983319039,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462063366861225983,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462063916617039871,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462065016128667647,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462067215151923199,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462071613198434303,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462080409291456511,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462098001477500927,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462133185849589759,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462203554593767423,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462344292082122751,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462625767058833407,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9463188717012254719,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9464314616919097343,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9464314616919097344,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9465440516825939968,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466003466779361280,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466284941756071936,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466425679244427264,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466496047988604928,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466531232360693760,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466548824546738176,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466557620639760384,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466562018686271488,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466564217709527040,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466565317221154816,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466565866976968704,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566141854875648,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566279293829120,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566348013305856,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566382373044224,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566399552913408,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566408142848000,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566412437815296,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566414585298944,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566415659040768,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416195911680,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416464347136,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416598564864,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416665673728,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416699228160,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416716005376,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416724393984,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416728588288,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416730685440,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416731734016,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732258304,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732520448,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732651520,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732717056,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732749824,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732766208,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732774400,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732778496,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732780544,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732781568,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782080,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782336,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782464,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782528,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782560,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782576,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782584,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782588,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782590,64,FLEN)
NAN_BOXED(6894835539094459595,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782591,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628736,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628737,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628739,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628743,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628751,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628767,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628799,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628863,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096628991,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096629247,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096629759,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096630783,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096632831,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096636927,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096645119,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096661503,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096694271,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096759807,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504096890879,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504097153023,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504097677311,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504098725887,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504100823039,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504105017343,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504113405951,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504130183167,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504163737599,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504230846463,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504365064191,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086504633499647,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086505170370559,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086506244112383,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086508391596031,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086512686563327,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086521276497919,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086538456367103,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086572816105471,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086641535582207,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245086778974535679,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245087053852442623,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245087603608256511,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245088703119884287,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245090902143139839,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245095300189650943,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245104096282673151,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245121688468717567,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245156872840806399,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245227241584984063,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245367979073339391,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13245649454050050047,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13246212404003471359,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13247338303910313983,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13247338303910313984,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13248464203817156608,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249027153770577920,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249308628747288576,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249449366235643904,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249519734979821568,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249554919351910400,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249572511537954816,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249581307630977024,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249585705677488128,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249587904700743680,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249589004212371456,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249589553968185344,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249589828846092288,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249589966285045760,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590035004522496,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590069364260864,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590086544130048,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590095134064640,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590099429031936,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590101576515584,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590102650257408,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103187128320,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103455563776,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103589781504,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103656890368,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103690444800,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103707222016,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103715610624,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103719804928,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103721902080,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103722950656,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723474944,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723737088,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723868160,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723933696,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723966464,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723982848,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723991040,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723995136,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723997184,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723998208,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723998720,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723998976,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723999104,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723999168,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723999200,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723999216,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723999224,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723999228,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723999230,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13249590103723999231,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6894848125930140728,64,FLEN)
NAN_BOXED(11511283599611028266,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130451968,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130451969,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130451971,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130451975,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130451983,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130451999,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130452031,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130452095,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130452223,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130452479,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130452991,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130454015,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130456063,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130460159,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130468351,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130484735,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130517503,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130583039,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130714111,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679130976255,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679131500543,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679132549119,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679134646271,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679138840575,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679147229183,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679164006399,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679197560831,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679264669695,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679398887423,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827679667322879,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827680204193791,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827681277935615,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827683425419263,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827687720386559,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827696310321151,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827713490190335,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827747849928703,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827816569405439,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546827954008358911,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546828228886265855,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546828778642079743,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546829878153707519,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546832077176963071,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546836475223474175,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546845271316496383,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546862863502540799,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546898047874629631,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13546968416618807295,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13547109154107162623,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13547390629083873279,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13547953579037294591,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13549079478944137215,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13549079478944137216,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13550205378850979840,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13550768328804401152,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551049803781111808,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551190541269467136,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551260910013644800,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551296094385733632,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551313686571778048,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551322482664800256,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551326880711311360,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551329079734566912,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551330179246194688,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551330729002008576,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331003879915520,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331141318868992,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331210038345728,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331244398084096,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331261577953280,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331270167887872,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331274462855168,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331276610338816,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331277684080640,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278220951552,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278489387008,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278623604736,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278690713600,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278724268032,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278741045248,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278749433856,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278753628160,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278755725312,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278756773888,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757298176,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757560320,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757691392,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757756928,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757789696,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757806080,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757814272,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757818368,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757820416,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757821440,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757821952,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822208,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822336,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822400,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822432,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822448,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822456,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822460,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822462,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13551331278757822463,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6894857809934130284,64,FLEN)
NAN_BOXED(11511278583088928180,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783808,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783809,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783811,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783815,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783823,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783839,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783871,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113783935,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784063,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784319,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113784831,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113785855,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113787903,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113791999,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113800191,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113816575,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113849343,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782113914879,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114045951,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114308095,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782114832383,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782115880959,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782117978111,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782122172415,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782130561023,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782147338239,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782180892671,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782248001535,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782382219263,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172782650654719,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172783187525631,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172784261267455,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172786408751103,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172790703718399,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172799293652991,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172816473522175,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172850833260543,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216172919552737279,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173056991690751,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173331869597695,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216173881625411583,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216174981137039359,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216177180160294911,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216181578206806015,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216190374299828223,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216207966485872639,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216243150857961471,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216313519602139135,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216454257090494463,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(216735732067205119,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(217298682020626431,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(218424581927469055,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(218424581927469056,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(219550481834311680,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220113431787732992,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220394906764443648,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220535644252798976,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220606012996976640,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220641197369065472,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220658789555109888,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220667585648132096,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220671983694643200,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220674182717898752,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220675282229526528,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220675831985340416,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676106863247360,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676244302200832,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676313021677568,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676347381415936,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676364561285120,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676373151219712,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676377446187008,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676379593670656,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676380667412480,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381204283392,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381472718848,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381606936576,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381674045440,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381707599872,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381724377088,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381732765696,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381736960000,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381739057152,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740105728,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740630016,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381740892160,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741023232,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741088768,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741121536,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741137920,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741146112,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741150208,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741152256,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741153280,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741153792,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154048,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154176,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154240,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154272,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154288,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154296,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154300,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154302,64,FLEN)
NAN_BOXED(6894861492688892517,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(220676381741154303,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
