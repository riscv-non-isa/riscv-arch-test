
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_74496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:223488*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223488*0 + 3*0*FLEN/8, x4, x1, x2)

inst_74497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:223491*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223491*0 + 3*1*FLEN/8, x4, x1, x2)

inst_74498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:223494*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223494*0 + 3*2*FLEN/8, x4, x1, x2)

inst_74499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:223497*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223497*0 + 3*3*FLEN/8, x4, x1, x2)

inst_74500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:223500*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223500*0 + 3*4*FLEN/8, x4, x1, x2)

inst_74501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:223503*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223503*0 + 3*5*FLEN/8, x4, x1, x2)

inst_74502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:223506*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223506*0 + 3*6*FLEN/8, x4, x1, x2)

inst_74503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:223509*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223509*0 + 3*7*FLEN/8, x4, x1, x2)

inst_74504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:223512*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223512*0 + 3*8*FLEN/8, x4, x1, x2)

inst_74505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:223515*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223515*0 + 3*9*FLEN/8, x4, x1, x2)

inst_74506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000000000; valaddr_reg:x3; val_offset:223518*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223518*0 + 3*10*FLEN/8, x4, x1, x2)

inst_74507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000000001; valaddr_reg:x3; val_offset:223521*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223521*0 + 3*11*FLEN/8, x4, x1, x2)

inst_74508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000000003; valaddr_reg:x3; val_offset:223524*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223524*0 + 3*12*FLEN/8, x4, x1, x2)

inst_74509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000000007; valaddr_reg:x3; val_offset:223527*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223527*0 + 3*13*FLEN/8, x4, x1, x2)

inst_74510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000000000f; valaddr_reg:x3; val_offset:223530*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223530*0 + 3*14*FLEN/8, x4, x1, x2)

inst_74511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000000001f; valaddr_reg:x3; val_offset:223533*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223533*0 + 3*15*FLEN/8, x4, x1, x2)

inst_74512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000000003f; valaddr_reg:x3; val_offset:223536*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223536*0 + 3*16*FLEN/8, x4, x1, x2)

inst_74513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000000007f; valaddr_reg:x3; val_offset:223539*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223539*0 + 3*17*FLEN/8, x4, x1, x2)

inst_74514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000000000ff; valaddr_reg:x3; val_offset:223542*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223542*0 + 3*18*FLEN/8, x4, x1, x2)

inst_74515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000000001ff; valaddr_reg:x3; val_offset:223545*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223545*0 + 3*19*FLEN/8, x4, x1, x2)

inst_74516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000000003ff; valaddr_reg:x3; val_offset:223548*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223548*0 + 3*20*FLEN/8, x4, x1, x2)

inst_74517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000000007ff; valaddr_reg:x3; val_offset:223551*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223551*0 + 3*21*FLEN/8, x4, x1, x2)

inst_74518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000000fff; valaddr_reg:x3; val_offset:223554*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223554*0 + 3*22*FLEN/8, x4, x1, x2)

inst_74519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000001fff; valaddr_reg:x3; val_offset:223557*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223557*0 + 3*23*FLEN/8, x4, x1, x2)

inst_74520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000003fff; valaddr_reg:x3; val_offset:223560*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223560*0 + 3*24*FLEN/8, x4, x1, x2)

inst_74521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000007fff; valaddr_reg:x3; val_offset:223563*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223563*0 + 3*25*FLEN/8, x4, x1, x2)

inst_74522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000000ffff; valaddr_reg:x3; val_offset:223566*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223566*0 + 3*26*FLEN/8, x4, x1, x2)

inst_74523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000001ffff; valaddr_reg:x3; val_offset:223569*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223569*0 + 3*27*FLEN/8, x4, x1, x2)

inst_74524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000003ffff; valaddr_reg:x3; val_offset:223572*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223572*0 + 3*28*FLEN/8, x4, x1, x2)

inst_74525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000007ffff; valaddr_reg:x3; val_offset:223575*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223575*0 + 3*29*FLEN/8, x4, x1, x2)

inst_74526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000000fffff; valaddr_reg:x3; val_offset:223578*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223578*0 + 3*30*FLEN/8, x4, x1, x2)

inst_74527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000001fffff; valaddr_reg:x3; val_offset:223581*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223581*0 + 3*31*FLEN/8, x4, x1, x2)

inst_74528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000003fffff; valaddr_reg:x3; val_offset:223584*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223584*0 + 3*32*FLEN/8, x4, x1, x2)

inst_74529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000007fffff; valaddr_reg:x3; val_offset:223587*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223587*0 + 3*33*FLEN/8, x4, x1, x2)

inst_74530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000000ffffff; valaddr_reg:x3; val_offset:223590*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223590*0 + 3*34*FLEN/8, x4, x1, x2)

inst_74531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000001ffffff; valaddr_reg:x3; val_offset:223593*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223593*0 + 3*35*FLEN/8, x4, x1, x2)

inst_74532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000003ffffff; valaddr_reg:x3; val_offset:223596*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223596*0 + 3*36*FLEN/8, x4, x1, x2)

inst_74533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000007ffffff; valaddr_reg:x3; val_offset:223599*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223599*0 + 3*37*FLEN/8, x4, x1, x2)

inst_74534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000000fffffff; valaddr_reg:x3; val_offset:223602*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223602*0 + 3*38*FLEN/8, x4, x1, x2)

inst_74535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000001fffffff; valaddr_reg:x3; val_offset:223605*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223605*0 + 3*39*FLEN/8, x4, x1, x2)

inst_74536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000003fffffff; valaddr_reg:x3; val_offset:223608*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223608*0 + 3*40*FLEN/8, x4, x1, x2)

inst_74537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000007fffffff; valaddr_reg:x3; val_offset:223611*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223611*0 + 3*41*FLEN/8, x4, x1, x2)

inst_74538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500000ffffffff; valaddr_reg:x3; val_offset:223614*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223614*0 + 3*42*FLEN/8, x4, x1, x2)

inst_74539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500001ffffffff; valaddr_reg:x3; val_offset:223617*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223617*0 + 3*43*FLEN/8, x4, x1, x2)

inst_74540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500003ffffffff; valaddr_reg:x3; val_offset:223620*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223620*0 + 3*44*FLEN/8, x4, x1, x2)

inst_74541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500007ffffffff; valaddr_reg:x3; val_offset:223623*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223623*0 + 3*45*FLEN/8, x4, x1, x2)

inst_74542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250000fffffffff; valaddr_reg:x3; val_offset:223626*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223626*0 + 3*46*FLEN/8, x4, x1, x2)

inst_74543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250001fffffffff; valaddr_reg:x3; val_offset:223629*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223629*0 + 3*47*FLEN/8, x4, x1, x2)

inst_74544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250003fffffffff; valaddr_reg:x3; val_offset:223632*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223632*0 + 3*48*FLEN/8, x4, x1, x2)

inst_74545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250007fffffffff; valaddr_reg:x3; val_offset:223635*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223635*0 + 3*49*FLEN/8, x4, x1, x2)

inst_74546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25000ffffffffff; valaddr_reg:x3; val_offset:223638*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223638*0 + 3*50*FLEN/8, x4, x1, x2)

inst_74547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25001ffffffffff; valaddr_reg:x3; val_offset:223641*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223641*0 + 3*51*FLEN/8, x4, x1, x2)

inst_74548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25003ffffffffff; valaddr_reg:x3; val_offset:223644*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223644*0 + 3*52*FLEN/8, x4, x1, x2)

inst_74549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25007ffffffffff; valaddr_reg:x3; val_offset:223647*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223647*0 + 3*53*FLEN/8, x4, x1, x2)

inst_74550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2500fffffffffff; valaddr_reg:x3; val_offset:223650*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223650*0 + 3*54*FLEN/8, x4, x1, x2)

inst_74551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2501fffffffffff; valaddr_reg:x3; val_offset:223653*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223653*0 + 3*55*FLEN/8, x4, x1, x2)

inst_74552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2503fffffffffff; valaddr_reg:x3; val_offset:223656*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223656*0 + 3*56*FLEN/8, x4, x1, x2)

inst_74553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x2507fffffffffff; valaddr_reg:x3; val_offset:223659*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223659*0 + 3*57*FLEN/8, x4, x1, x2)

inst_74554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x250ffffffffffff; valaddr_reg:x3; val_offset:223662*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223662*0 + 3*58*FLEN/8, x4, x1, x2)

inst_74555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x251ffffffffffff; valaddr_reg:x3; val_offset:223665*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223665*0 + 3*59*FLEN/8, x4, x1, x2)

inst_74556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x253ffffffffffff; valaddr_reg:x3; val_offset:223668*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223668*0 + 3*60*FLEN/8, x4, x1, x2)

inst_74557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x257ffffffffffff; valaddr_reg:x3; val_offset:223671*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223671*0 + 3*61*FLEN/8, x4, x1, x2)

inst_74558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x258000000000000; valaddr_reg:x3; val_offset:223674*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223674*0 + 3*62*FLEN/8, x4, x1, x2)

inst_74559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25c000000000000; valaddr_reg:x3; val_offset:223677*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223677*0 + 3*63*FLEN/8, x4, x1, x2)

inst_74560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25e000000000000; valaddr_reg:x3; val_offset:223680*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223680*0 + 3*64*FLEN/8, x4, x1, x2)

inst_74561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25f000000000000; valaddr_reg:x3; val_offset:223683*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223683*0 + 3*65*FLEN/8, x4, x1, x2)

inst_74562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25f800000000000; valaddr_reg:x3; val_offset:223686*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223686*0 + 3*66*FLEN/8, x4, x1, x2)

inst_74563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fc00000000000; valaddr_reg:x3; val_offset:223689*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223689*0 + 3*67*FLEN/8, x4, x1, x2)

inst_74564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fe00000000000; valaddr_reg:x3; val_offset:223692*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223692*0 + 3*68*FLEN/8, x4, x1, x2)

inst_74565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ff00000000000; valaddr_reg:x3; val_offset:223695*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223695*0 + 3*69*FLEN/8, x4, x1, x2)

inst_74566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ff80000000000; valaddr_reg:x3; val_offset:223698*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223698*0 + 3*70*FLEN/8, x4, x1, x2)

inst_74567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffc0000000000; valaddr_reg:x3; val_offset:223701*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223701*0 + 3*71*FLEN/8, x4, x1, x2)

inst_74568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffe0000000000; valaddr_reg:x3; val_offset:223704*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223704*0 + 3*72*FLEN/8, x4, x1, x2)

inst_74569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fff0000000000; valaddr_reg:x3; val_offset:223707*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223707*0 + 3*73*FLEN/8, x4, x1, x2)

inst_74570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fff8000000000; valaddr_reg:x3; val_offset:223710*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223710*0 + 3*74*FLEN/8, x4, x1, x2)

inst_74571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffc000000000; valaddr_reg:x3; val_offset:223713*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223713*0 + 3*75*FLEN/8, x4, x1, x2)

inst_74572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffe000000000; valaddr_reg:x3; val_offset:223716*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223716*0 + 3*76*FLEN/8, x4, x1, x2)

inst_74573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffff000000000; valaddr_reg:x3; val_offset:223719*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223719*0 + 3*77*FLEN/8, x4, x1, x2)

inst_74574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffff800000000; valaddr_reg:x3; val_offset:223722*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223722*0 + 3*78*FLEN/8, x4, x1, x2)

inst_74575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffc00000000; valaddr_reg:x3; val_offset:223725*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223725*0 + 3*79*FLEN/8, x4, x1, x2)

inst_74576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffe00000000; valaddr_reg:x3; val_offset:223728*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223728*0 + 3*80*FLEN/8, x4, x1, x2)

inst_74577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffff00000000; valaddr_reg:x3; val_offset:223731*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223731*0 + 3*81*FLEN/8, x4, x1, x2)

inst_74578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffff80000000; valaddr_reg:x3; val_offset:223734*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223734*0 + 3*82*FLEN/8, x4, x1, x2)

inst_74579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffc0000000; valaddr_reg:x3; val_offset:223737*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223737*0 + 3*83*FLEN/8, x4, x1, x2)

inst_74580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffe0000000; valaddr_reg:x3; val_offset:223740*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223740*0 + 3*84*FLEN/8, x4, x1, x2)

inst_74581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffff0000000; valaddr_reg:x3; val_offset:223743*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223743*0 + 3*85*FLEN/8, x4, x1, x2)

inst_74582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffff8000000; valaddr_reg:x3; val_offset:223746*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223746*0 + 3*86*FLEN/8, x4, x1, x2)

inst_74583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffc000000; valaddr_reg:x3; val_offset:223749*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223749*0 + 3*87*FLEN/8, x4, x1, x2)

inst_74584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffe000000; valaddr_reg:x3; val_offset:223752*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223752*0 + 3*88*FLEN/8, x4, x1, x2)

inst_74585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffff000000; valaddr_reg:x3; val_offset:223755*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223755*0 + 3*89*FLEN/8, x4, x1, x2)

inst_74586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffff800000; valaddr_reg:x3; val_offset:223758*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223758*0 + 3*90*FLEN/8, x4, x1, x2)

inst_74587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffc00000; valaddr_reg:x3; val_offset:223761*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223761*0 + 3*91*FLEN/8, x4, x1, x2)

inst_74588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffe00000; valaddr_reg:x3; val_offset:223764*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223764*0 + 3*92*FLEN/8, x4, x1, x2)

inst_74589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffff00000; valaddr_reg:x3; val_offset:223767*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223767*0 + 3*93*FLEN/8, x4, x1, x2)

inst_74590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffff80000; valaddr_reg:x3; val_offset:223770*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223770*0 + 3*94*FLEN/8, x4, x1, x2)

inst_74591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffc0000; valaddr_reg:x3; val_offset:223773*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223773*0 + 3*95*FLEN/8, x4, x1, x2)

inst_74592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffe0000; valaddr_reg:x3; val_offset:223776*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223776*0 + 3*96*FLEN/8, x4, x1, x2)

inst_74593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffff0000; valaddr_reg:x3; val_offset:223779*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223779*0 + 3*97*FLEN/8, x4, x1, x2)

inst_74594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffff8000; valaddr_reg:x3; val_offset:223782*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223782*0 + 3*98*FLEN/8, x4, x1, x2)

inst_74595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffffc000; valaddr_reg:x3; val_offset:223785*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223785*0 + 3*99*FLEN/8, x4, x1, x2)

inst_74596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffffe000; valaddr_reg:x3; val_offset:223788*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223788*0 + 3*100*FLEN/8, x4, x1, x2)

inst_74597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffff000; valaddr_reg:x3; val_offset:223791*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223791*0 + 3*101*FLEN/8, x4, x1, x2)

inst_74598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffff800; valaddr_reg:x3; val_offset:223794*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223794*0 + 3*102*FLEN/8, x4, x1, x2)

inst_74599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffffc00; valaddr_reg:x3; val_offset:223797*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223797*0 + 3*103*FLEN/8, x4, x1, x2)

inst_74600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffffe00; valaddr_reg:x3; val_offset:223800*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223800*0 + 3*104*FLEN/8, x4, x1, x2)

inst_74601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffffff00; valaddr_reg:x3; val_offset:223803*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223803*0 + 3*105*FLEN/8, x4, x1, x2)

inst_74602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffffff80; valaddr_reg:x3; val_offset:223806*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223806*0 + 3*106*FLEN/8, x4, x1, x2)

inst_74603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffffffc0; valaddr_reg:x3; val_offset:223809*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223809*0 + 3*107*FLEN/8, x4, x1, x2)

inst_74604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffffffe0; valaddr_reg:x3; val_offset:223812*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223812*0 + 3*108*FLEN/8, x4, x1, x2)

inst_74605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffffff0; valaddr_reg:x3; val_offset:223815*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223815*0 + 3*109*FLEN/8, x4, x1, x2)

inst_74606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffffff8; valaddr_reg:x3; val_offset:223818*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223818*0 + 3*110*FLEN/8, x4, x1, x2)

inst_74607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffffffc; valaddr_reg:x3; val_offset:223821*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223821*0 + 3*111*FLEN/8, x4, x1, x2)

inst_74608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25ffffffffffffe; valaddr_reg:x3; val_offset:223824*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223824*0 + 3*112*FLEN/8, x4, x1, x2)

inst_74609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x780574fbc7e81 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x025 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa780574fbc7e81; op2val:0x0;
op3val:0x25fffffffffffff; valaddr_reg:x3; val_offset:223827*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223827*0 + 3*113*FLEN/8, x4, x1, x2)

inst_74610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000000000; valaddr_reg:x3; val_offset:223830*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223830*0 + 3*114*FLEN/8, x4, x1, x2)

inst_74611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000000001; valaddr_reg:x3; val_offset:223833*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223833*0 + 3*115*FLEN/8, x4, x1, x2)

inst_74612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000000003; valaddr_reg:x3; val_offset:223836*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223836*0 + 3*116*FLEN/8, x4, x1, x2)

inst_74613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000000007; valaddr_reg:x3; val_offset:223839*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223839*0 + 3*117*FLEN/8, x4, x1, x2)

inst_74614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000000000f; valaddr_reg:x3; val_offset:223842*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223842*0 + 3*118*FLEN/8, x4, x1, x2)

inst_74615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000000001f; valaddr_reg:x3; val_offset:223845*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223845*0 + 3*119*FLEN/8, x4, x1, x2)

inst_74616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000000003f; valaddr_reg:x3; val_offset:223848*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223848*0 + 3*120*FLEN/8, x4, x1, x2)

inst_74617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000000007f; valaddr_reg:x3; val_offset:223851*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223851*0 + 3*121*FLEN/8, x4, x1, x2)

inst_74618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000000000ff; valaddr_reg:x3; val_offset:223854*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223854*0 + 3*122*FLEN/8, x4, x1, x2)

inst_74619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000000001ff; valaddr_reg:x3; val_offset:223857*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223857*0 + 3*123*FLEN/8, x4, x1, x2)

inst_74620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000000003ff; valaddr_reg:x3; val_offset:223860*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223860*0 + 3*124*FLEN/8, x4, x1, x2)

inst_74621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000000007ff; valaddr_reg:x3; val_offset:223863*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223863*0 + 3*125*FLEN/8, x4, x1, x2)

inst_74622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000000fff; valaddr_reg:x3; val_offset:223866*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223866*0 + 3*126*FLEN/8, x4, x1, x2)

inst_74623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000001fff; valaddr_reg:x3; val_offset:223869*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223869*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_74624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000003fff; valaddr_reg:x3; val_offset:223872*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223872*0 + 3*128*FLEN/8, x4, x1, x2)

inst_74625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000007fff; valaddr_reg:x3; val_offset:223875*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223875*0 + 3*129*FLEN/8, x4, x1, x2)

inst_74626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000000ffff; valaddr_reg:x3; val_offset:223878*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223878*0 + 3*130*FLEN/8, x4, x1, x2)

inst_74627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000001ffff; valaddr_reg:x3; val_offset:223881*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223881*0 + 3*131*FLEN/8, x4, x1, x2)

inst_74628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000003ffff; valaddr_reg:x3; val_offset:223884*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223884*0 + 3*132*FLEN/8, x4, x1, x2)

inst_74629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000007ffff; valaddr_reg:x3; val_offset:223887*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223887*0 + 3*133*FLEN/8, x4, x1, x2)

inst_74630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000000fffff; valaddr_reg:x3; val_offset:223890*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223890*0 + 3*134*FLEN/8, x4, x1, x2)

inst_74631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000001fffff; valaddr_reg:x3; val_offset:223893*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223893*0 + 3*135*FLEN/8, x4, x1, x2)

inst_74632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000003fffff; valaddr_reg:x3; val_offset:223896*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223896*0 + 3*136*FLEN/8, x4, x1, x2)

inst_74633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000007fffff; valaddr_reg:x3; val_offset:223899*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223899*0 + 3*137*FLEN/8, x4, x1, x2)

inst_74634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000000ffffff; valaddr_reg:x3; val_offset:223902*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223902*0 + 3*138*FLEN/8, x4, x1, x2)

inst_74635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000001ffffff; valaddr_reg:x3; val_offset:223905*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223905*0 + 3*139*FLEN/8, x4, x1, x2)

inst_74636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000003ffffff; valaddr_reg:x3; val_offset:223908*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223908*0 + 3*140*FLEN/8, x4, x1, x2)

inst_74637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000007ffffff; valaddr_reg:x3; val_offset:223911*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223911*0 + 3*141*FLEN/8, x4, x1, x2)

inst_74638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000000fffffff; valaddr_reg:x3; val_offset:223914*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223914*0 + 3*142*FLEN/8, x4, x1, x2)

inst_74639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000001fffffff; valaddr_reg:x3; val_offset:223917*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223917*0 + 3*143*FLEN/8, x4, x1, x2)

inst_74640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000003fffffff; valaddr_reg:x3; val_offset:223920*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223920*0 + 3*144*FLEN/8, x4, x1, x2)

inst_74641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000007fffffff; valaddr_reg:x3; val_offset:223923*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223923*0 + 3*145*FLEN/8, x4, x1, x2)

inst_74642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500000ffffffff; valaddr_reg:x3; val_offset:223926*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223926*0 + 3*146*FLEN/8, x4, x1, x2)

inst_74643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500001ffffffff; valaddr_reg:x3; val_offset:223929*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223929*0 + 3*147*FLEN/8, x4, x1, x2)

inst_74644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500003ffffffff; valaddr_reg:x3; val_offset:223932*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223932*0 + 3*148*FLEN/8, x4, x1, x2)

inst_74645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500007ffffffff; valaddr_reg:x3; val_offset:223935*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223935*0 + 3*149*FLEN/8, x4, x1, x2)

inst_74646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950000fffffffff; valaddr_reg:x3; val_offset:223938*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223938*0 + 3*150*FLEN/8, x4, x1, x2)

inst_74647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950001fffffffff; valaddr_reg:x3; val_offset:223941*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223941*0 + 3*151*FLEN/8, x4, x1, x2)

inst_74648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950003fffffffff; valaddr_reg:x3; val_offset:223944*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223944*0 + 3*152*FLEN/8, x4, x1, x2)

inst_74649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950007fffffffff; valaddr_reg:x3; val_offset:223947*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223947*0 + 3*153*FLEN/8, x4, x1, x2)

inst_74650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95000ffffffffff; valaddr_reg:x3; val_offset:223950*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223950*0 + 3*154*FLEN/8, x4, x1, x2)

inst_74651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95001ffffffffff; valaddr_reg:x3; val_offset:223953*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223953*0 + 3*155*FLEN/8, x4, x1, x2)

inst_74652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95003ffffffffff; valaddr_reg:x3; val_offset:223956*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223956*0 + 3*156*FLEN/8, x4, x1, x2)

inst_74653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95007ffffffffff; valaddr_reg:x3; val_offset:223959*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223959*0 + 3*157*FLEN/8, x4, x1, x2)

inst_74654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9500fffffffffff; valaddr_reg:x3; val_offset:223962*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223962*0 + 3*158*FLEN/8, x4, x1, x2)

inst_74655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9501fffffffffff; valaddr_reg:x3; val_offset:223965*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223965*0 + 3*159*FLEN/8, x4, x1, x2)

inst_74656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9503fffffffffff; valaddr_reg:x3; val_offset:223968*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223968*0 + 3*160*FLEN/8, x4, x1, x2)

inst_74657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb9507fffffffffff; valaddr_reg:x3; val_offset:223971*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223971*0 + 3*161*FLEN/8, x4, x1, x2)

inst_74658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb950ffffffffffff; valaddr_reg:x3; val_offset:223974*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223974*0 + 3*162*FLEN/8, x4, x1, x2)

inst_74659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb951ffffffffffff; valaddr_reg:x3; val_offset:223977*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223977*0 + 3*163*FLEN/8, x4, x1, x2)

inst_74660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb953ffffffffffff; valaddr_reg:x3; val_offset:223980*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223980*0 + 3*164*FLEN/8, x4, x1, x2)

inst_74661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb957ffffffffffff; valaddr_reg:x3; val_offset:223983*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223983*0 + 3*165*FLEN/8, x4, x1, x2)

inst_74662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb958000000000000; valaddr_reg:x3; val_offset:223986*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223986*0 + 3*166*FLEN/8, x4, x1, x2)

inst_74663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95c000000000000; valaddr_reg:x3; val_offset:223989*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223989*0 + 3*167*FLEN/8, x4, x1, x2)

inst_74664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95e000000000000; valaddr_reg:x3; val_offset:223992*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223992*0 + 3*168*FLEN/8, x4, x1, x2)

inst_74665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95f000000000000; valaddr_reg:x3; val_offset:223995*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223995*0 + 3*169*FLEN/8, x4, x1, x2)

inst_74666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95f800000000000; valaddr_reg:x3; val_offset:223998*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 223998*0 + 3*170*FLEN/8, x4, x1, x2)

inst_74667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fc00000000000; valaddr_reg:x3; val_offset:224001*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224001*0 + 3*171*FLEN/8, x4, x1, x2)

inst_74668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fe00000000000; valaddr_reg:x3; val_offset:224004*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224004*0 + 3*172*FLEN/8, x4, x1, x2)

inst_74669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ff00000000000; valaddr_reg:x3; val_offset:224007*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224007*0 + 3*173*FLEN/8, x4, x1, x2)

inst_74670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ff80000000000; valaddr_reg:x3; val_offset:224010*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224010*0 + 3*174*FLEN/8, x4, x1, x2)

inst_74671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffc0000000000; valaddr_reg:x3; val_offset:224013*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224013*0 + 3*175*FLEN/8, x4, x1, x2)

inst_74672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffe0000000000; valaddr_reg:x3; val_offset:224016*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224016*0 + 3*176*FLEN/8, x4, x1, x2)

inst_74673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fff0000000000; valaddr_reg:x3; val_offset:224019*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224019*0 + 3*177*FLEN/8, x4, x1, x2)

inst_74674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fff8000000000; valaddr_reg:x3; val_offset:224022*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224022*0 + 3*178*FLEN/8, x4, x1, x2)

inst_74675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffc000000000; valaddr_reg:x3; val_offset:224025*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224025*0 + 3*179*FLEN/8, x4, x1, x2)

inst_74676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffe000000000; valaddr_reg:x3; val_offset:224028*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224028*0 + 3*180*FLEN/8, x4, x1, x2)

inst_74677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffff000000000; valaddr_reg:x3; val_offset:224031*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224031*0 + 3*181*FLEN/8, x4, x1, x2)

inst_74678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffff800000000; valaddr_reg:x3; val_offset:224034*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224034*0 + 3*182*FLEN/8, x4, x1, x2)

inst_74679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffc00000000; valaddr_reg:x3; val_offset:224037*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224037*0 + 3*183*FLEN/8, x4, x1, x2)

inst_74680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffe00000000; valaddr_reg:x3; val_offset:224040*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224040*0 + 3*184*FLEN/8, x4, x1, x2)

inst_74681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffff00000000; valaddr_reg:x3; val_offset:224043*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224043*0 + 3*185*FLEN/8, x4, x1, x2)

inst_74682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffff80000000; valaddr_reg:x3; val_offset:224046*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224046*0 + 3*186*FLEN/8, x4, x1, x2)

inst_74683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffc0000000; valaddr_reg:x3; val_offset:224049*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224049*0 + 3*187*FLEN/8, x4, x1, x2)

inst_74684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffe0000000; valaddr_reg:x3; val_offset:224052*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224052*0 + 3*188*FLEN/8, x4, x1, x2)

inst_74685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffff0000000; valaddr_reg:x3; val_offset:224055*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224055*0 + 3*189*FLEN/8, x4, x1, x2)

inst_74686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffff8000000; valaddr_reg:x3; val_offset:224058*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224058*0 + 3*190*FLEN/8, x4, x1, x2)

inst_74687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffc000000; valaddr_reg:x3; val_offset:224061*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224061*0 + 3*191*FLEN/8, x4, x1, x2)

inst_74688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffe000000; valaddr_reg:x3; val_offset:224064*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224064*0 + 3*192*FLEN/8, x4, x1, x2)

inst_74689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffff000000; valaddr_reg:x3; val_offset:224067*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224067*0 + 3*193*FLEN/8, x4, x1, x2)

inst_74690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffff800000; valaddr_reg:x3; val_offset:224070*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224070*0 + 3*194*FLEN/8, x4, x1, x2)

inst_74691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffc00000; valaddr_reg:x3; val_offset:224073*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224073*0 + 3*195*FLEN/8, x4, x1, x2)

inst_74692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffe00000; valaddr_reg:x3; val_offset:224076*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224076*0 + 3*196*FLEN/8, x4, x1, x2)

inst_74693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffff00000; valaddr_reg:x3; val_offset:224079*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224079*0 + 3*197*FLEN/8, x4, x1, x2)

inst_74694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffff80000; valaddr_reg:x3; val_offset:224082*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224082*0 + 3*198*FLEN/8, x4, x1, x2)

inst_74695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffc0000; valaddr_reg:x3; val_offset:224085*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224085*0 + 3*199*FLEN/8, x4, x1, x2)

inst_74696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffe0000; valaddr_reg:x3; val_offset:224088*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224088*0 + 3*200*FLEN/8, x4, x1, x2)

inst_74697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffff0000; valaddr_reg:x3; val_offset:224091*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224091*0 + 3*201*FLEN/8, x4, x1, x2)

inst_74698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffff8000; valaddr_reg:x3; val_offset:224094*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224094*0 + 3*202*FLEN/8, x4, x1, x2)

inst_74699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffffc000; valaddr_reg:x3; val_offset:224097*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224097*0 + 3*203*FLEN/8, x4, x1, x2)

inst_74700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffffe000; valaddr_reg:x3; val_offset:224100*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224100*0 + 3*204*FLEN/8, x4, x1, x2)

inst_74701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffff000; valaddr_reg:x3; val_offset:224103*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224103*0 + 3*205*FLEN/8, x4, x1, x2)

inst_74702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffff800; valaddr_reg:x3; val_offset:224106*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224106*0 + 3*206*FLEN/8, x4, x1, x2)

inst_74703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffffc00; valaddr_reg:x3; val_offset:224109*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224109*0 + 3*207*FLEN/8, x4, x1, x2)

inst_74704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffffe00; valaddr_reg:x3; val_offset:224112*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224112*0 + 3*208*FLEN/8, x4, x1, x2)

inst_74705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffffff00; valaddr_reg:x3; val_offset:224115*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224115*0 + 3*209*FLEN/8, x4, x1, x2)

inst_74706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffffff80; valaddr_reg:x3; val_offset:224118*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224118*0 + 3*210*FLEN/8, x4, x1, x2)

inst_74707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffffffc0; valaddr_reg:x3; val_offset:224121*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224121*0 + 3*211*FLEN/8, x4, x1, x2)

inst_74708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffffffe0; valaddr_reg:x3; val_offset:224124*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224124*0 + 3*212*FLEN/8, x4, x1, x2)

inst_74709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffffff0; valaddr_reg:x3; val_offset:224127*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224127*0 + 3*213*FLEN/8, x4, x1, x2)

inst_74710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffffff8; valaddr_reg:x3; val_offset:224130*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224130*0 + 3*214*FLEN/8, x4, x1, x2)

inst_74711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffffffc; valaddr_reg:x3; val_offset:224133*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224133*0 + 3*215*FLEN/8, x4, x1, x2)

inst_74712:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95ffffffffffffe; valaddr_reg:x3; val_offset:224136*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224136*0 + 3*216*FLEN/8, x4, x1, x2)

inst_74713:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x395 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xb95fffffffffffff; valaddr_reg:x3; val_offset:224139*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224139*0 + 3*217*FLEN/8, x4, x1, x2)

inst_74714:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:224142*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224142*0 + 3*218*FLEN/8, x4, x1, x2)

inst_74715:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:224145*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224145*0 + 3*219*FLEN/8, x4, x1, x2)

inst_74716:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:224148*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224148*0 + 3*220*FLEN/8, x4, x1, x2)

inst_74717:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:224151*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224151*0 + 3*221*FLEN/8, x4, x1, x2)

inst_74718:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:224154*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224154*0 + 3*222*FLEN/8, x4, x1, x2)

inst_74719:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:224157*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224157*0 + 3*223*FLEN/8, x4, x1, x2)

inst_74720:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:224160*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224160*0 + 3*224*FLEN/8, x4, x1, x2)

inst_74721:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:224163*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224163*0 + 3*225*FLEN/8, x4, x1, x2)

inst_74722:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:224166*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224166*0 + 3*226*FLEN/8, x4, x1, x2)

inst_74723:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:224169*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224169*0 + 3*227*FLEN/8, x4, x1, x2)

inst_74724:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:224172*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224172*0 + 3*228*FLEN/8, x4, x1, x2)

inst_74725:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:224175*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224175*0 + 3*229*FLEN/8, x4, x1, x2)

inst_74726:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:224178*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224178*0 + 3*230*FLEN/8, x4, x1, x2)

inst_74727:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:224181*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224181*0 + 3*231*FLEN/8, x4, x1, x2)

inst_74728:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:224184*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224184*0 + 3*232*FLEN/8, x4, x1, x2)

inst_74729:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:224187*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224187*0 + 3*233*FLEN/8, x4, x1, x2)

inst_74730:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:224190*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224190*0 + 3*234*FLEN/8, x4, x1, x2)

inst_74731:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:224193*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224193*0 + 3*235*FLEN/8, x4, x1, x2)

inst_74732:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:224196*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224196*0 + 3*236*FLEN/8, x4, x1, x2)

inst_74733:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:224199*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224199*0 + 3*237*FLEN/8, x4, x1, x2)

inst_74734:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:224202*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224202*0 + 3*238*FLEN/8, x4, x1, x2)

inst_74735:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7831482bf99e3 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x5c6ad80cc37b9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7831482bf99e3; op2val:0x9fc5c6ad80cc37b9;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:224205*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224205*0 + 3*239*FLEN/8, x4, x1, x2)

inst_74736:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000000000; valaddr_reg:x3; val_offset:224208*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224208*0 + 3*240*FLEN/8, x4, x1, x2)

inst_74737:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:224211*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224211*0 + 3*241*FLEN/8, x4, x1, x2)

inst_74738:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:224214*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224214*0 + 3*242*FLEN/8, x4, x1, x2)

inst_74739:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:224217*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224217*0 + 3*243*FLEN/8, x4, x1, x2)

inst_74740:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:224220*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224220*0 + 3*244*FLEN/8, x4, x1, x2)

inst_74741:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:224223*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224223*0 + 3*245*FLEN/8, x4, x1, x2)

inst_74742:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:224226*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224226*0 + 3*246*FLEN/8, x4, x1, x2)

inst_74743:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000000007f; valaddr_reg:x3; val_offset:224229*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224229*0 + 3*247*FLEN/8, x4, x1, x2)

inst_74744:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000000000ff; valaddr_reg:x3; val_offset:224232*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224232*0 + 3*248*FLEN/8, x4, x1, x2)

inst_74745:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000000001ff; valaddr_reg:x3; val_offset:224235*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224235*0 + 3*249*FLEN/8, x4, x1, x2)

inst_74746:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000000003ff; valaddr_reg:x3; val_offset:224238*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224238*0 + 3*250*FLEN/8, x4, x1, x2)

inst_74747:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000000007ff; valaddr_reg:x3; val_offset:224241*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224241*0 + 3*251*FLEN/8, x4, x1, x2)

inst_74748:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000000fff; valaddr_reg:x3; val_offset:224244*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224244*0 + 3*252*FLEN/8, x4, x1, x2)

inst_74749:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000001fff; valaddr_reg:x3; val_offset:224247*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224247*0 + 3*253*FLEN/8, x4, x1, x2)

inst_74750:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000003fff; valaddr_reg:x3; val_offset:224250*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224250*0 + 3*254*FLEN/8, x4, x1, x2)

inst_74751:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000007fff; valaddr_reg:x3; val_offset:224253*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224253*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_74752:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000000ffff; valaddr_reg:x3; val_offset:224256*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224256*0 + 3*256*FLEN/8, x4, x1, x2)

inst_74753:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000001ffff; valaddr_reg:x3; val_offset:224259*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224259*0 + 3*257*FLEN/8, x4, x1, x2)

inst_74754:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000003ffff; valaddr_reg:x3; val_offset:224262*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224262*0 + 3*258*FLEN/8, x4, x1, x2)

inst_74755:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000007ffff; valaddr_reg:x3; val_offset:224265*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224265*0 + 3*259*FLEN/8, x4, x1, x2)

inst_74756:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000000fffff; valaddr_reg:x3; val_offset:224268*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224268*0 + 3*260*FLEN/8, x4, x1, x2)

inst_74757:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000001fffff; valaddr_reg:x3; val_offset:224271*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224271*0 + 3*261*FLEN/8, x4, x1, x2)

inst_74758:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000003fffff; valaddr_reg:x3; val_offset:224274*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224274*0 + 3*262*FLEN/8, x4, x1, x2)

inst_74759:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000007fffff; valaddr_reg:x3; val_offset:224277*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224277*0 + 3*263*FLEN/8, x4, x1, x2)

inst_74760:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000000ffffff; valaddr_reg:x3; val_offset:224280*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224280*0 + 3*264*FLEN/8, x4, x1, x2)

inst_74761:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000001ffffff; valaddr_reg:x3; val_offset:224283*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224283*0 + 3*265*FLEN/8, x4, x1, x2)

inst_74762:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000003ffffff; valaddr_reg:x3; val_offset:224286*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224286*0 + 3*266*FLEN/8, x4, x1, x2)

inst_74763:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000007ffffff; valaddr_reg:x3; val_offset:224289*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224289*0 + 3*267*FLEN/8, x4, x1, x2)

inst_74764:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000000fffffff; valaddr_reg:x3; val_offset:224292*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224292*0 + 3*268*FLEN/8, x4, x1, x2)

inst_74765:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000001fffffff; valaddr_reg:x3; val_offset:224295*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224295*0 + 3*269*FLEN/8, x4, x1, x2)

inst_74766:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000003fffffff; valaddr_reg:x3; val_offset:224298*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224298*0 + 3*270*FLEN/8, x4, x1, x2)

inst_74767:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000007fffffff; valaddr_reg:x3; val_offset:224301*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224301*0 + 3*271*FLEN/8, x4, x1, x2)

inst_74768:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100000ffffffff; valaddr_reg:x3; val_offset:224304*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224304*0 + 3*272*FLEN/8, x4, x1, x2)

inst_74769:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100001ffffffff; valaddr_reg:x3; val_offset:224307*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224307*0 + 3*273*FLEN/8, x4, x1, x2)

inst_74770:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100003ffffffff; valaddr_reg:x3; val_offset:224310*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224310*0 + 3*274*FLEN/8, x4, x1, x2)

inst_74771:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100007ffffffff; valaddr_reg:x3; val_offset:224313*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224313*0 + 3*275*FLEN/8, x4, x1, x2)

inst_74772:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010000fffffffff; valaddr_reg:x3; val_offset:224316*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224316*0 + 3*276*FLEN/8, x4, x1, x2)

inst_74773:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010001fffffffff; valaddr_reg:x3; val_offset:224319*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224319*0 + 3*277*FLEN/8, x4, x1, x2)

inst_74774:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010003fffffffff; valaddr_reg:x3; val_offset:224322*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224322*0 + 3*278*FLEN/8, x4, x1, x2)

inst_74775:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010007fffffffff; valaddr_reg:x3; val_offset:224325*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224325*0 + 3*279*FLEN/8, x4, x1, x2)

inst_74776:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801000ffffffffff; valaddr_reg:x3; val_offset:224328*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224328*0 + 3*280*FLEN/8, x4, x1, x2)

inst_74777:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801001ffffffffff; valaddr_reg:x3; val_offset:224331*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224331*0 + 3*281*FLEN/8, x4, x1, x2)

inst_74778:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801003ffffffffff; valaddr_reg:x3; val_offset:224334*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224334*0 + 3*282*FLEN/8, x4, x1, x2)

inst_74779:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801007ffffffffff; valaddr_reg:x3; val_offset:224337*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224337*0 + 3*283*FLEN/8, x4, x1, x2)

inst_74780:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80100fffffffffff; valaddr_reg:x3; val_offset:224340*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224340*0 + 3*284*FLEN/8, x4, x1, x2)

inst_74781:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80101fffffffffff; valaddr_reg:x3; val_offset:224343*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224343*0 + 3*285*FLEN/8, x4, x1, x2)

inst_74782:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80103fffffffffff; valaddr_reg:x3; val_offset:224346*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224346*0 + 3*286*FLEN/8, x4, x1, x2)

inst_74783:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x80107fffffffffff; valaddr_reg:x3; val_offset:224349*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224349*0 + 3*287*FLEN/8, x4, x1, x2)

inst_74784:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8010ffffffffffff; valaddr_reg:x3; val_offset:224352*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224352*0 + 3*288*FLEN/8, x4, x1, x2)

inst_74785:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8011ffffffffffff; valaddr_reg:x3; val_offset:224355*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224355*0 + 3*289*FLEN/8, x4, x1, x2)

inst_74786:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:224358*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224358*0 + 3*290*FLEN/8, x4, x1, x2)

inst_74787:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8013ffffffffffff; valaddr_reg:x3; val_offset:224361*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224361*0 + 3*291*FLEN/8, x4, x1, x2)

inst_74788:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:224364*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224364*0 + 3*292*FLEN/8, x4, x1, x2)

inst_74789:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:224367*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224367*0 + 3*293*FLEN/8, x4, x1, x2)

inst_74790:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:224370*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224370*0 + 3*294*FLEN/8, x4, x1, x2)

inst_74791:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:224373*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224373*0 + 3*295*FLEN/8, x4, x1, x2)

inst_74792:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8017ffffffffffff; valaddr_reg:x3; val_offset:224376*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224376*0 + 3*296*FLEN/8, x4, x1, x2)

inst_74793:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8018000000000000; valaddr_reg:x3; val_offset:224379*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224379*0 + 3*297*FLEN/8, x4, x1, x2)

inst_74794:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:224382*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224382*0 + 3*298*FLEN/8, x4, x1, x2)

inst_74795:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:224385*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224385*0 + 3*299*FLEN/8, x4, x1, x2)

inst_74796:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:224388*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224388*0 + 3*300*FLEN/8, x4, x1, x2)

inst_74797:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801c000000000000; valaddr_reg:x3; val_offset:224391*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224391*0 + 3*301*FLEN/8, x4, x1, x2)

inst_74798:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:224394*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224394*0 + 3*302*FLEN/8, x4, x1, x2)

inst_74799:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:224397*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224397*0 + 3*303*FLEN/8, x4, x1, x2)

inst_74800:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801e000000000000; valaddr_reg:x3; val_offset:224400*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224400*0 + 3*304*FLEN/8, x4, x1, x2)

inst_74801:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801f000000000000; valaddr_reg:x3; val_offset:224403*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224403*0 + 3*305*FLEN/8, x4, x1, x2)

inst_74802:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801f800000000000; valaddr_reg:x3; val_offset:224406*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224406*0 + 3*306*FLEN/8, x4, x1, x2)

inst_74803:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fc00000000000; valaddr_reg:x3; val_offset:224409*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224409*0 + 3*307*FLEN/8, x4, x1, x2)

inst_74804:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fe00000000000; valaddr_reg:x3; val_offset:224412*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224412*0 + 3*308*FLEN/8, x4, x1, x2)

inst_74805:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ff00000000000; valaddr_reg:x3; val_offset:224415*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224415*0 + 3*309*FLEN/8, x4, x1, x2)

inst_74806:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ff80000000000; valaddr_reg:x3; val_offset:224418*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224418*0 + 3*310*FLEN/8, x4, x1, x2)

inst_74807:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffc0000000000; valaddr_reg:x3; val_offset:224421*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224421*0 + 3*311*FLEN/8, x4, x1, x2)

inst_74808:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffe0000000000; valaddr_reg:x3; val_offset:224424*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224424*0 + 3*312*FLEN/8, x4, x1, x2)

inst_74809:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fff0000000000; valaddr_reg:x3; val_offset:224427*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224427*0 + 3*313*FLEN/8, x4, x1, x2)

inst_74810:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fff8000000000; valaddr_reg:x3; val_offset:224430*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224430*0 + 3*314*FLEN/8, x4, x1, x2)

inst_74811:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffc000000000; valaddr_reg:x3; val_offset:224433*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224433*0 + 3*315*FLEN/8, x4, x1, x2)

inst_74812:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffe000000000; valaddr_reg:x3; val_offset:224436*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224436*0 + 3*316*FLEN/8, x4, x1, x2)

inst_74813:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffff000000000; valaddr_reg:x3; val_offset:224439*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224439*0 + 3*317*FLEN/8, x4, x1, x2)

inst_74814:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffff800000000; valaddr_reg:x3; val_offset:224442*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224442*0 + 3*318*FLEN/8, x4, x1, x2)

inst_74815:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffc00000000; valaddr_reg:x3; val_offset:224445*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224445*0 + 3*319*FLEN/8, x4, x1, x2)

inst_74816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffe00000000; valaddr_reg:x3; val_offset:224448*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224448*0 + 3*320*FLEN/8, x4, x1, x2)

inst_74817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffff00000000; valaddr_reg:x3; val_offset:224451*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224451*0 + 3*321*FLEN/8, x4, x1, x2)

inst_74818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffff80000000; valaddr_reg:x3; val_offset:224454*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224454*0 + 3*322*FLEN/8, x4, x1, x2)

inst_74819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffc0000000; valaddr_reg:x3; val_offset:224457*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224457*0 + 3*323*FLEN/8, x4, x1, x2)

inst_74820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffe0000000; valaddr_reg:x3; val_offset:224460*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224460*0 + 3*324*FLEN/8, x4, x1, x2)

inst_74821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffff0000000; valaddr_reg:x3; val_offset:224463*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224463*0 + 3*325*FLEN/8, x4, x1, x2)

inst_74822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffff8000000; valaddr_reg:x3; val_offset:224466*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224466*0 + 3*326*FLEN/8, x4, x1, x2)

inst_74823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffc000000; valaddr_reg:x3; val_offset:224469*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224469*0 + 3*327*FLEN/8, x4, x1, x2)

inst_74824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffe000000; valaddr_reg:x3; val_offset:224472*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224472*0 + 3*328*FLEN/8, x4, x1, x2)

inst_74825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffff000000; valaddr_reg:x3; val_offset:224475*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224475*0 + 3*329*FLEN/8, x4, x1, x2)

inst_74826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffff800000; valaddr_reg:x3; val_offset:224478*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224478*0 + 3*330*FLEN/8, x4, x1, x2)

inst_74827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffc00000; valaddr_reg:x3; val_offset:224481*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224481*0 + 3*331*FLEN/8, x4, x1, x2)

inst_74828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffe00000; valaddr_reg:x3; val_offset:224484*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224484*0 + 3*332*FLEN/8, x4, x1, x2)

inst_74829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffff00000; valaddr_reg:x3; val_offset:224487*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224487*0 + 3*333*FLEN/8, x4, x1, x2)

inst_74830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffff80000; valaddr_reg:x3; val_offset:224490*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224490*0 + 3*334*FLEN/8, x4, x1, x2)

inst_74831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffc0000; valaddr_reg:x3; val_offset:224493*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224493*0 + 3*335*FLEN/8, x4, x1, x2)

inst_74832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffe0000; valaddr_reg:x3; val_offset:224496*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224496*0 + 3*336*FLEN/8, x4, x1, x2)

inst_74833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffff0000; valaddr_reg:x3; val_offset:224499*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224499*0 + 3*337*FLEN/8, x4, x1, x2)

inst_74834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffff8000; valaddr_reg:x3; val_offset:224502*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224502*0 + 3*338*FLEN/8, x4, x1, x2)

inst_74835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffffc000; valaddr_reg:x3; val_offset:224505*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224505*0 + 3*339*FLEN/8, x4, x1, x2)

inst_74836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffffe000; valaddr_reg:x3; val_offset:224508*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224508*0 + 3*340*FLEN/8, x4, x1, x2)

inst_74837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffff000; valaddr_reg:x3; val_offset:224511*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224511*0 + 3*341*FLEN/8, x4, x1, x2)

inst_74838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffff800; valaddr_reg:x3; val_offset:224514*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224514*0 + 3*342*FLEN/8, x4, x1, x2)

inst_74839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffffc00; valaddr_reg:x3; val_offset:224517*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224517*0 + 3*343*FLEN/8, x4, x1, x2)

inst_74840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffffe00; valaddr_reg:x3; val_offset:224520*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224520*0 + 3*344*FLEN/8, x4, x1, x2)

inst_74841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffffff00; valaddr_reg:x3; val_offset:224523*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224523*0 + 3*345*FLEN/8, x4, x1, x2)

inst_74842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffffff80; valaddr_reg:x3; val_offset:224526*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224526*0 + 3*346*FLEN/8, x4, x1, x2)

inst_74843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:224529*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224529*0 + 3*347*FLEN/8, x4, x1, x2)

inst_74844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:224532*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224532*0 + 3*348*FLEN/8, x4, x1, x2)

inst_74845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:224535*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224535*0 + 3*349*FLEN/8, x4, x1, x2)

inst_74846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:224538*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224538*0 + 3*350*FLEN/8, x4, x1, x2)

inst_74847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:224541*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224541*0 + 3*351*FLEN/8, x4, x1, x2)

inst_74848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:224544*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224544*0 + 3*352*FLEN/8, x4, x1, x2)

inst_74849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78a0e95348d94 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78a0e95348d94; op2val:0x8000;
op3val:0x801fffffffffffff; valaddr_reg:x3; val_offset:224547*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224547*0 + 3*353*FLEN/8, x4, x1, x2)

inst_74850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:224550*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224550*0 + 3*354*FLEN/8, x4, x1, x2)

inst_74851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:224553*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224553*0 + 3*355*FLEN/8, x4, x1, x2)

inst_74852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:224556*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224556*0 + 3*356*FLEN/8, x4, x1, x2)

inst_74853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:224559*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224559*0 + 3*357*FLEN/8, x4, x1, x2)

inst_74854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:224562*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224562*0 + 3*358*FLEN/8, x4, x1, x2)

inst_74855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:224565*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224565*0 + 3*359*FLEN/8, x4, x1, x2)

inst_74856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:224568*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224568*0 + 3*360*FLEN/8, x4, x1, x2)

inst_74857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:224571*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224571*0 + 3*361*FLEN/8, x4, x1, x2)

inst_74858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:224574*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224574*0 + 3*362*FLEN/8, x4, x1, x2)

inst_74859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:224577*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224577*0 + 3*363*FLEN/8, x4, x1, x2)

inst_74860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:224580*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224580*0 + 3*364*FLEN/8, x4, x1, x2)

inst_74861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:224583*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224583*0 + 3*365*FLEN/8, x4, x1, x2)

inst_74862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:224586*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224586*0 + 3*366*FLEN/8, x4, x1, x2)

inst_74863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:224589*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224589*0 + 3*367*FLEN/8, x4, x1, x2)

inst_74864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:224592*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224592*0 + 3*368*FLEN/8, x4, x1, x2)

inst_74865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:224595*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224595*0 + 3*369*FLEN/8, x4, x1, x2)

inst_74866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:224598*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224598*0 + 3*370*FLEN/8, x4, x1, x2)

inst_74867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:224601*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224601*0 + 3*371*FLEN/8, x4, x1, x2)

inst_74868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:224604*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224604*0 + 3*372*FLEN/8, x4, x1, x2)

inst_74869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:224607*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224607*0 + 3*373*FLEN/8, x4, x1, x2)

inst_74870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:224610*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224610*0 + 3*374*FLEN/8, x4, x1, x2)

inst_74871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:224613*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224613*0 + 3*375*FLEN/8, x4, x1, x2)

inst_74872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000000000; valaddr_reg:x3; val_offset:224616*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224616*0 + 3*376*FLEN/8, x4, x1, x2)

inst_74873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000000001; valaddr_reg:x3; val_offset:224619*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224619*0 + 3*377*FLEN/8, x4, x1, x2)

inst_74874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000000003; valaddr_reg:x3; val_offset:224622*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224622*0 + 3*378*FLEN/8, x4, x1, x2)

inst_74875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000000007; valaddr_reg:x3; val_offset:224625*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224625*0 + 3*379*FLEN/8, x4, x1, x2)

inst_74876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000000000f; valaddr_reg:x3; val_offset:224628*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224628*0 + 3*380*FLEN/8, x4, x1, x2)

inst_74877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000000001f; valaddr_reg:x3; val_offset:224631*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224631*0 + 3*381*FLEN/8, x4, x1, x2)

inst_74878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000000003f; valaddr_reg:x3; val_offset:224634*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224634*0 + 3*382*FLEN/8, x4, x1, x2)

inst_74879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000000007f; valaddr_reg:x3; val_offset:224637*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224637*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_74880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000000000ff; valaddr_reg:x3; val_offset:224640*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224640*0 + 3*384*FLEN/8, x4, x1, x2)

inst_74881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000000001ff; valaddr_reg:x3; val_offset:224643*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224643*0 + 3*385*FLEN/8, x4, x1, x2)

inst_74882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000000003ff; valaddr_reg:x3; val_offset:224646*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224646*0 + 3*386*FLEN/8, x4, x1, x2)

inst_74883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000000007ff; valaddr_reg:x3; val_offset:224649*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224649*0 + 3*387*FLEN/8, x4, x1, x2)

inst_74884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000000fff; valaddr_reg:x3; val_offset:224652*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224652*0 + 3*388*FLEN/8, x4, x1, x2)

inst_74885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000001fff; valaddr_reg:x3; val_offset:224655*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224655*0 + 3*389*FLEN/8, x4, x1, x2)

inst_74886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000003fff; valaddr_reg:x3; val_offset:224658*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224658*0 + 3*390*FLEN/8, x4, x1, x2)

inst_74887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000007fff; valaddr_reg:x3; val_offset:224661*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224661*0 + 3*391*FLEN/8, x4, x1, x2)

inst_74888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000000ffff; valaddr_reg:x3; val_offset:224664*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224664*0 + 3*392*FLEN/8, x4, x1, x2)

inst_74889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000001ffff; valaddr_reg:x3; val_offset:224667*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224667*0 + 3*393*FLEN/8, x4, x1, x2)

inst_74890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000003ffff; valaddr_reg:x3; val_offset:224670*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224670*0 + 3*394*FLEN/8, x4, x1, x2)

inst_74891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000007ffff; valaddr_reg:x3; val_offset:224673*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224673*0 + 3*395*FLEN/8, x4, x1, x2)

inst_74892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000000fffff; valaddr_reg:x3; val_offset:224676*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224676*0 + 3*396*FLEN/8, x4, x1, x2)

inst_74893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000001fffff; valaddr_reg:x3; val_offset:224679*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224679*0 + 3*397*FLEN/8, x4, x1, x2)

inst_74894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000003fffff; valaddr_reg:x3; val_offset:224682*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224682*0 + 3*398*FLEN/8, x4, x1, x2)

inst_74895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000007fffff; valaddr_reg:x3; val_offset:224685*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224685*0 + 3*399*FLEN/8, x4, x1, x2)

inst_74896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000000ffffff; valaddr_reg:x3; val_offset:224688*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224688*0 + 3*400*FLEN/8, x4, x1, x2)

inst_74897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000001ffffff; valaddr_reg:x3; val_offset:224691*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224691*0 + 3*401*FLEN/8, x4, x1, x2)

inst_74898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000003ffffff; valaddr_reg:x3; val_offset:224694*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224694*0 + 3*402*FLEN/8, x4, x1, x2)

inst_74899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000007ffffff; valaddr_reg:x3; val_offset:224697*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224697*0 + 3*403*FLEN/8, x4, x1, x2)

inst_74900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000000fffffff; valaddr_reg:x3; val_offset:224700*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224700*0 + 3*404*FLEN/8, x4, x1, x2)

inst_74901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000001fffffff; valaddr_reg:x3; val_offset:224703*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224703*0 + 3*405*FLEN/8, x4, x1, x2)

inst_74902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000003fffffff; valaddr_reg:x3; val_offset:224706*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224706*0 + 3*406*FLEN/8, x4, x1, x2)

inst_74903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000007fffffff; valaddr_reg:x3; val_offset:224709*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224709*0 + 3*407*FLEN/8, x4, x1, x2)

inst_74904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300000ffffffff; valaddr_reg:x3; val_offset:224712*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224712*0 + 3*408*FLEN/8, x4, x1, x2)

inst_74905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300001ffffffff; valaddr_reg:x3; val_offset:224715*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224715*0 + 3*409*FLEN/8, x4, x1, x2)

inst_74906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300003ffffffff; valaddr_reg:x3; val_offset:224718*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224718*0 + 3*410*FLEN/8, x4, x1, x2)

inst_74907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300007ffffffff; valaddr_reg:x3; val_offset:224721*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224721*0 + 3*411*FLEN/8, x4, x1, x2)

inst_74908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330000fffffffff; valaddr_reg:x3; val_offset:224724*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224724*0 + 3*412*FLEN/8, x4, x1, x2)

inst_74909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330001fffffffff; valaddr_reg:x3; val_offset:224727*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224727*0 + 3*413*FLEN/8, x4, x1, x2)

inst_74910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330003fffffffff; valaddr_reg:x3; val_offset:224730*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224730*0 + 3*414*FLEN/8, x4, x1, x2)

inst_74911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330007fffffffff; valaddr_reg:x3; val_offset:224733*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224733*0 + 3*415*FLEN/8, x4, x1, x2)

inst_74912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833000ffffffffff; valaddr_reg:x3; val_offset:224736*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224736*0 + 3*416*FLEN/8, x4, x1, x2)

inst_74913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833001ffffffffff; valaddr_reg:x3; val_offset:224739*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224739*0 + 3*417*FLEN/8, x4, x1, x2)

inst_74914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833003ffffffffff; valaddr_reg:x3; val_offset:224742*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224742*0 + 3*418*FLEN/8, x4, x1, x2)

inst_74915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833007ffffffffff; valaddr_reg:x3; val_offset:224745*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224745*0 + 3*419*FLEN/8, x4, x1, x2)

inst_74916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83300fffffffffff; valaddr_reg:x3; val_offset:224748*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224748*0 + 3*420*FLEN/8, x4, x1, x2)

inst_74917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83301fffffffffff; valaddr_reg:x3; val_offset:224751*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224751*0 + 3*421*FLEN/8, x4, x1, x2)

inst_74918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83303fffffffffff; valaddr_reg:x3; val_offset:224754*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224754*0 + 3*422*FLEN/8, x4, x1, x2)

inst_74919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x83307fffffffffff; valaddr_reg:x3; val_offset:224757*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224757*0 + 3*423*FLEN/8, x4, x1, x2)

inst_74920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8330ffffffffffff; valaddr_reg:x3; val_offset:224760*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224760*0 + 3*424*FLEN/8, x4, x1, x2)

inst_74921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8331ffffffffffff; valaddr_reg:x3; val_offset:224763*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224763*0 + 3*425*FLEN/8, x4, x1, x2)

inst_74922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8333ffffffffffff; valaddr_reg:x3; val_offset:224766*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224766*0 + 3*426*FLEN/8, x4, x1, x2)

inst_74923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8337ffffffffffff; valaddr_reg:x3; val_offset:224769*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224769*0 + 3*427*FLEN/8, x4, x1, x2)

inst_74924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x8338000000000000; valaddr_reg:x3; val_offset:224772*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224772*0 + 3*428*FLEN/8, x4, x1, x2)

inst_74925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833c000000000000; valaddr_reg:x3; val_offset:224775*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224775*0 + 3*429*FLEN/8, x4, x1, x2)

inst_74926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833e000000000000; valaddr_reg:x3; val_offset:224778*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224778*0 + 3*430*FLEN/8, x4, x1, x2)

inst_74927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833f000000000000; valaddr_reg:x3; val_offset:224781*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224781*0 + 3*431*FLEN/8, x4, x1, x2)

inst_74928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833f800000000000; valaddr_reg:x3; val_offset:224784*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224784*0 + 3*432*FLEN/8, x4, x1, x2)

inst_74929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fc00000000000; valaddr_reg:x3; val_offset:224787*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224787*0 + 3*433*FLEN/8, x4, x1, x2)

inst_74930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fe00000000000; valaddr_reg:x3; val_offset:224790*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224790*0 + 3*434*FLEN/8, x4, x1, x2)

inst_74931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ff00000000000; valaddr_reg:x3; val_offset:224793*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224793*0 + 3*435*FLEN/8, x4, x1, x2)

inst_74932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ff80000000000; valaddr_reg:x3; val_offset:224796*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224796*0 + 3*436*FLEN/8, x4, x1, x2)

inst_74933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffc0000000000; valaddr_reg:x3; val_offset:224799*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224799*0 + 3*437*FLEN/8, x4, x1, x2)

inst_74934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffe0000000000; valaddr_reg:x3; val_offset:224802*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224802*0 + 3*438*FLEN/8, x4, x1, x2)

inst_74935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fff0000000000; valaddr_reg:x3; val_offset:224805*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224805*0 + 3*439*FLEN/8, x4, x1, x2)

inst_74936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fff8000000000; valaddr_reg:x3; val_offset:224808*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224808*0 + 3*440*FLEN/8, x4, x1, x2)

inst_74937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffc000000000; valaddr_reg:x3; val_offset:224811*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224811*0 + 3*441*FLEN/8, x4, x1, x2)

inst_74938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffe000000000; valaddr_reg:x3; val_offset:224814*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224814*0 + 3*442*FLEN/8, x4, x1, x2)

inst_74939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffff000000000; valaddr_reg:x3; val_offset:224817*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224817*0 + 3*443*FLEN/8, x4, x1, x2)

inst_74940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffff800000000; valaddr_reg:x3; val_offset:224820*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224820*0 + 3*444*FLEN/8, x4, x1, x2)

inst_74941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffc00000000; valaddr_reg:x3; val_offset:224823*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224823*0 + 3*445*FLEN/8, x4, x1, x2)

inst_74942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffe00000000; valaddr_reg:x3; val_offset:224826*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224826*0 + 3*446*FLEN/8, x4, x1, x2)

inst_74943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffff00000000; valaddr_reg:x3; val_offset:224829*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224829*0 + 3*447*FLEN/8, x4, x1, x2)

inst_74944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffff80000000; valaddr_reg:x3; val_offset:224832*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224832*0 + 3*448*FLEN/8, x4, x1, x2)

inst_74945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffc0000000; valaddr_reg:x3; val_offset:224835*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224835*0 + 3*449*FLEN/8, x4, x1, x2)

inst_74946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffe0000000; valaddr_reg:x3; val_offset:224838*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224838*0 + 3*450*FLEN/8, x4, x1, x2)

inst_74947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffff0000000; valaddr_reg:x3; val_offset:224841*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224841*0 + 3*451*FLEN/8, x4, x1, x2)

inst_74948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffff8000000; valaddr_reg:x3; val_offset:224844*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224844*0 + 3*452*FLEN/8, x4, x1, x2)

inst_74949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffc000000; valaddr_reg:x3; val_offset:224847*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224847*0 + 3*453*FLEN/8, x4, x1, x2)

inst_74950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffe000000; valaddr_reg:x3; val_offset:224850*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224850*0 + 3*454*FLEN/8, x4, x1, x2)

inst_74951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffff000000; valaddr_reg:x3; val_offset:224853*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224853*0 + 3*455*FLEN/8, x4, x1, x2)

inst_74952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffff800000; valaddr_reg:x3; val_offset:224856*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224856*0 + 3*456*FLEN/8, x4, x1, x2)

inst_74953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffc00000; valaddr_reg:x3; val_offset:224859*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224859*0 + 3*457*FLEN/8, x4, x1, x2)

inst_74954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffe00000; valaddr_reg:x3; val_offset:224862*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224862*0 + 3*458*FLEN/8, x4, x1, x2)

inst_74955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffff00000; valaddr_reg:x3; val_offset:224865*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224865*0 + 3*459*FLEN/8, x4, x1, x2)

inst_74956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffff80000; valaddr_reg:x3; val_offset:224868*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224868*0 + 3*460*FLEN/8, x4, x1, x2)

inst_74957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffc0000; valaddr_reg:x3; val_offset:224871*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224871*0 + 3*461*FLEN/8, x4, x1, x2)

inst_74958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffe0000; valaddr_reg:x3; val_offset:224874*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224874*0 + 3*462*FLEN/8, x4, x1, x2)

inst_74959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffff0000; valaddr_reg:x3; val_offset:224877*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224877*0 + 3*463*FLEN/8, x4, x1, x2)

inst_74960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffff8000; valaddr_reg:x3; val_offset:224880*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224880*0 + 3*464*FLEN/8, x4, x1, x2)

inst_74961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffffc000; valaddr_reg:x3; val_offset:224883*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224883*0 + 3*465*FLEN/8, x4, x1, x2)

inst_74962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffffe000; valaddr_reg:x3; val_offset:224886*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224886*0 + 3*466*FLEN/8, x4, x1, x2)

inst_74963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffff000; valaddr_reg:x3; val_offset:224889*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224889*0 + 3*467*FLEN/8, x4, x1, x2)

inst_74964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffff800; valaddr_reg:x3; val_offset:224892*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224892*0 + 3*468*FLEN/8, x4, x1, x2)

inst_74965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffffc00; valaddr_reg:x3; val_offset:224895*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224895*0 + 3*469*FLEN/8, x4, x1, x2)

inst_74966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffffe00; valaddr_reg:x3; val_offset:224898*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224898*0 + 3*470*FLEN/8, x4, x1, x2)

inst_74967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffffff00; valaddr_reg:x3; val_offset:224901*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224901*0 + 3*471*FLEN/8, x4, x1, x2)

inst_74968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffffff80; valaddr_reg:x3; val_offset:224904*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224904*0 + 3*472*FLEN/8, x4, x1, x2)

inst_74969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffffffc0; valaddr_reg:x3; val_offset:224907*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224907*0 + 3*473*FLEN/8, x4, x1, x2)

inst_74970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffffffe0; valaddr_reg:x3; val_offset:224910*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224910*0 + 3*474*FLEN/8, x4, x1, x2)

inst_74971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffffff0; valaddr_reg:x3; val_offset:224913*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224913*0 + 3*475*FLEN/8, x4, x1, x2)

inst_74972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffffff8; valaddr_reg:x3; val_offset:224916*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224916*0 + 3*476*FLEN/8, x4, x1, x2)

inst_74973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffffffc; valaddr_reg:x3; val_offset:224919*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224919*0 + 3*477*FLEN/8, x4, x1, x2)

inst_74974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833ffffffffffffe; valaddr_reg:x3; val_offset:224922*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224922*0 + 3*478*FLEN/8, x4, x1, x2)

inst_74975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x78dfed7fd14ce and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x033 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa78dfed7fd14ce; op2val:0x8000;
op3val:0x833fffffffffffff; valaddr_reg:x3; val_offset:224925*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224925*0 + 3*479*FLEN/8, x4, x1, x2)

inst_74976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:224928*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224928*0 + 3*480*FLEN/8, x4, x1, x2)

inst_74977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:224931*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224931*0 + 3*481*FLEN/8, x4, x1, x2)

inst_74978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:224934*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224934*0 + 3*482*FLEN/8, x4, x1, x2)

inst_74979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:224937*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224937*0 + 3*483*FLEN/8, x4, x1, x2)

inst_74980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:224940*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224940*0 + 3*484*FLEN/8, x4, x1, x2)

inst_74981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:224943*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224943*0 + 3*485*FLEN/8, x4, x1, x2)

inst_74982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:224946*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224946*0 + 3*486*FLEN/8, x4, x1, x2)

inst_74983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:224949*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224949*0 + 3*487*FLEN/8, x4, x1, x2)

inst_74984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:224952*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224952*0 + 3*488*FLEN/8, x4, x1, x2)

inst_74985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:224955*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224955*0 + 3*489*FLEN/8, x4, x1, x2)

inst_74986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:224958*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224958*0 + 3*490*FLEN/8, x4, x1, x2)

inst_74987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:224961*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224961*0 + 3*491*FLEN/8, x4, x1, x2)

inst_74988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:224964*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224964*0 + 3*492*FLEN/8, x4, x1, x2)

inst_74989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:224967*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224967*0 + 3*493*FLEN/8, x4, x1, x2)

inst_74990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:224970*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224970*0 + 3*494*FLEN/8, x4, x1, x2)

inst_74991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:224973*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224973*0 + 3*495*FLEN/8, x4, x1, x2)

inst_74992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:224976*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224976*0 + 3*496*FLEN/8, x4, x1, x2)

inst_74993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:224979*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224979*0 + 3*497*FLEN/8, x4, x1, x2)

inst_74994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:224982*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224982*0 + 3*498*FLEN/8, x4, x1, x2)

inst_74995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:224985*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224985*0 + 3*499*FLEN/8, x4, x1, x2)

inst_74996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:224988*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224988*0 + 3*500*FLEN/8, x4, x1, x2)

inst_74997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:224991*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224991*0 + 3*501*FLEN/8, x4, x1, x2)

inst_74998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000000000; valaddr_reg:x3; val_offset:224994*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224994*0 + 3*502*FLEN/8, x4, x1, x2)

inst_74999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000000001; valaddr_reg:x3; val_offset:224997*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 224997*0 + 3*503*FLEN/8, x4, x1, x2)

inst_75000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000000003; valaddr_reg:x3; val_offset:225000*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225000*0 + 3*504*FLEN/8, x4, x1, x2)

inst_75001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000000007; valaddr_reg:x3; val_offset:225003*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225003*0 + 3*505*FLEN/8, x4, x1, x2)

inst_75002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000000000f; valaddr_reg:x3; val_offset:225006*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225006*0 + 3*506*FLEN/8, x4, x1, x2)

inst_75003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000000001f; valaddr_reg:x3; val_offset:225009*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225009*0 + 3*507*FLEN/8, x4, x1, x2)

inst_75004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000000003f; valaddr_reg:x3; val_offset:225012*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225012*0 + 3*508*FLEN/8, x4, x1, x2)

inst_75005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000000007f; valaddr_reg:x3; val_offset:225015*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225015*0 + 3*509*FLEN/8, x4, x1, x2)

inst_75006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000000000ff; valaddr_reg:x3; val_offset:225018*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225018*0 + 3*510*FLEN/8, x4, x1, x2)

inst_75007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000000001ff; valaddr_reg:x3; val_offset:225021*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225021*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_75008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000000003ff; valaddr_reg:x3; val_offset:225024*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225024*0 + 3*512*FLEN/8, x4, x1, x2)

inst_75009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000000007ff; valaddr_reg:x3; val_offset:225027*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225027*0 + 3*513*FLEN/8, x4, x1, x2)

inst_75010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000000fff; valaddr_reg:x3; val_offset:225030*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225030*0 + 3*514*FLEN/8, x4, x1, x2)

inst_75011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000001fff; valaddr_reg:x3; val_offset:225033*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225033*0 + 3*515*FLEN/8, x4, x1, x2)

inst_75012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000003fff; valaddr_reg:x3; val_offset:225036*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225036*0 + 3*516*FLEN/8, x4, x1, x2)

inst_75013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000007fff; valaddr_reg:x3; val_offset:225039*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225039*0 + 3*517*FLEN/8, x4, x1, x2)

inst_75014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000000ffff; valaddr_reg:x3; val_offset:225042*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225042*0 + 3*518*FLEN/8, x4, x1, x2)

inst_75015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000001ffff; valaddr_reg:x3; val_offset:225045*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225045*0 + 3*519*FLEN/8, x4, x1, x2)

inst_75016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000003ffff; valaddr_reg:x3; val_offset:225048*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225048*0 + 3*520*FLEN/8, x4, x1, x2)

inst_75017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000007ffff; valaddr_reg:x3; val_offset:225051*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225051*0 + 3*521*FLEN/8, x4, x1, x2)

inst_75018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000000fffff; valaddr_reg:x3; val_offset:225054*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225054*0 + 3*522*FLEN/8, x4, x1, x2)

inst_75019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000001fffff; valaddr_reg:x3; val_offset:225057*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225057*0 + 3*523*FLEN/8, x4, x1, x2)

inst_75020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000003fffff; valaddr_reg:x3; val_offset:225060*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225060*0 + 3*524*FLEN/8, x4, x1, x2)

inst_75021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000007fffff; valaddr_reg:x3; val_offset:225063*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225063*0 + 3*525*FLEN/8, x4, x1, x2)

inst_75022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000000ffffff; valaddr_reg:x3; val_offset:225066*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225066*0 + 3*526*FLEN/8, x4, x1, x2)

inst_75023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000001ffffff; valaddr_reg:x3; val_offset:225069*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225069*0 + 3*527*FLEN/8, x4, x1, x2)

inst_75024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000003ffffff; valaddr_reg:x3; val_offset:225072*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225072*0 + 3*528*FLEN/8, x4, x1, x2)

inst_75025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000007ffffff; valaddr_reg:x3; val_offset:225075*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225075*0 + 3*529*FLEN/8, x4, x1, x2)

inst_75026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000000fffffff; valaddr_reg:x3; val_offset:225078*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225078*0 + 3*530*FLEN/8, x4, x1, x2)

inst_75027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000001fffffff; valaddr_reg:x3; val_offset:225081*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225081*0 + 3*531*FLEN/8, x4, x1, x2)

inst_75028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000003fffffff; valaddr_reg:x3; val_offset:225084*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225084*0 + 3*532*FLEN/8, x4, x1, x2)

inst_75029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000007fffffff; valaddr_reg:x3; val_offset:225087*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225087*0 + 3*533*FLEN/8, x4, x1, x2)

inst_75030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00000ffffffff; valaddr_reg:x3; val_offset:225090*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225090*0 + 3*534*FLEN/8, x4, x1, x2)

inst_75031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00001ffffffff; valaddr_reg:x3; val_offset:225093*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225093*0 + 3*535*FLEN/8, x4, x1, x2)

inst_75032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00003ffffffff; valaddr_reg:x3; val_offset:225096*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225096*0 + 3*536*FLEN/8, x4, x1, x2)

inst_75033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00007ffffffff; valaddr_reg:x3; val_offset:225099*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225099*0 + 3*537*FLEN/8, x4, x1, x2)

inst_75034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0000fffffffff; valaddr_reg:x3; val_offset:225102*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225102*0 + 3*538*FLEN/8, x4, x1, x2)

inst_75035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0001fffffffff; valaddr_reg:x3; val_offset:225105*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225105*0 + 3*539*FLEN/8, x4, x1, x2)

inst_75036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0003fffffffff; valaddr_reg:x3; val_offset:225108*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225108*0 + 3*540*FLEN/8, x4, x1, x2)

inst_75037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0007fffffffff; valaddr_reg:x3; val_offset:225111*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225111*0 + 3*541*FLEN/8, x4, x1, x2)

inst_75038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b000ffffffffff; valaddr_reg:x3; val_offset:225114*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225114*0 + 3*542*FLEN/8, x4, x1, x2)

inst_75039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b001ffffffffff; valaddr_reg:x3; val_offset:225117*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225117*0 + 3*543*FLEN/8, x4, x1, x2)

inst_75040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b003ffffffffff; valaddr_reg:x3; val_offset:225120*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225120*0 + 3*544*FLEN/8, x4, x1, x2)

inst_75041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b007ffffffffff; valaddr_reg:x3; val_offset:225123*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225123*0 + 3*545*FLEN/8, x4, x1, x2)

inst_75042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b00fffffffffff; valaddr_reg:x3; val_offset:225126*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225126*0 + 3*546*FLEN/8, x4, x1, x2)

inst_75043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b01fffffffffff; valaddr_reg:x3; val_offset:225129*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225129*0 + 3*547*FLEN/8, x4, x1, x2)

inst_75044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b03fffffffffff; valaddr_reg:x3; val_offset:225132*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225132*0 + 3*548*FLEN/8, x4, x1, x2)

inst_75045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b07fffffffffff; valaddr_reg:x3; val_offset:225135*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225135*0 + 3*549*FLEN/8, x4, x1, x2)

inst_75046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b0ffffffffffff; valaddr_reg:x3; val_offset:225138*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225138*0 + 3*550*FLEN/8, x4, x1, x2)

inst_75047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b1ffffffffffff; valaddr_reg:x3; val_offset:225141*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225141*0 + 3*551*FLEN/8, x4, x1, x2)

inst_75048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b3ffffffffffff; valaddr_reg:x3; val_offset:225144*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225144*0 + 3*552*FLEN/8, x4, x1, x2)

inst_75049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b7ffffffffffff; valaddr_reg:x3; val_offset:225147*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225147*0 + 3*553*FLEN/8, x4, x1, x2)

inst_75050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83b8000000000000; valaddr_reg:x3; val_offset:225150*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225150*0 + 3*554*FLEN/8, x4, x1, x2)

inst_75051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bc000000000000; valaddr_reg:x3; val_offset:225153*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225153*0 + 3*555*FLEN/8, x4, x1, x2)

inst_75052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83be000000000000; valaddr_reg:x3; val_offset:225156*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225156*0 + 3*556*FLEN/8, x4, x1, x2)

inst_75053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bf000000000000; valaddr_reg:x3; val_offset:225159*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225159*0 + 3*557*FLEN/8, x4, x1, x2)

inst_75054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bf800000000000; valaddr_reg:x3; val_offset:225162*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225162*0 + 3*558*FLEN/8, x4, x1, x2)

inst_75055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfc00000000000; valaddr_reg:x3; val_offset:225165*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225165*0 + 3*559*FLEN/8, x4, x1, x2)

inst_75056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfe00000000000; valaddr_reg:x3; val_offset:225168*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225168*0 + 3*560*FLEN/8, x4, x1, x2)

inst_75057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bff00000000000; valaddr_reg:x3; val_offset:225171*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225171*0 + 3*561*FLEN/8, x4, x1, x2)

inst_75058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bff80000000000; valaddr_reg:x3; val_offset:225174*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225174*0 + 3*562*FLEN/8, x4, x1, x2)

inst_75059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffc0000000000; valaddr_reg:x3; val_offset:225177*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225177*0 + 3*563*FLEN/8, x4, x1, x2)

inst_75060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffe0000000000; valaddr_reg:x3; val_offset:225180*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225180*0 + 3*564*FLEN/8, x4, x1, x2)

inst_75061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfff0000000000; valaddr_reg:x3; val_offset:225183*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225183*0 + 3*565*FLEN/8, x4, x1, x2)

inst_75062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfff8000000000; valaddr_reg:x3; val_offset:225186*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225186*0 + 3*566*FLEN/8, x4, x1, x2)

inst_75063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffc000000000; valaddr_reg:x3; val_offset:225189*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225189*0 + 3*567*FLEN/8, x4, x1, x2)

inst_75064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffe000000000; valaddr_reg:x3; val_offset:225192*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225192*0 + 3*568*FLEN/8, x4, x1, x2)

inst_75065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffff000000000; valaddr_reg:x3; val_offset:225195*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225195*0 + 3*569*FLEN/8, x4, x1, x2)

inst_75066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffff800000000; valaddr_reg:x3; val_offset:225198*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225198*0 + 3*570*FLEN/8, x4, x1, x2)

inst_75067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffc00000000; valaddr_reg:x3; val_offset:225201*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225201*0 + 3*571*FLEN/8, x4, x1, x2)

inst_75068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffe00000000; valaddr_reg:x3; val_offset:225204*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225204*0 + 3*572*FLEN/8, x4, x1, x2)

inst_75069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffff00000000; valaddr_reg:x3; val_offset:225207*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225207*0 + 3*573*FLEN/8, x4, x1, x2)

inst_75070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffff80000000; valaddr_reg:x3; val_offset:225210*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225210*0 + 3*574*FLEN/8, x4, x1, x2)

inst_75071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffc0000000; valaddr_reg:x3; val_offset:225213*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225213*0 + 3*575*FLEN/8, x4, x1, x2)

inst_75072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffe0000000; valaddr_reg:x3; val_offset:225216*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225216*0 + 3*576*FLEN/8, x4, x1, x2)

inst_75073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffff0000000; valaddr_reg:x3; val_offset:225219*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225219*0 + 3*577*FLEN/8, x4, x1, x2)

inst_75074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffff8000000; valaddr_reg:x3; val_offset:225222*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225222*0 + 3*578*FLEN/8, x4, x1, x2)

inst_75075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffc000000; valaddr_reg:x3; val_offset:225225*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225225*0 + 3*579*FLEN/8, x4, x1, x2)

inst_75076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffe000000; valaddr_reg:x3; val_offset:225228*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225228*0 + 3*580*FLEN/8, x4, x1, x2)

inst_75077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffff000000; valaddr_reg:x3; val_offset:225231*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225231*0 + 3*581*FLEN/8, x4, x1, x2)

inst_75078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffff800000; valaddr_reg:x3; val_offset:225234*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225234*0 + 3*582*FLEN/8, x4, x1, x2)

inst_75079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffc00000; valaddr_reg:x3; val_offset:225237*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225237*0 + 3*583*FLEN/8, x4, x1, x2)

inst_75080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffe00000; valaddr_reg:x3; val_offset:225240*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225240*0 + 3*584*FLEN/8, x4, x1, x2)

inst_75081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffff00000; valaddr_reg:x3; val_offset:225243*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225243*0 + 3*585*FLEN/8, x4, x1, x2)

inst_75082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffff80000; valaddr_reg:x3; val_offset:225246*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225246*0 + 3*586*FLEN/8, x4, x1, x2)

inst_75083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffc0000; valaddr_reg:x3; val_offset:225249*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225249*0 + 3*587*FLEN/8, x4, x1, x2)

inst_75084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffe0000; valaddr_reg:x3; val_offset:225252*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225252*0 + 3*588*FLEN/8, x4, x1, x2)

inst_75085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffff0000; valaddr_reg:x3; val_offset:225255*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225255*0 + 3*589*FLEN/8, x4, x1, x2)

inst_75086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffff8000; valaddr_reg:x3; val_offset:225258*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225258*0 + 3*590*FLEN/8, x4, x1, x2)

inst_75087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffffc000; valaddr_reg:x3; val_offset:225261*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225261*0 + 3*591*FLEN/8, x4, x1, x2)

inst_75088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffffe000; valaddr_reg:x3; val_offset:225264*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225264*0 + 3*592*FLEN/8, x4, x1, x2)

inst_75089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffff000; valaddr_reg:x3; val_offset:225267*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225267*0 + 3*593*FLEN/8, x4, x1, x2)

inst_75090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffff800; valaddr_reg:x3; val_offset:225270*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225270*0 + 3*594*FLEN/8, x4, x1, x2)

inst_75091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffffc00; valaddr_reg:x3; val_offset:225273*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225273*0 + 3*595*FLEN/8, x4, x1, x2)

inst_75092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffffe00; valaddr_reg:x3; val_offset:225276*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225276*0 + 3*596*FLEN/8, x4, x1, x2)

inst_75093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffffff00; valaddr_reg:x3; val_offset:225279*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225279*0 + 3*597*FLEN/8, x4, x1, x2)

inst_75094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffffff80; valaddr_reg:x3; val_offset:225282*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225282*0 + 3*598*FLEN/8, x4, x1, x2)

inst_75095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffffffc0; valaddr_reg:x3; val_offset:225285*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225285*0 + 3*599*FLEN/8, x4, x1, x2)

inst_75096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffffffe0; valaddr_reg:x3; val_offset:225288*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225288*0 + 3*600*FLEN/8, x4, x1, x2)

inst_75097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffffff0; valaddr_reg:x3; val_offset:225291*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225291*0 + 3*601*FLEN/8, x4, x1, x2)

inst_75098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffffff8; valaddr_reg:x3; val_offset:225294*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225294*0 + 3*602*FLEN/8, x4, x1, x2)

inst_75099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffffffc; valaddr_reg:x3; val_offset:225297*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225297*0 + 3*603*FLEN/8, x4, x1, x2)

inst_75100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bffffffffffffe; valaddr_reg:x3; val_offset:225300*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225300*0 + 3*604*FLEN/8, x4, x1, x2)

inst_75101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x797d34a42380c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03b and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa797d34a42380c; op2val:0x8000;
op3val:0x83bfffffffffffff; valaddr_reg:x3; val_offset:225303*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225303*0 + 3*605*FLEN/8, x4, x1, x2)

inst_75102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000000000; valaddr_reg:x3; val_offset:225306*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225306*0 + 3*606*FLEN/8, x4, x1, x2)

inst_75103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000000001; valaddr_reg:x3; val_offset:225309*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225309*0 + 3*607*FLEN/8, x4, x1, x2)

inst_75104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000000003; valaddr_reg:x3; val_offset:225312*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225312*0 + 3*608*FLEN/8, x4, x1, x2)

inst_75105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000000007; valaddr_reg:x3; val_offset:225315*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225315*0 + 3*609*FLEN/8, x4, x1, x2)

inst_75106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000000000f; valaddr_reg:x3; val_offset:225318*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225318*0 + 3*610*FLEN/8, x4, x1, x2)

inst_75107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000000001f; valaddr_reg:x3; val_offset:225321*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225321*0 + 3*611*FLEN/8, x4, x1, x2)

inst_75108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000000003f; valaddr_reg:x3; val_offset:225324*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225324*0 + 3*612*FLEN/8, x4, x1, x2)

inst_75109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000000007f; valaddr_reg:x3; val_offset:225327*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225327*0 + 3*613*FLEN/8, x4, x1, x2)

inst_75110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000000000ff; valaddr_reg:x3; val_offset:225330*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225330*0 + 3*614*FLEN/8, x4, x1, x2)

inst_75111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000000001ff; valaddr_reg:x3; val_offset:225333*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225333*0 + 3*615*FLEN/8, x4, x1, x2)

inst_75112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000000003ff; valaddr_reg:x3; val_offset:225336*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225336*0 + 3*616*FLEN/8, x4, x1, x2)

inst_75113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000000007ff; valaddr_reg:x3; val_offset:225339*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225339*0 + 3*617*FLEN/8, x4, x1, x2)

inst_75114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000000fff; valaddr_reg:x3; val_offset:225342*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225342*0 + 3*618*FLEN/8, x4, x1, x2)

inst_75115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000001fff; valaddr_reg:x3; val_offset:225345*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225345*0 + 3*619*FLEN/8, x4, x1, x2)

inst_75116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000003fff; valaddr_reg:x3; val_offset:225348*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225348*0 + 3*620*FLEN/8, x4, x1, x2)

inst_75117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000007fff; valaddr_reg:x3; val_offset:225351*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225351*0 + 3*621*FLEN/8, x4, x1, x2)

inst_75118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000000ffff; valaddr_reg:x3; val_offset:225354*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225354*0 + 3*622*FLEN/8, x4, x1, x2)

inst_75119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000001ffff; valaddr_reg:x3; val_offset:225357*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225357*0 + 3*623*FLEN/8, x4, x1, x2)

inst_75120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000003ffff; valaddr_reg:x3; val_offset:225360*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225360*0 + 3*624*FLEN/8, x4, x1, x2)

inst_75121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000007ffff; valaddr_reg:x3; val_offset:225363*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225363*0 + 3*625*FLEN/8, x4, x1, x2)

inst_75122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000000fffff; valaddr_reg:x3; val_offset:225366*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225366*0 + 3*626*FLEN/8, x4, x1, x2)

inst_75123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000001fffff; valaddr_reg:x3; val_offset:225369*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225369*0 + 3*627*FLEN/8, x4, x1, x2)

inst_75124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000003fffff; valaddr_reg:x3; val_offset:225372*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225372*0 + 3*628*FLEN/8, x4, x1, x2)

inst_75125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000007fffff; valaddr_reg:x3; val_offset:225375*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225375*0 + 3*629*FLEN/8, x4, x1, x2)

inst_75126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000000ffffff; valaddr_reg:x3; val_offset:225378*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225378*0 + 3*630*FLEN/8, x4, x1, x2)

inst_75127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000001ffffff; valaddr_reg:x3; val_offset:225381*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225381*0 + 3*631*FLEN/8, x4, x1, x2)

inst_75128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000003ffffff; valaddr_reg:x3; val_offset:225384*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225384*0 + 3*632*FLEN/8, x4, x1, x2)

inst_75129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000007ffffff; valaddr_reg:x3; val_offset:225387*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225387*0 + 3*633*FLEN/8, x4, x1, x2)

inst_75130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000000fffffff; valaddr_reg:x3; val_offset:225390*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225390*0 + 3*634*FLEN/8, x4, x1, x2)

inst_75131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000001fffffff; valaddr_reg:x3; val_offset:225393*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225393*0 + 3*635*FLEN/8, x4, x1, x2)

inst_75132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000003fffffff; valaddr_reg:x3; val_offset:225396*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225396*0 + 3*636*FLEN/8, x4, x1, x2)

inst_75133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000007fffffff; valaddr_reg:x3; val_offset:225399*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225399*0 + 3*637*FLEN/8, x4, x1, x2)

inst_75134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000000ffffffff; valaddr_reg:x3; val_offset:225402*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225402*0 + 3*638*FLEN/8, x4, x1, x2)

inst_75135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000001ffffffff; valaddr_reg:x3; val_offset:225405*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225405*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_75136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000003ffffffff; valaddr_reg:x3; val_offset:225408*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225408*0 + 3*640*FLEN/8, x4, x1, x2)

inst_75137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000007ffffffff; valaddr_reg:x3; val_offset:225411*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225411*0 + 3*641*FLEN/8, x4, x1, x2)

inst_75138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00000fffffffff; valaddr_reg:x3; val_offset:225414*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225414*0 + 3*642*FLEN/8, x4, x1, x2)

inst_75139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00001fffffffff; valaddr_reg:x3; val_offset:225417*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225417*0 + 3*643*FLEN/8, x4, x1, x2)

inst_75140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00003fffffffff; valaddr_reg:x3; val_offset:225420*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225420*0 + 3*644*FLEN/8, x4, x1, x2)

inst_75141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00007fffffffff; valaddr_reg:x3; val_offset:225423*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225423*0 + 3*645*FLEN/8, x4, x1, x2)

inst_75142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0000ffffffffff; valaddr_reg:x3; val_offset:225426*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225426*0 + 3*646*FLEN/8, x4, x1, x2)

inst_75143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0001ffffffffff; valaddr_reg:x3; val_offset:225429*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225429*0 + 3*647*FLEN/8, x4, x1, x2)

inst_75144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0003ffffffffff; valaddr_reg:x3; val_offset:225432*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225432*0 + 3*648*FLEN/8, x4, x1, x2)

inst_75145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0007ffffffffff; valaddr_reg:x3; val_offset:225435*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225435*0 + 3*649*FLEN/8, x4, x1, x2)

inst_75146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a000fffffffffff; valaddr_reg:x3; val_offset:225438*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225438*0 + 3*650*FLEN/8, x4, x1, x2)

inst_75147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a001fffffffffff; valaddr_reg:x3; val_offset:225441*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225441*0 + 3*651*FLEN/8, x4, x1, x2)

inst_75148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a003fffffffffff; valaddr_reg:x3; val_offset:225444*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225444*0 + 3*652*FLEN/8, x4, x1, x2)

inst_75149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a007fffffffffff; valaddr_reg:x3; val_offset:225447*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225447*0 + 3*653*FLEN/8, x4, x1, x2)

inst_75150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a00ffffffffffff; valaddr_reg:x3; val_offset:225450*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225450*0 + 3*654*FLEN/8, x4, x1, x2)

inst_75151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a01ffffffffffff; valaddr_reg:x3; val_offset:225453*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225453*0 + 3*655*FLEN/8, x4, x1, x2)

inst_75152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a03ffffffffffff; valaddr_reg:x3; val_offset:225456*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225456*0 + 3*656*FLEN/8, x4, x1, x2)

inst_75153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a07ffffffffffff; valaddr_reg:x3; val_offset:225459*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225459*0 + 3*657*FLEN/8, x4, x1, x2)

inst_75154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a08000000000000; valaddr_reg:x3; val_offset:225462*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225462*0 + 3*658*FLEN/8, x4, x1, x2)

inst_75155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0c000000000000; valaddr_reg:x3; val_offset:225465*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225465*0 + 3*659*FLEN/8, x4, x1, x2)

inst_75156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0e000000000000; valaddr_reg:x3; val_offset:225468*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225468*0 + 3*660*FLEN/8, x4, x1, x2)

inst_75157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0f000000000000; valaddr_reg:x3; val_offset:225471*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225471*0 + 3*661*FLEN/8, x4, x1, x2)

inst_75158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0f800000000000; valaddr_reg:x3; val_offset:225474*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225474*0 + 3*662*FLEN/8, x4, x1, x2)

inst_75159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fc00000000000; valaddr_reg:x3; val_offset:225477*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225477*0 + 3*663*FLEN/8, x4, x1, x2)

inst_75160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fe00000000000; valaddr_reg:x3; val_offset:225480*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225480*0 + 3*664*FLEN/8, x4, x1, x2)

inst_75161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ff00000000000; valaddr_reg:x3; val_offset:225483*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225483*0 + 3*665*FLEN/8, x4, x1, x2)

inst_75162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ff80000000000; valaddr_reg:x3; val_offset:225486*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225486*0 + 3*666*FLEN/8, x4, x1, x2)

inst_75163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffc0000000000; valaddr_reg:x3; val_offset:225489*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225489*0 + 3*667*FLEN/8, x4, x1, x2)

inst_75164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffe0000000000; valaddr_reg:x3; val_offset:225492*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225492*0 + 3*668*FLEN/8, x4, x1, x2)

inst_75165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fff0000000000; valaddr_reg:x3; val_offset:225495*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225495*0 + 3*669*FLEN/8, x4, x1, x2)

inst_75166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fff8000000000; valaddr_reg:x3; val_offset:225498*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225498*0 + 3*670*FLEN/8, x4, x1, x2)

inst_75167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffc000000000; valaddr_reg:x3; val_offset:225501*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225501*0 + 3*671*FLEN/8, x4, x1, x2)

inst_75168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffe000000000; valaddr_reg:x3; val_offset:225504*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225504*0 + 3*672*FLEN/8, x4, x1, x2)

inst_75169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffff000000000; valaddr_reg:x3; val_offset:225507*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225507*0 + 3*673*FLEN/8, x4, x1, x2)

inst_75170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffff800000000; valaddr_reg:x3; val_offset:225510*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225510*0 + 3*674*FLEN/8, x4, x1, x2)

inst_75171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffc00000000; valaddr_reg:x3; val_offset:225513*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225513*0 + 3*675*FLEN/8, x4, x1, x2)

inst_75172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffe00000000; valaddr_reg:x3; val_offset:225516*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225516*0 + 3*676*FLEN/8, x4, x1, x2)

inst_75173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffff00000000; valaddr_reg:x3; val_offset:225519*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225519*0 + 3*677*FLEN/8, x4, x1, x2)

inst_75174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffff80000000; valaddr_reg:x3; val_offset:225522*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225522*0 + 3*678*FLEN/8, x4, x1, x2)

inst_75175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffc0000000; valaddr_reg:x3; val_offset:225525*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225525*0 + 3*679*FLEN/8, x4, x1, x2)

inst_75176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffe0000000; valaddr_reg:x3; val_offset:225528*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225528*0 + 3*680*FLEN/8, x4, x1, x2)

inst_75177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffff0000000; valaddr_reg:x3; val_offset:225531*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225531*0 + 3*681*FLEN/8, x4, x1, x2)

inst_75178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffff8000000; valaddr_reg:x3; val_offset:225534*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225534*0 + 3*682*FLEN/8, x4, x1, x2)

inst_75179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffc000000; valaddr_reg:x3; val_offset:225537*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225537*0 + 3*683*FLEN/8, x4, x1, x2)

inst_75180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffe000000; valaddr_reg:x3; val_offset:225540*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225540*0 + 3*684*FLEN/8, x4, x1, x2)

inst_75181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffff000000; valaddr_reg:x3; val_offset:225543*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225543*0 + 3*685*FLEN/8, x4, x1, x2)

inst_75182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffff800000; valaddr_reg:x3; val_offset:225546*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225546*0 + 3*686*FLEN/8, x4, x1, x2)

inst_75183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffc00000; valaddr_reg:x3; val_offset:225549*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225549*0 + 3*687*FLEN/8, x4, x1, x2)

inst_75184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffe00000; valaddr_reg:x3; val_offset:225552*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225552*0 + 3*688*FLEN/8, x4, x1, x2)

inst_75185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffff00000; valaddr_reg:x3; val_offset:225555*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225555*0 + 3*689*FLEN/8, x4, x1, x2)

inst_75186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffff80000; valaddr_reg:x3; val_offset:225558*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225558*0 + 3*690*FLEN/8, x4, x1, x2)

inst_75187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffc0000; valaddr_reg:x3; val_offset:225561*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225561*0 + 3*691*FLEN/8, x4, x1, x2)

inst_75188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffe0000; valaddr_reg:x3; val_offset:225564*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225564*0 + 3*692*FLEN/8, x4, x1, x2)

inst_75189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffff0000; valaddr_reg:x3; val_offset:225567*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225567*0 + 3*693*FLEN/8, x4, x1, x2)

inst_75190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffff8000; valaddr_reg:x3; val_offset:225570*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225570*0 + 3*694*FLEN/8, x4, x1, x2)

inst_75191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffffc000; valaddr_reg:x3; val_offset:225573*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225573*0 + 3*695*FLEN/8, x4, x1, x2)

inst_75192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffffe000; valaddr_reg:x3; val_offset:225576*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225576*0 + 3*696*FLEN/8, x4, x1, x2)

inst_75193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffff000; valaddr_reg:x3; val_offset:225579*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225579*0 + 3*697*FLEN/8, x4, x1, x2)

inst_75194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffff800; valaddr_reg:x3; val_offset:225582*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225582*0 + 3*698*FLEN/8, x4, x1, x2)

inst_75195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffffc00; valaddr_reg:x3; val_offset:225585*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225585*0 + 3*699*FLEN/8, x4, x1, x2)

inst_75196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffffe00; valaddr_reg:x3; val_offset:225588*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225588*0 + 3*700*FLEN/8, x4, x1, x2)

inst_75197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffffff00; valaddr_reg:x3; val_offset:225591*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225591*0 + 3*701*FLEN/8, x4, x1, x2)

inst_75198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffffff80; valaddr_reg:x3; val_offset:225594*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225594*0 + 3*702*FLEN/8, x4, x1, x2)

inst_75199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffffffc0; valaddr_reg:x3; val_offset:225597*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225597*0 + 3*703*FLEN/8, x4, x1, x2)

inst_75200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffffffe0; valaddr_reg:x3; val_offset:225600*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225600*0 + 3*704*FLEN/8, x4, x1, x2)

inst_75201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffffff0; valaddr_reg:x3; val_offset:225603*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225603*0 + 3*705*FLEN/8, x4, x1, x2)

inst_75202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffffff8; valaddr_reg:x3; val_offset:225606*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225606*0 + 3*706*FLEN/8, x4, x1, x2)

inst_75203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffffffc; valaddr_reg:x3; val_offset:225609*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225609*0 + 3*707*FLEN/8, x4, x1, x2)

inst_75204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0ffffffffffffe; valaddr_reg:x3; val_offset:225612*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225612*0 + 3*708*FLEN/8, x4, x1, x2)

inst_75205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3a0 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3a0fffffffffffff; valaddr_reg:x3; val_offset:225615*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225615*0 + 3*709*FLEN/8, x4, x1, x2)

inst_75206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:225618*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225618*0 + 3*710*FLEN/8, x4, x1, x2)

inst_75207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:225621*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225621*0 + 3*711*FLEN/8, x4, x1, x2)

inst_75208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:225624*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225624*0 + 3*712*FLEN/8, x4, x1, x2)

inst_75209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:225627*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225627*0 + 3*713*FLEN/8, x4, x1, x2)

inst_75210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:225630*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225630*0 + 3*714*FLEN/8, x4, x1, x2)

inst_75211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:225633*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225633*0 + 3*715*FLEN/8, x4, x1, x2)

inst_75212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:225636*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225636*0 + 3*716*FLEN/8, x4, x1, x2)

inst_75213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:225639*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225639*0 + 3*717*FLEN/8, x4, x1, x2)

inst_75214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:225642*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225642*0 + 3*718*FLEN/8, x4, x1, x2)

inst_75215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:225645*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225645*0 + 3*719*FLEN/8, x4, x1, x2)

inst_75216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:225648*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225648*0 + 3*720*FLEN/8, x4, x1, x2)

inst_75217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:225651*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225651*0 + 3*721*FLEN/8, x4, x1, x2)

inst_75218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:225654*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225654*0 + 3*722*FLEN/8, x4, x1, x2)

inst_75219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:225657*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225657*0 + 3*723*FLEN/8, x4, x1, x2)

inst_75220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:225660*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225660*0 + 3*724*FLEN/8, x4, x1, x2)

inst_75221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:225663*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225663*0 + 3*725*FLEN/8, x4, x1, x2)

inst_75222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:225666*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225666*0 + 3*726*FLEN/8, x4, x1, x2)

inst_75223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:225669*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225669*0 + 3*727*FLEN/8, x4, x1, x2)

inst_75224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:225672*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225672*0 + 3*728*FLEN/8, x4, x1, x2)

inst_75225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:225675*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225675*0 + 3*729*FLEN/8, x4, x1, x2)

inst_75226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:225678*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225678*0 + 3*730*FLEN/8, x4, x1, x2)

inst_75227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7a605202ecb0e and fs2 == 0 and fe2 == 0x203 and fm2 == 0x5a68119bd6927 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7a605202ecb0e; op2val:0x2035a68119bd6927;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:225681*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225681*0 + 3*731*FLEN/8, x4, x1, x2)

inst_75228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:225684*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225684*0 + 3*732*FLEN/8, x4, x1, x2)

inst_75229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:225687*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225687*0 + 3*733*FLEN/8, x4, x1, x2)

inst_75230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:225690*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225690*0 + 3*734*FLEN/8, x4, x1, x2)

inst_75231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:225693*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225693*0 + 3*735*FLEN/8, x4, x1, x2)

inst_75232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:225696*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225696*0 + 3*736*FLEN/8, x4, x1, x2)

inst_75233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:225699*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225699*0 + 3*737*FLEN/8, x4, x1, x2)

inst_75234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:225702*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225702*0 + 3*738*FLEN/8, x4, x1, x2)

inst_75235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:225705*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225705*0 + 3*739*FLEN/8, x4, x1, x2)

inst_75236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:225708*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225708*0 + 3*740*FLEN/8, x4, x1, x2)

inst_75237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:225711*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225711*0 + 3*741*FLEN/8, x4, x1, x2)

inst_75238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:225714*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225714*0 + 3*742*FLEN/8, x4, x1, x2)

inst_75239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:225717*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225717*0 + 3*743*FLEN/8, x4, x1, x2)

inst_75240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:225720*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225720*0 + 3*744*FLEN/8, x4, x1, x2)

inst_75241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:225723*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225723*0 + 3*745*FLEN/8, x4, x1, x2)

inst_75242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:225726*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225726*0 + 3*746*FLEN/8, x4, x1, x2)

inst_75243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:225729*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225729*0 + 3*747*FLEN/8, x4, x1, x2)

inst_75244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:225732*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225732*0 + 3*748*FLEN/8, x4, x1, x2)

inst_75245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:225735*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225735*0 + 3*749*FLEN/8, x4, x1, x2)

inst_75246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:225738*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225738*0 + 3*750*FLEN/8, x4, x1, x2)

inst_75247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:225741*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225741*0 + 3*751*FLEN/8, x4, x1, x2)

inst_75248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:225744*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225744*0 + 3*752*FLEN/8, x4, x1, x2)

inst_75249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:225747*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225747*0 + 3*753*FLEN/8, x4, x1, x2)

inst_75250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8350000000000000; valaddr_reg:x3; val_offset:225750*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225750*0 + 3*754*FLEN/8, x4, x1, x2)

inst_75251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8350000000000001; valaddr_reg:x3; val_offset:225753*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225753*0 + 3*755*FLEN/8, x4, x1, x2)

inst_75252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8350000000000003; valaddr_reg:x3; val_offset:225756*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225756*0 + 3*756*FLEN/8, x4, x1, x2)

inst_75253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8350000000000007; valaddr_reg:x3; val_offset:225759*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225759*0 + 3*757*FLEN/8, x4, x1, x2)

inst_75254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x835000000000000f; valaddr_reg:x3; val_offset:225762*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225762*0 + 3*758*FLEN/8, x4, x1, x2)

inst_75255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x835000000000001f; valaddr_reg:x3; val_offset:225765*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225765*0 + 3*759*FLEN/8, x4, x1, x2)

inst_75256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x835000000000003f; valaddr_reg:x3; val_offset:225768*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225768*0 + 3*760*FLEN/8, x4, x1, x2)

inst_75257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x835000000000007f; valaddr_reg:x3; val_offset:225771*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225771*0 + 3*761*FLEN/8, x4, x1, x2)

inst_75258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x83500000000000ff; valaddr_reg:x3; val_offset:225774*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225774*0 + 3*762*FLEN/8, x4, x1, x2)

inst_75259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x83500000000001ff; valaddr_reg:x3; val_offset:225777*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225777*0 + 3*763*FLEN/8, x4, x1, x2)

inst_75260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x83500000000003ff; valaddr_reg:x3; val_offset:225780*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225780*0 + 3*764*FLEN/8, x4, x1, x2)

inst_75261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x83500000000007ff; valaddr_reg:x3; val_offset:225783*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225783*0 + 3*765*FLEN/8, x4, x1, x2)

inst_75262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8350000000000fff; valaddr_reg:x3; val_offset:225786*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225786*0 + 3*766*FLEN/8, x4, x1, x2)

inst_75263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x7bdd24624606d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x035 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa7bdd24624606d; op2val:0x8000;
op3val:0x8350000000001fff; valaddr_reg:x3; val_offset:225789*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 225789*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708352,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708353,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708355,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708359,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708367,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708383,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708415,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708479,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708607,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212708863,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212709375,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212710399,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212712447,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212716543,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212724735,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212741119,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212773887,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212839423,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186212970495,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186213232639,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186213756927,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186214805503,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186216902655,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186221096959,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186229485567,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186246262783,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186279817215,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186346926079,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186481143807,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633186749579263,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633187286450175,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633188360191999,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633190507675647,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633194802642943,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633203392577535,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633220572446719,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633254932185087,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633323651661823,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633461090615295,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166633735968522239,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166634285724336127,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166635385235963903,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166637584259219455,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166641982305730559,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166650778398752767,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166668370584797183,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166703554956886015,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166773923701063679,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(166914661189419007,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(167196136166129663,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(167759086119550975,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(168884986026393599,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(168884986026393600,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(170010885933236224,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(170573835886657536,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(170855310863368192,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(170996048351723520,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171066417095901184,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171101601467990016,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171119193654034432,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171127989747056640,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171132387793567744,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171134586816823296,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171135686328451072,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136236084264960,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136510962171904,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136648401125376,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136717120602112,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136751480340480,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136768660209664,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136777250144256,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136781545111552,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136783692595200,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136784766337024,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785303207936,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785571643392,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785705861120,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785772969984,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785806524416,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785823301632,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785831690240,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785835884544,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785837981696,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785839030272,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785839554560,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785839816704,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785839947776,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840013312,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840046080,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840062464,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840070656,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840074752,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840076800,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840077824,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078336,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078592,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078720,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078784,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078816,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078832,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078840,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078844,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078846,64,FLEN)
NAN_BOXED(6892618867202096769,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(171136785840078847,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520640,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520641,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520643,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520647,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520655,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520671,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520703,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520767,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153520895,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153521151,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153521663,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153522687,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153524735,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153528831,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153537023,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153553407,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153586175,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153651711,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895153782783,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895154044927,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895154569215,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895155617791,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895157714943,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895161909247,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895170297855,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895187075071,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895220629503,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895287738367,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895421956095,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172895690391551,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172896227262463,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172897301004287,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172899448487935,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172903743455231,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172912333389823,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172929513259007,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353172963872997375,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353173032592474111,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353173170031427583,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353173444909334527,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353173994665148415,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353175094176776191,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353177293200031743,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353181691246542847,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353190487339565055,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353208079525609471,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353243263897698303,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353313632641875967,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353454370130231295,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13353735845106941951,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13354298795060363263,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13355424694967205887,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13355424694967205888,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13356550594874048512,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357113544827469824,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357395019804180480,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357535757292535808,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357606126036713472,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357641310408802304,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357658902594846720,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357667698687868928,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357672096734380032,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357674295757635584,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357675395269263360,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357675945025077248,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676219902984192,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676357341937664,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676426061414400,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676460421152768,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676477601021952,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676486190956544,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676490485923840,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676492633407488,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676493707149312,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494244020224,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494512455680,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494646673408,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494713782272,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494747336704,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494764113920,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494772502528,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494776696832,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494778793984,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494779842560,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780366848,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780628992,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780760064,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780825600,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780858368,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780874752,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780882944,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780887040,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780889088,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780890112,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780890624,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780890880,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780891008,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780891072,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780891104,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780891120,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780891128,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780891132,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780891134,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13357676494780891135,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6892621878830012899,64,FLEN)
NAN_BOXED(11512826470935050169,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146304,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146431,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146559,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146815,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482147327,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482148351,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482150399,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482154495,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482162687,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482179071,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482211839,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482277375,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482408447,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482670591,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636483194879,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636484243455,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636486340607,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636490534911,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636498923519,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636515700735,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636549255167,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636616364031,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636750581759,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875637019017215,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875637555888127,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875638629629951,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875640777113599,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875645072080895,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875653662015487,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875670841884671,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875705201623039,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875773921099775,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875911360053247,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227876186237960191,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227876735993774079,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227877835505401855,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227880034528657407,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227884432575168511,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227893228668190719,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227910820854235135,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227946005226323967,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228016373970501631,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228157111458856959,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228438586435567615,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229001536388988927,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230127436295831551,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230127436295831552,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231253336202674176,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231816286156095488,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232097761132806144,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232238498621161472,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232308867365339136,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232344051737427968,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232361643923472384,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232370440016494592,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232374838063005696,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232377037086261248,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232378136597889024,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232378686353702912,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232378961231609856,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379098670563328,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379167390040064,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379201749778432,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379218929647616,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379227519582208,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379231814549504,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379233962033152,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379235035774976,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379235572645888,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379235841081344,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379235975299072,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236042407936,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236075962368,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236092739584,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236101128192,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236105322496,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236107419648,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236108468224,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236108992512,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109254656,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109385728,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109451264,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109484032,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109500416,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109508608,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109512704,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109514752,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109515776,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516288,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516544,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516672,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6892629549951258004,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516799,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671104,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671105,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671107,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671111,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671119,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671135,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671167,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671231,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671359,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850671615,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850672127,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850673151,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850675199,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850679295,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850687487,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850703871,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850736639,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850802175,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617850933247,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617851195391,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617851719679,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617852768255,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617854865407,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617859059711,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617867448319,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617884225535,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617917779967,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055617984888831,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055618119106559,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055618387542015,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055618924412927,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055619998154751,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055622145638399,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055626440605695,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055635030540287,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055652210409471,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055686570147839,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055755289624575,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453055892728578047,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453056167606484991,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453056717362298879,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453057816873926655,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453060015897182207,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453064413943693311,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453073210036715519,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453090802222759935,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453125986594848767,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453196355339026431,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453337092827381759,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9453618567804092415,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9454181517757513727,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9455307417664356351,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9455307417664356352,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9456433317571198976,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9456996267524620288,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457277742501330944,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457418479989686272,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457488848733863936,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457524033105952768,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457541625291997184,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457550421385019392,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457554819431530496,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457557018454786048,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457558117966413824,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457558667722227712,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457558942600134656,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559080039088128,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559148758564864,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559183118303232,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559200298172416,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559208888107008,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559213183074304,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559215330557952,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559216404299776,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559216941170688,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217209606144,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217343823872,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217410932736,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217444487168,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217461264384,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217469652992,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217473847296,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217475944448,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217476993024,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217477517312,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217477779456,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217477910528,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217477976064,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478008832,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478025216,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478033408,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478037504,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478039552,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478040576,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041088,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041344,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041472,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041536,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041568,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041584,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041592,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041596,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041598,64,FLEN)
NAN_BOXED(6892633880398730446,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041599,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635072,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635073,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635075,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635079,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635087,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635103,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635135,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635199,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635327,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869635583,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869636095,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869637119,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869639167,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869643263,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869651455,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869667839,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869700607,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869766143,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414869897215,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414870159359,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414870683647,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414871732223,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414873829375,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414878023679,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414886412287,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414903189503,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084414936743935,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084415003852799,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084415138070527,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084415406505983,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084415943376895,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084417017118719,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084419164602367,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084423459569663,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084432049504255,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084449229373439,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084483589111807,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084552308588543,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084689747542015,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489084964625448959,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489085514381262847,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489086613892890623,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489088812916146175,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489093210962657279,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489102007055679487,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489119599241723903,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489154783613812735,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489225152357990399,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489365889846345727,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9489647364823056383,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9490210314776477695,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9491336214683320319,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9491336214683320320,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9492462114590162944,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493025064543584256,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493306539520294912,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493447277008650240,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493517645752827904,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493552830124916736,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493570422310961152,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493579218403983360,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493583616450494464,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493585815473750016,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493586914985377792,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587464741191680,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587739619098624,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587877058052096,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587945777528832,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587980137267200,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493587997317136384,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588005907070976,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588010202038272,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588012349521920,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588013423263744,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588013960134656,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014228570112,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014362787840,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014429896704,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014463451136,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014480228352,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014488616960,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014492811264,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014494908416,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014495956992,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496481280,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496743424,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496874496,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496940032,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496972800,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496989184,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014496997376,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497001472,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497003520,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497004544,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005056,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005312,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005440,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005504,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005536,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005552,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005560,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005564,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005566,64,FLEN)
NAN_BOXED(6892644688453580812,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005567,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820288,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820289,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820291,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820295,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820303,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820319,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820351,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820415,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820543,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199820799,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199821311,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199822335,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199824383,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199828479,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199836671,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199853055,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199885823,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454199951359,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454200082431,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454200344575,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454200868863,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454201917439,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454204014591,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454208208895,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454216597503,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454233374719,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454266929151,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454334038015,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454468255743,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340454736691199,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340455273562111,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340456347303935,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340458494787583,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340462789754879,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340471379689471,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340488559558655,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340522919297023,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340591638773759,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179340729077727231,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179341003955634175,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179341553711448063,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179342653223075839,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179344852246331391,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179349250292842495,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179358046385864703,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179375638571909119,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179410822943997951,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179481191688175615,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179621929176530943,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4179903404153241599,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4180466354106662911,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4181592254013505535,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4181592254013505536,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4182718153920348160,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183281103873769472,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183562578850480128,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183703316338835456,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183773685083013120,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183808869455101952,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183826461641146368,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183835257734168576,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183839655780679680,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183841854803935232,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183842954315563008,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183843504071376896,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183843778949283840,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183843916388237312,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183843985107714048,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844019467452416,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844036647321600,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844045237256192,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844049532223488,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844051679707136,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844052753448960,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053290319872,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053558755328,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053692973056,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053760081920,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053793636352,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053810413568,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053818802176,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053822996480,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053825093632,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053826142208,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053826666496,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053826928640,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827059712,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827125248,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827158016,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827174400,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827182592,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827186688,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827188736,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827189760,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190272,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190528,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190656,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190720,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190752,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190768,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190776,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190780,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190782,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4183844053827190783,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6892660295658818318,64,FLEN)
NAN_BOXED(2320944256392194343,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412096,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412097,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412099,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412103,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412111,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412127,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412159,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412223,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412351,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412607,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105413119,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105414143,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105416191,64,FLEN)
NAN_BOXED(6892686465531404397,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105420287,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
