
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5376:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3b7 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbb7fffffffffff80; valaddr_reg:x3; val_offset:16128*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16128*0 + 3*0*FLEN/8, x4, x1, x2)

inst_5377:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3b7 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbb7fffffffffffc0; valaddr_reg:x3; val_offset:16131*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16131*0 + 3*1*FLEN/8, x4, x1, x2)

inst_5378:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3b7 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbb7fffffffffffe0; valaddr_reg:x3; val_offset:16134*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16134*0 + 3*2*FLEN/8, x4, x1, x2)

inst_5379:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3b7 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbb7ffffffffffff0; valaddr_reg:x3; val_offset:16137*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16137*0 + 3*3*FLEN/8, x4, x1, x2)

inst_5380:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3b7 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbb7ffffffffffff8; valaddr_reg:x3; val_offset:16140*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16140*0 + 3*4*FLEN/8, x4, x1, x2)

inst_5381:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3b7 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbb7ffffffffffffc; valaddr_reg:x3; val_offset:16143*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16143*0 + 3*5*FLEN/8, x4, x1, x2)

inst_5382:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3b7 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbb7ffffffffffffe; valaddr_reg:x3; val_offset:16146*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16146*0 + 3*6*FLEN/8, x4, x1, x2)

inst_5383:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3b7 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbb7fffffffffffff; valaddr_reg:x3; val_offset:16149*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16149*0 + 3*7*FLEN/8, x4, x1, x2)

inst_5384:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:16152*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16152*0 + 3*8*FLEN/8, x4, x1, x2)

inst_5385:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:16155*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16155*0 + 3*9*FLEN/8, x4, x1, x2)

inst_5386:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:16158*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16158*0 + 3*10*FLEN/8, x4, x1, x2)

inst_5387:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:16161*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16161*0 + 3*11*FLEN/8, x4, x1, x2)

inst_5388:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:16164*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16164*0 + 3*12*FLEN/8, x4, x1, x2)

inst_5389:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:16167*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16167*0 + 3*13*FLEN/8, x4, x1, x2)

inst_5390:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:16170*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16170*0 + 3*14*FLEN/8, x4, x1, x2)

inst_5391:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:16173*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16173*0 + 3*15*FLEN/8, x4, x1, x2)

inst_5392:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:16176*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16176*0 + 3*16*FLEN/8, x4, x1, x2)

inst_5393:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:16179*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16179*0 + 3*17*FLEN/8, x4, x1, x2)

inst_5394:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:16182*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16182*0 + 3*18*FLEN/8, x4, x1, x2)

inst_5395:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:16185*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16185*0 + 3*19*FLEN/8, x4, x1, x2)

inst_5396:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:16188*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16188*0 + 3*20*FLEN/8, x4, x1, x2)

inst_5397:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:16191*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16191*0 + 3*21*FLEN/8, x4, x1, x2)

inst_5398:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:16194*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16194*0 + 3*22*FLEN/8, x4, x1, x2)

inst_5399:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:16197*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16197*0 + 3*23*FLEN/8, x4, x1, x2)

inst_5400:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:16200*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16200*0 + 3*24*FLEN/8, x4, x1, x2)

inst_5401:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:16203*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16203*0 + 3*25*FLEN/8, x4, x1, x2)

inst_5402:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:16206*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16206*0 + 3*26*FLEN/8, x4, x1, x2)

inst_5403:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:16209*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16209*0 + 3*27*FLEN/8, x4, x1, x2)

inst_5404:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:16212*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16212*0 + 3*28*FLEN/8, x4, x1, x2)

inst_5405:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x58e517fcf82df and fs2 == 1 and fe2 == 0x200 and fm2 == 0x7c08dc9f7d4ae and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f658e517fcf82df; op2val:0xa007c08dc9f7d4ae;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:16215*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16215*0 + 3*29*FLEN/8, x4, x1, x2)

inst_5406:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:16218*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16218*0 + 3*30*FLEN/8, x4, x1, x2)

inst_5407:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:16221*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16221*0 + 3*31*FLEN/8, x4, x1, x2)

inst_5408:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:16224*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16224*0 + 3*32*FLEN/8, x4, x1, x2)

inst_5409:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:16227*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16227*0 + 3*33*FLEN/8, x4, x1, x2)

inst_5410:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:16230*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16230*0 + 3*34*FLEN/8, x4, x1, x2)

inst_5411:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:16233*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16233*0 + 3*35*FLEN/8, x4, x1, x2)

inst_5412:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x13333333333333; valaddr_reg:x3; val_offset:16236*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16236*0 + 3*36*FLEN/8, x4, x1, x2)

inst_5413:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x14924924924924; valaddr_reg:x3; val_offset:16239*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16239*0 + 3*37*FLEN/8, x4, x1, x2)

inst_5414:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x16666666666666; valaddr_reg:x3; val_offset:16242*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16242*0 + 3*38*FLEN/8, x4, x1, x2)

inst_5415:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x16db6db6db6db6; valaddr_reg:x3; val_offset:16245*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16245*0 + 3*39*FLEN/8, x4, x1, x2)

inst_5416:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x17777777777777; valaddr_reg:x3; val_offset:16248*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16248*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5417:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x18888888888888; valaddr_reg:x3; val_offset:16251*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16251*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5418:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:16254*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16254*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5419:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:16257*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16257*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5420:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:16260*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16260*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5421:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:16263*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16263*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5422:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:16266*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16266*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5423:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:16269*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16269*0 + 3*47*FLEN/8, x4, x1, x2)

inst_5424:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:16272*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16272*0 + 3*48*FLEN/8, x4, x1, x2)

inst_5425:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:16275*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16275*0 + 3*49*FLEN/8, x4, x1, x2)

inst_5426:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:16278*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16278*0 + 3*50*FLEN/8, x4, x1, x2)

inst_5427:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:16281*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16281*0 + 3*51*FLEN/8, x4, x1, x2)

inst_5428:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000000000; valaddr_reg:x3; val_offset:16284*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16284*0 + 3*52*FLEN/8, x4, x1, x2)

inst_5429:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000000001; valaddr_reg:x3; val_offset:16287*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16287*0 + 3*53*FLEN/8, x4, x1, x2)

inst_5430:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000000003; valaddr_reg:x3; val_offset:16290*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16290*0 + 3*54*FLEN/8, x4, x1, x2)

inst_5431:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000000007; valaddr_reg:x3; val_offset:16293*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16293*0 + 3*55*FLEN/8, x4, x1, x2)

inst_5432:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000000000f; valaddr_reg:x3; val_offset:16296*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16296*0 + 3*56*FLEN/8, x4, x1, x2)

inst_5433:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000000001f; valaddr_reg:x3; val_offset:16299*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16299*0 + 3*57*FLEN/8, x4, x1, x2)

inst_5434:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000000003f; valaddr_reg:x3; val_offset:16302*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16302*0 + 3*58*FLEN/8, x4, x1, x2)

inst_5435:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000000007f; valaddr_reg:x3; val_offset:16305*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16305*0 + 3*59*FLEN/8, x4, x1, x2)

inst_5436:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000000000ff; valaddr_reg:x3; val_offset:16308*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16308*0 + 3*60*FLEN/8, x4, x1, x2)

inst_5437:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000000001ff; valaddr_reg:x3; val_offset:16311*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16311*0 + 3*61*FLEN/8, x4, x1, x2)

inst_5438:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000000003ff; valaddr_reg:x3; val_offset:16314*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16314*0 + 3*62*FLEN/8, x4, x1, x2)

inst_5439:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000000007ff; valaddr_reg:x3; val_offset:16317*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16317*0 + 3*63*FLEN/8, x4, x1, x2)

inst_5440:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000000fff; valaddr_reg:x3; val_offset:16320*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16320*0 + 3*64*FLEN/8, x4, x1, x2)

inst_5441:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000001fff; valaddr_reg:x3; val_offset:16323*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16323*0 + 3*65*FLEN/8, x4, x1, x2)

inst_5442:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000003fff; valaddr_reg:x3; val_offset:16326*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16326*0 + 3*66*FLEN/8, x4, x1, x2)

inst_5443:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000007fff; valaddr_reg:x3; val_offset:16329*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16329*0 + 3*67*FLEN/8, x4, x1, x2)

inst_5444:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000000ffff; valaddr_reg:x3; val_offset:16332*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16332*0 + 3*68*FLEN/8, x4, x1, x2)

inst_5445:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000001ffff; valaddr_reg:x3; val_offset:16335*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16335*0 + 3*69*FLEN/8, x4, x1, x2)

inst_5446:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000003ffff; valaddr_reg:x3; val_offset:16338*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16338*0 + 3*70*FLEN/8, x4, x1, x2)

inst_5447:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000007ffff; valaddr_reg:x3; val_offset:16341*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16341*0 + 3*71*FLEN/8, x4, x1, x2)

inst_5448:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000000fffff; valaddr_reg:x3; val_offset:16344*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16344*0 + 3*72*FLEN/8, x4, x1, x2)

inst_5449:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000001fffff; valaddr_reg:x3; val_offset:16347*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16347*0 + 3*73*FLEN/8, x4, x1, x2)

inst_5450:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000003fffff; valaddr_reg:x3; val_offset:16350*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16350*0 + 3*74*FLEN/8, x4, x1, x2)

inst_5451:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000007fffff; valaddr_reg:x3; val_offset:16353*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16353*0 + 3*75*FLEN/8, x4, x1, x2)

inst_5452:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000000ffffff; valaddr_reg:x3; val_offset:16356*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16356*0 + 3*76*FLEN/8, x4, x1, x2)

inst_5453:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000001ffffff; valaddr_reg:x3; val_offset:16359*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16359*0 + 3*77*FLEN/8, x4, x1, x2)

inst_5454:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000003ffffff; valaddr_reg:x3; val_offset:16362*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16362*0 + 3*78*FLEN/8, x4, x1, x2)

inst_5455:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000007ffffff; valaddr_reg:x3; val_offset:16365*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16365*0 + 3*79*FLEN/8, x4, x1, x2)

inst_5456:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000000fffffff; valaddr_reg:x3; val_offset:16368*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16368*0 + 3*80*FLEN/8, x4, x1, x2)

inst_5457:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000001fffffff; valaddr_reg:x3; val_offset:16371*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16371*0 + 3*81*FLEN/8, x4, x1, x2)

inst_5458:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000003fffffff; valaddr_reg:x3; val_offset:16374*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16374*0 + 3*82*FLEN/8, x4, x1, x2)

inst_5459:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000007fffffff; valaddr_reg:x3; val_offset:16377*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16377*0 + 3*83*FLEN/8, x4, x1, x2)

inst_5460:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00000ffffffff; valaddr_reg:x3; val_offset:16380*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16380*0 + 3*84*FLEN/8, x4, x1, x2)

inst_5461:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00001ffffffff; valaddr_reg:x3; val_offset:16383*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16383*0 + 3*85*FLEN/8, x4, x1, x2)

inst_5462:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00003ffffffff; valaddr_reg:x3; val_offset:16386*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16386*0 + 3*86*FLEN/8, x4, x1, x2)

inst_5463:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00007ffffffff; valaddr_reg:x3; val_offset:16389*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16389*0 + 3*87*FLEN/8, x4, x1, x2)

inst_5464:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0000fffffffff; valaddr_reg:x3; val_offset:16392*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16392*0 + 3*88*FLEN/8, x4, x1, x2)

inst_5465:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0001fffffffff; valaddr_reg:x3; val_offset:16395*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16395*0 + 3*89*FLEN/8, x4, x1, x2)

inst_5466:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0003fffffffff; valaddr_reg:x3; val_offset:16398*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16398*0 + 3*90*FLEN/8, x4, x1, x2)

inst_5467:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0007fffffffff; valaddr_reg:x3; val_offset:16401*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16401*0 + 3*91*FLEN/8, x4, x1, x2)

inst_5468:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b000ffffffffff; valaddr_reg:x3; val_offset:16404*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16404*0 + 3*92*FLEN/8, x4, x1, x2)

inst_5469:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b001ffffffffff; valaddr_reg:x3; val_offset:16407*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16407*0 + 3*93*FLEN/8, x4, x1, x2)

inst_5470:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b003ffffffffff; valaddr_reg:x3; val_offset:16410*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16410*0 + 3*94*FLEN/8, x4, x1, x2)

inst_5471:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b007ffffffffff; valaddr_reg:x3; val_offset:16413*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16413*0 + 3*95*FLEN/8, x4, x1, x2)

inst_5472:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b00fffffffffff; valaddr_reg:x3; val_offset:16416*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16416*0 + 3*96*FLEN/8, x4, x1, x2)

inst_5473:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b01fffffffffff; valaddr_reg:x3; val_offset:16419*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16419*0 + 3*97*FLEN/8, x4, x1, x2)

inst_5474:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b03fffffffffff; valaddr_reg:x3; val_offset:16422*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16422*0 + 3*98*FLEN/8, x4, x1, x2)

inst_5475:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b07fffffffffff; valaddr_reg:x3; val_offset:16425*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16425*0 + 3*99*FLEN/8, x4, x1, x2)

inst_5476:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b0ffffffffffff; valaddr_reg:x3; val_offset:16428*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16428*0 + 3*100*FLEN/8, x4, x1, x2)

inst_5477:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b1ffffffffffff; valaddr_reg:x3; val_offset:16431*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16431*0 + 3*101*FLEN/8, x4, x1, x2)

inst_5478:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b3ffffffffffff; valaddr_reg:x3; val_offset:16434*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16434*0 + 3*102*FLEN/8, x4, x1, x2)

inst_5479:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b7ffffffffffff; valaddr_reg:x3; val_offset:16437*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16437*0 + 3*103*FLEN/8, x4, x1, x2)

inst_5480:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2b8000000000000; valaddr_reg:x3; val_offset:16440*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16440*0 + 3*104*FLEN/8, x4, x1, x2)

inst_5481:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bc000000000000; valaddr_reg:x3; val_offset:16443*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16443*0 + 3*105*FLEN/8, x4, x1, x2)

inst_5482:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2be000000000000; valaddr_reg:x3; val_offset:16446*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16446*0 + 3*106*FLEN/8, x4, x1, x2)

inst_5483:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bf000000000000; valaddr_reg:x3; val_offset:16449*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16449*0 + 3*107*FLEN/8, x4, x1, x2)

inst_5484:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bf800000000000; valaddr_reg:x3; val_offset:16452*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16452*0 + 3*108*FLEN/8, x4, x1, x2)

inst_5485:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfc00000000000; valaddr_reg:x3; val_offset:16455*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16455*0 + 3*109*FLEN/8, x4, x1, x2)

inst_5486:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfe00000000000; valaddr_reg:x3; val_offset:16458*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16458*0 + 3*110*FLEN/8, x4, x1, x2)

inst_5487:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bff00000000000; valaddr_reg:x3; val_offset:16461*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16461*0 + 3*111*FLEN/8, x4, x1, x2)

inst_5488:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bff80000000000; valaddr_reg:x3; val_offset:16464*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16464*0 + 3*112*FLEN/8, x4, x1, x2)

inst_5489:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffc0000000000; valaddr_reg:x3; val_offset:16467*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16467*0 + 3*113*FLEN/8, x4, x1, x2)

inst_5490:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffe0000000000; valaddr_reg:x3; val_offset:16470*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16470*0 + 3*114*FLEN/8, x4, x1, x2)

inst_5491:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfff0000000000; valaddr_reg:x3; val_offset:16473*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16473*0 + 3*115*FLEN/8, x4, x1, x2)

inst_5492:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfff8000000000; valaddr_reg:x3; val_offset:16476*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16476*0 + 3*116*FLEN/8, x4, x1, x2)

inst_5493:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffc000000000; valaddr_reg:x3; val_offset:16479*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16479*0 + 3*117*FLEN/8, x4, x1, x2)

inst_5494:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffe000000000; valaddr_reg:x3; val_offset:16482*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16482*0 + 3*118*FLEN/8, x4, x1, x2)

inst_5495:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffff000000000; valaddr_reg:x3; val_offset:16485*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16485*0 + 3*119*FLEN/8, x4, x1, x2)

inst_5496:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffff800000000; valaddr_reg:x3; val_offset:16488*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16488*0 + 3*120*FLEN/8, x4, x1, x2)

inst_5497:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffc00000000; valaddr_reg:x3; val_offset:16491*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16491*0 + 3*121*FLEN/8, x4, x1, x2)

inst_5498:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffe00000000; valaddr_reg:x3; val_offset:16494*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16494*0 + 3*122*FLEN/8, x4, x1, x2)

inst_5499:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffff00000000; valaddr_reg:x3; val_offset:16497*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16497*0 + 3*123*FLEN/8, x4, x1, x2)

inst_5500:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffff80000000; valaddr_reg:x3; val_offset:16500*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16500*0 + 3*124*FLEN/8, x4, x1, x2)

inst_5501:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffc0000000; valaddr_reg:x3; val_offset:16503*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16503*0 + 3*125*FLEN/8, x4, x1, x2)

inst_5502:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffe0000000; valaddr_reg:x3; val_offset:16506*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16506*0 + 3*126*FLEN/8, x4, x1, x2)

inst_5503:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffff0000000; valaddr_reg:x3; val_offset:16509*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16509*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_5504:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffff8000000; valaddr_reg:x3; val_offset:16512*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16512*0 + 3*128*FLEN/8, x4, x1, x2)

inst_5505:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffc000000; valaddr_reg:x3; val_offset:16515*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16515*0 + 3*129*FLEN/8, x4, x1, x2)

inst_5506:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffe000000; valaddr_reg:x3; val_offset:16518*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16518*0 + 3*130*FLEN/8, x4, x1, x2)

inst_5507:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffff000000; valaddr_reg:x3; val_offset:16521*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16521*0 + 3*131*FLEN/8, x4, x1, x2)

inst_5508:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffff800000; valaddr_reg:x3; val_offset:16524*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16524*0 + 3*132*FLEN/8, x4, x1, x2)

inst_5509:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffc00000; valaddr_reg:x3; val_offset:16527*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16527*0 + 3*133*FLEN/8, x4, x1, x2)

inst_5510:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffe00000; valaddr_reg:x3; val_offset:16530*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16530*0 + 3*134*FLEN/8, x4, x1, x2)

inst_5511:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffff00000; valaddr_reg:x3; val_offset:16533*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16533*0 + 3*135*FLEN/8, x4, x1, x2)

inst_5512:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffff80000; valaddr_reg:x3; val_offset:16536*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16536*0 + 3*136*FLEN/8, x4, x1, x2)

inst_5513:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffc0000; valaddr_reg:x3; val_offset:16539*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16539*0 + 3*137*FLEN/8, x4, x1, x2)

inst_5514:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffe0000; valaddr_reg:x3; val_offset:16542*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16542*0 + 3*138*FLEN/8, x4, x1, x2)

inst_5515:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffff0000; valaddr_reg:x3; val_offset:16545*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16545*0 + 3*139*FLEN/8, x4, x1, x2)

inst_5516:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffff8000; valaddr_reg:x3; val_offset:16548*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16548*0 + 3*140*FLEN/8, x4, x1, x2)

inst_5517:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffffc000; valaddr_reg:x3; val_offset:16551*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16551*0 + 3*141*FLEN/8, x4, x1, x2)

inst_5518:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffffe000; valaddr_reg:x3; val_offset:16554*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16554*0 + 3*142*FLEN/8, x4, x1, x2)

inst_5519:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffff000; valaddr_reg:x3; val_offset:16557*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16557*0 + 3*143*FLEN/8, x4, x1, x2)

inst_5520:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffff800; valaddr_reg:x3; val_offset:16560*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16560*0 + 3*144*FLEN/8, x4, x1, x2)

inst_5521:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffffc00; valaddr_reg:x3; val_offset:16563*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16563*0 + 3*145*FLEN/8, x4, x1, x2)

inst_5522:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffffe00; valaddr_reg:x3; val_offset:16566*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16566*0 + 3*146*FLEN/8, x4, x1, x2)

inst_5523:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffffff00; valaddr_reg:x3; val_offset:16569*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16569*0 + 3*147*FLEN/8, x4, x1, x2)

inst_5524:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffffff80; valaddr_reg:x3; val_offset:16572*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16572*0 + 3*148*FLEN/8, x4, x1, x2)

inst_5525:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffffffc0; valaddr_reg:x3; val_offset:16575*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16575*0 + 3*149*FLEN/8, x4, x1, x2)

inst_5526:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffffffe0; valaddr_reg:x3; val_offset:16578*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16578*0 + 3*150*FLEN/8, x4, x1, x2)

inst_5527:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffffff0; valaddr_reg:x3; val_offset:16581*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16581*0 + 3*151*FLEN/8, x4, x1, x2)

inst_5528:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffffff8; valaddr_reg:x3; val_offset:16584*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16584*0 + 3*152*FLEN/8, x4, x1, x2)

inst_5529:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffffffc; valaddr_reg:x3; val_offset:16587*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16587*0 + 3*153*FLEN/8, x4, x1, x2)

inst_5530:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bffffffffffffe; valaddr_reg:x3; val_offset:16590*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16590*0 + 3*154*FLEN/8, x4, x1, x2)

inst_5531:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x59fd742cdbcef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02b and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f659fd742cdbcef; op2val:0x0;
op3val:0x2bfffffffffffff; valaddr_reg:x3; val_offset:16593*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16593*0 + 3*155*FLEN/8, x4, x1, x2)

inst_5532:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000000000; valaddr_reg:x3; val_offset:16596*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16596*0 + 3*156*FLEN/8, x4, x1, x2)

inst_5533:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000000001; valaddr_reg:x3; val_offset:16599*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16599*0 + 3*157*FLEN/8, x4, x1, x2)

inst_5534:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000000003; valaddr_reg:x3; val_offset:16602*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16602*0 + 3*158*FLEN/8, x4, x1, x2)

inst_5535:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000000007; valaddr_reg:x3; val_offset:16605*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16605*0 + 3*159*FLEN/8, x4, x1, x2)

inst_5536:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000000000f; valaddr_reg:x3; val_offset:16608*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16608*0 + 3*160*FLEN/8, x4, x1, x2)

inst_5537:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000000001f; valaddr_reg:x3; val_offset:16611*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16611*0 + 3*161*FLEN/8, x4, x1, x2)

inst_5538:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000000003f; valaddr_reg:x3; val_offset:16614*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16614*0 + 3*162*FLEN/8, x4, x1, x2)

inst_5539:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000000007f; valaddr_reg:x3; val_offset:16617*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16617*0 + 3*163*FLEN/8, x4, x1, x2)

inst_5540:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000000000ff; valaddr_reg:x3; val_offset:16620*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16620*0 + 3*164*FLEN/8, x4, x1, x2)

inst_5541:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000000001ff; valaddr_reg:x3; val_offset:16623*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16623*0 + 3*165*FLEN/8, x4, x1, x2)

inst_5542:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000000003ff; valaddr_reg:x3; val_offset:16626*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16626*0 + 3*166*FLEN/8, x4, x1, x2)

inst_5543:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000000007ff; valaddr_reg:x3; val_offset:16629*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16629*0 + 3*167*FLEN/8, x4, x1, x2)

inst_5544:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000000fff; valaddr_reg:x3; val_offset:16632*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16632*0 + 3*168*FLEN/8, x4, x1, x2)

inst_5545:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000001fff; valaddr_reg:x3; val_offset:16635*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16635*0 + 3*169*FLEN/8, x4, x1, x2)

inst_5546:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000003fff; valaddr_reg:x3; val_offset:16638*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16638*0 + 3*170*FLEN/8, x4, x1, x2)

inst_5547:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000007fff; valaddr_reg:x3; val_offset:16641*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16641*0 + 3*171*FLEN/8, x4, x1, x2)

inst_5548:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000000ffff; valaddr_reg:x3; val_offset:16644*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16644*0 + 3*172*FLEN/8, x4, x1, x2)

inst_5549:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000001ffff; valaddr_reg:x3; val_offset:16647*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16647*0 + 3*173*FLEN/8, x4, x1, x2)

inst_5550:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000003ffff; valaddr_reg:x3; val_offset:16650*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16650*0 + 3*174*FLEN/8, x4, x1, x2)

inst_5551:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000007ffff; valaddr_reg:x3; val_offset:16653*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16653*0 + 3*175*FLEN/8, x4, x1, x2)

inst_5552:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000000fffff; valaddr_reg:x3; val_offset:16656*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16656*0 + 3*176*FLEN/8, x4, x1, x2)

inst_5553:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000001fffff; valaddr_reg:x3; val_offset:16659*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16659*0 + 3*177*FLEN/8, x4, x1, x2)

inst_5554:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000003fffff; valaddr_reg:x3; val_offset:16662*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16662*0 + 3*178*FLEN/8, x4, x1, x2)

inst_5555:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000007fffff; valaddr_reg:x3; val_offset:16665*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16665*0 + 3*179*FLEN/8, x4, x1, x2)

inst_5556:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000000ffffff; valaddr_reg:x3; val_offset:16668*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16668*0 + 3*180*FLEN/8, x4, x1, x2)

inst_5557:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000001ffffff; valaddr_reg:x3; val_offset:16671*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16671*0 + 3*181*FLEN/8, x4, x1, x2)

inst_5558:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000003ffffff; valaddr_reg:x3; val_offset:16674*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16674*0 + 3*182*FLEN/8, x4, x1, x2)

inst_5559:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000007ffffff; valaddr_reg:x3; val_offset:16677*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16677*0 + 3*183*FLEN/8, x4, x1, x2)

inst_5560:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000000fffffff; valaddr_reg:x3; val_offset:16680*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16680*0 + 3*184*FLEN/8, x4, x1, x2)

inst_5561:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000001fffffff; valaddr_reg:x3; val_offset:16683*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16683*0 + 3*185*FLEN/8, x4, x1, x2)

inst_5562:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000003fffffff; valaddr_reg:x3; val_offset:16686*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16686*0 + 3*186*FLEN/8, x4, x1, x2)

inst_5563:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000007fffffff; valaddr_reg:x3; val_offset:16689*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16689*0 + 3*187*FLEN/8, x4, x1, x2)

inst_5564:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00000ffffffff; valaddr_reg:x3; val_offset:16692*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16692*0 + 3*188*FLEN/8, x4, x1, x2)

inst_5565:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00001ffffffff; valaddr_reg:x3; val_offset:16695*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16695*0 + 3*189*FLEN/8, x4, x1, x2)

inst_5566:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00003ffffffff; valaddr_reg:x3; val_offset:16698*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16698*0 + 3*190*FLEN/8, x4, x1, x2)

inst_5567:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00007ffffffff; valaddr_reg:x3; val_offset:16701*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16701*0 + 3*191*FLEN/8, x4, x1, x2)

inst_5568:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0000fffffffff; valaddr_reg:x3; val_offset:16704*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16704*0 + 3*192*FLEN/8, x4, x1, x2)

inst_5569:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0001fffffffff; valaddr_reg:x3; val_offset:16707*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16707*0 + 3*193*FLEN/8, x4, x1, x2)

inst_5570:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0003fffffffff; valaddr_reg:x3; val_offset:16710*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16710*0 + 3*194*FLEN/8, x4, x1, x2)

inst_5571:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0007fffffffff; valaddr_reg:x3; val_offset:16713*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16713*0 + 3*195*FLEN/8, x4, x1, x2)

inst_5572:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed000ffffffffff; valaddr_reg:x3; val_offset:16716*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16716*0 + 3*196*FLEN/8, x4, x1, x2)

inst_5573:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed001ffffffffff; valaddr_reg:x3; val_offset:16719*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16719*0 + 3*197*FLEN/8, x4, x1, x2)

inst_5574:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed003ffffffffff; valaddr_reg:x3; val_offset:16722*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16722*0 + 3*198*FLEN/8, x4, x1, x2)

inst_5575:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed007ffffffffff; valaddr_reg:x3; val_offset:16725*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16725*0 + 3*199*FLEN/8, x4, x1, x2)

inst_5576:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed00fffffffffff; valaddr_reg:x3; val_offset:16728*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16728*0 + 3*200*FLEN/8, x4, x1, x2)

inst_5577:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed01fffffffffff; valaddr_reg:x3; val_offset:16731*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16731*0 + 3*201*FLEN/8, x4, x1, x2)

inst_5578:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed03fffffffffff; valaddr_reg:x3; val_offset:16734*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16734*0 + 3*202*FLEN/8, x4, x1, x2)

inst_5579:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed07fffffffffff; valaddr_reg:x3; val_offset:16737*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16737*0 + 3*203*FLEN/8, x4, x1, x2)

inst_5580:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed0ffffffffffff; valaddr_reg:x3; val_offset:16740*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16740*0 + 3*204*FLEN/8, x4, x1, x2)

inst_5581:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed1ffffffffffff; valaddr_reg:x3; val_offset:16743*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16743*0 + 3*205*FLEN/8, x4, x1, x2)

inst_5582:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed3ffffffffffff; valaddr_reg:x3; val_offset:16746*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16746*0 + 3*206*FLEN/8, x4, x1, x2)

inst_5583:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed7ffffffffffff; valaddr_reg:x3; val_offset:16749*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16749*0 + 3*207*FLEN/8, x4, x1, x2)

inst_5584:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ed8000000000000; valaddr_reg:x3; val_offset:16752*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16752*0 + 3*208*FLEN/8, x4, x1, x2)

inst_5585:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edc000000000000; valaddr_reg:x3; val_offset:16755*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16755*0 + 3*209*FLEN/8, x4, x1, x2)

inst_5586:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ede000000000000; valaddr_reg:x3; val_offset:16758*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16758*0 + 3*210*FLEN/8, x4, x1, x2)

inst_5587:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edf000000000000; valaddr_reg:x3; val_offset:16761*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16761*0 + 3*211*FLEN/8, x4, x1, x2)

inst_5588:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edf800000000000; valaddr_reg:x3; val_offset:16764*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16764*0 + 3*212*FLEN/8, x4, x1, x2)

inst_5589:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfc00000000000; valaddr_reg:x3; val_offset:16767*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16767*0 + 3*213*FLEN/8, x4, x1, x2)

inst_5590:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfe00000000000; valaddr_reg:x3; val_offset:16770*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16770*0 + 3*214*FLEN/8, x4, x1, x2)

inst_5591:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edff00000000000; valaddr_reg:x3; val_offset:16773*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16773*0 + 3*215*FLEN/8, x4, x1, x2)

inst_5592:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edff80000000000; valaddr_reg:x3; val_offset:16776*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16776*0 + 3*216*FLEN/8, x4, x1, x2)

inst_5593:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffc0000000000; valaddr_reg:x3; val_offset:16779*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16779*0 + 3*217*FLEN/8, x4, x1, x2)

inst_5594:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffe0000000000; valaddr_reg:x3; val_offset:16782*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16782*0 + 3*218*FLEN/8, x4, x1, x2)

inst_5595:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfff0000000000; valaddr_reg:x3; val_offset:16785*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16785*0 + 3*219*FLEN/8, x4, x1, x2)

inst_5596:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfff8000000000; valaddr_reg:x3; val_offset:16788*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16788*0 + 3*220*FLEN/8, x4, x1, x2)

inst_5597:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffc000000000; valaddr_reg:x3; val_offset:16791*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16791*0 + 3*221*FLEN/8, x4, x1, x2)

inst_5598:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffe000000000; valaddr_reg:x3; val_offset:16794*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16794*0 + 3*222*FLEN/8, x4, x1, x2)

inst_5599:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffff000000000; valaddr_reg:x3; val_offset:16797*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16797*0 + 3*223*FLEN/8, x4, x1, x2)

inst_5600:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffff800000000; valaddr_reg:x3; val_offset:16800*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16800*0 + 3*224*FLEN/8, x4, x1, x2)

inst_5601:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffc00000000; valaddr_reg:x3; val_offset:16803*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16803*0 + 3*225*FLEN/8, x4, x1, x2)

inst_5602:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffe00000000; valaddr_reg:x3; val_offset:16806*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16806*0 + 3*226*FLEN/8, x4, x1, x2)

inst_5603:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffff00000000; valaddr_reg:x3; val_offset:16809*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16809*0 + 3*227*FLEN/8, x4, x1, x2)

inst_5604:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffff80000000; valaddr_reg:x3; val_offset:16812*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16812*0 + 3*228*FLEN/8, x4, x1, x2)

inst_5605:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffc0000000; valaddr_reg:x3; val_offset:16815*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16815*0 + 3*229*FLEN/8, x4, x1, x2)

inst_5606:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffe0000000; valaddr_reg:x3; val_offset:16818*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16818*0 + 3*230*FLEN/8, x4, x1, x2)

inst_5607:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffff0000000; valaddr_reg:x3; val_offset:16821*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16821*0 + 3*231*FLEN/8, x4, x1, x2)

inst_5608:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffff8000000; valaddr_reg:x3; val_offset:16824*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16824*0 + 3*232*FLEN/8, x4, x1, x2)

inst_5609:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffc000000; valaddr_reg:x3; val_offset:16827*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16827*0 + 3*233*FLEN/8, x4, x1, x2)

inst_5610:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffe000000; valaddr_reg:x3; val_offset:16830*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16830*0 + 3*234*FLEN/8, x4, x1, x2)

inst_5611:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffff000000; valaddr_reg:x3; val_offset:16833*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16833*0 + 3*235*FLEN/8, x4, x1, x2)

inst_5612:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffff800000; valaddr_reg:x3; val_offset:16836*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16836*0 + 3*236*FLEN/8, x4, x1, x2)

inst_5613:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffc00000; valaddr_reg:x3; val_offset:16839*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16839*0 + 3*237*FLEN/8, x4, x1, x2)

inst_5614:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffe00000; valaddr_reg:x3; val_offset:16842*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16842*0 + 3*238*FLEN/8, x4, x1, x2)

inst_5615:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffff00000; valaddr_reg:x3; val_offset:16845*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16845*0 + 3*239*FLEN/8, x4, x1, x2)

inst_5616:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffff80000; valaddr_reg:x3; val_offset:16848*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16848*0 + 3*240*FLEN/8, x4, x1, x2)

inst_5617:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffc0000; valaddr_reg:x3; val_offset:16851*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16851*0 + 3*241*FLEN/8, x4, x1, x2)

inst_5618:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffe0000; valaddr_reg:x3; val_offset:16854*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16854*0 + 3*242*FLEN/8, x4, x1, x2)

inst_5619:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffff0000; valaddr_reg:x3; val_offset:16857*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16857*0 + 3*243*FLEN/8, x4, x1, x2)

inst_5620:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffff8000; valaddr_reg:x3; val_offset:16860*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16860*0 + 3*244*FLEN/8, x4, x1, x2)

inst_5621:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffffc000; valaddr_reg:x3; val_offset:16863*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16863*0 + 3*245*FLEN/8, x4, x1, x2)

inst_5622:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffffe000; valaddr_reg:x3; val_offset:16866*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16866*0 + 3*246*FLEN/8, x4, x1, x2)

inst_5623:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffff000; valaddr_reg:x3; val_offset:16869*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16869*0 + 3*247*FLEN/8, x4, x1, x2)

inst_5624:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffff800; valaddr_reg:x3; val_offset:16872*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16872*0 + 3*248*FLEN/8, x4, x1, x2)

inst_5625:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffffc00; valaddr_reg:x3; val_offset:16875*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16875*0 + 3*249*FLEN/8, x4, x1, x2)

inst_5626:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffffe00; valaddr_reg:x3; val_offset:16878*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16878*0 + 3*250*FLEN/8, x4, x1, x2)

inst_5627:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffffff00; valaddr_reg:x3; val_offset:16881*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16881*0 + 3*251*FLEN/8, x4, x1, x2)

inst_5628:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffffff80; valaddr_reg:x3; val_offset:16884*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16884*0 + 3*252*FLEN/8, x4, x1, x2)

inst_5629:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffffffc0; valaddr_reg:x3; val_offset:16887*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16887*0 + 3*253*FLEN/8, x4, x1, x2)

inst_5630:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffffffe0; valaddr_reg:x3; val_offset:16890*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16890*0 + 3*254*FLEN/8, x4, x1, x2)

inst_5631:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffffff0; valaddr_reg:x3; val_offset:16893*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16893*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_5632:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffffff8; valaddr_reg:x3; val_offset:16896*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16896*0 + 3*256*FLEN/8, x4, x1, x2)

inst_5633:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffffffc; valaddr_reg:x3; val_offset:16899*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16899*0 + 3*257*FLEN/8, x4, x1, x2)

inst_5634:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edffffffffffffe; valaddr_reg:x3; val_offset:16902*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16902*0 + 3*258*FLEN/8, x4, x1, x2)

inst_5635:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ed and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3edfffffffffffff; valaddr_reg:x3; val_offset:16905*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16905*0 + 3*259*FLEN/8, x4, x1, x2)

inst_5636:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:16908*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16908*0 + 3*260*FLEN/8, x4, x1, x2)

inst_5637:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:16911*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16911*0 + 3*261*FLEN/8, x4, x1, x2)

inst_5638:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:16914*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16914*0 + 3*262*FLEN/8, x4, x1, x2)

inst_5639:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:16917*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16917*0 + 3*263*FLEN/8, x4, x1, x2)

inst_5640:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:16920*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16920*0 + 3*264*FLEN/8, x4, x1, x2)

inst_5641:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:16923*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16923*0 + 3*265*FLEN/8, x4, x1, x2)

inst_5642:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:16926*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16926*0 + 3*266*FLEN/8, x4, x1, x2)

inst_5643:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:16929*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16929*0 + 3*267*FLEN/8, x4, x1, x2)

inst_5644:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:16932*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16932*0 + 3*268*FLEN/8, x4, x1, x2)

inst_5645:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:16935*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16935*0 + 3*269*FLEN/8, x4, x1, x2)

inst_5646:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:16938*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16938*0 + 3*270*FLEN/8, x4, x1, x2)

inst_5647:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:16941*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16941*0 + 3*271*FLEN/8, x4, x1, x2)

inst_5648:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:16944*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16944*0 + 3*272*FLEN/8, x4, x1, x2)

inst_5649:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:16947*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16947*0 + 3*273*FLEN/8, x4, x1, x2)

inst_5650:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:16950*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16950*0 + 3*274*FLEN/8, x4, x1, x2)

inst_5651:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:16953*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16953*0 + 3*275*FLEN/8, x4, x1, x2)

inst_5652:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:16956*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16956*0 + 3*276*FLEN/8, x4, x1, x2)

inst_5653:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:16959*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16959*0 + 3*277*FLEN/8, x4, x1, x2)

inst_5654:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:16962*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16962*0 + 3*278*FLEN/8, x4, x1, x2)

inst_5655:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:16965*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16965*0 + 3*279*FLEN/8, x4, x1, x2)

inst_5656:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:16968*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16968*0 + 3*280*FLEN/8, x4, x1, x2)

inst_5657:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x5a808029a3a1f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x7a45a41bd1754 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f65a808029a3a1f; op2val:0x2077a45a41bd1754;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:16971*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16971*0 + 3*281*FLEN/8, x4, x1, x2)

inst_5658:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:16974*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16974*0 + 3*282*FLEN/8, x4, x1, x2)

inst_5659:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:16977*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16977*0 + 3*283*FLEN/8, x4, x1, x2)

inst_5660:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:16980*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16980*0 + 3*284*FLEN/8, x4, x1, x2)

inst_5661:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:16983*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16983*0 + 3*285*FLEN/8, x4, x1, x2)

inst_5662:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:16986*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16986*0 + 3*286*FLEN/8, x4, x1, x2)

inst_5663:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:16989*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16989*0 + 3*287*FLEN/8, x4, x1, x2)

inst_5664:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:16992*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16992*0 + 3*288*FLEN/8, x4, x1, x2)

inst_5665:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:16995*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16995*0 + 3*289*FLEN/8, x4, x1, x2)

inst_5666:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:16998*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 16998*0 + 3*290*FLEN/8, x4, x1, x2)

inst_5667:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:17001*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17001*0 + 3*291*FLEN/8, x4, x1, x2)

inst_5668:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:17004*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17004*0 + 3*292*FLEN/8, x4, x1, x2)

inst_5669:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:17007*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17007*0 + 3*293*FLEN/8, x4, x1, x2)

inst_5670:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:17010*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17010*0 + 3*294*FLEN/8, x4, x1, x2)

inst_5671:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:17013*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17013*0 + 3*295*FLEN/8, x4, x1, x2)

inst_5672:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:17016*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17016*0 + 3*296*FLEN/8, x4, x1, x2)

inst_5673:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:17019*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17019*0 + 3*297*FLEN/8, x4, x1, x2)

inst_5674:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:17022*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17022*0 + 3*298*FLEN/8, x4, x1, x2)

inst_5675:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:17025*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17025*0 + 3*299*FLEN/8, x4, x1, x2)

inst_5676:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:17028*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17028*0 + 3*300*FLEN/8, x4, x1, x2)

inst_5677:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:17031*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17031*0 + 3*301*FLEN/8, x4, x1, x2)

inst_5678:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:17034*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17034*0 + 3*302*FLEN/8, x4, x1, x2)

inst_5679:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:17037*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17037*0 + 3*303*FLEN/8, x4, x1, x2)

inst_5680:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000000000; valaddr_reg:x3; val_offset:17040*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17040*0 + 3*304*FLEN/8, x4, x1, x2)

inst_5681:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000000001; valaddr_reg:x3; val_offset:17043*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17043*0 + 3*305*FLEN/8, x4, x1, x2)

inst_5682:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000000003; valaddr_reg:x3; val_offset:17046*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17046*0 + 3*306*FLEN/8, x4, x1, x2)

inst_5683:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000000007; valaddr_reg:x3; val_offset:17049*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17049*0 + 3*307*FLEN/8, x4, x1, x2)

inst_5684:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000000000f; valaddr_reg:x3; val_offset:17052*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17052*0 + 3*308*FLEN/8, x4, x1, x2)

inst_5685:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000000001f; valaddr_reg:x3; val_offset:17055*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17055*0 + 3*309*FLEN/8, x4, x1, x2)

inst_5686:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000000003f; valaddr_reg:x3; val_offset:17058*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17058*0 + 3*310*FLEN/8, x4, x1, x2)

inst_5687:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000000007f; valaddr_reg:x3; val_offset:17061*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17061*0 + 3*311*FLEN/8, x4, x1, x2)

inst_5688:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000000000ff; valaddr_reg:x3; val_offset:17064*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17064*0 + 3*312*FLEN/8, x4, x1, x2)

inst_5689:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000000001ff; valaddr_reg:x3; val_offset:17067*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17067*0 + 3*313*FLEN/8, x4, x1, x2)

inst_5690:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000000003ff; valaddr_reg:x3; val_offset:17070*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17070*0 + 3*314*FLEN/8, x4, x1, x2)

inst_5691:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000000007ff; valaddr_reg:x3; val_offset:17073*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17073*0 + 3*315*FLEN/8, x4, x1, x2)

inst_5692:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000000fff; valaddr_reg:x3; val_offset:17076*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17076*0 + 3*316*FLEN/8, x4, x1, x2)

inst_5693:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000001fff; valaddr_reg:x3; val_offset:17079*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17079*0 + 3*317*FLEN/8, x4, x1, x2)

inst_5694:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000003fff; valaddr_reg:x3; val_offset:17082*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17082*0 + 3*318*FLEN/8, x4, x1, x2)

inst_5695:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000007fff; valaddr_reg:x3; val_offset:17085*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17085*0 + 3*319*FLEN/8, x4, x1, x2)

inst_5696:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000000ffff; valaddr_reg:x3; val_offset:17088*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17088*0 + 3*320*FLEN/8, x4, x1, x2)

inst_5697:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000001ffff; valaddr_reg:x3; val_offset:17091*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17091*0 + 3*321*FLEN/8, x4, x1, x2)

inst_5698:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000003ffff; valaddr_reg:x3; val_offset:17094*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17094*0 + 3*322*FLEN/8, x4, x1, x2)

inst_5699:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000007ffff; valaddr_reg:x3; val_offset:17097*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17097*0 + 3*323*FLEN/8, x4, x1, x2)

inst_5700:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000000fffff; valaddr_reg:x3; val_offset:17100*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17100*0 + 3*324*FLEN/8, x4, x1, x2)

inst_5701:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000001fffff; valaddr_reg:x3; val_offset:17103*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17103*0 + 3*325*FLEN/8, x4, x1, x2)

inst_5702:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000003fffff; valaddr_reg:x3; val_offset:17106*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17106*0 + 3*326*FLEN/8, x4, x1, x2)

inst_5703:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000007fffff; valaddr_reg:x3; val_offset:17109*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17109*0 + 3*327*FLEN/8, x4, x1, x2)

inst_5704:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000000ffffff; valaddr_reg:x3; val_offset:17112*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17112*0 + 3*328*FLEN/8, x4, x1, x2)

inst_5705:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000001ffffff; valaddr_reg:x3; val_offset:17115*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17115*0 + 3*329*FLEN/8, x4, x1, x2)

inst_5706:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000003ffffff; valaddr_reg:x3; val_offset:17118*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17118*0 + 3*330*FLEN/8, x4, x1, x2)

inst_5707:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000007ffffff; valaddr_reg:x3; val_offset:17121*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17121*0 + 3*331*FLEN/8, x4, x1, x2)

inst_5708:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000000fffffff; valaddr_reg:x3; val_offset:17124*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17124*0 + 3*332*FLEN/8, x4, x1, x2)

inst_5709:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000001fffffff; valaddr_reg:x3; val_offset:17127*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17127*0 + 3*333*FLEN/8, x4, x1, x2)

inst_5710:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000003fffffff; valaddr_reg:x3; val_offset:17130*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17130*0 + 3*334*FLEN/8, x4, x1, x2)

inst_5711:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000007fffffff; valaddr_reg:x3; val_offset:17133*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17133*0 + 3*335*FLEN/8, x4, x1, x2)

inst_5712:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700000ffffffff; valaddr_reg:x3; val_offset:17136*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17136*0 + 3*336*FLEN/8, x4, x1, x2)

inst_5713:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700001ffffffff; valaddr_reg:x3; val_offset:17139*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17139*0 + 3*337*FLEN/8, x4, x1, x2)

inst_5714:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700003ffffffff; valaddr_reg:x3; val_offset:17142*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17142*0 + 3*338*FLEN/8, x4, x1, x2)

inst_5715:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700007ffffffff; valaddr_reg:x3; val_offset:17145*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17145*0 + 3*339*FLEN/8, x4, x1, x2)

inst_5716:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070000fffffffff; valaddr_reg:x3; val_offset:17148*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17148*0 + 3*340*FLEN/8, x4, x1, x2)

inst_5717:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070001fffffffff; valaddr_reg:x3; val_offset:17151*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17151*0 + 3*341*FLEN/8, x4, x1, x2)

inst_5718:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070003fffffffff; valaddr_reg:x3; val_offset:17154*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17154*0 + 3*342*FLEN/8, x4, x1, x2)

inst_5719:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070007fffffffff; valaddr_reg:x3; val_offset:17157*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17157*0 + 3*343*FLEN/8, x4, x1, x2)

inst_5720:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807000ffffffffff; valaddr_reg:x3; val_offset:17160*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17160*0 + 3*344*FLEN/8, x4, x1, x2)

inst_5721:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807001ffffffffff; valaddr_reg:x3; val_offset:17163*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17163*0 + 3*345*FLEN/8, x4, x1, x2)

inst_5722:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807003ffffffffff; valaddr_reg:x3; val_offset:17166*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17166*0 + 3*346*FLEN/8, x4, x1, x2)

inst_5723:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807007ffffffffff; valaddr_reg:x3; val_offset:17169*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17169*0 + 3*347*FLEN/8, x4, x1, x2)

inst_5724:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80700fffffffffff; valaddr_reg:x3; val_offset:17172*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17172*0 + 3*348*FLEN/8, x4, x1, x2)

inst_5725:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80701fffffffffff; valaddr_reg:x3; val_offset:17175*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17175*0 + 3*349*FLEN/8, x4, x1, x2)

inst_5726:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80703fffffffffff; valaddr_reg:x3; val_offset:17178*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17178*0 + 3*350*FLEN/8, x4, x1, x2)

inst_5727:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x80707fffffffffff; valaddr_reg:x3; val_offset:17181*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17181*0 + 3*351*FLEN/8, x4, x1, x2)

inst_5728:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8070ffffffffffff; valaddr_reg:x3; val_offset:17184*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17184*0 + 3*352*FLEN/8, x4, x1, x2)

inst_5729:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8071ffffffffffff; valaddr_reg:x3; val_offset:17187*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17187*0 + 3*353*FLEN/8, x4, x1, x2)

inst_5730:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8073ffffffffffff; valaddr_reg:x3; val_offset:17190*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17190*0 + 3*354*FLEN/8, x4, x1, x2)

inst_5731:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8077ffffffffffff; valaddr_reg:x3; val_offset:17193*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17193*0 + 3*355*FLEN/8, x4, x1, x2)

inst_5732:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x8078000000000000; valaddr_reg:x3; val_offset:17196*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17196*0 + 3*356*FLEN/8, x4, x1, x2)

inst_5733:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807c000000000000; valaddr_reg:x3; val_offset:17199*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17199*0 + 3*357*FLEN/8, x4, x1, x2)

inst_5734:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807e000000000000; valaddr_reg:x3; val_offset:17202*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17202*0 + 3*358*FLEN/8, x4, x1, x2)

inst_5735:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807f000000000000; valaddr_reg:x3; val_offset:17205*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17205*0 + 3*359*FLEN/8, x4, x1, x2)

inst_5736:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807f800000000000; valaddr_reg:x3; val_offset:17208*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17208*0 + 3*360*FLEN/8, x4, x1, x2)

inst_5737:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fc00000000000; valaddr_reg:x3; val_offset:17211*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17211*0 + 3*361*FLEN/8, x4, x1, x2)

inst_5738:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fe00000000000; valaddr_reg:x3; val_offset:17214*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17214*0 + 3*362*FLEN/8, x4, x1, x2)

inst_5739:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ff00000000000; valaddr_reg:x3; val_offset:17217*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17217*0 + 3*363*FLEN/8, x4, x1, x2)

inst_5740:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ff80000000000; valaddr_reg:x3; val_offset:17220*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17220*0 + 3*364*FLEN/8, x4, x1, x2)

inst_5741:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffc0000000000; valaddr_reg:x3; val_offset:17223*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17223*0 + 3*365*FLEN/8, x4, x1, x2)

inst_5742:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffe0000000000; valaddr_reg:x3; val_offset:17226*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17226*0 + 3*366*FLEN/8, x4, x1, x2)

inst_5743:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fff0000000000; valaddr_reg:x3; val_offset:17229*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17229*0 + 3*367*FLEN/8, x4, x1, x2)

inst_5744:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fff8000000000; valaddr_reg:x3; val_offset:17232*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17232*0 + 3*368*FLEN/8, x4, x1, x2)

inst_5745:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffc000000000; valaddr_reg:x3; val_offset:17235*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17235*0 + 3*369*FLEN/8, x4, x1, x2)

inst_5746:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffe000000000; valaddr_reg:x3; val_offset:17238*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17238*0 + 3*370*FLEN/8, x4, x1, x2)

inst_5747:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffff000000000; valaddr_reg:x3; val_offset:17241*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17241*0 + 3*371*FLEN/8, x4, x1, x2)

inst_5748:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffff800000000; valaddr_reg:x3; val_offset:17244*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17244*0 + 3*372*FLEN/8, x4, x1, x2)

inst_5749:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffc00000000; valaddr_reg:x3; val_offset:17247*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17247*0 + 3*373*FLEN/8, x4, x1, x2)

inst_5750:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffe00000000; valaddr_reg:x3; val_offset:17250*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17250*0 + 3*374*FLEN/8, x4, x1, x2)

inst_5751:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffff00000000; valaddr_reg:x3; val_offset:17253*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17253*0 + 3*375*FLEN/8, x4, x1, x2)

inst_5752:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffff80000000; valaddr_reg:x3; val_offset:17256*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17256*0 + 3*376*FLEN/8, x4, x1, x2)

inst_5753:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffc0000000; valaddr_reg:x3; val_offset:17259*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17259*0 + 3*377*FLEN/8, x4, x1, x2)

inst_5754:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffe0000000; valaddr_reg:x3; val_offset:17262*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17262*0 + 3*378*FLEN/8, x4, x1, x2)

inst_5755:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffff0000000; valaddr_reg:x3; val_offset:17265*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17265*0 + 3*379*FLEN/8, x4, x1, x2)

inst_5756:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffff8000000; valaddr_reg:x3; val_offset:17268*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17268*0 + 3*380*FLEN/8, x4, x1, x2)

inst_5757:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffc000000; valaddr_reg:x3; val_offset:17271*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17271*0 + 3*381*FLEN/8, x4, x1, x2)

inst_5758:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffe000000; valaddr_reg:x3; val_offset:17274*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17274*0 + 3*382*FLEN/8, x4, x1, x2)

inst_5759:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffff000000; valaddr_reg:x3; val_offset:17277*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17277*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_5760:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffff800000; valaddr_reg:x3; val_offset:17280*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17280*0 + 3*384*FLEN/8, x4, x1, x2)

inst_5761:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffc00000; valaddr_reg:x3; val_offset:17283*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17283*0 + 3*385*FLEN/8, x4, x1, x2)

inst_5762:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffe00000; valaddr_reg:x3; val_offset:17286*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17286*0 + 3*386*FLEN/8, x4, x1, x2)

inst_5763:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffff00000; valaddr_reg:x3; val_offset:17289*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17289*0 + 3*387*FLEN/8, x4, x1, x2)

inst_5764:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffff80000; valaddr_reg:x3; val_offset:17292*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17292*0 + 3*388*FLEN/8, x4, x1, x2)

inst_5765:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffc0000; valaddr_reg:x3; val_offset:17295*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17295*0 + 3*389*FLEN/8, x4, x1, x2)

inst_5766:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffe0000; valaddr_reg:x3; val_offset:17298*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17298*0 + 3*390*FLEN/8, x4, x1, x2)

inst_5767:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffff0000; valaddr_reg:x3; val_offset:17301*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17301*0 + 3*391*FLEN/8, x4, x1, x2)

inst_5768:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffff8000; valaddr_reg:x3; val_offset:17304*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17304*0 + 3*392*FLEN/8, x4, x1, x2)

inst_5769:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffffc000; valaddr_reg:x3; val_offset:17307*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17307*0 + 3*393*FLEN/8, x4, x1, x2)

inst_5770:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffffe000; valaddr_reg:x3; val_offset:17310*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17310*0 + 3*394*FLEN/8, x4, x1, x2)

inst_5771:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffff000; valaddr_reg:x3; val_offset:17313*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17313*0 + 3*395*FLEN/8, x4, x1, x2)

inst_5772:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffff800; valaddr_reg:x3; val_offset:17316*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17316*0 + 3*396*FLEN/8, x4, x1, x2)

inst_5773:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffffc00; valaddr_reg:x3; val_offset:17319*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17319*0 + 3*397*FLEN/8, x4, x1, x2)

inst_5774:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffffe00; valaddr_reg:x3; val_offset:17322*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17322*0 + 3*398*FLEN/8, x4, x1, x2)

inst_5775:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffffff00; valaddr_reg:x3; val_offset:17325*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17325*0 + 3*399*FLEN/8, x4, x1, x2)

inst_5776:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffffff80; valaddr_reg:x3; val_offset:17328*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17328*0 + 3*400*FLEN/8, x4, x1, x2)

inst_5777:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffffffc0; valaddr_reg:x3; val_offset:17331*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17331*0 + 3*401*FLEN/8, x4, x1, x2)

inst_5778:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffffffe0; valaddr_reg:x3; val_offset:17334*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17334*0 + 3*402*FLEN/8, x4, x1, x2)

inst_5779:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffffff0; valaddr_reg:x3; val_offset:17337*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17337*0 + 3*403*FLEN/8, x4, x1, x2)

inst_5780:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffffff8; valaddr_reg:x3; val_offset:17340*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17340*0 + 3*404*FLEN/8, x4, x1, x2)

inst_5781:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffffffc; valaddr_reg:x3; val_offset:17343*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17343*0 + 3*405*FLEN/8, x4, x1, x2)

inst_5782:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807ffffffffffffe; valaddr_reg:x3; val_offset:17346*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17346*0 + 3*406*FLEN/8, x4, x1, x2)

inst_5783:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x6c915939277cf and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x007 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f66c915939277cf; op2val:0x8000;
op3val:0x807fffffffffffff; valaddr_reg:x3; val_offset:17349*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17349*0 + 3*407*FLEN/8, x4, x1, x2)

inst_5784:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:17352*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17352*0 + 3*408*FLEN/8, x4, x1, x2)

inst_5785:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:17355*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17355*0 + 3*409*FLEN/8, x4, x1, x2)

inst_5786:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:17358*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17358*0 + 3*410*FLEN/8, x4, x1, x2)

inst_5787:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:17361*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17361*0 + 3*411*FLEN/8, x4, x1, x2)

inst_5788:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:17364*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17364*0 + 3*412*FLEN/8, x4, x1, x2)

inst_5789:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:17367*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17367*0 + 3*413*FLEN/8, x4, x1, x2)

inst_5790:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:17370*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17370*0 + 3*414*FLEN/8, x4, x1, x2)

inst_5791:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:17373*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17373*0 + 3*415*FLEN/8, x4, x1, x2)

inst_5792:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:17376*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17376*0 + 3*416*FLEN/8, x4, x1, x2)

inst_5793:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:17379*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17379*0 + 3*417*FLEN/8, x4, x1, x2)

inst_5794:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:17382*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17382*0 + 3*418*FLEN/8, x4, x1, x2)

inst_5795:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:17385*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17385*0 + 3*419*FLEN/8, x4, x1, x2)

inst_5796:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:17388*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17388*0 + 3*420*FLEN/8, x4, x1, x2)

inst_5797:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:17391*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17391*0 + 3*421*FLEN/8, x4, x1, x2)

inst_5798:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:17394*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17394*0 + 3*422*FLEN/8, x4, x1, x2)

inst_5799:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:17397*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17397*0 + 3*423*FLEN/8, x4, x1, x2)

inst_5800:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:17400*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17400*0 + 3*424*FLEN/8, x4, x1, x2)

inst_5801:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:17403*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17403*0 + 3*425*FLEN/8, x4, x1, x2)

inst_5802:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:17406*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17406*0 + 3*426*FLEN/8, x4, x1, x2)

inst_5803:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:17409*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17409*0 + 3*427*FLEN/8, x4, x1, x2)

inst_5804:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:17412*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17412*0 + 3*428*FLEN/8, x4, x1, x2)

inst_5805:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:17415*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17415*0 + 3*429*FLEN/8, x4, x1, x2)

inst_5806:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000000000; valaddr_reg:x3; val_offset:17418*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17418*0 + 3*430*FLEN/8, x4, x1, x2)

inst_5807:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000000001; valaddr_reg:x3; val_offset:17421*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17421*0 + 3*431*FLEN/8, x4, x1, x2)

inst_5808:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000000003; valaddr_reg:x3; val_offset:17424*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17424*0 + 3*432*FLEN/8, x4, x1, x2)

inst_5809:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000000007; valaddr_reg:x3; val_offset:17427*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17427*0 + 3*433*FLEN/8, x4, x1, x2)

inst_5810:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000000000f; valaddr_reg:x3; val_offset:17430*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17430*0 + 3*434*FLEN/8, x4, x1, x2)

inst_5811:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000000001f; valaddr_reg:x3; val_offset:17433*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17433*0 + 3*435*FLEN/8, x4, x1, x2)

inst_5812:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000000003f; valaddr_reg:x3; val_offset:17436*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17436*0 + 3*436*FLEN/8, x4, x1, x2)

inst_5813:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000000007f; valaddr_reg:x3; val_offset:17439*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17439*0 + 3*437*FLEN/8, x4, x1, x2)

inst_5814:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000000000ff; valaddr_reg:x3; val_offset:17442*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17442*0 + 3*438*FLEN/8, x4, x1, x2)

inst_5815:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000000001ff; valaddr_reg:x3; val_offset:17445*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17445*0 + 3*439*FLEN/8, x4, x1, x2)

inst_5816:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000000003ff; valaddr_reg:x3; val_offset:17448*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17448*0 + 3*440*FLEN/8, x4, x1, x2)

inst_5817:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000000007ff; valaddr_reg:x3; val_offset:17451*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17451*0 + 3*441*FLEN/8, x4, x1, x2)

inst_5818:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000000fff; valaddr_reg:x3; val_offset:17454*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17454*0 + 3*442*FLEN/8, x4, x1, x2)

inst_5819:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000001fff; valaddr_reg:x3; val_offset:17457*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17457*0 + 3*443*FLEN/8, x4, x1, x2)

inst_5820:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000003fff; valaddr_reg:x3; val_offset:17460*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17460*0 + 3*444*FLEN/8, x4, x1, x2)

inst_5821:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000007fff; valaddr_reg:x3; val_offset:17463*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17463*0 + 3*445*FLEN/8, x4, x1, x2)

inst_5822:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000000ffff; valaddr_reg:x3; val_offset:17466*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17466*0 + 3*446*FLEN/8, x4, x1, x2)

inst_5823:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000001ffff; valaddr_reg:x3; val_offset:17469*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17469*0 + 3*447*FLEN/8, x4, x1, x2)

inst_5824:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000003ffff; valaddr_reg:x3; val_offset:17472*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17472*0 + 3*448*FLEN/8, x4, x1, x2)

inst_5825:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000007ffff; valaddr_reg:x3; val_offset:17475*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17475*0 + 3*449*FLEN/8, x4, x1, x2)

inst_5826:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000000fffff; valaddr_reg:x3; val_offset:17478*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17478*0 + 3*450*FLEN/8, x4, x1, x2)

inst_5827:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000001fffff; valaddr_reg:x3; val_offset:17481*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17481*0 + 3*451*FLEN/8, x4, x1, x2)

inst_5828:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000003fffff; valaddr_reg:x3; val_offset:17484*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17484*0 + 3*452*FLEN/8, x4, x1, x2)

inst_5829:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000007fffff; valaddr_reg:x3; val_offset:17487*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17487*0 + 3*453*FLEN/8, x4, x1, x2)

inst_5830:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000000ffffff; valaddr_reg:x3; val_offset:17490*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17490*0 + 3*454*FLEN/8, x4, x1, x2)

inst_5831:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000001ffffff; valaddr_reg:x3; val_offset:17493*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17493*0 + 3*455*FLEN/8, x4, x1, x2)

inst_5832:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000003ffffff; valaddr_reg:x3; val_offset:17496*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17496*0 + 3*456*FLEN/8, x4, x1, x2)

inst_5833:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000007ffffff; valaddr_reg:x3; val_offset:17499*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17499*0 + 3*457*FLEN/8, x4, x1, x2)

inst_5834:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000000fffffff; valaddr_reg:x3; val_offset:17502*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17502*0 + 3*458*FLEN/8, x4, x1, x2)

inst_5835:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000001fffffff; valaddr_reg:x3; val_offset:17505*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17505*0 + 3*459*FLEN/8, x4, x1, x2)

inst_5836:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000003fffffff; valaddr_reg:x3; val_offset:17508*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17508*0 + 3*460*FLEN/8, x4, x1, x2)

inst_5837:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000007fffffff; valaddr_reg:x3; val_offset:17511*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17511*0 + 3*461*FLEN/8, x4, x1, x2)

inst_5838:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00000ffffffff; valaddr_reg:x3; val_offset:17514*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17514*0 + 3*462*FLEN/8, x4, x1, x2)

inst_5839:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00001ffffffff; valaddr_reg:x3; val_offset:17517*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17517*0 + 3*463*FLEN/8, x4, x1, x2)

inst_5840:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00003ffffffff; valaddr_reg:x3; val_offset:17520*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17520*0 + 3*464*FLEN/8, x4, x1, x2)

inst_5841:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00007ffffffff; valaddr_reg:x3; val_offset:17523*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17523*0 + 3*465*FLEN/8, x4, x1, x2)

inst_5842:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0000fffffffff; valaddr_reg:x3; val_offset:17526*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17526*0 + 3*466*FLEN/8, x4, x1, x2)

inst_5843:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0001fffffffff; valaddr_reg:x3; val_offset:17529*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17529*0 + 3*467*FLEN/8, x4, x1, x2)

inst_5844:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0003fffffffff; valaddr_reg:x3; val_offset:17532*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17532*0 + 3*468*FLEN/8, x4, x1, x2)

inst_5845:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0007fffffffff; valaddr_reg:x3; val_offset:17535*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17535*0 + 3*469*FLEN/8, x4, x1, x2)

inst_5846:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a000ffffffffff; valaddr_reg:x3; val_offset:17538*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17538*0 + 3*470*FLEN/8, x4, x1, x2)

inst_5847:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a001ffffffffff; valaddr_reg:x3; val_offset:17541*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17541*0 + 3*471*FLEN/8, x4, x1, x2)

inst_5848:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a003ffffffffff; valaddr_reg:x3; val_offset:17544*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17544*0 + 3*472*FLEN/8, x4, x1, x2)

inst_5849:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a007ffffffffff; valaddr_reg:x3; val_offset:17547*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17547*0 + 3*473*FLEN/8, x4, x1, x2)

inst_5850:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a00fffffffffff; valaddr_reg:x3; val_offset:17550*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17550*0 + 3*474*FLEN/8, x4, x1, x2)

inst_5851:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a01fffffffffff; valaddr_reg:x3; val_offset:17553*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17553*0 + 3*475*FLEN/8, x4, x1, x2)

inst_5852:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a03fffffffffff; valaddr_reg:x3; val_offset:17556*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17556*0 + 3*476*FLEN/8, x4, x1, x2)

inst_5853:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a07fffffffffff; valaddr_reg:x3; val_offset:17559*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17559*0 + 3*477*FLEN/8, x4, x1, x2)

inst_5854:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a0ffffffffffff; valaddr_reg:x3; val_offset:17562*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17562*0 + 3*478*FLEN/8, x4, x1, x2)

inst_5855:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a1ffffffffffff; valaddr_reg:x3; val_offset:17565*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17565*0 + 3*479*FLEN/8, x4, x1, x2)

inst_5856:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a3ffffffffffff; valaddr_reg:x3; val_offset:17568*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17568*0 + 3*480*FLEN/8, x4, x1, x2)

inst_5857:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a7ffffffffffff; valaddr_reg:x3; val_offset:17571*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17571*0 + 3*481*FLEN/8, x4, x1, x2)

inst_5858:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82a8000000000000; valaddr_reg:x3; val_offset:17574*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17574*0 + 3*482*FLEN/8, x4, x1, x2)

inst_5859:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82ac000000000000; valaddr_reg:x3; val_offset:17577*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17577*0 + 3*483*FLEN/8, x4, x1, x2)

inst_5860:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82ae000000000000; valaddr_reg:x3; val_offset:17580*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17580*0 + 3*484*FLEN/8, x4, x1, x2)

inst_5861:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82af000000000000; valaddr_reg:x3; val_offset:17583*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17583*0 + 3*485*FLEN/8, x4, x1, x2)

inst_5862:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82af800000000000; valaddr_reg:x3; val_offset:17586*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17586*0 + 3*486*FLEN/8, x4, x1, x2)

inst_5863:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afc00000000000; valaddr_reg:x3; val_offset:17589*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17589*0 + 3*487*FLEN/8, x4, x1, x2)

inst_5864:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afe00000000000; valaddr_reg:x3; val_offset:17592*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17592*0 + 3*488*FLEN/8, x4, x1, x2)

inst_5865:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82aff00000000000; valaddr_reg:x3; val_offset:17595*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17595*0 + 3*489*FLEN/8, x4, x1, x2)

inst_5866:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82aff80000000000; valaddr_reg:x3; val_offset:17598*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17598*0 + 3*490*FLEN/8, x4, x1, x2)

inst_5867:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affc0000000000; valaddr_reg:x3; val_offset:17601*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17601*0 + 3*491*FLEN/8, x4, x1, x2)

inst_5868:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affe0000000000; valaddr_reg:x3; val_offset:17604*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17604*0 + 3*492*FLEN/8, x4, x1, x2)

inst_5869:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afff0000000000; valaddr_reg:x3; val_offset:17607*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17607*0 + 3*493*FLEN/8, x4, x1, x2)

inst_5870:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afff8000000000; valaddr_reg:x3; val_offset:17610*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17610*0 + 3*494*FLEN/8, x4, x1, x2)

inst_5871:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffc000000000; valaddr_reg:x3; val_offset:17613*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17613*0 + 3*495*FLEN/8, x4, x1, x2)

inst_5872:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffe000000000; valaddr_reg:x3; val_offset:17616*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17616*0 + 3*496*FLEN/8, x4, x1, x2)

inst_5873:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affff000000000; valaddr_reg:x3; val_offset:17619*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17619*0 + 3*497*FLEN/8, x4, x1, x2)

inst_5874:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affff800000000; valaddr_reg:x3; val_offset:17622*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17622*0 + 3*498*FLEN/8, x4, x1, x2)

inst_5875:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffc00000000; valaddr_reg:x3; val_offset:17625*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17625*0 + 3*499*FLEN/8, x4, x1, x2)

inst_5876:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffe00000000; valaddr_reg:x3; val_offset:17628*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17628*0 + 3*500*FLEN/8, x4, x1, x2)

inst_5877:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffff00000000; valaddr_reg:x3; val_offset:17631*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17631*0 + 3*501*FLEN/8, x4, x1, x2)

inst_5878:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffff80000000; valaddr_reg:x3; val_offset:17634*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17634*0 + 3*502*FLEN/8, x4, x1, x2)

inst_5879:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffc0000000; valaddr_reg:x3; val_offset:17637*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17637*0 + 3*503*FLEN/8, x4, x1, x2)

inst_5880:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffe0000000; valaddr_reg:x3; val_offset:17640*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17640*0 + 3*504*FLEN/8, x4, x1, x2)

inst_5881:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffff0000000; valaddr_reg:x3; val_offset:17643*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17643*0 + 3*505*FLEN/8, x4, x1, x2)

inst_5882:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffff8000000; valaddr_reg:x3; val_offset:17646*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17646*0 + 3*506*FLEN/8, x4, x1, x2)

inst_5883:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffc000000; valaddr_reg:x3; val_offset:17649*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17649*0 + 3*507*FLEN/8, x4, x1, x2)

inst_5884:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffe000000; valaddr_reg:x3; val_offset:17652*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17652*0 + 3*508*FLEN/8, x4, x1, x2)

inst_5885:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffff000000; valaddr_reg:x3; val_offset:17655*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17655*0 + 3*509*FLEN/8, x4, x1, x2)

inst_5886:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffff800000; valaddr_reg:x3; val_offset:17658*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17658*0 + 3*510*FLEN/8, x4, x1, x2)

inst_5887:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffc00000; valaddr_reg:x3; val_offset:17661*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17661*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_5888:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffe00000; valaddr_reg:x3; val_offset:17664*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17664*0 + 3*512*FLEN/8, x4, x1, x2)

inst_5889:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffff00000; valaddr_reg:x3; val_offset:17667*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17667*0 + 3*513*FLEN/8, x4, x1, x2)

inst_5890:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffff80000; valaddr_reg:x3; val_offset:17670*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17670*0 + 3*514*FLEN/8, x4, x1, x2)

inst_5891:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffc0000; valaddr_reg:x3; val_offset:17673*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17673*0 + 3*515*FLEN/8, x4, x1, x2)

inst_5892:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffe0000; valaddr_reg:x3; val_offset:17676*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17676*0 + 3*516*FLEN/8, x4, x1, x2)

inst_5893:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffff0000; valaddr_reg:x3; val_offset:17679*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17679*0 + 3*517*FLEN/8, x4, x1, x2)

inst_5894:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffff8000; valaddr_reg:x3; val_offset:17682*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17682*0 + 3*518*FLEN/8, x4, x1, x2)

inst_5895:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffffc000; valaddr_reg:x3; val_offset:17685*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17685*0 + 3*519*FLEN/8, x4, x1, x2)

inst_5896:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffffe000; valaddr_reg:x3; val_offset:17688*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17688*0 + 3*520*FLEN/8, x4, x1, x2)

inst_5897:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffff000; valaddr_reg:x3; val_offset:17691*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17691*0 + 3*521*FLEN/8, x4, x1, x2)

inst_5898:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffff800; valaddr_reg:x3; val_offset:17694*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17694*0 + 3*522*FLEN/8, x4, x1, x2)

inst_5899:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffffc00; valaddr_reg:x3; val_offset:17697*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17697*0 + 3*523*FLEN/8, x4, x1, x2)

inst_5900:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffffe00; valaddr_reg:x3; val_offset:17700*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17700*0 + 3*524*FLEN/8, x4, x1, x2)

inst_5901:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffffff00; valaddr_reg:x3; val_offset:17703*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17703*0 + 3*525*FLEN/8, x4, x1, x2)

inst_5902:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffffff80; valaddr_reg:x3; val_offset:17706*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17706*0 + 3*526*FLEN/8, x4, x1, x2)

inst_5903:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffffffc0; valaddr_reg:x3; val_offset:17709*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17709*0 + 3*527*FLEN/8, x4, x1, x2)

inst_5904:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffffffe0; valaddr_reg:x3; val_offset:17712*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17712*0 + 3*528*FLEN/8, x4, x1, x2)

inst_5905:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffffff0; valaddr_reg:x3; val_offset:17715*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17715*0 + 3*529*FLEN/8, x4, x1, x2)

inst_5906:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffffff8; valaddr_reg:x3; val_offset:17718*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17718*0 + 3*530*FLEN/8, x4, x1, x2)

inst_5907:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffffffc; valaddr_reg:x3; val_offset:17721*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17721*0 + 3*531*FLEN/8, x4, x1, x2)

inst_5908:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82affffffffffffe; valaddr_reg:x3; val_offset:17724*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17724*0 + 3*532*FLEN/8, x4, x1, x2)

inst_5909:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x728eb744bb2ef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02a and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6728eb744bb2ef; op2val:0x8000;
op3val:0x82afffffffffffff; valaddr_reg:x3; val_offset:17727*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17727*0 + 3*533*FLEN/8, x4, x1, x2)

inst_5910:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:17730*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17730*0 + 3*534*FLEN/8, x4, x1, x2)

inst_5911:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:17733*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17733*0 + 3*535*FLEN/8, x4, x1, x2)

inst_5912:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:17736*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17736*0 + 3*536*FLEN/8, x4, x1, x2)

inst_5913:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:17739*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17739*0 + 3*537*FLEN/8, x4, x1, x2)

inst_5914:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:17742*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17742*0 + 3*538*FLEN/8, x4, x1, x2)

inst_5915:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:17745*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17745*0 + 3*539*FLEN/8, x4, x1, x2)

inst_5916:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:17748*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17748*0 + 3*540*FLEN/8, x4, x1, x2)

inst_5917:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:17751*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17751*0 + 3*541*FLEN/8, x4, x1, x2)

inst_5918:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:17754*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17754*0 + 3*542*FLEN/8, x4, x1, x2)

inst_5919:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:17757*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17757*0 + 3*543*FLEN/8, x4, x1, x2)

inst_5920:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:17760*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17760*0 + 3*544*FLEN/8, x4, x1, x2)

inst_5921:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:17763*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17763*0 + 3*545*FLEN/8, x4, x1, x2)

inst_5922:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:17766*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17766*0 + 3*546*FLEN/8, x4, x1, x2)

inst_5923:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:17769*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17769*0 + 3*547*FLEN/8, x4, x1, x2)

inst_5924:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:17772*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17772*0 + 3*548*FLEN/8, x4, x1, x2)

inst_5925:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:17775*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17775*0 + 3*549*FLEN/8, x4, x1, x2)

inst_5926:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:17778*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17778*0 + 3*550*FLEN/8, x4, x1, x2)

inst_5927:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:17781*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17781*0 + 3*551*FLEN/8, x4, x1, x2)

inst_5928:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:17784*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17784*0 + 3*552*FLEN/8, x4, x1, x2)

inst_5929:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:17787*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17787*0 + 3*553*FLEN/8, x4, x1, x2)

inst_5930:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:17790*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17790*0 + 3*554*FLEN/8, x4, x1, x2)

inst_5931:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:17793*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17793*0 + 3*555*FLEN/8, x4, x1, x2)

inst_5932:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000000000; valaddr_reg:x3; val_offset:17796*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17796*0 + 3*556*FLEN/8, x4, x1, x2)

inst_5933:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000000001; valaddr_reg:x3; val_offset:17799*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17799*0 + 3*557*FLEN/8, x4, x1, x2)

inst_5934:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000000003; valaddr_reg:x3; val_offset:17802*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17802*0 + 3*558*FLEN/8, x4, x1, x2)

inst_5935:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000000007; valaddr_reg:x3; val_offset:17805*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17805*0 + 3*559*FLEN/8, x4, x1, x2)

inst_5936:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000000000f; valaddr_reg:x3; val_offset:17808*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17808*0 + 3*560*FLEN/8, x4, x1, x2)

inst_5937:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000000001f; valaddr_reg:x3; val_offset:17811*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17811*0 + 3*561*FLEN/8, x4, x1, x2)

inst_5938:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000000003f; valaddr_reg:x3; val_offset:17814*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17814*0 + 3*562*FLEN/8, x4, x1, x2)

inst_5939:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000000007f; valaddr_reg:x3; val_offset:17817*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17817*0 + 3*563*FLEN/8, x4, x1, x2)

inst_5940:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000000000ff; valaddr_reg:x3; val_offset:17820*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17820*0 + 3*564*FLEN/8, x4, x1, x2)

inst_5941:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000000001ff; valaddr_reg:x3; val_offset:17823*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17823*0 + 3*565*FLEN/8, x4, x1, x2)

inst_5942:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000000003ff; valaddr_reg:x3; val_offset:17826*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17826*0 + 3*566*FLEN/8, x4, x1, x2)

inst_5943:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000000007ff; valaddr_reg:x3; val_offset:17829*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17829*0 + 3*567*FLEN/8, x4, x1, x2)

inst_5944:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000000fff; valaddr_reg:x3; val_offset:17832*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17832*0 + 3*568*FLEN/8, x4, x1, x2)

inst_5945:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000001fff; valaddr_reg:x3; val_offset:17835*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17835*0 + 3*569*FLEN/8, x4, x1, x2)

inst_5946:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000003fff; valaddr_reg:x3; val_offset:17838*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17838*0 + 3*570*FLEN/8, x4, x1, x2)

inst_5947:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000007fff; valaddr_reg:x3; val_offset:17841*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17841*0 + 3*571*FLEN/8, x4, x1, x2)

inst_5948:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000000ffff; valaddr_reg:x3; val_offset:17844*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17844*0 + 3*572*FLEN/8, x4, x1, x2)

inst_5949:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000001ffff; valaddr_reg:x3; val_offset:17847*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17847*0 + 3*573*FLEN/8, x4, x1, x2)

inst_5950:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000003ffff; valaddr_reg:x3; val_offset:17850*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17850*0 + 3*574*FLEN/8, x4, x1, x2)

inst_5951:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000007ffff; valaddr_reg:x3; val_offset:17853*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17853*0 + 3*575*FLEN/8, x4, x1, x2)

inst_5952:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000000fffff; valaddr_reg:x3; val_offset:17856*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17856*0 + 3*576*FLEN/8, x4, x1, x2)

inst_5953:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000001fffff; valaddr_reg:x3; val_offset:17859*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17859*0 + 3*577*FLEN/8, x4, x1, x2)

inst_5954:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000003fffff; valaddr_reg:x3; val_offset:17862*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17862*0 + 3*578*FLEN/8, x4, x1, x2)

inst_5955:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000007fffff; valaddr_reg:x3; val_offset:17865*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17865*0 + 3*579*FLEN/8, x4, x1, x2)

inst_5956:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000000ffffff; valaddr_reg:x3; val_offset:17868*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17868*0 + 3*580*FLEN/8, x4, x1, x2)

inst_5957:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000001ffffff; valaddr_reg:x3; val_offset:17871*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17871*0 + 3*581*FLEN/8, x4, x1, x2)

inst_5958:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000003ffffff; valaddr_reg:x3; val_offset:17874*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17874*0 + 3*582*FLEN/8, x4, x1, x2)

inst_5959:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000007ffffff; valaddr_reg:x3; val_offset:17877*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17877*0 + 3*583*FLEN/8, x4, x1, x2)

inst_5960:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000000fffffff; valaddr_reg:x3; val_offset:17880*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17880*0 + 3*584*FLEN/8, x4, x1, x2)

inst_5961:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000001fffffff; valaddr_reg:x3; val_offset:17883*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17883*0 + 3*585*FLEN/8, x4, x1, x2)

inst_5962:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000003fffffff; valaddr_reg:x3; val_offset:17886*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17886*0 + 3*586*FLEN/8, x4, x1, x2)

inst_5963:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000007fffffff; valaddr_reg:x3; val_offset:17889*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17889*0 + 3*587*FLEN/8, x4, x1, x2)

inst_5964:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00000ffffffff; valaddr_reg:x3; val_offset:17892*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17892*0 + 3*588*FLEN/8, x4, x1, x2)

inst_5965:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00001ffffffff; valaddr_reg:x3; val_offset:17895*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17895*0 + 3*589*FLEN/8, x4, x1, x2)

inst_5966:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00003ffffffff; valaddr_reg:x3; val_offset:17898*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17898*0 + 3*590*FLEN/8, x4, x1, x2)

inst_5967:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00007ffffffff; valaddr_reg:x3; val_offset:17901*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17901*0 + 3*591*FLEN/8, x4, x1, x2)

inst_5968:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0000fffffffff; valaddr_reg:x3; val_offset:17904*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17904*0 + 3*592*FLEN/8, x4, x1, x2)

inst_5969:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0001fffffffff; valaddr_reg:x3; val_offset:17907*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17907*0 + 3*593*FLEN/8, x4, x1, x2)

inst_5970:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0003fffffffff; valaddr_reg:x3; val_offset:17910*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17910*0 + 3*594*FLEN/8, x4, x1, x2)

inst_5971:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0007fffffffff; valaddr_reg:x3; val_offset:17913*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17913*0 + 3*595*FLEN/8, x4, x1, x2)

inst_5972:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c000ffffffffff; valaddr_reg:x3; val_offset:17916*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17916*0 + 3*596*FLEN/8, x4, x1, x2)

inst_5973:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c001ffffffffff; valaddr_reg:x3; val_offset:17919*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17919*0 + 3*597*FLEN/8, x4, x1, x2)

inst_5974:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c003ffffffffff; valaddr_reg:x3; val_offset:17922*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17922*0 + 3*598*FLEN/8, x4, x1, x2)

inst_5975:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c007ffffffffff; valaddr_reg:x3; val_offset:17925*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17925*0 + 3*599*FLEN/8, x4, x1, x2)

inst_5976:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c00fffffffffff; valaddr_reg:x3; val_offset:17928*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17928*0 + 3*600*FLEN/8, x4, x1, x2)

inst_5977:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c01fffffffffff; valaddr_reg:x3; val_offset:17931*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17931*0 + 3*601*FLEN/8, x4, x1, x2)

inst_5978:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c03fffffffffff; valaddr_reg:x3; val_offset:17934*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17934*0 + 3*602*FLEN/8, x4, x1, x2)

inst_5979:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c07fffffffffff; valaddr_reg:x3; val_offset:17937*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17937*0 + 3*603*FLEN/8, x4, x1, x2)

inst_5980:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c0ffffffffffff; valaddr_reg:x3; val_offset:17940*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17940*0 + 3*604*FLEN/8, x4, x1, x2)

inst_5981:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c1ffffffffffff; valaddr_reg:x3; val_offset:17943*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17943*0 + 3*605*FLEN/8, x4, x1, x2)

inst_5982:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c3ffffffffffff; valaddr_reg:x3; val_offset:17946*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17946*0 + 3*606*FLEN/8, x4, x1, x2)

inst_5983:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c7ffffffffffff; valaddr_reg:x3; val_offset:17949*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17949*0 + 3*607*FLEN/8, x4, x1, x2)

inst_5984:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80c8000000000000; valaddr_reg:x3; val_offset:17952*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17952*0 + 3*608*FLEN/8, x4, x1, x2)

inst_5985:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cc000000000000; valaddr_reg:x3; val_offset:17955*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17955*0 + 3*609*FLEN/8, x4, x1, x2)

inst_5986:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80ce000000000000; valaddr_reg:x3; val_offset:17958*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17958*0 + 3*610*FLEN/8, x4, x1, x2)

inst_5987:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cf000000000000; valaddr_reg:x3; val_offset:17961*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17961*0 + 3*611*FLEN/8, x4, x1, x2)

inst_5988:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cf800000000000; valaddr_reg:x3; val_offset:17964*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17964*0 + 3*612*FLEN/8, x4, x1, x2)

inst_5989:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfc00000000000; valaddr_reg:x3; val_offset:17967*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17967*0 + 3*613*FLEN/8, x4, x1, x2)

inst_5990:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfe00000000000; valaddr_reg:x3; val_offset:17970*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17970*0 + 3*614*FLEN/8, x4, x1, x2)

inst_5991:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cff00000000000; valaddr_reg:x3; val_offset:17973*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17973*0 + 3*615*FLEN/8, x4, x1, x2)

inst_5992:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cff80000000000; valaddr_reg:x3; val_offset:17976*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17976*0 + 3*616*FLEN/8, x4, x1, x2)

inst_5993:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffc0000000000; valaddr_reg:x3; val_offset:17979*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17979*0 + 3*617*FLEN/8, x4, x1, x2)

inst_5994:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffe0000000000; valaddr_reg:x3; val_offset:17982*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17982*0 + 3*618*FLEN/8, x4, x1, x2)

inst_5995:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfff0000000000; valaddr_reg:x3; val_offset:17985*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17985*0 + 3*619*FLEN/8, x4, x1, x2)

inst_5996:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfff8000000000; valaddr_reg:x3; val_offset:17988*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17988*0 + 3*620*FLEN/8, x4, x1, x2)

inst_5997:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffc000000000; valaddr_reg:x3; val_offset:17991*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17991*0 + 3*621*FLEN/8, x4, x1, x2)

inst_5998:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffe000000000; valaddr_reg:x3; val_offset:17994*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17994*0 + 3*622*FLEN/8, x4, x1, x2)

inst_5999:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffff000000000; valaddr_reg:x3; val_offset:17997*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 17997*0 + 3*623*FLEN/8, x4, x1, x2)

inst_6000:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffff800000000; valaddr_reg:x3; val_offset:18000*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18000*0 + 3*624*FLEN/8, x4, x1, x2)

inst_6001:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffc00000000; valaddr_reg:x3; val_offset:18003*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18003*0 + 3*625*FLEN/8, x4, x1, x2)

inst_6002:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffe00000000; valaddr_reg:x3; val_offset:18006*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18006*0 + 3*626*FLEN/8, x4, x1, x2)

inst_6003:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffff00000000; valaddr_reg:x3; val_offset:18009*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18009*0 + 3*627*FLEN/8, x4, x1, x2)

inst_6004:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffff80000000; valaddr_reg:x3; val_offset:18012*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18012*0 + 3*628*FLEN/8, x4, x1, x2)

inst_6005:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffc0000000; valaddr_reg:x3; val_offset:18015*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18015*0 + 3*629*FLEN/8, x4, x1, x2)

inst_6006:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffe0000000; valaddr_reg:x3; val_offset:18018*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18018*0 + 3*630*FLEN/8, x4, x1, x2)

inst_6007:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffff0000000; valaddr_reg:x3; val_offset:18021*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18021*0 + 3*631*FLEN/8, x4, x1, x2)

inst_6008:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffff8000000; valaddr_reg:x3; val_offset:18024*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18024*0 + 3*632*FLEN/8, x4, x1, x2)

inst_6009:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffc000000; valaddr_reg:x3; val_offset:18027*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18027*0 + 3*633*FLEN/8, x4, x1, x2)

inst_6010:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffe000000; valaddr_reg:x3; val_offset:18030*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18030*0 + 3*634*FLEN/8, x4, x1, x2)

inst_6011:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffff000000; valaddr_reg:x3; val_offset:18033*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18033*0 + 3*635*FLEN/8, x4, x1, x2)

inst_6012:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffff800000; valaddr_reg:x3; val_offset:18036*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18036*0 + 3*636*FLEN/8, x4, x1, x2)

inst_6013:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffc00000; valaddr_reg:x3; val_offset:18039*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18039*0 + 3*637*FLEN/8, x4, x1, x2)

inst_6014:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffe00000; valaddr_reg:x3; val_offset:18042*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18042*0 + 3*638*FLEN/8, x4, x1, x2)

inst_6015:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffff00000; valaddr_reg:x3; val_offset:18045*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18045*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_6016:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffff80000; valaddr_reg:x3; val_offset:18048*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18048*0 + 3*640*FLEN/8, x4, x1, x2)

inst_6017:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffc0000; valaddr_reg:x3; val_offset:18051*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18051*0 + 3*641*FLEN/8, x4, x1, x2)

inst_6018:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffe0000; valaddr_reg:x3; val_offset:18054*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18054*0 + 3*642*FLEN/8, x4, x1, x2)

inst_6019:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffff0000; valaddr_reg:x3; val_offset:18057*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18057*0 + 3*643*FLEN/8, x4, x1, x2)

inst_6020:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffff8000; valaddr_reg:x3; val_offset:18060*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18060*0 + 3*644*FLEN/8, x4, x1, x2)

inst_6021:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffffc000; valaddr_reg:x3; val_offset:18063*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18063*0 + 3*645*FLEN/8, x4, x1, x2)

inst_6022:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffffe000; valaddr_reg:x3; val_offset:18066*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18066*0 + 3*646*FLEN/8, x4, x1, x2)

inst_6023:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffff000; valaddr_reg:x3; val_offset:18069*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18069*0 + 3*647*FLEN/8, x4, x1, x2)

inst_6024:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffff800; valaddr_reg:x3; val_offset:18072*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18072*0 + 3*648*FLEN/8, x4, x1, x2)

inst_6025:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffffc00; valaddr_reg:x3; val_offset:18075*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18075*0 + 3*649*FLEN/8, x4, x1, x2)

inst_6026:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffffe00; valaddr_reg:x3; val_offset:18078*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18078*0 + 3*650*FLEN/8, x4, x1, x2)

inst_6027:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffffff00; valaddr_reg:x3; val_offset:18081*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18081*0 + 3*651*FLEN/8, x4, x1, x2)

inst_6028:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffffff80; valaddr_reg:x3; val_offset:18084*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18084*0 + 3*652*FLEN/8, x4, x1, x2)

inst_6029:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffffffc0; valaddr_reg:x3; val_offset:18087*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18087*0 + 3*653*FLEN/8, x4, x1, x2)

inst_6030:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffffffe0; valaddr_reg:x3; val_offset:18090*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18090*0 + 3*654*FLEN/8, x4, x1, x2)

inst_6031:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffffff0; valaddr_reg:x3; val_offset:18093*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18093*0 + 3*655*FLEN/8, x4, x1, x2)

inst_6032:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffffff8; valaddr_reg:x3; val_offset:18096*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18096*0 + 3*656*FLEN/8, x4, x1, x2)

inst_6033:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffffffc; valaddr_reg:x3; val_offset:18099*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18099*0 + 3*657*FLEN/8, x4, x1, x2)

inst_6034:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cffffffffffffe; valaddr_reg:x3; val_offset:18102*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18102*0 + 3*658*FLEN/8, x4, x1, x2)

inst_6035:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x84dcbbab28dff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f684dcbbab28dff; op2val:0x8000;
op3val:0x80cfffffffffffff; valaddr_reg:x3; val_offset:18105*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18105*0 + 3*659*FLEN/8, x4, x1, x2)

inst_6036:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000000000; valaddr_reg:x3; val_offset:18108*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18108*0 + 3*660*FLEN/8, x4, x1, x2)

inst_6037:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000000001; valaddr_reg:x3; val_offset:18111*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18111*0 + 3*661*FLEN/8, x4, x1, x2)

inst_6038:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000000003; valaddr_reg:x3; val_offset:18114*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18114*0 + 3*662*FLEN/8, x4, x1, x2)

inst_6039:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000000007; valaddr_reg:x3; val_offset:18117*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18117*0 + 3*663*FLEN/8, x4, x1, x2)

inst_6040:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000000000f; valaddr_reg:x3; val_offset:18120*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18120*0 + 3*664*FLEN/8, x4, x1, x2)

inst_6041:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000000001f; valaddr_reg:x3; val_offset:18123*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18123*0 + 3*665*FLEN/8, x4, x1, x2)

inst_6042:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000000003f; valaddr_reg:x3; val_offset:18126*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18126*0 + 3*666*FLEN/8, x4, x1, x2)

inst_6043:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000000007f; valaddr_reg:x3; val_offset:18129*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18129*0 + 3*667*FLEN/8, x4, x1, x2)

inst_6044:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000000000ff; valaddr_reg:x3; val_offset:18132*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18132*0 + 3*668*FLEN/8, x4, x1, x2)

inst_6045:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000000001ff; valaddr_reg:x3; val_offset:18135*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18135*0 + 3*669*FLEN/8, x4, x1, x2)

inst_6046:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000000003ff; valaddr_reg:x3; val_offset:18138*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18138*0 + 3*670*FLEN/8, x4, x1, x2)

inst_6047:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000000007ff; valaddr_reg:x3; val_offset:18141*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18141*0 + 3*671*FLEN/8, x4, x1, x2)

inst_6048:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000000fff; valaddr_reg:x3; val_offset:18144*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18144*0 + 3*672*FLEN/8, x4, x1, x2)

inst_6049:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000001fff; valaddr_reg:x3; val_offset:18147*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18147*0 + 3*673*FLEN/8, x4, x1, x2)

inst_6050:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000003fff; valaddr_reg:x3; val_offset:18150*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18150*0 + 3*674*FLEN/8, x4, x1, x2)

inst_6051:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000007fff; valaddr_reg:x3; val_offset:18153*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18153*0 + 3*675*FLEN/8, x4, x1, x2)

inst_6052:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000000ffff; valaddr_reg:x3; val_offset:18156*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18156*0 + 3*676*FLEN/8, x4, x1, x2)

inst_6053:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000001ffff; valaddr_reg:x3; val_offset:18159*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18159*0 + 3*677*FLEN/8, x4, x1, x2)

inst_6054:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000003ffff; valaddr_reg:x3; val_offset:18162*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18162*0 + 3*678*FLEN/8, x4, x1, x2)

inst_6055:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000007ffff; valaddr_reg:x3; val_offset:18165*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18165*0 + 3*679*FLEN/8, x4, x1, x2)

inst_6056:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000000fffff; valaddr_reg:x3; val_offset:18168*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18168*0 + 3*680*FLEN/8, x4, x1, x2)

inst_6057:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000001fffff; valaddr_reg:x3; val_offset:18171*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18171*0 + 3*681*FLEN/8, x4, x1, x2)

inst_6058:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000003fffff; valaddr_reg:x3; val_offset:18174*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18174*0 + 3*682*FLEN/8, x4, x1, x2)

inst_6059:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000007fffff; valaddr_reg:x3; val_offset:18177*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18177*0 + 3*683*FLEN/8, x4, x1, x2)

inst_6060:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000000ffffff; valaddr_reg:x3; val_offset:18180*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18180*0 + 3*684*FLEN/8, x4, x1, x2)

inst_6061:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000001ffffff; valaddr_reg:x3; val_offset:18183*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18183*0 + 3*685*FLEN/8, x4, x1, x2)

inst_6062:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000003ffffff; valaddr_reg:x3; val_offset:18186*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18186*0 + 3*686*FLEN/8, x4, x1, x2)

inst_6063:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000007ffffff; valaddr_reg:x3; val_offset:18189*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18189*0 + 3*687*FLEN/8, x4, x1, x2)

inst_6064:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000000fffffff; valaddr_reg:x3; val_offset:18192*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18192*0 + 3*688*FLEN/8, x4, x1, x2)

inst_6065:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000001fffffff; valaddr_reg:x3; val_offset:18195*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18195*0 + 3*689*FLEN/8, x4, x1, x2)

inst_6066:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000003fffffff; valaddr_reg:x3; val_offset:18198*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18198*0 + 3*690*FLEN/8, x4, x1, x2)

inst_6067:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000007fffffff; valaddr_reg:x3; val_offset:18201*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18201*0 + 3*691*FLEN/8, x4, x1, x2)

inst_6068:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400000ffffffff; valaddr_reg:x3; val_offset:18204*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18204*0 + 3*692*FLEN/8, x4, x1, x2)

inst_6069:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400001ffffffff; valaddr_reg:x3; val_offset:18207*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18207*0 + 3*693*FLEN/8, x4, x1, x2)

inst_6070:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400003ffffffff; valaddr_reg:x3; val_offset:18210*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18210*0 + 3*694*FLEN/8, x4, x1, x2)

inst_6071:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400007ffffffff; valaddr_reg:x3; val_offset:18213*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18213*0 + 3*695*FLEN/8, x4, x1, x2)

inst_6072:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840000fffffffff; valaddr_reg:x3; val_offset:18216*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18216*0 + 3*696*FLEN/8, x4, x1, x2)

inst_6073:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840001fffffffff; valaddr_reg:x3; val_offset:18219*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18219*0 + 3*697*FLEN/8, x4, x1, x2)

inst_6074:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840003fffffffff; valaddr_reg:x3; val_offset:18222*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18222*0 + 3*698*FLEN/8, x4, x1, x2)

inst_6075:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840007fffffffff; valaddr_reg:x3; val_offset:18225*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18225*0 + 3*699*FLEN/8, x4, x1, x2)

inst_6076:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84000ffffffffff; valaddr_reg:x3; val_offset:18228*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18228*0 + 3*700*FLEN/8, x4, x1, x2)

inst_6077:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84001ffffffffff; valaddr_reg:x3; val_offset:18231*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18231*0 + 3*701*FLEN/8, x4, x1, x2)

inst_6078:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84003ffffffffff; valaddr_reg:x3; val_offset:18234*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18234*0 + 3*702*FLEN/8, x4, x1, x2)

inst_6079:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84007ffffffffff; valaddr_reg:x3; val_offset:18237*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18237*0 + 3*703*FLEN/8, x4, x1, x2)

inst_6080:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8400fffffffffff; valaddr_reg:x3; val_offset:18240*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18240*0 + 3*704*FLEN/8, x4, x1, x2)

inst_6081:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8401fffffffffff; valaddr_reg:x3; val_offset:18243*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18243*0 + 3*705*FLEN/8, x4, x1, x2)

inst_6082:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8403fffffffffff; valaddr_reg:x3; val_offset:18246*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18246*0 + 3*706*FLEN/8, x4, x1, x2)

inst_6083:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb8407fffffffffff; valaddr_reg:x3; val_offset:18249*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18249*0 + 3*707*FLEN/8, x4, x1, x2)

inst_6084:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb840ffffffffffff; valaddr_reg:x3; val_offset:18252*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18252*0 + 3*708*FLEN/8, x4, x1, x2)

inst_6085:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb841ffffffffffff; valaddr_reg:x3; val_offset:18255*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18255*0 + 3*709*FLEN/8, x4, x1, x2)

inst_6086:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb843ffffffffffff; valaddr_reg:x3; val_offset:18258*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18258*0 + 3*710*FLEN/8, x4, x1, x2)

inst_6087:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb847ffffffffffff; valaddr_reg:x3; val_offset:18261*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18261*0 + 3*711*FLEN/8, x4, x1, x2)

inst_6088:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb848000000000000; valaddr_reg:x3; val_offset:18264*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18264*0 + 3*712*FLEN/8, x4, x1, x2)

inst_6089:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84c000000000000; valaddr_reg:x3; val_offset:18267*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18267*0 + 3*713*FLEN/8, x4, x1, x2)

inst_6090:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84e000000000000; valaddr_reg:x3; val_offset:18270*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18270*0 + 3*714*FLEN/8, x4, x1, x2)

inst_6091:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84f000000000000; valaddr_reg:x3; val_offset:18273*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18273*0 + 3*715*FLEN/8, x4, x1, x2)

inst_6092:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84f800000000000; valaddr_reg:x3; val_offset:18276*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18276*0 + 3*716*FLEN/8, x4, x1, x2)

inst_6093:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fc00000000000; valaddr_reg:x3; val_offset:18279*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18279*0 + 3*717*FLEN/8, x4, x1, x2)

inst_6094:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fe00000000000; valaddr_reg:x3; val_offset:18282*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18282*0 + 3*718*FLEN/8, x4, x1, x2)

inst_6095:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ff00000000000; valaddr_reg:x3; val_offset:18285*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18285*0 + 3*719*FLEN/8, x4, x1, x2)

inst_6096:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ff80000000000; valaddr_reg:x3; val_offset:18288*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18288*0 + 3*720*FLEN/8, x4, x1, x2)

inst_6097:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffc0000000000; valaddr_reg:x3; val_offset:18291*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18291*0 + 3*721*FLEN/8, x4, x1, x2)

inst_6098:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffe0000000000; valaddr_reg:x3; val_offset:18294*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18294*0 + 3*722*FLEN/8, x4, x1, x2)

inst_6099:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fff0000000000; valaddr_reg:x3; val_offset:18297*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18297*0 + 3*723*FLEN/8, x4, x1, x2)

inst_6100:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fff8000000000; valaddr_reg:x3; val_offset:18300*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18300*0 + 3*724*FLEN/8, x4, x1, x2)

inst_6101:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffc000000000; valaddr_reg:x3; val_offset:18303*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18303*0 + 3*725*FLEN/8, x4, x1, x2)

inst_6102:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffe000000000; valaddr_reg:x3; val_offset:18306*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18306*0 + 3*726*FLEN/8, x4, x1, x2)

inst_6103:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffff000000000; valaddr_reg:x3; val_offset:18309*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18309*0 + 3*727*FLEN/8, x4, x1, x2)

inst_6104:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffff800000000; valaddr_reg:x3; val_offset:18312*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18312*0 + 3*728*FLEN/8, x4, x1, x2)

inst_6105:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffc00000000; valaddr_reg:x3; val_offset:18315*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18315*0 + 3*729*FLEN/8, x4, x1, x2)

inst_6106:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffe00000000; valaddr_reg:x3; val_offset:18318*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18318*0 + 3*730*FLEN/8, x4, x1, x2)

inst_6107:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffff00000000; valaddr_reg:x3; val_offset:18321*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18321*0 + 3*731*FLEN/8, x4, x1, x2)

inst_6108:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffff80000000; valaddr_reg:x3; val_offset:18324*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18324*0 + 3*732*FLEN/8, x4, x1, x2)

inst_6109:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffc0000000; valaddr_reg:x3; val_offset:18327*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18327*0 + 3*733*FLEN/8, x4, x1, x2)

inst_6110:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffe0000000; valaddr_reg:x3; val_offset:18330*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18330*0 + 3*734*FLEN/8, x4, x1, x2)

inst_6111:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffff0000000; valaddr_reg:x3; val_offset:18333*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18333*0 + 3*735*FLEN/8, x4, x1, x2)

inst_6112:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffff8000000; valaddr_reg:x3; val_offset:18336*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18336*0 + 3*736*FLEN/8, x4, x1, x2)

inst_6113:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffc000000; valaddr_reg:x3; val_offset:18339*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18339*0 + 3*737*FLEN/8, x4, x1, x2)

inst_6114:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffe000000; valaddr_reg:x3; val_offset:18342*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18342*0 + 3*738*FLEN/8, x4, x1, x2)

inst_6115:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffff000000; valaddr_reg:x3; val_offset:18345*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18345*0 + 3*739*FLEN/8, x4, x1, x2)

inst_6116:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffff800000; valaddr_reg:x3; val_offset:18348*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18348*0 + 3*740*FLEN/8, x4, x1, x2)

inst_6117:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffc00000; valaddr_reg:x3; val_offset:18351*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18351*0 + 3*741*FLEN/8, x4, x1, x2)

inst_6118:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffe00000; valaddr_reg:x3; val_offset:18354*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18354*0 + 3*742*FLEN/8, x4, x1, x2)

inst_6119:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffff00000; valaddr_reg:x3; val_offset:18357*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18357*0 + 3*743*FLEN/8, x4, x1, x2)

inst_6120:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffff80000; valaddr_reg:x3; val_offset:18360*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18360*0 + 3*744*FLEN/8, x4, x1, x2)

inst_6121:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffc0000; valaddr_reg:x3; val_offset:18363*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18363*0 + 3*745*FLEN/8, x4, x1, x2)

inst_6122:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffe0000; valaddr_reg:x3; val_offset:18366*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18366*0 + 3*746*FLEN/8, x4, x1, x2)

inst_6123:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffff0000; valaddr_reg:x3; val_offset:18369*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18369*0 + 3*747*FLEN/8, x4, x1, x2)

inst_6124:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffff8000; valaddr_reg:x3; val_offset:18372*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18372*0 + 3*748*FLEN/8, x4, x1, x2)

inst_6125:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffffc000; valaddr_reg:x3; val_offset:18375*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18375*0 + 3*749*FLEN/8, x4, x1, x2)

inst_6126:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffffe000; valaddr_reg:x3; val_offset:18378*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18378*0 + 3*750*FLEN/8, x4, x1, x2)

inst_6127:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffff000; valaddr_reg:x3; val_offset:18381*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18381*0 + 3*751*FLEN/8, x4, x1, x2)

inst_6128:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffff800; valaddr_reg:x3; val_offset:18384*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18384*0 + 3*752*FLEN/8, x4, x1, x2)

inst_6129:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffffc00; valaddr_reg:x3; val_offset:18387*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18387*0 + 3*753*FLEN/8, x4, x1, x2)

inst_6130:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffffe00; valaddr_reg:x3; val_offset:18390*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18390*0 + 3*754*FLEN/8, x4, x1, x2)

inst_6131:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffffff00; valaddr_reg:x3; val_offset:18393*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18393*0 + 3*755*FLEN/8, x4, x1, x2)

inst_6132:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffffff80; valaddr_reg:x3; val_offset:18396*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18396*0 + 3*756*FLEN/8, x4, x1, x2)

inst_6133:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffffffc0; valaddr_reg:x3; val_offset:18399*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18399*0 + 3*757*FLEN/8, x4, x1, x2)

inst_6134:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffffffe0; valaddr_reg:x3; val_offset:18402*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18402*0 + 3*758*FLEN/8, x4, x1, x2)

inst_6135:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffffff0; valaddr_reg:x3; val_offset:18405*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18405*0 + 3*759*FLEN/8, x4, x1, x2)

inst_6136:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffffff8; valaddr_reg:x3; val_offset:18408*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18408*0 + 3*760*FLEN/8, x4, x1, x2)

inst_6137:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffffffc; valaddr_reg:x3; val_offset:18411*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18411*0 + 3*761*FLEN/8, x4, x1, x2)

inst_6138:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84ffffffffffffe; valaddr_reg:x3; val_offset:18414*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18414*0 + 3*762*FLEN/8, x4, x1, x2)

inst_6139:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x384 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xb84fffffffffffff; valaddr_reg:x3; val_offset:18417*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18417*0 + 3*763*FLEN/8, x4, x1, x2)

inst_6140:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:18420*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18420*0 + 3*764*FLEN/8, x4, x1, x2)

inst_6141:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:18423*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18423*0 + 3*765*FLEN/8, x4, x1, x2)

inst_6142:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:18426*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18426*0 + 3*766*FLEN/8, x4, x1, x2)

inst_6143:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x8b50ed3b44d4f and fs2 == 1 and fe2 == 0x200 and fm2 == 0x4b8fffd5dbb27 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f68b50ed3b44d4f; op2val:0xa004b8fffd5dbb27;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:18429*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 18429*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13510798882111487872,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13510798882111487936,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13510798882111487968,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13510798882111487984,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13510798882111487992,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13510798882111487996,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13510798882111487998,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13510798882111487999,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6874056886938731231,64,FLEN)
NAN_BOXED(11531397086116828334,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5404319552844595,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5790342378047780,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6305039478318694,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6433713753386422,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6605279453476727,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6905519428634760,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931328,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931329,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931331,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931335,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931343,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931359,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931391,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931455,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931583,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976931839,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976932351,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976933375,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976935423,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976939519,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976947711,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976964095,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783976996863,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977062399,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977193471,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977455615,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783977979903,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783979028479,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783981125631,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783985319935,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654783993708543,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784010485759,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784044040191,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784111149055,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784245366783,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654784513802239,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654785050673151,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654786124414975,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654788271898623,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654792566865919,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654801156800511,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654818336669695,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654852696408063,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193654921415884799,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655058854838271,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655333732745215,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193655883488559103,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193656983000186879,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193659182023442431,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193663580069953535,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193672376162975743,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193689968349020159,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193725152721108991,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193795521465286655,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(193936258953641983,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(194217733930352639,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(194780683883773951,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(195906583790616575,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(195906583790616576,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197032483697459200,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197595433650880512,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(197876908627591168,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198017646115946496,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198088014860124160,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198123199232212992,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198140791418257408,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198149587511279616,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198153985557790720,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198156184581046272,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198157284092674048,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198157833848487936,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158108726394880,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158246165348352,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158314884825088,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158349244563456,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158366424432640,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158375014367232,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158379309334528,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158381456818176,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158382530560000,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383067430912,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383335866368,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383470084096,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383537192960,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383570747392,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383587524608,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383595913216,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383600107520,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383602204672,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383603253248,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383603777536,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604039680,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604170752,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604236288,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604269056,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604285440,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604293632,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604297728,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604299776,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604300800,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301312,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301568,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301696,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301760,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301792,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301808,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301816,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301820,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301822,64,FLEN)
NAN_BOXED(6874076153138494703,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(198158383604301823,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348480,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348481,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348483,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348487,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348495,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348511,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348543,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348607,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348735,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507348991,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507349503,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507350527,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507352575,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507356671,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507364863,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507381247,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507414015,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507479551,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507610623,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625507872767,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625508397055,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625509445631,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625511542783,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625515737087,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625524125695,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625540902911,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625574457343,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625641566207,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117625775783935,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117626044219391,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117626581090303,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117627654832127,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117629802315775,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117634097283071,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117642687217663,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117659867086847,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117694226825215,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117762946301951,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526117900385255423,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526118175263162367,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526118725018976255,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526119824530604031,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526122023553859583,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526126421600370687,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526135217693392895,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526152809879437311,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526187994251526143,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526258362995703807,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526399100484059135,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4526680575460769791,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4527243525414191103,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4528369425321033727,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4528369425321033728,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4529495325227876352,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530058275181297664,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530339750158008320,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530480487646363648,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530550856390541312,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530586040762630144,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530603632948674560,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530612429041696768,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530616827088207872,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530619026111463424,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530620125623091200,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530620675378905088,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530620950256812032,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621087695765504,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621156415242240,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621190774980608,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621207954849792,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621216544784384,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621220839751680,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621222987235328,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621224060977152,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621224597848064,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621224866283520,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225000501248,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225067610112,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225101164544,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225117941760,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225126330368,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225130524672,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225132621824,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225133670400,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134194688,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134456832,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134587904,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134653440,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134686208,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134702592,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134710784,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134714880,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134716928,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134717952,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718464,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718720,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718848,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718912,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718944,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718960,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718968,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718972,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718974,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4530621225134718975,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6874085158607796767,64,FLEN)
NAN_BOXED(2339519238999185236,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369280,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369281,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369283,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369287,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369295,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369311,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369343,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369407,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369535,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246369791,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246370303,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246371327,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246373375,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246377471,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246385663,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246402047,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246434815,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246500351,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246631423,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234246893567,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234247417855,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234248466431,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234250563583,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234254757887,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234263146495,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234279923711,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234313478143,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234380587007,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234514804735,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897234783240191,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897235320111103,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897236393852927,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897238541336575,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897242836303871,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897251426238463,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897268606107647,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897302965846015,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897371685322751,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897509124276223,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254897784002183167,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254898333757997055,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254899433269624831,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254901632292880383,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254906030339391487,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254914826432413695,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254932418618458111,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9254967602990546943,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9255037971734724607,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9255178709223079935,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9255460184199790591,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9256023134153211903,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9257149034060054527,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9257149034060054528,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9258274933966897152,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9258837883920318464,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259119358897029120,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259260096385384448,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259330465129562112,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259365649501650944,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259383241687695360,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259392037780717568,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259396435827228672,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259398634850484224,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259399734362112000,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400284117925888,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400558995832832,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400696434786304,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400765154263040,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400799514001408,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400816693870592,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400825283805184,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400829578772480,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400831726256128,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400832799997952,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833336868864,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833605304320,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833739522048,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833806630912,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833840185344,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833856962560,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833865351168,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833869545472,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833871642624,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833872691200,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873215488,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873477632,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873608704,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873674240,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873707008,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873723392,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873731584,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873735680,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873737728,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873738752,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739264,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739520,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739648,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739712,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739744,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739760,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739768,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739772,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739774,64,FLEN)
NAN_BOXED(6874402975734986703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9259400833873739775,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336640,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336641,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336643,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336647,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336655,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336671,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336703,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336767,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336895,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204337151,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204337663,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204338687,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204340735,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204344831,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204353023,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204369407,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204402175,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204467711,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204598783,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204860927,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221205385215,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221206433791,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221208530943,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221212725247,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221221113855,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221237891071,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221271445503,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221338554367,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221472772095,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221741207551,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523222278078463,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523223351820287,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523225499303935,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523229794271231,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523238384205823,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523255564075007,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523289923813375,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523358643290111,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523496082243583,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523770960150527,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412524320715964415,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412525420227592191,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412527619250847743,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412532017297358847,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412540813390381055,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412558405576425471,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412593589948514303,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412663958692691967,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412804696181047295,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9413086171157757951,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9413649121111179263,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9414775021018021887,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9414775021018021888,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9415900920924864512,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9416463870878285824,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9416745345854996480,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9416886083343351808,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9416956452087529472,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9416991636459618304,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417009228645662720,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417018024738684928,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417022422785196032,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417024621808451584,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417025721320079360,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026271075893248,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026545953800192,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026683392753664,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026752112230400,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026786471968768,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026803651837952,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026812241772544,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026816536739840,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026818684223488,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026819757965312,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820294836224,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820563271680,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820697489408,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820764598272,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820798152704,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820814929920,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820823318528,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820827512832,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820829609984,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820830658560,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831182848,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831444992,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831576064,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831641600,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831674368,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831690752,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831698944,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831703040,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831705088,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831706112,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831706624,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831706880,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707008,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707072,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707104,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707120,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707128,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707132,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707134,64,FLEN)
NAN_BOXED(6874508347937895151,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9417026820831707135,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221760,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221761,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221763,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221767,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221775,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221791,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221823,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221887,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383222015,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383222271,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383222783,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383223807,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383225855,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383229951,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383238143,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383254527,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383287295,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383352831,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383483903,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383746047,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232384270335,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232385318911,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232387416063,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232391610367,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232399998975,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232416776191,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232450330623,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232517439487,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232651657215,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232920092671,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415233456963583,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415234530705407,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415236678189055,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415240973156351,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415249563090943,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415266742960127,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415301102698495,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415369822175231,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415507261128703,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415782139035647,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277416331894849535,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277417431406477311,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277419630429732863,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277424028476243967,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277432824569266175,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277450416755310591,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277485601127399423,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277555969871577087,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277696707359932415,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277978182336643071,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9278541132290064383,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9279667032196907007,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9279667032196907008,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9280792932103749632,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281355882057170944,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281637357033881600,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281778094522236928,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281848463266414592,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281883647638503424,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281901239824547840,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281910035917570048,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281914433964081152,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281916632987336704,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281917732498964480,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918282254778368,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918557132685312,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918694571638784,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918763291115520,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918797650853888,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918814830723072,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918823420657664,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918827715624960,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918829863108608,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918830936850432,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831473721344,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831742156800,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831876374528,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831943483392,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831977037824,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918831993815040,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832002203648,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832006397952,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832008495104,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832009543680,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010067968,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010330112,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010461184,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010526720,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010559488,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010575872,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010584064,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010588160,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010590208,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010591232,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010591744,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592000,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592128,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592192,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592224,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592240,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592248,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592252,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592254,64,FLEN)
NAN_BOXED(6874830368587025919,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592255,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222208,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222209,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222211,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222215,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222223,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222239,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222271,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222335,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222463,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488222719,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488223231,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488224255,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488226303,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488230399,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488238591,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488254975,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488287743,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488353279,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488484351,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701488746495,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701489270783,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701490319359,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701492416511,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701496610815,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701504999423,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701521776639,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701555331071,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701622439935,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611701756657663,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611702025093119,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611702561964031,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611703635705855,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611705783189503,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611710078156799,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611718668091391,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611735847960575,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611770207698943,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611838927175679,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276611976366129151,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276612251244036095,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276612800999849983,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276613900511477759,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276616099534733311,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276620497581244415,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276629293674266623,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276646885860311039,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276682070232399871,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276752438976577535,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13276893176464932863,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13277174651441643519,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13277737601395064831,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13278863501301907455,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13278863501301907456,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13279989401208750080,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13280552351162171392,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13280833826138882048,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13280974563627237376,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281044932371415040,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281080116743503872,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281097708929548288,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281106505022570496,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281110903069081600,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281113102092337152,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281114201603964928,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281114751359778816,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115026237685760,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115163676639232,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115232396115968,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115266755854336,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115283935723520,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115292525658112,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115296820625408,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115298968109056,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115300041850880,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115300578721792,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115300847157248,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115300981374976,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301048483840,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301082038272,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301098815488,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301107204096,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301111398400,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301113495552,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301114544128,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115068416,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115330560,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115461632,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115527168,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115559936,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115576320,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115584512,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115588608,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115590656,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115591680,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592192,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592448,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592576,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592640,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592672,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592688,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592696,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592700,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592702,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13281115301115592703,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6874943906467040591,64,FLEN)
NAN_BOXED(11530544355582262055,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
