
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25344:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x3200000ffffffff; valaddr_reg:x3; val_offset:76032*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76032*0 + 3*0*FLEN/8, x4, x1, x2)

inst_25345:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x3200001ffffffff; valaddr_reg:x3; val_offset:76035*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76035*0 + 3*1*FLEN/8, x4, x1, x2)

inst_25346:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x3200003ffffffff; valaddr_reg:x3; val_offset:76038*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76038*0 + 3*2*FLEN/8, x4, x1, x2)

inst_25347:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x3200007ffffffff; valaddr_reg:x3; val_offset:76041*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76041*0 + 3*3*FLEN/8, x4, x1, x2)

inst_25348:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x320000fffffffff; valaddr_reg:x3; val_offset:76044*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76044*0 + 3*4*FLEN/8, x4, x1, x2)

inst_25349:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x320001fffffffff; valaddr_reg:x3; val_offset:76047*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76047*0 + 3*5*FLEN/8, x4, x1, x2)

inst_25350:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x320003fffffffff; valaddr_reg:x3; val_offset:76050*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76050*0 + 3*6*FLEN/8, x4, x1, x2)

inst_25351:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x320007fffffffff; valaddr_reg:x3; val_offset:76053*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76053*0 + 3*7*FLEN/8, x4, x1, x2)

inst_25352:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32000ffffffffff; valaddr_reg:x3; val_offset:76056*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76056*0 + 3*8*FLEN/8, x4, x1, x2)

inst_25353:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32001ffffffffff; valaddr_reg:x3; val_offset:76059*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76059*0 + 3*9*FLEN/8, x4, x1, x2)

inst_25354:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32003ffffffffff; valaddr_reg:x3; val_offset:76062*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76062*0 + 3*10*FLEN/8, x4, x1, x2)

inst_25355:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32007ffffffffff; valaddr_reg:x3; val_offset:76065*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76065*0 + 3*11*FLEN/8, x4, x1, x2)

inst_25356:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x3200fffffffffff; valaddr_reg:x3; val_offset:76068*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76068*0 + 3*12*FLEN/8, x4, x1, x2)

inst_25357:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x3201fffffffffff; valaddr_reg:x3; val_offset:76071*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76071*0 + 3*13*FLEN/8, x4, x1, x2)

inst_25358:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x3203fffffffffff; valaddr_reg:x3; val_offset:76074*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76074*0 + 3*14*FLEN/8, x4, x1, x2)

inst_25359:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x3207fffffffffff; valaddr_reg:x3; val_offset:76077*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76077*0 + 3*15*FLEN/8, x4, x1, x2)

inst_25360:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x320ffffffffffff; valaddr_reg:x3; val_offset:76080*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76080*0 + 3*16*FLEN/8, x4, x1, x2)

inst_25361:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x321ffffffffffff; valaddr_reg:x3; val_offset:76083*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76083*0 + 3*17*FLEN/8, x4, x1, x2)

inst_25362:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x323ffffffffffff; valaddr_reg:x3; val_offset:76086*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76086*0 + 3*18*FLEN/8, x4, x1, x2)

inst_25363:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x327ffffffffffff; valaddr_reg:x3; val_offset:76089*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76089*0 + 3*19*FLEN/8, x4, x1, x2)

inst_25364:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x328000000000000; valaddr_reg:x3; val_offset:76092*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76092*0 + 3*20*FLEN/8, x4, x1, x2)

inst_25365:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32c000000000000; valaddr_reg:x3; val_offset:76095*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76095*0 + 3*21*FLEN/8, x4, x1, x2)

inst_25366:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32e000000000000; valaddr_reg:x3; val_offset:76098*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76098*0 + 3*22*FLEN/8, x4, x1, x2)

inst_25367:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32f000000000000; valaddr_reg:x3; val_offset:76101*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76101*0 + 3*23*FLEN/8, x4, x1, x2)

inst_25368:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32f800000000000; valaddr_reg:x3; val_offset:76104*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76104*0 + 3*24*FLEN/8, x4, x1, x2)

inst_25369:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fc00000000000; valaddr_reg:x3; val_offset:76107*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76107*0 + 3*25*FLEN/8, x4, x1, x2)

inst_25370:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fe00000000000; valaddr_reg:x3; val_offset:76110*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76110*0 + 3*26*FLEN/8, x4, x1, x2)

inst_25371:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ff00000000000; valaddr_reg:x3; val_offset:76113*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76113*0 + 3*27*FLEN/8, x4, x1, x2)

inst_25372:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ff80000000000; valaddr_reg:x3; val_offset:76116*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76116*0 + 3*28*FLEN/8, x4, x1, x2)

inst_25373:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffc0000000000; valaddr_reg:x3; val_offset:76119*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76119*0 + 3*29*FLEN/8, x4, x1, x2)

inst_25374:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffe0000000000; valaddr_reg:x3; val_offset:76122*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76122*0 + 3*30*FLEN/8, x4, x1, x2)

inst_25375:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fff0000000000; valaddr_reg:x3; val_offset:76125*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76125*0 + 3*31*FLEN/8, x4, x1, x2)

inst_25376:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fff8000000000; valaddr_reg:x3; val_offset:76128*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76128*0 + 3*32*FLEN/8, x4, x1, x2)

inst_25377:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffc000000000; valaddr_reg:x3; val_offset:76131*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76131*0 + 3*33*FLEN/8, x4, x1, x2)

inst_25378:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffe000000000; valaddr_reg:x3; val_offset:76134*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76134*0 + 3*34*FLEN/8, x4, x1, x2)

inst_25379:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffff000000000; valaddr_reg:x3; val_offset:76137*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76137*0 + 3*35*FLEN/8, x4, x1, x2)

inst_25380:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffff800000000; valaddr_reg:x3; val_offset:76140*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76140*0 + 3*36*FLEN/8, x4, x1, x2)

inst_25381:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffc00000000; valaddr_reg:x3; val_offset:76143*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76143*0 + 3*37*FLEN/8, x4, x1, x2)

inst_25382:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffe00000000; valaddr_reg:x3; val_offset:76146*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76146*0 + 3*38*FLEN/8, x4, x1, x2)

inst_25383:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffff00000000; valaddr_reg:x3; val_offset:76149*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76149*0 + 3*39*FLEN/8, x4, x1, x2)

inst_25384:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffff80000000; valaddr_reg:x3; val_offset:76152*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76152*0 + 3*40*FLEN/8, x4, x1, x2)

inst_25385:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffc0000000; valaddr_reg:x3; val_offset:76155*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76155*0 + 3*41*FLEN/8, x4, x1, x2)

inst_25386:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffe0000000; valaddr_reg:x3; val_offset:76158*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76158*0 + 3*42*FLEN/8, x4, x1, x2)

inst_25387:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffff0000000; valaddr_reg:x3; val_offset:76161*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76161*0 + 3*43*FLEN/8, x4, x1, x2)

inst_25388:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffff8000000; valaddr_reg:x3; val_offset:76164*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76164*0 + 3*44*FLEN/8, x4, x1, x2)

inst_25389:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffc000000; valaddr_reg:x3; val_offset:76167*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76167*0 + 3*45*FLEN/8, x4, x1, x2)

inst_25390:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffe000000; valaddr_reg:x3; val_offset:76170*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76170*0 + 3*46*FLEN/8, x4, x1, x2)

inst_25391:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffff000000; valaddr_reg:x3; val_offset:76173*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76173*0 + 3*47*FLEN/8, x4, x1, x2)

inst_25392:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffff800000; valaddr_reg:x3; val_offset:76176*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76176*0 + 3*48*FLEN/8, x4, x1, x2)

inst_25393:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffc00000; valaddr_reg:x3; val_offset:76179*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76179*0 + 3*49*FLEN/8, x4, x1, x2)

inst_25394:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffe00000; valaddr_reg:x3; val_offset:76182*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76182*0 + 3*50*FLEN/8, x4, x1, x2)

inst_25395:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffff00000; valaddr_reg:x3; val_offset:76185*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76185*0 + 3*51*FLEN/8, x4, x1, x2)

inst_25396:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffff80000; valaddr_reg:x3; val_offset:76188*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76188*0 + 3*52*FLEN/8, x4, x1, x2)

inst_25397:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffc0000; valaddr_reg:x3; val_offset:76191*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76191*0 + 3*53*FLEN/8, x4, x1, x2)

inst_25398:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffe0000; valaddr_reg:x3; val_offset:76194*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76194*0 + 3*54*FLEN/8, x4, x1, x2)

inst_25399:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffff0000; valaddr_reg:x3; val_offset:76197*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76197*0 + 3*55*FLEN/8, x4, x1, x2)

inst_25400:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffff8000; valaddr_reg:x3; val_offset:76200*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76200*0 + 3*56*FLEN/8, x4, x1, x2)

inst_25401:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffffc000; valaddr_reg:x3; val_offset:76203*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76203*0 + 3*57*FLEN/8, x4, x1, x2)

inst_25402:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffffe000; valaddr_reg:x3; val_offset:76206*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76206*0 + 3*58*FLEN/8, x4, x1, x2)

inst_25403:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffff000; valaddr_reg:x3; val_offset:76209*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76209*0 + 3*59*FLEN/8, x4, x1, x2)

inst_25404:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffff800; valaddr_reg:x3; val_offset:76212*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76212*0 + 3*60*FLEN/8, x4, x1, x2)

inst_25405:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffffc00; valaddr_reg:x3; val_offset:76215*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76215*0 + 3*61*FLEN/8, x4, x1, x2)

inst_25406:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffffe00; valaddr_reg:x3; val_offset:76218*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76218*0 + 3*62*FLEN/8, x4, x1, x2)

inst_25407:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffffff00; valaddr_reg:x3; val_offset:76221*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76221*0 + 3*63*FLEN/8, x4, x1, x2)

inst_25408:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffffff80; valaddr_reg:x3; val_offset:76224*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76224*0 + 3*64*FLEN/8, x4, x1, x2)

inst_25409:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffffffc0; valaddr_reg:x3; val_offset:76227*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76227*0 + 3*65*FLEN/8, x4, x1, x2)

inst_25410:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffffffe0; valaddr_reg:x3; val_offset:76230*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76230*0 + 3*66*FLEN/8, x4, x1, x2)

inst_25411:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffffff0; valaddr_reg:x3; val_offset:76233*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76233*0 + 3*67*FLEN/8, x4, x1, x2)

inst_25412:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffffff8; valaddr_reg:x3; val_offset:76236*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76236*0 + 3*68*FLEN/8, x4, x1, x2)

inst_25413:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffffffc; valaddr_reg:x3; val_offset:76239*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76239*0 + 3*69*FLEN/8, x4, x1, x2)

inst_25414:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32ffffffffffffe; valaddr_reg:x3; val_offset:76242*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76242*0 + 3*70*FLEN/8, x4, x1, x2)

inst_25415:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc6ff3bf87e353 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x032 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c6ff3bf87e353; op2val:0x0;
op3val:0x32fffffffffffff; valaddr_reg:x3; val_offset:76245*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76245*0 + 3*71*FLEN/8, x4, x1, x2)

inst_25416:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000000000; valaddr_reg:x3; val_offset:76248*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76248*0 + 3*72*FLEN/8, x4, x1, x2)

inst_25417:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000000001; valaddr_reg:x3; val_offset:76251*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76251*0 + 3*73*FLEN/8, x4, x1, x2)

inst_25418:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000000003; valaddr_reg:x3; val_offset:76254*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76254*0 + 3*74*FLEN/8, x4, x1, x2)

inst_25419:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000000007; valaddr_reg:x3; val_offset:76257*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76257*0 + 3*75*FLEN/8, x4, x1, x2)

inst_25420:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000000000f; valaddr_reg:x3; val_offset:76260*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76260*0 + 3*76*FLEN/8, x4, x1, x2)

inst_25421:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000000001f; valaddr_reg:x3; val_offset:76263*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76263*0 + 3*77*FLEN/8, x4, x1, x2)

inst_25422:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000000003f; valaddr_reg:x3; val_offset:76266*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76266*0 + 3*78*FLEN/8, x4, x1, x2)

inst_25423:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000000007f; valaddr_reg:x3; val_offset:76269*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76269*0 + 3*79*FLEN/8, x4, x1, x2)

inst_25424:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000000000ff; valaddr_reg:x3; val_offset:76272*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76272*0 + 3*80*FLEN/8, x4, x1, x2)

inst_25425:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000000001ff; valaddr_reg:x3; val_offset:76275*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76275*0 + 3*81*FLEN/8, x4, x1, x2)

inst_25426:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000000003ff; valaddr_reg:x3; val_offset:76278*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76278*0 + 3*82*FLEN/8, x4, x1, x2)

inst_25427:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000000007ff; valaddr_reg:x3; val_offset:76281*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76281*0 + 3*83*FLEN/8, x4, x1, x2)

inst_25428:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000000fff; valaddr_reg:x3; val_offset:76284*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76284*0 + 3*84*FLEN/8, x4, x1, x2)

inst_25429:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000001fff; valaddr_reg:x3; val_offset:76287*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76287*0 + 3*85*FLEN/8, x4, x1, x2)

inst_25430:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000003fff; valaddr_reg:x3; val_offset:76290*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76290*0 + 3*86*FLEN/8, x4, x1, x2)

inst_25431:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000007fff; valaddr_reg:x3; val_offset:76293*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76293*0 + 3*87*FLEN/8, x4, x1, x2)

inst_25432:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000000ffff; valaddr_reg:x3; val_offset:76296*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76296*0 + 3*88*FLEN/8, x4, x1, x2)

inst_25433:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000001ffff; valaddr_reg:x3; val_offset:76299*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76299*0 + 3*89*FLEN/8, x4, x1, x2)

inst_25434:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000003ffff; valaddr_reg:x3; val_offset:76302*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76302*0 + 3*90*FLEN/8, x4, x1, x2)

inst_25435:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000007ffff; valaddr_reg:x3; val_offset:76305*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76305*0 + 3*91*FLEN/8, x4, x1, x2)

inst_25436:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000000fffff; valaddr_reg:x3; val_offset:76308*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76308*0 + 3*92*FLEN/8, x4, x1, x2)

inst_25437:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000001fffff; valaddr_reg:x3; val_offset:76311*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76311*0 + 3*93*FLEN/8, x4, x1, x2)

inst_25438:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000003fffff; valaddr_reg:x3; val_offset:76314*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76314*0 + 3*94*FLEN/8, x4, x1, x2)

inst_25439:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000007fffff; valaddr_reg:x3; val_offset:76317*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76317*0 + 3*95*FLEN/8, x4, x1, x2)

inst_25440:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000000ffffff; valaddr_reg:x3; val_offset:76320*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76320*0 + 3*96*FLEN/8, x4, x1, x2)

inst_25441:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000001ffffff; valaddr_reg:x3; val_offset:76323*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76323*0 + 3*97*FLEN/8, x4, x1, x2)

inst_25442:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000003ffffff; valaddr_reg:x3; val_offset:76326*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76326*0 + 3*98*FLEN/8, x4, x1, x2)

inst_25443:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000007ffffff; valaddr_reg:x3; val_offset:76329*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76329*0 + 3*99*FLEN/8, x4, x1, x2)

inst_25444:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000000fffffff; valaddr_reg:x3; val_offset:76332*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76332*0 + 3*100*FLEN/8, x4, x1, x2)

inst_25445:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000001fffffff; valaddr_reg:x3; val_offset:76335*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76335*0 + 3*101*FLEN/8, x4, x1, x2)

inst_25446:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000003fffffff; valaddr_reg:x3; val_offset:76338*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76338*0 + 3*102*FLEN/8, x4, x1, x2)

inst_25447:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000007fffffff; valaddr_reg:x3; val_offset:76341*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76341*0 + 3*103*FLEN/8, x4, x1, x2)

inst_25448:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200000ffffffff; valaddr_reg:x3; val_offset:76344*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76344*0 + 3*104*FLEN/8, x4, x1, x2)

inst_25449:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200001ffffffff; valaddr_reg:x3; val_offset:76347*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76347*0 + 3*105*FLEN/8, x4, x1, x2)

inst_25450:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200003ffffffff; valaddr_reg:x3; val_offset:76350*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76350*0 + 3*106*FLEN/8, x4, x1, x2)

inst_25451:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200007ffffffff; valaddr_reg:x3; val_offset:76353*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76353*0 + 3*107*FLEN/8, x4, x1, x2)

inst_25452:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20000fffffffff; valaddr_reg:x3; val_offset:76356*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76356*0 + 3*108*FLEN/8, x4, x1, x2)

inst_25453:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20001fffffffff; valaddr_reg:x3; val_offset:76359*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76359*0 + 3*109*FLEN/8, x4, x1, x2)

inst_25454:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20003fffffffff; valaddr_reg:x3; val_offset:76362*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76362*0 + 3*110*FLEN/8, x4, x1, x2)

inst_25455:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20007fffffffff; valaddr_reg:x3; val_offset:76365*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76365*0 + 3*111*FLEN/8, x4, x1, x2)

inst_25456:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2000ffffffffff; valaddr_reg:x3; val_offset:76368*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76368*0 + 3*112*FLEN/8, x4, x1, x2)

inst_25457:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2001ffffffffff; valaddr_reg:x3; val_offset:76371*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76371*0 + 3*113*FLEN/8, x4, x1, x2)

inst_25458:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2003ffffffffff; valaddr_reg:x3; val_offset:76374*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76374*0 + 3*114*FLEN/8, x4, x1, x2)

inst_25459:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2007ffffffffff; valaddr_reg:x3; val_offset:76377*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76377*0 + 3*115*FLEN/8, x4, x1, x2)

inst_25460:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b200fffffffffff; valaddr_reg:x3; val_offset:76380*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76380*0 + 3*116*FLEN/8, x4, x1, x2)

inst_25461:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b201fffffffffff; valaddr_reg:x3; val_offset:76383*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76383*0 + 3*117*FLEN/8, x4, x1, x2)

inst_25462:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b203fffffffffff; valaddr_reg:x3; val_offset:76386*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76386*0 + 3*118*FLEN/8, x4, x1, x2)

inst_25463:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b207fffffffffff; valaddr_reg:x3; val_offset:76389*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76389*0 + 3*119*FLEN/8, x4, x1, x2)

inst_25464:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b20ffffffffffff; valaddr_reg:x3; val_offset:76392*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76392*0 + 3*120*FLEN/8, x4, x1, x2)

inst_25465:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b21ffffffffffff; valaddr_reg:x3; val_offset:76395*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76395*0 + 3*121*FLEN/8, x4, x1, x2)

inst_25466:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b23ffffffffffff; valaddr_reg:x3; val_offset:76398*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76398*0 + 3*122*FLEN/8, x4, x1, x2)

inst_25467:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b27ffffffffffff; valaddr_reg:x3; val_offset:76401*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76401*0 + 3*123*FLEN/8, x4, x1, x2)

inst_25468:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b28000000000000; valaddr_reg:x3; val_offset:76404*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76404*0 + 3*124*FLEN/8, x4, x1, x2)

inst_25469:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2c000000000000; valaddr_reg:x3; val_offset:76407*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76407*0 + 3*125*FLEN/8, x4, x1, x2)

inst_25470:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2e000000000000; valaddr_reg:x3; val_offset:76410*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76410*0 + 3*126*FLEN/8, x4, x1, x2)

inst_25471:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2f000000000000; valaddr_reg:x3; val_offset:76413*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76413*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_25472:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2f800000000000; valaddr_reg:x3; val_offset:76416*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76416*0 + 3*128*FLEN/8, x4, x1, x2)

inst_25473:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fc00000000000; valaddr_reg:x3; val_offset:76419*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76419*0 + 3*129*FLEN/8, x4, x1, x2)

inst_25474:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fe00000000000; valaddr_reg:x3; val_offset:76422*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76422*0 + 3*130*FLEN/8, x4, x1, x2)

inst_25475:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ff00000000000; valaddr_reg:x3; val_offset:76425*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76425*0 + 3*131*FLEN/8, x4, x1, x2)

inst_25476:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ff80000000000; valaddr_reg:x3; val_offset:76428*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76428*0 + 3*132*FLEN/8, x4, x1, x2)

inst_25477:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffc0000000000; valaddr_reg:x3; val_offset:76431*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76431*0 + 3*133*FLEN/8, x4, x1, x2)

inst_25478:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffe0000000000; valaddr_reg:x3; val_offset:76434*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76434*0 + 3*134*FLEN/8, x4, x1, x2)

inst_25479:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fff0000000000; valaddr_reg:x3; val_offset:76437*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76437*0 + 3*135*FLEN/8, x4, x1, x2)

inst_25480:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fff8000000000; valaddr_reg:x3; val_offset:76440*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76440*0 + 3*136*FLEN/8, x4, x1, x2)

inst_25481:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffc000000000; valaddr_reg:x3; val_offset:76443*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76443*0 + 3*137*FLEN/8, x4, x1, x2)

inst_25482:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffe000000000; valaddr_reg:x3; val_offset:76446*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76446*0 + 3*138*FLEN/8, x4, x1, x2)

inst_25483:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffff000000000; valaddr_reg:x3; val_offset:76449*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76449*0 + 3*139*FLEN/8, x4, x1, x2)

inst_25484:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffff800000000; valaddr_reg:x3; val_offset:76452*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76452*0 + 3*140*FLEN/8, x4, x1, x2)

inst_25485:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffc00000000; valaddr_reg:x3; val_offset:76455*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76455*0 + 3*141*FLEN/8, x4, x1, x2)

inst_25486:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffe00000000; valaddr_reg:x3; val_offset:76458*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76458*0 + 3*142*FLEN/8, x4, x1, x2)

inst_25487:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffff00000000; valaddr_reg:x3; val_offset:76461*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76461*0 + 3*143*FLEN/8, x4, x1, x2)

inst_25488:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffff80000000; valaddr_reg:x3; val_offset:76464*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76464*0 + 3*144*FLEN/8, x4, x1, x2)

inst_25489:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffc0000000; valaddr_reg:x3; val_offset:76467*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76467*0 + 3*145*FLEN/8, x4, x1, x2)

inst_25490:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffe0000000; valaddr_reg:x3; val_offset:76470*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76470*0 + 3*146*FLEN/8, x4, x1, x2)

inst_25491:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffff0000000; valaddr_reg:x3; val_offset:76473*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76473*0 + 3*147*FLEN/8, x4, x1, x2)

inst_25492:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffff8000000; valaddr_reg:x3; val_offset:76476*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76476*0 + 3*148*FLEN/8, x4, x1, x2)

inst_25493:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffc000000; valaddr_reg:x3; val_offset:76479*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76479*0 + 3*149*FLEN/8, x4, x1, x2)

inst_25494:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffe000000; valaddr_reg:x3; val_offset:76482*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76482*0 + 3*150*FLEN/8, x4, x1, x2)

inst_25495:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffff000000; valaddr_reg:x3; val_offset:76485*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76485*0 + 3*151*FLEN/8, x4, x1, x2)

inst_25496:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffff800000; valaddr_reg:x3; val_offset:76488*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76488*0 + 3*152*FLEN/8, x4, x1, x2)

inst_25497:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffc00000; valaddr_reg:x3; val_offset:76491*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76491*0 + 3*153*FLEN/8, x4, x1, x2)

inst_25498:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffe00000; valaddr_reg:x3; val_offset:76494*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76494*0 + 3*154*FLEN/8, x4, x1, x2)

inst_25499:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffff00000; valaddr_reg:x3; val_offset:76497*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76497*0 + 3*155*FLEN/8, x4, x1, x2)

inst_25500:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffff80000; valaddr_reg:x3; val_offset:76500*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76500*0 + 3*156*FLEN/8, x4, x1, x2)

inst_25501:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffc0000; valaddr_reg:x3; val_offset:76503*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76503*0 + 3*157*FLEN/8, x4, x1, x2)

inst_25502:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffe0000; valaddr_reg:x3; val_offset:76506*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76506*0 + 3*158*FLEN/8, x4, x1, x2)

inst_25503:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffff0000; valaddr_reg:x3; val_offset:76509*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76509*0 + 3*159*FLEN/8, x4, x1, x2)

inst_25504:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffff8000; valaddr_reg:x3; val_offset:76512*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76512*0 + 3*160*FLEN/8, x4, x1, x2)

inst_25505:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffffc000; valaddr_reg:x3; val_offset:76515*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76515*0 + 3*161*FLEN/8, x4, x1, x2)

inst_25506:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffffe000; valaddr_reg:x3; val_offset:76518*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76518*0 + 3*162*FLEN/8, x4, x1, x2)

inst_25507:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffff000; valaddr_reg:x3; val_offset:76521*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76521*0 + 3*163*FLEN/8, x4, x1, x2)

inst_25508:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffff800; valaddr_reg:x3; val_offset:76524*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76524*0 + 3*164*FLEN/8, x4, x1, x2)

inst_25509:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffffc00; valaddr_reg:x3; val_offset:76527*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76527*0 + 3*165*FLEN/8, x4, x1, x2)

inst_25510:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffffe00; valaddr_reg:x3; val_offset:76530*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76530*0 + 3*166*FLEN/8, x4, x1, x2)

inst_25511:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffffff00; valaddr_reg:x3; val_offset:76533*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76533*0 + 3*167*FLEN/8, x4, x1, x2)

inst_25512:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffffff80; valaddr_reg:x3; val_offset:76536*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76536*0 + 3*168*FLEN/8, x4, x1, x2)

inst_25513:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffffffc0; valaddr_reg:x3; val_offset:76539*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76539*0 + 3*169*FLEN/8, x4, x1, x2)

inst_25514:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffffffe0; valaddr_reg:x3; val_offset:76542*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76542*0 + 3*170*FLEN/8, x4, x1, x2)

inst_25515:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffffff0; valaddr_reg:x3; val_offset:76545*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76545*0 + 3*171*FLEN/8, x4, x1, x2)

inst_25516:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffffff8; valaddr_reg:x3; val_offset:76548*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76548*0 + 3*172*FLEN/8, x4, x1, x2)

inst_25517:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffffffc; valaddr_reg:x3; val_offset:76551*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76551*0 + 3*173*FLEN/8, x4, x1, x2)

inst_25518:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2ffffffffffffe; valaddr_reg:x3; val_offset:76554*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76554*0 + 3*174*FLEN/8, x4, x1, x2)

inst_25519:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3b2 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3b2fffffffffffff; valaddr_reg:x3; val_offset:76557*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76557*0 + 3*175*FLEN/8, x4, x1, x2)

inst_25520:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:76560*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76560*0 + 3*176*FLEN/8, x4, x1, x2)

inst_25521:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:76563*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76563*0 + 3*177*FLEN/8, x4, x1, x2)

inst_25522:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:76566*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76566*0 + 3*178*FLEN/8, x4, x1, x2)

inst_25523:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:76569*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76569*0 + 3*179*FLEN/8, x4, x1, x2)

inst_25524:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:76572*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76572*0 + 3*180*FLEN/8, x4, x1, x2)

inst_25525:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:76575*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76575*0 + 3*181*FLEN/8, x4, x1, x2)

inst_25526:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:76578*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76578*0 + 3*182*FLEN/8, x4, x1, x2)

inst_25527:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:76581*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76581*0 + 3*183*FLEN/8, x4, x1, x2)

inst_25528:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:76584*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76584*0 + 3*184*FLEN/8, x4, x1, x2)

inst_25529:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:76587*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76587*0 + 3*185*FLEN/8, x4, x1, x2)

inst_25530:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:76590*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76590*0 + 3*186*FLEN/8, x4, x1, x2)

inst_25531:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:76593*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76593*0 + 3*187*FLEN/8, x4, x1, x2)

inst_25532:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:76596*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76596*0 + 3*188*FLEN/8, x4, x1, x2)

inst_25533:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:76599*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76599*0 + 3*189*FLEN/8, x4, x1, x2)

inst_25534:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:76602*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76602*0 + 3*190*FLEN/8, x4, x1, x2)

inst_25535:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:76605*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76605*0 + 3*191*FLEN/8, x4, x1, x2)

inst_25536:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:76608*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76608*0 + 3*192*FLEN/8, x4, x1, x2)

inst_25537:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:76611*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76611*0 + 3*193*FLEN/8, x4, x1, x2)

inst_25538:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:76614*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76614*0 + 3*194*FLEN/8, x4, x1, x2)

inst_25539:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:76617*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76617*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25540:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:76620*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76620*0 + 3*196*FLEN/8, x4, x1, x2)

inst_25541:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xc8e782a32c9b3 and fs2 == 0 and fe2 == 0x205 and fm2 == 0x1edea3353bb3a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8c8e782a32c9b3; op2val:0x2051edea3353bb3a;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:76623*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76623*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25542:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000000000; valaddr_reg:x3; val_offset:76626*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76626*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25543:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000000001; valaddr_reg:x3; val_offset:76629*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76629*0 + 3*199*FLEN/8, x4, x1, x2)

inst_25544:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000000003; valaddr_reg:x3; val_offset:76632*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76632*0 + 3*200*FLEN/8, x4, x1, x2)

inst_25545:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000000007; valaddr_reg:x3; val_offset:76635*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76635*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25546:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000000000f; valaddr_reg:x3; val_offset:76638*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76638*0 + 3*202*FLEN/8, x4, x1, x2)

inst_25547:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000000001f; valaddr_reg:x3; val_offset:76641*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76641*0 + 3*203*FLEN/8, x4, x1, x2)

inst_25548:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000000003f; valaddr_reg:x3; val_offset:76644*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76644*0 + 3*204*FLEN/8, x4, x1, x2)

inst_25549:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000000007f; valaddr_reg:x3; val_offset:76647*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76647*0 + 3*205*FLEN/8, x4, x1, x2)

inst_25550:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000000000ff; valaddr_reg:x3; val_offset:76650*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76650*0 + 3*206*FLEN/8, x4, x1, x2)

inst_25551:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000000001ff; valaddr_reg:x3; val_offset:76653*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76653*0 + 3*207*FLEN/8, x4, x1, x2)

inst_25552:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000000003ff; valaddr_reg:x3; val_offset:76656*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76656*0 + 3*208*FLEN/8, x4, x1, x2)

inst_25553:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000000007ff; valaddr_reg:x3; val_offset:76659*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76659*0 + 3*209*FLEN/8, x4, x1, x2)

inst_25554:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000000fff; valaddr_reg:x3; val_offset:76662*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76662*0 + 3*210*FLEN/8, x4, x1, x2)

inst_25555:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000001fff; valaddr_reg:x3; val_offset:76665*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76665*0 + 3*211*FLEN/8, x4, x1, x2)

inst_25556:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000003fff; valaddr_reg:x3; val_offset:76668*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76668*0 + 3*212*FLEN/8, x4, x1, x2)

inst_25557:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000007fff; valaddr_reg:x3; val_offset:76671*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76671*0 + 3*213*FLEN/8, x4, x1, x2)

inst_25558:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000000ffff; valaddr_reg:x3; val_offset:76674*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76674*0 + 3*214*FLEN/8, x4, x1, x2)

inst_25559:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000001ffff; valaddr_reg:x3; val_offset:76677*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76677*0 + 3*215*FLEN/8, x4, x1, x2)

inst_25560:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000003ffff; valaddr_reg:x3; val_offset:76680*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76680*0 + 3*216*FLEN/8, x4, x1, x2)

inst_25561:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000007ffff; valaddr_reg:x3; val_offset:76683*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76683*0 + 3*217*FLEN/8, x4, x1, x2)

inst_25562:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000000fffff; valaddr_reg:x3; val_offset:76686*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76686*0 + 3*218*FLEN/8, x4, x1, x2)

inst_25563:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000001fffff; valaddr_reg:x3; val_offset:76689*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76689*0 + 3*219*FLEN/8, x4, x1, x2)

inst_25564:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000003fffff; valaddr_reg:x3; val_offset:76692*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76692*0 + 3*220*FLEN/8, x4, x1, x2)

inst_25565:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000007fffff; valaddr_reg:x3; val_offset:76695*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76695*0 + 3*221*FLEN/8, x4, x1, x2)

inst_25566:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000000ffffff; valaddr_reg:x3; val_offset:76698*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76698*0 + 3*222*FLEN/8, x4, x1, x2)

inst_25567:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000001ffffff; valaddr_reg:x3; val_offset:76701*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76701*0 + 3*223*FLEN/8, x4, x1, x2)

inst_25568:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000003ffffff; valaddr_reg:x3; val_offset:76704*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76704*0 + 3*224*FLEN/8, x4, x1, x2)

inst_25569:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000007ffffff; valaddr_reg:x3; val_offset:76707*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76707*0 + 3*225*FLEN/8, x4, x1, x2)

inst_25570:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000000fffffff; valaddr_reg:x3; val_offset:76710*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76710*0 + 3*226*FLEN/8, x4, x1, x2)

inst_25571:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000001fffffff; valaddr_reg:x3; val_offset:76713*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76713*0 + 3*227*FLEN/8, x4, x1, x2)

inst_25572:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000003fffffff; valaddr_reg:x3; val_offset:76716*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76716*0 + 3*228*FLEN/8, x4, x1, x2)

inst_25573:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000007fffffff; valaddr_reg:x3; val_offset:76719*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76719*0 + 3*229*FLEN/8, x4, x1, x2)

inst_25574:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00000ffffffff; valaddr_reg:x3; val_offset:76722*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76722*0 + 3*230*FLEN/8, x4, x1, x2)

inst_25575:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00001ffffffff; valaddr_reg:x3; val_offset:76725*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76725*0 + 3*231*FLEN/8, x4, x1, x2)

inst_25576:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00003ffffffff; valaddr_reg:x3; val_offset:76728*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76728*0 + 3*232*FLEN/8, x4, x1, x2)

inst_25577:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00007ffffffff; valaddr_reg:x3; val_offset:76731*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76731*0 + 3*233*FLEN/8, x4, x1, x2)

inst_25578:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0000fffffffff; valaddr_reg:x3; val_offset:76734*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76734*0 + 3*234*FLEN/8, x4, x1, x2)

inst_25579:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0001fffffffff; valaddr_reg:x3; val_offset:76737*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76737*0 + 3*235*FLEN/8, x4, x1, x2)

inst_25580:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0003fffffffff; valaddr_reg:x3; val_offset:76740*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76740*0 + 3*236*FLEN/8, x4, x1, x2)

inst_25581:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0007fffffffff; valaddr_reg:x3; val_offset:76743*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76743*0 + 3*237*FLEN/8, x4, x1, x2)

inst_25582:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde000ffffffffff; valaddr_reg:x3; val_offset:76746*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76746*0 + 3*238*FLEN/8, x4, x1, x2)

inst_25583:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde001ffffffffff; valaddr_reg:x3; val_offset:76749*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76749*0 + 3*239*FLEN/8, x4, x1, x2)

inst_25584:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde003ffffffffff; valaddr_reg:x3; val_offset:76752*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76752*0 + 3*240*FLEN/8, x4, x1, x2)

inst_25585:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde007ffffffffff; valaddr_reg:x3; val_offset:76755*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76755*0 + 3*241*FLEN/8, x4, x1, x2)

inst_25586:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde00fffffffffff; valaddr_reg:x3; val_offset:76758*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76758*0 + 3*242*FLEN/8, x4, x1, x2)

inst_25587:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde01fffffffffff; valaddr_reg:x3; val_offset:76761*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76761*0 + 3*243*FLEN/8, x4, x1, x2)

inst_25588:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde03fffffffffff; valaddr_reg:x3; val_offset:76764*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76764*0 + 3*244*FLEN/8, x4, x1, x2)

inst_25589:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde07fffffffffff; valaddr_reg:x3; val_offset:76767*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76767*0 + 3*245*FLEN/8, x4, x1, x2)

inst_25590:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde0ffffffffffff; valaddr_reg:x3; val_offset:76770*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76770*0 + 3*246*FLEN/8, x4, x1, x2)

inst_25591:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde1ffffffffffff; valaddr_reg:x3; val_offset:76773*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76773*0 + 3*247*FLEN/8, x4, x1, x2)

inst_25592:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde3ffffffffffff; valaddr_reg:x3; val_offset:76776*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76776*0 + 3*248*FLEN/8, x4, x1, x2)

inst_25593:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde7ffffffffffff; valaddr_reg:x3; val_offset:76779*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76779*0 + 3*249*FLEN/8, x4, x1, x2)

inst_25594:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbde8000000000000; valaddr_reg:x3; val_offset:76782*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76782*0 + 3*250*FLEN/8, x4, x1, x2)

inst_25595:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdec000000000000; valaddr_reg:x3; val_offset:76785*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76785*0 + 3*251*FLEN/8, x4, x1, x2)

inst_25596:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdee000000000000; valaddr_reg:x3; val_offset:76788*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76788*0 + 3*252*FLEN/8, x4, x1, x2)

inst_25597:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdef000000000000; valaddr_reg:x3; val_offset:76791*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76791*0 + 3*253*FLEN/8, x4, x1, x2)

inst_25598:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdef800000000000; valaddr_reg:x3; val_offset:76794*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76794*0 + 3*254*FLEN/8, x4, x1, x2)

inst_25599:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefc00000000000; valaddr_reg:x3; val_offset:76797*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76797*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_25600:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefe00000000000; valaddr_reg:x3; val_offset:76800*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76800*0 + 3*256*FLEN/8, x4, x1, x2)

inst_25601:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeff00000000000; valaddr_reg:x3; val_offset:76803*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76803*0 + 3*257*FLEN/8, x4, x1, x2)

inst_25602:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeff80000000000; valaddr_reg:x3; val_offset:76806*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76806*0 + 3*258*FLEN/8, x4, x1, x2)

inst_25603:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffc0000000000; valaddr_reg:x3; val_offset:76809*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76809*0 + 3*259*FLEN/8, x4, x1, x2)

inst_25604:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffe0000000000; valaddr_reg:x3; val_offset:76812*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76812*0 + 3*260*FLEN/8, x4, x1, x2)

inst_25605:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefff0000000000; valaddr_reg:x3; val_offset:76815*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76815*0 + 3*261*FLEN/8, x4, x1, x2)

inst_25606:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefff8000000000; valaddr_reg:x3; val_offset:76818*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76818*0 + 3*262*FLEN/8, x4, x1, x2)

inst_25607:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffc000000000; valaddr_reg:x3; val_offset:76821*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76821*0 + 3*263*FLEN/8, x4, x1, x2)

inst_25608:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffe000000000; valaddr_reg:x3; val_offset:76824*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76824*0 + 3*264*FLEN/8, x4, x1, x2)

inst_25609:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffff000000000; valaddr_reg:x3; val_offset:76827*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76827*0 + 3*265*FLEN/8, x4, x1, x2)

inst_25610:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffff800000000; valaddr_reg:x3; val_offset:76830*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76830*0 + 3*266*FLEN/8, x4, x1, x2)

inst_25611:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffc00000000; valaddr_reg:x3; val_offset:76833*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76833*0 + 3*267*FLEN/8, x4, x1, x2)

inst_25612:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffe00000000; valaddr_reg:x3; val_offset:76836*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76836*0 + 3*268*FLEN/8, x4, x1, x2)

inst_25613:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffff00000000; valaddr_reg:x3; val_offset:76839*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76839*0 + 3*269*FLEN/8, x4, x1, x2)

inst_25614:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffff80000000; valaddr_reg:x3; val_offset:76842*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76842*0 + 3*270*FLEN/8, x4, x1, x2)

inst_25615:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffc0000000; valaddr_reg:x3; val_offset:76845*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76845*0 + 3*271*FLEN/8, x4, x1, x2)

inst_25616:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffe0000000; valaddr_reg:x3; val_offset:76848*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76848*0 + 3*272*FLEN/8, x4, x1, x2)

inst_25617:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffff0000000; valaddr_reg:x3; val_offset:76851*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76851*0 + 3*273*FLEN/8, x4, x1, x2)

inst_25618:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffff8000000; valaddr_reg:x3; val_offset:76854*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76854*0 + 3*274*FLEN/8, x4, x1, x2)

inst_25619:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffc000000; valaddr_reg:x3; val_offset:76857*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76857*0 + 3*275*FLEN/8, x4, x1, x2)

inst_25620:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffe000000; valaddr_reg:x3; val_offset:76860*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76860*0 + 3*276*FLEN/8, x4, x1, x2)

inst_25621:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffff000000; valaddr_reg:x3; val_offset:76863*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76863*0 + 3*277*FLEN/8, x4, x1, x2)

inst_25622:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffff800000; valaddr_reg:x3; val_offset:76866*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76866*0 + 3*278*FLEN/8, x4, x1, x2)

inst_25623:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffc00000; valaddr_reg:x3; val_offset:76869*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76869*0 + 3*279*FLEN/8, x4, x1, x2)

inst_25624:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffe00000; valaddr_reg:x3; val_offset:76872*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76872*0 + 3*280*FLEN/8, x4, x1, x2)

inst_25625:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffff00000; valaddr_reg:x3; val_offset:76875*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76875*0 + 3*281*FLEN/8, x4, x1, x2)

inst_25626:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffff80000; valaddr_reg:x3; val_offset:76878*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76878*0 + 3*282*FLEN/8, x4, x1, x2)

inst_25627:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffc0000; valaddr_reg:x3; val_offset:76881*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76881*0 + 3*283*FLEN/8, x4, x1, x2)

inst_25628:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffe0000; valaddr_reg:x3; val_offset:76884*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76884*0 + 3*284*FLEN/8, x4, x1, x2)

inst_25629:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffff0000; valaddr_reg:x3; val_offset:76887*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76887*0 + 3*285*FLEN/8, x4, x1, x2)

inst_25630:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffff8000; valaddr_reg:x3; val_offset:76890*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76890*0 + 3*286*FLEN/8, x4, x1, x2)

inst_25631:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffffc000; valaddr_reg:x3; val_offset:76893*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76893*0 + 3*287*FLEN/8, x4, x1, x2)

inst_25632:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffffe000; valaddr_reg:x3; val_offset:76896*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76896*0 + 3*288*FLEN/8, x4, x1, x2)

inst_25633:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffff000; valaddr_reg:x3; val_offset:76899*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76899*0 + 3*289*FLEN/8, x4, x1, x2)

inst_25634:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffff800; valaddr_reg:x3; val_offset:76902*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76902*0 + 3*290*FLEN/8, x4, x1, x2)

inst_25635:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffffc00; valaddr_reg:x3; val_offset:76905*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76905*0 + 3*291*FLEN/8, x4, x1, x2)

inst_25636:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffffe00; valaddr_reg:x3; val_offset:76908*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76908*0 + 3*292*FLEN/8, x4, x1, x2)

inst_25637:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffffff00; valaddr_reg:x3; val_offset:76911*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76911*0 + 3*293*FLEN/8, x4, x1, x2)

inst_25638:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffffff80; valaddr_reg:x3; val_offset:76914*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76914*0 + 3*294*FLEN/8, x4, x1, x2)

inst_25639:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffffffc0; valaddr_reg:x3; val_offset:76917*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76917*0 + 3*295*FLEN/8, x4, x1, x2)

inst_25640:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffffffe0; valaddr_reg:x3; val_offset:76920*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76920*0 + 3*296*FLEN/8, x4, x1, x2)

inst_25641:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffffff0; valaddr_reg:x3; val_offset:76923*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76923*0 + 3*297*FLEN/8, x4, x1, x2)

inst_25642:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffffff8; valaddr_reg:x3; val_offset:76926*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76926*0 + 3*298*FLEN/8, x4, x1, x2)

inst_25643:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffffffc; valaddr_reg:x3; val_offset:76929*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76929*0 + 3*299*FLEN/8, x4, x1, x2)

inst_25644:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdeffffffffffffe; valaddr_reg:x3; val_offset:76932*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76932*0 + 3*300*FLEN/8, x4, x1, x2)

inst_25645:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3de and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbdefffffffffffff; valaddr_reg:x3; val_offset:76935*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76935*0 + 3*301*FLEN/8, x4, x1, x2)

inst_25646:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:76938*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76938*0 + 3*302*FLEN/8, x4, x1, x2)

inst_25647:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:76941*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76941*0 + 3*303*FLEN/8, x4, x1, x2)

inst_25648:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:76944*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76944*0 + 3*304*FLEN/8, x4, x1, x2)

inst_25649:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:76947*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76947*0 + 3*305*FLEN/8, x4, x1, x2)

inst_25650:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:76950*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76950*0 + 3*306*FLEN/8, x4, x1, x2)

inst_25651:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:76953*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76953*0 + 3*307*FLEN/8, x4, x1, x2)

inst_25652:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:76956*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76956*0 + 3*308*FLEN/8, x4, x1, x2)

inst_25653:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:76959*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76959*0 + 3*309*FLEN/8, x4, x1, x2)

inst_25654:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:76962*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76962*0 + 3*310*FLEN/8, x4, x1, x2)

inst_25655:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:76965*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76965*0 + 3*311*FLEN/8, x4, x1, x2)

inst_25656:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:76968*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76968*0 + 3*312*FLEN/8, x4, x1, x2)

inst_25657:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:76971*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76971*0 + 3*313*FLEN/8, x4, x1, x2)

inst_25658:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:76974*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76974*0 + 3*314*FLEN/8, x4, x1, x2)

inst_25659:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:76977*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76977*0 + 3*315*FLEN/8, x4, x1, x2)

inst_25660:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:76980*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76980*0 + 3*316*FLEN/8, x4, x1, x2)

inst_25661:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:76983*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76983*0 + 3*317*FLEN/8, x4, x1, x2)

inst_25662:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:76986*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76986*0 + 3*318*FLEN/8, x4, x1, x2)

inst_25663:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:76989*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76989*0 + 3*319*FLEN/8, x4, x1, x2)

inst_25664:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:76992*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76992*0 + 3*320*FLEN/8, x4, x1, x2)

inst_25665:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:76995*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76995*0 + 3*321*FLEN/8, x4, x1, x2)

inst_25666:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:76998*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 76998*0 + 3*322*FLEN/8, x4, x1, x2)

inst_25667:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xccfc542168107 and fs2 == 1 and fe2 == 0x1fe and fm2 == 0x1c5473702afc6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8ccfc542168107; op2val:0x9fe1c5473702afc6;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:77001*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77001*0 + 3*323*FLEN/8, x4, x1, x2)

inst_25668:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:77004*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77004*0 + 3*324*FLEN/8, x4, x1, x2)

inst_25669:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:77007*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77007*0 + 3*325*FLEN/8, x4, x1, x2)

inst_25670:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:77010*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77010*0 + 3*326*FLEN/8, x4, x1, x2)

inst_25671:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:77013*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77013*0 + 3*327*FLEN/8, x4, x1, x2)

inst_25672:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:77016*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77016*0 + 3*328*FLEN/8, x4, x1, x2)

inst_25673:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:77019*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77019*0 + 3*329*FLEN/8, x4, x1, x2)

inst_25674:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:77022*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77022*0 + 3*330*FLEN/8, x4, x1, x2)

inst_25675:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:77025*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77025*0 + 3*331*FLEN/8, x4, x1, x2)

inst_25676:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:77028*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77028*0 + 3*332*FLEN/8, x4, x1, x2)

inst_25677:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:77031*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77031*0 + 3*333*FLEN/8, x4, x1, x2)

inst_25678:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:77034*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77034*0 + 3*334*FLEN/8, x4, x1, x2)

inst_25679:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:77037*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77037*0 + 3*335*FLEN/8, x4, x1, x2)

inst_25680:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:77040*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77040*0 + 3*336*FLEN/8, x4, x1, x2)

inst_25681:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:77043*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77043*0 + 3*337*FLEN/8, x4, x1, x2)

inst_25682:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:77046*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77046*0 + 3*338*FLEN/8, x4, x1, x2)

inst_25683:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:77049*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77049*0 + 3*339*FLEN/8, x4, x1, x2)

inst_25684:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:77052*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77052*0 + 3*340*FLEN/8, x4, x1, x2)

inst_25685:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:77055*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77055*0 + 3*341*FLEN/8, x4, x1, x2)

inst_25686:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:77058*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77058*0 + 3*342*FLEN/8, x4, x1, x2)

inst_25687:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:77061*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77061*0 + 3*343*FLEN/8, x4, x1, x2)

inst_25688:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:77064*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77064*0 + 3*344*FLEN/8, x4, x1, x2)

inst_25689:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:77067*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77067*0 + 3*345*FLEN/8, x4, x1, x2)

inst_25690:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000000000; valaddr_reg:x3; val_offset:77070*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77070*0 + 3*346*FLEN/8, x4, x1, x2)

inst_25691:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000000001; valaddr_reg:x3; val_offset:77073*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77073*0 + 3*347*FLEN/8, x4, x1, x2)

inst_25692:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000000003; valaddr_reg:x3; val_offset:77076*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77076*0 + 3*348*FLEN/8, x4, x1, x2)

inst_25693:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000000007; valaddr_reg:x3; val_offset:77079*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77079*0 + 3*349*FLEN/8, x4, x1, x2)

inst_25694:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000000000f; valaddr_reg:x3; val_offset:77082*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77082*0 + 3*350*FLEN/8, x4, x1, x2)

inst_25695:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000000001f; valaddr_reg:x3; val_offset:77085*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77085*0 + 3*351*FLEN/8, x4, x1, x2)

inst_25696:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000000003f; valaddr_reg:x3; val_offset:77088*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77088*0 + 3*352*FLEN/8, x4, x1, x2)

inst_25697:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000000007f; valaddr_reg:x3; val_offset:77091*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77091*0 + 3*353*FLEN/8, x4, x1, x2)

inst_25698:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000000000ff; valaddr_reg:x3; val_offset:77094*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77094*0 + 3*354*FLEN/8, x4, x1, x2)

inst_25699:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000000001ff; valaddr_reg:x3; val_offset:77097*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77097*0 + 3*355*FLEN/8, x4, x1, x2)

inst_25700:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000000003ff; valaddr_reg:x3; val_offset:77100*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77100*0 + 3*356*FLEN/8, x4, x1, x2)

inst_25701:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000000007ff; valaddr_reg:x3; val_offset:77103*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77103*0 + 3*357*FLEN/8, x4, x1, x2)

inst_25702:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000000fff; valaddr_reg:x3; val_offset:77106*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77106*0 + 3*358*FLEN/8, x4, x1, x2)

inst_25703:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000001fff; valaddr_reg:x3; val_offset:77109*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77109*0 + 3*359*FLEN/8, x4, x1, x2)

inst_25704:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000003fff; valaddr_reg:x3; val_offset:77112*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77112*0 + 3*360*FLEN/8, x4, x1, x2)

inst_25705:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000007fff; valaddr_reg:x3; val_offset:77115*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77115*0 + 3*361*FLEN/8, x4, x1, x2)

inst_25706:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000000ffff; valaddr_reg:x3; val_offset:77118*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77118*0 + 3*362*FLEN/8, x4, x1, x2)

inst_25707:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000001ffff; valaddr_reg:x3; val_offset:77121*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77121*0 + 3*363*FLEN/8, x4, x1, x2)

inst_25708:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000003ffff; valaddr_reg:x3; val_offset:77124*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77124*0 + 3*364*FLEN/8, x4, x1, x2)

inst_25709:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000007ffff; valaddr_reg:x3; val_offset:77127*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77127*0 + 3*365*FLEN/8, x4, x1, x2)

inst_25710:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000000fffff; valaddr_reg:x3; val_offset:77130*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77130*0 + 3*366*FLEN/8, x4, x1, x2)

inst_25711:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000001fffff; valaddr_reg:x3; val_offset:77133*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77133*0 + 3*367*FLEN/8, x4, x1, x2)

inst_25712:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000003fffff; valaddr_reg:x3; val_offset:77136*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77136*0 + 3*368*FLEN/8, x4, x1, x2)

inst_25713:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000007fffff; valaddr_reg:x3; val_offset:77139*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77139*0 + 3*369*FLEN/8, x4, x1, x2)

inst_25714:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000000ffffff; valaddr_reg:x3; val_offset:77142*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77142*0 + 3*370*FLEN/8, x4, x1, x2)

inst_25715:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000001ffffff; valaddr_reg:x3; val_offset:77145*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77145*0 + 3*371*FLEN/8, x4, x1, x2)

inst_25716:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000003ffffff; valaddr_reg:x3; val_offset:77148*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77148*0 + 3*372*FLEN/8, x4, x1, x2)

inst_25717:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000007ffffff; valaddr_reg:x3; val_offset:77151*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77151*0 + 3*373*FLEN/8, x4, x1, x2)

inst_25718:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000000fffffff; valaddr_reg:x3; val_offset:77154*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77154*0 + 3*374*FLEN/8, x4, x1, x2)

inst_25719:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000001fffffff; valaddr_reg:x3; val_offset:77157*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77157*0 + 3*375*FLEN/8, x4, x1, x2)

inst_25720:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000003fffffff; valaddr_reg:x3; val_offset:77160*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77160*0 + 3*376*FLEN/8, x4, x1, x2)

inst_25721:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000007fffffff; valaddr_reg:x3; val_offset:77163*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77163*0 + 3*377*FLEN/8, x4, x1, x2)

inst_25722:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00000ffffffff; valaddr_reg:x3; val_offset:77166*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77166*0 + 3*378*FLEN/8, x4, x1, x2)

inst_25723:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00001ffffffff; valaddr_reg:x3; val_offset:77169*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77169*0 + 3*379*FLEN/8, x4, x1, x2)

inst_25724:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00003ffffffff; valaddr_reg:x3; val_offset:77172*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77172*0 + 3*380*FLEN/8, x4, x1, x2)

inst_25725:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00007ffffffff; valaddr_reg:x3; val_offset:77175*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77175*0 + 3*381*FLEN/8, x4, x1, x2)

inst_25726:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0000fffffffff; valaddr_reg:x3; val_offset:77178*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77178*0 + 3*382*FLEN/8, x4, x1, x2)

inst_25727:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0001fffffffff; valaddr_reg:x3; val_offset:77181*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77181*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_25728:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0003fffffffff; valaddr_reg:x3; val_offset:77184*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77184*0 + 3*384*FLEN/8, x4, x1, x2)

inst_25729:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0007fffffffff; valaddr_reg:x3; val_offset:77187*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77187*0 + 3*385*FLEN/8, x4, x1, x2)

inst_25730:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c000ffffffffff; valaddr_reg:x3; val_offset:77190*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77190*0 + 3*386*FLEN/8, x4, x1, x2)

inst_25731:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c001ffffffffff; valaddr_reg:x3; val_offset:77193*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77193*0 + 3*387*FLEN/8, x4, x1, x2)

inst_25732:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c003ffffffffff; valaddr_reg:x3; val_offset:77196*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77196*0 + 3*388*FLEN/8, x4, x1, x2)

inst_25733:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c007ffffffffff; valaddr_reg:x3; val_offset:77199*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77199*0 + 3*389*FLEN/8, x4, x1, x2)

inst_25734:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c00fffffffffff; valaddr_reg:x3; val_offset:77202*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77202*0 + 3*390*FLEN/8, x4, x1, x2)

inst_25735:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c01fffffffffff; valaddr_reg:x3; val_offset:77205*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77205*0 + 3*391*FLEN/8, x4, x1, x2)

inst_25736:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c03fffffffffff; valaddr_reg:x3; val_offset:77208*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77208*0 + 3*392*FLEN/8, x4, x1, x2)

inst_25737:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c07fffffffffff; valaddr_reg:x3; val_offset:77211*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77211*0 + 3*393*FLEN/8, x4, x1, x2)

inst_25738:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c0ffffffffffff; valaddr_reg:x3; val_offset:77214*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77214*0 + 3*394*FLEN/8, x4, x1, x2)

inst_25739:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c1ffffffffffff; valaddr_reg:x3; val_offset:77217*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77217*0 + 3*395*FLEN/8, x4, x1, x2)

inst_25740:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c3ffffffffffff; valaddr_reg:x3; val_offset:77220*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77220*0 + 3*396*FLEN/8, x4, x1, x2)

inst_25741:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c7ffffffffffff; valaddr_reg:x3; val_offset:77223*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77223*0 + 3*397*FLEN/8, x4, x1, x2)

inst_25742:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83c8000000000000; valaddr_reg:x3; val_offset:77226*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77226*0 + 3*398*FLEN/8, x4, x1, x2)

inst_25743:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cc000000000000; valaddr_reg:x3; val_offset:77229*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77229*0 + 3*399*FLEN/8, x4, x1, x2)

inst_25744:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83ce000000000000; valaddr_reg:x3; val_offset:77232*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77232*0 + 3*400*FLEN/8, x4, x1, x2)

inst_25745:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cf000000000000; valaddr_reg:x3; val_offset:77235*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77235*0 + 3*401*FLEN/8, x4, x1, x2)

inst_25746:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cf800000000000; valaddr_reg:x3; val_offset:77238*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77238*0 + 3*402*FLEN/8, x4, x1, x2)

inst_25747:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfc00000000000; valaddr_reg:x3; val_offset:77241*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77241*0 + 3*403*FLEN/8, x4, x1, x2)

inst_25748:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfe00000000000; valaddr_reg:x3; val_offset:77244*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77244*0 + 3*404*FLEN/8, x4, x1, x2)

inst_25749:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cff00000000000; valaddr_reg:x3; val_offset:77247*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77247*0 + 3*405*FLEN/8, x4, x1, x2)

inst_25750:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cff80000000000; valaddr_reg:x3; val_offset:77250*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77250*0 + 3*406*FLEN/8, x4, x1, x2)

inst_25751:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffc0000000000; valaddr_reg:x3; val_offset:77253*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77253*0 + 3*407*FLEN/8, x4, x1, x2)

inst_25752:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffe0000000000; valaddr_reg:x3; val_offset:77256*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77256*0 + 3*408*FLEN/8, x4, x1, x2)

inst_25753:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfff0000000000; valaddr_reg:x3; val_offset:77259*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77259*0 + 3*409*FLEN/8, x4, x1, x2)

inst_25754:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfff8000000000; valaddr_reg:x3; val_offset:77262*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77262*0 + 3*410*FLEN/8, x4, x1, x2)

inst_25755:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffc000000000; valaddr_reg:x3; val_offset:77265*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77265*0 + 3*411*FLEN/8, x4, x1, x2)

inst_25756:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffe000000000; valaddr_reg:x3; val_offset:77268*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77268*0 + 3*412*FLEN/8, x4, x1, x2)

inst_25757:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffff000000000; valaddr_reg:x3; val_offset:77271*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77271*0 + 3*413*FLEN/8, x4, x1, x2)

inst_25758:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffff800000000; valaddr_reg:x3; val_offset:77274*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77274*0 + 3*414*FLEN/8, x4, x1, x2)

inst_25759:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffc00000000; valaddr_reg:x3; val_offset:77277*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77277*0 + 3*415*FLEN/8, x4, x1, x2)

inst_25760:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffe00000000; valaddr_reg:x3; val_offset:77280*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77280*0 + 3*416*FLEN/8, x4, x1, x2)

inst_25761:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffff00000000; valaddr_reg:x3; val_offset:77283*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77283*0 + 3*417*FLEN/8, x4, x1, x2)

inst_25762:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffff80000000; valaddr_reg:x3; val_offset:77286*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77286*0 + 3*418*FLEN/8, x4, x1, x2)

inst_25763:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffc0000000; valaddr_reg:x3; val_offset:77289*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77289*0 + 3*419*FLEN/8, x4, x1, x2)

inst_25764:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffe0000000; valaddr_reg:x3; val_offset:77292*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77292*0 + 3*420*FLEN/8, x4, x1, x2)

inst_25765:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffff0000000; valaddr_reg:x3; val_offset:77295*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77295*0 + 3*421*FLEN/8, x4, x1, x2)

inst_25766:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffff8000000; valaddr_reg:x3; val_offset:77298*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77298*0 + 3*422*FLEN/8, x4, x1, x2)

inst_25767:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffc000000; valaddr_reg:x3; val_offset:77301*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77301*0 + 3*423*FLEN/8, x4, x1, x2)

inst_25768:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffe000000; valaddr_reg:x3; val_offset:77304*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77304*0 + 3*424*FLEN/8, x4, x1, x2)

inst_25769:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffff000000; valaddr_reg:x3; val_offset:77307*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77307*0 + 3*425*FLEN/8, x4, x1, x2)

inst_25770:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffff800000; valaddr_reg:x3; val_offset:77310*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77310*0 + 3*426*FLEN/8, x4, x1, x2)

inst_25771:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffc00000; valaddr_reg:x3; val_offset:77313*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77313*0 + 3*427*FLEN/8, x4, x1, x2)

inst_25772:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffe00000; valaddr_reg:x3; val_offset:77316*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77316*0 + 3*428*FLEN/8, x4, x1, x2)

inst_25773:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffff00000; valaddr_reg:x3; val_offset:77319*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77319*0 + 3*429*FLEN/8, x4, x1, x2)

inst_25774:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffff80000; valaddr_reg:x3; val_offset:77322*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77322*0 + 3*430*FLEN/8, x4, x1, x2)

inst_25775:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffc0000; valaddr_reg:x3; val_offset:77325*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77325*0 + 3*431*FLEN/8, x4, x1, x2)

inst_25776:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffe0000; valaddr_reg:x3; val_offset:77328*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77328*0 + 3*432*FLEN/8, x4, x1, x2)

inst_25777:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffff0000; valaddr_reg:x3; val_offset:77331*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77331*0 + 3*433*FLEN/8, x4, x1, x2)

inst_25778:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffff8000; valaddr_reg:x3; val_offset:77334*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77334*0 + 3*434*FLEN/8, x4, x1, x2)

inst_25779:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffffc000; valaddr_reg:x3; val_offset:77337*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77337*0 + 3*435*FLEN/8, x4, x1, x2)

inst_25780:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffffe000; valaddr_reg:x3; val_offset:77340*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77340*0 + 3*436*FLEN/8, x4, x1, x2)

inst_25781:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffff000; valaddr_reg:x3; val_offset:77343*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77343*0 + 3*437*FLEN/8, x4, x1, x2)

inst_25782:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffff800; valaddr_reg:x3; val_offset:77346*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77346*0 + 3*438*FLEN/8, x4, x1, x2)

inst_25783:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffffc00; valaddr_reg:x3; val_offset:77349*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77349*0 + 3*439*FLEN/8, x4, x1, x2)

inst_25784:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffffe00; valaddr_reg:x3; val_offset:77352*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77352*0 + 3*440*FLEN/8, x4, x1, x2)

inst_25785:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffffff00; valaddr_reg:x3; val_offset:77355*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77355*0 + 3*441*FLEN/8, x4, x1, x2)

inst_25786:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffffff80; valaddr_reg:x3; val_offset:77358*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77358*0 + 3*442*FLEN/8, x4, x1, x2)

inst_25787:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffffffc0; valaddr_reg:x3; val_offset:77361*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77361*0 + 3*443*FLEN/8, x4, x1, x2)

inst_25788:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffffffe0; valaddr_reg:x3; val_offset:77364*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77364*0 + 3*444*FLEN/8, x4, x1, x2)

inst_25789:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffffff0; valaddr_reg:x3; val_offset:77367*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77367*0 + 3*445*FLEN/8, x4, x1, x2)

inst_25790:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffffff8; valaddr_reg:x3; val_offset:77370*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77370*0 + 3*446*FLEN/8, x4, x1, x2)

inst_25791:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffffffc; valaddr_reg:x3; val_offset:77373*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77373*0 + 3*447*FLEN/8, x4, x1, x2)

inst_25792:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cffffffffffffe; valaddr_reg:x3; val_offset:77376*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77376*0 + 3*448*FLEN/8, x4, x1, x2)

inst_25793:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xd04149240396f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8d04149240396f; op2val:0x8000;
op3val:0x83cfffffffffffff; valaddr_reg:x3; val_offset:77379*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77379*0 + 3*449*FLEN/8, x4, x1, x2)

inst_25794:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:77382*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77382*0 + 3*450*FLEN/8, x4, x1, x2)

inst_25795:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:77385*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77385*0 + 3*451*FLEN/8, x4, x1, x2)

inst_25796:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:77388*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77388*0 + 3*452*FLEN/8, x4, x1, x2)

inst_25797:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:77391*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77391*0 + 3*453*FLEN/8, x4, x1, x2)

inst_25798:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:77394*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77394*0 + 3*454*FLEN/8, x4, x1, x2)

inst_25799:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:77397*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77397*0 + 3*455*FLEN/8, x4, x1, x2)

inst_25800:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:77400*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77400*0 + 3*456*FLEN/8, x4, x1, x2)

inst_25801:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:77403*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77403*0 + 3*457*FLEN/8, x4, x1, x2)

inst_25802:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:77406*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77406*0 + 3*458*FLEN/8, x4, x1, x2)

inst_25803:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:77409*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77409*0 + 3*459*FLEN/8, x4, x1, x2)

inst_25804:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:77412*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77412*0 + 3*460*FLEN/8, x4, x1, x2)

inst_25805:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:77415*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77415*0 + 3*461*FLEN/8, x4, x1, x2)

inst_25806:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:77418*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77418*0 + 3*462*FLEN/8, x4, x1, x2)

inst_25807:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:77421*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77421*0 + 3*463*FLEN/8, x4, x1, x2)

inst_25808:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:77424*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77424*0 + 3*464*FLEN/8, x4, x1, x2)

inst_25809:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:77427*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77427*0 + 3*465*FLEN/8, x4, x1, x2)

inst_25810:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:77430*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77430*0 + 3*466*FLEN/8, x4, x1, x2)

inst_25811:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:77433*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77433*0 + 3*467*FLEN/8, x4, x1, x2)

inst_25812:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:77436*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77436*0 + 3*468*FLEN/8, x4, x1, x2)

inst_25813:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:77439*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77439*0 + 3*469*FLEN/8, x4, x1, x2)

inst_25814:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:77442*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77442*0 + 3*470*FLEN/8, x4, x1, x2)

inst_25815:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:77445*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77445*0 + 3*471*FLEN/8, x4, x1, x2)

inst_25816:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000000000; valaddr_reg:x3; val_offset:77448*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77448*0 + 3*472*FLEN/8, x4, x1, x2)

inst_25817:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000000001; valaddr_reg:x3; val_offset:77451*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77451*0 + 3*473*FLEN/8, x4, x1, x2)

inst_25818:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000000003; valaddr_reg:x3; val_offset:77454*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77454*0 + 3*474*FLEN/8, x4, x1, x2)

inst_25819:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000000007; valaddr_reg:x3; val_offset:77457*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77457*0 + 3*475*FLEN/8, x4, x1, x2)

inst_25820:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000000000f; valaddr_reg:x3; val_offset:77460*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77460*0 + 3*476*FLEN/8, x4, x1, x2)

inst_25821:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000000001f; valaddr_reg:x3; val_offset:77463*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77463*0 + 3*477*FLEN/8, x4, x1, x2)

inst_25822:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000000003f; valaddr_reg:x3; val_offset:77466*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77466*0 + 3*478*FLEN/8, x4, x1, x2)

inst_25823:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000000007f; valaddr_reg:x3; val_offset:77469*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77469*0 + 3*479*FLEN/8, x4, x1, x2)

inst_25824:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000000000ff; valaddr_reg:x3; val_offset:77472*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77472*0 + 3*480*FLEN/8, x4, x1, x2)

inst_25825:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000000001ff; valaddr_reg:x3; val_offset:77475*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77475*0 + 3*481*FLEN/8, x4, x1, x2)

inst_25826:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000000003ff; valaddr_reg:x3; val_offset:77478*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77478*0 + 3*482*FLEN/8, x4, x1, x2)

inst_25827:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000000007ff; valaddr_reg:x3; val_offset:77481*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77481*0 + 3*483*FLEN/8, x4, x1, x2)

inst_25828:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000000fff; valaddr_reg:x3; val_offset:77484*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77484*0 + 3*484*FLEN/8, x4, x1, x2)

inst_25829:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000001fff; valaddr_reg:x3; val_offset:77487*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77487*0 + 3*485*FLEN/8, x4, x1, x2)

inst_25830:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000003fff; valaddr_reg:x3; val_offset:77490*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77490*0 + 3*486*FLEN/8, x4, x1, x2)

inst_25831:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000007fff; valaddr_reg:x3; val_offset:77493*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77493*0 + 3*487*FLEN/8, x4, x1, x2)

inst_25832:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000000ffff; valaddr_reg:x3; val_offset:77496*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77496*0 + 3*488*FLEN/8, x4, x1, x2)

inst_25833:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000001ffff; valaddr_reg:x3; val_offset:77499*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77499*0 + 3*489*FLEN/8, x4, x1, x2)

inst_25834:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000003ffff; valaddr_reg:x3; val_offset:77502*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77502*0 + 3*490*FLEN/8, x4, x1, x2)

inst_25835:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000007ffff; valaddr_reg:x3; val_offset:77505*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77505*0 + 3*491*FLEN/8, x4, x1, x2)

inst_25836:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000000fffff; valaddr_reg:x3; val_offset:77508*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77508*0 + 3*492*FLEN/8, x4, x1, x2)

inst_25837:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000001fffff; valaddr_reg:x3; val_offset:77511*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77511*0 + 3*493*FLEN/8, x4, x1, x2)

inst_25838:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000003fffff; valaddr_reg:x3; val_offset:77514*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77514*0 + 3*494*FLEN/8, x4, x1, x2)

inst_25839:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000007fffff; valaddr_reg:x3; val_offset:77517*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77517*0 + 3*495*FLEN/8, x4, x1, x2)

inst_25840:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000000ffffff; valaddr_reg:x3; val_offset:77520*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77520*0 + 3*496*FLEN/8, x4, x1, x2)

inst_25841:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000001ffffff; valaddr_reg:x3; val_offset:77523*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77523*0 + 3*497*FLEN/8, x4, x1, x2)

inst_25842:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000003ffffff; valaddr_reg:x3; val_offset:77526*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77526*0 + 3*498*FLEN/8, x4, x1, x2)

inst_25843:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000007ffffff; valaddr_reg:x3; val_offset:77529*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77529*0 + 3*499*FLEN/8, x4, x1, x2)

inst_25844:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000000fffffff; valaddr_reg:x3; val_offset:77532*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77532*0 + 3*500*FLEN/8, x4, x1, x2)

inst_25845:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000001fffffff; valaddr_reg:x3; val_offset:77535*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77535*0 + 3*501*FLEN/8, x4, x1, x2)

inst_25846:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000003fffffff; valaddr_reg:x3; val_offset:77538*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77538*0 + 3*502*FLEN/8, x4, x1, x2)

inst_25847:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000007fffffff; valaddr_reg:x3; val_offset:77541*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77541*0 + 3*503*FLEN/8, x4, x1, x2)

inst_25848:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00000ffffffff; valaddr_reg:x3; val_offset:77544*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77544*0 + 3*504*FLEN/8, x4, x1, x2)

inst_25849:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00001ffffffff; valaddr_reg:x3; val_offset:77547*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77547*0 + 3*505*FLEN/8, x4, x1, x2)

inst_25850:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00003ffffffff; valaddr_reg:x3; val_offset:77550*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77550*0 + 3*506*FLEN/8, x4, x1, x2)

inst_25851:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00007ffffffff; valaddr_reg:x3; val_offset:77553*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77553*0 + 3*507*FLEN/8, x4, x1, x2)

inst_25852:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0000fffffffff; valaddr_reg:x3; val_offset:77556*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77556*0 + 3*508*FLEN/8, x4, x1, x2)

inst_25853:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0001fffffffff; valaddr_reg:x3; val_offset:77559*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77559*0 + 3*509*FLEN/8, x4, x1, x2)

inst_25854:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0003fffffffff; valaddr_reg:x3; val_offset:77562*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77562*0 + 3*510*FLEN/8, x4, x1, x2)

inst_25855:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0007fffffffff; valaddr_reg:x3; val_offset:77565*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77565*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_25856:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c000ffffffffff; valaddr_reg:x3; val_offset:77568*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77568*0 + 3*512*FLEN/8, x4, x1, x2)

inst_25857:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c001ffffffffff; valaddr_reg:x3; val_offset:77571*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77571*0 + 3*513*FLEN/8, x4, x1, x2)

inst_25858:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c003ffffffffff; valaddr_reg:x3; val_offset:77574*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77574*0 + 3*514*FLEN/8, x4, x1, x2)

inst_25859:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c007ffffffffff; valaddr_reg:x3; val_offset:77577*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77577*0 + 3*515*FLEN/8, x4, x1, x2)

inst_25860:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c00fffffffffff; valaddr_reg:x3; val_offset:77580*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77580*0 + 3*516*FLEN/8, x4, x1, x2)

inst_25861:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c01fffffffffff; valaddr_reg:x3; val_offset:77583*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77583*0 + 3*517*FLEN/8, x4, x1, x2)

inst_25862:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c03fffffffffff; valaddr_reg:x3; val_offset:77586*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77586*0 + 3*518*FLEN/8, x4, x1, x2)

inst_25863:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c07fffffffffff; valaddr_reg:x3; val_offset:77589*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77589*0 + 3*519*FLEN/8, x4, x1, x2)

inst_25864:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c0ffffffffffff; valaddr_reg:x3; val_offset:77592*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77592*0 + 3*520*FLEN/8, x4, x1, x2)

inst_25865:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c1ffffffffffff; valaddr_reg:x3; val_offset:77595*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77595*0 + 3*521*FLEN/8, x4, x1, x2)

inst_25866:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c3ffffffffffff; valaddr_reg:x3; val_offset:77598*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77598*0 + 3*522*FLEN/8, x4, x1, x2)

inst_25867:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c7ffffffffffff; valaddr_reg:x3; val_offset:77601*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77601*0 + 3*523*FLEN/8, x4, x1, x2)

inst_25868:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82c8000000000000; valaddr_reg:x3; val_offset:77604*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77604*0 + 3*524*FLEN/8, x4, x1, x2)

inst_25869:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cc000000000000; valaddr_reg:x3; val_offset:77607*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77607*0 + 3*525*FLEN/8, x4, x1, x2)

inst_25870:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82ce000000000000; valaddr_reg:x3; val_offset:77610*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77610*0 + 3*526*FLEN/8, x4, x1, x2)

inst_25871:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cf000000000000; valaddr_reg:x3; val_offset:77613*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77613*0 + 3*527*FLEN/8, x4, x1, x2)

inst_25872:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cf800000000000; valaddr_reg:x3; val_offset:77616*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77616*0 + 3*528*FLEN/8, x4, x1, x2)

inst_25873:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfc00000000000; valaddr_reg:x3; val_offset:77619*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77619*0 + 3*529*FLEN/8, x4, x1, x2)

inst_25874:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfe00000000000; valaddr_reg:x3; val_offset:77622*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77622*0 + 3*530*FLEN/8, x4, x1, x2)

inst_25875:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cff00000000000; valaddr_reg:x3; val_offset:77625*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77625*0 + 3*531*FLEN/8, x4, x1, x2)

inst_25876:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cff80000000000; valaddr_reg:x3; val_offset:77628*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77628*0 + 3*532*FLEN/8, x4, x1, x2)

inst_25877:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffc0000000000; valaddr_reg:x3; val_offset:77631*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77631*0 + 3*533*FLEN/8, x4, x1, x2)

inst_25878:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffe0000000000; valaddr_reg:x3; val_offset:77634*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77634*0 + 3*534*FLEN/8, x4, x1, x2)

inst_25879:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfff0000000000; valaddr_reg:x3; val_offset:77637*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77637*0 + 3*535*FLEN/8, x4, x1, x2)

inst_25880:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfff8000000000; valaddr_reg:x3; val_offset:77640*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77640*0 + 3*536*FLEN/8, x4, x1, x2)

inst_25881:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffc000000000; valaddr_reg:x3; val_offset:77643*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77643*0 + 3*537*FLEN/8, x4, x1, x2)

inst_25882:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffe000000000; valaddr_reg:x3; val_offset:77646*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77646*0 + 3*538*FLEN/8, x4, x1, x2)

inst_25883:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffff000000000; valaddr_reg:x3; val_offset:77649*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77649*0 + 3*539*FLEN/8, x4, x1, x2)

inst_25884:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffff800000000; valaddr_reg:x3; val_offset:77652*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77652*0 + 3*540*FLEN/8, x4, x1, x2)

inst_25885:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffc00000000; valaddr_reg:x3; val_offset:77655*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77655*0 + 3*541*FLEN/8, x4, x1, x2)

inst_25886:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffe00000000; valaddr_reg:x3; val_offset:77658*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77658*0 + 3*542*FLEN/8, x4, x1, x2)

inst_25887:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffff00000000; valaddr_reg:x3; val_offset:77661*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77661*0 + 3*543*FLEN/8, x4, x1, x2)

inst_25888:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffff80000000; valaddr_reg:x3; val_offset:77664*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77664*0 + 3*544*FLEN/8, x4, x1, x2)

inst_25889:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffc0000000; valaddr_reg:x3; val_offset:77667*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77667*0 + 3*545*FLEN/8, x4, x1, x2)

inst_25890:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffe0000000; valaddr_reg:x3; val_offset:77670*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77670*0 + 3*546*FLEN/8, x4, x1, x2)

inst_25891:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffff0000000; valaddr_reg:x3; val_offset:77673*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77673*0 + 3*547*FLEN/8, x4, x1, x2)

inst_25892:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffff8000000; valaddr_reg:x3; val_offset:77676*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77676*0 + 3*548*FLEN/8, x4, x1, x2)

inst_25893:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffc000000; valaddr_reg:x3; val_offset:77679*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77679*0 + 3*549*FLEN/8, x4, x1, x2)

inst_25894:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffe000000; valaddr_reg:x3; val_offset:77682*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77682*0 + 3*550*FLEN/8, x4, x1, x2)

inst_25895:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffff000000; valaddr_reg:x3; val_offset:77685*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77685*0 + 3*551*FLEN/8, x4, x1, x2)

inst_25896:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffff800000; valaddr_reg:x3; val_offset:77688*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77688*0 + 3*552*FLEN/8, x4, x1, x2)

inst_25897:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffc00000; valaddr_reg:x3; val_offset:77691*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77691*0 + 3*553*FLEN/8, x4, x1, x2)

inst_25898:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffe00000; valaddr_reg:x3; val_offset:77694*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77694*0 + 3*554*FLEN/8, x4, x1, x2)

inst_25899:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffff00000; valaddr_reg:x3; val_offset:77697*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77697*0 + 3*555*FLEN/8, x4, x1, x2)

inst_25900:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffff80000; valaddr_reg:x3; val_offset:77700*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77700*0 + 3*556*FLEN/8, x4, x1, x2)

inst_25901:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffc0000; valaddr_reg:x3; val_offset:77703*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77703*0 + 3*557*FLEN/8, x4, x1, x2)

inst_25902:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffe0000; valaddr_reg:x3; val_offset:77706*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77706*0 + 3*558*FLEN/8, x4, x1, x2)

inst_25903:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffff0000; valaddr_reg:x3; val_offset:77709*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77709*0 + 3*559*FLEN/8, x4, x1, x2)

inst_25904:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffff8000; valaddr_reg:x3; val_offset:77712*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77712*0 + 3*560*FLEN/8, x4, x1, x2)

inst_25905:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffffc000; valaddr_reg:x3; val_offset:77715*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77715*0 + 3*561*FLEN/8, x4, x1, x2)

inst_25906:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffffe000; valaddr_reg:x3; val_offset:77718*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77718*0 + 3*562*FLEN/8, x4, x1, x2)

inst_25907:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffff000; valaddr_reg:x3; val_offset:77721*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77721*0 + 3*563*FLEN/8, x4, x1, x2)

inst_25908:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffff800; valaddr_reg:x3; val_offset:77724*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77724*0 + 3*564*FLEN/8, x4, x1, x2)

inst_25909:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffffc00; valaddr_reg:x3; val_offset:77727*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77727*0 + 3*565*FLEN/8, x4, x1, x2)

inst_25910:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffffe00; valaddr_reg:x3; val_offset:77730*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77730*0 + 3*566*FLEN/8, x4, x1, x2)

inst_25911:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffffff00; valaddr_reg:x3; val_offset:77733*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77733*0 + 3*567*FLEN/8, x4, x1, x2)

inst_25912:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffffff80; valaddr_reg:x3; val_offset:77736*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77736*0 + 3*568*FLEN/8, x4, x1, x2)

inst_25913:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffffffc0; valaddr_reg:x3; val_offset:77739*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77739*0 + 3*569*FLEN/8, x4, x1, x2)

inst_25914:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffffffe0; valaddr_reg:x3; val_offset:77742*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77742*0 + 3*570*FLEN/8, x4, x1, x2)

inst_25915:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffffff0; valaddr_reg:x3; val_offset:77745*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77745*0 + 3*571*FLEN/8, x4, x1, x2)

inst_25916:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffffff8; valaddr_reg:x3; val_offset:77748*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77748*0 + 3*572*FLEN/8, x4, x1, x2)

inst_25917:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffffffc; valaddr_reg:x3; val_offset:77751*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77751*0 + 3*573*FLEN/8, x4, x1, x2)

inst_25918:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cffffffffffffe; valaddr_reg:x3; val_offset:77754*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77754*0 + 3*574*FLEN/8, x4, x1, x2)

inst_25919:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdab39a043d2c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x02c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dab39a043d2c3; op2val:0x8000;
op3val:0x82cfffffffffffff; valaddr_reg:x3; val_offset:77757*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77757*0 + 3*575*FLEN/8, x4, x1, x2)

inst_25920:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:77760*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77760*0 + 3*576*FLEN/8, x4, x1, x2)

inst_25921:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:77763*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77763*0 + 3*577*FLEN/8, x4, x1, x2)

inst_25922:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:77766*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77766*0 + 3*578*FLEN/8, x4, x1, x2)

inst_25923:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:77769*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77769*0 + 3*579*FLEN/8, x4, x1, x2)

inst_25924:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:77772*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77772*0 + 3*580*FLEN/8, x4, x1, x2)

inst_25925:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:77775*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77775*0 + 3*581*FLEN/8, x4, x1, x2)

inst_25926:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x13333333333333; valaddr_reg:x3; val_offset:77778*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77778*0 + 3*582*FLEN/8, x4, x1, x2)

inst_25927:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x14924924924924; valaddr_reg:x3; val_offset:77781*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77781*0 + 3*583*FLEN/8, x4, x1, x2)

inst_25928:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x16666666666666; valaddr_reg:x3; val_offset:77784*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77784*0 + 3*584*FLEN/8, x4, x1, x2)

inst_25929:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x16db6db6db6db6; valaddr_reg:x3; val_offset:77787*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77787*0 + 3*585*FLEN/8, x4, x1, x2)

inst_25930:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x17777777777777; valaddr_reg:x3; val_offset:77790*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77790*0 + 3*586*FLEN/8, x4, x1, x2)

inst_25931:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18888888888888; valaddr_reg:x3; val_offset:77793*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77793*0 + 3*587*FLEN/8, x4, x1, x2)

inst_25932:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:77796*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77796*0 + 3*588*FLEN/8, x4, x1, x2)

inst_25933:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:77799*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77799*0 + 3*589*FLEN/8, x4, x1, x2)

inst_25934:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:77802*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77802*0 + 3*590*FLEN/8, x4, x1, x2)

inst_25935:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:77805*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77805*0 + 3*591*FLEN/8, x4, x1, x2)

inst_25936:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:77808*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77808*0 + 3*592*FLEN/8, x4, x1, x2)

inst_25937:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:77811*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77811*0 + 3*593*FLEN/8, x4, x1, x2)

inst_25938:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:77814*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77814*0 + 3*594*FLEN/8, x4, x1, x2)

inst_25939:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:77817*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77817*0 + 3*595*FLEN/8, x4, x1, x2)

inst_25940:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:77820*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77820*0 + 3*596*FLEN/8, x4, x1, x2)

inst_25941:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:77823*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77823*0 + 3*597*FLEN/8, x4, x1, x2)

inst_25942:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000000000; valaddr_reg:x3; val_offset:77826*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77826*0 + 3*598*FLEN/8, x4, x1, x2)

inst_25943:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000000001; valaddr_reg:x3; val_offset:77829*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77829*0 + 3*599*FLEN/8, x4, x1, x2)

inst_25944:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000000003; valaddr_reg:x3; val_offset:77832*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77832*0 + 3*600*FLEN/8, x4, x1, x2)

inst_25945:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000000007; valaddr_reg:x3; val_offset:77835*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77835*0 + 3*601*FLEN/8, x4, x1, x2)

inst_25946:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000000000f; valaddr_reg:x3; val_offset:77838*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77838*0 + 3*602*FLEN/8, x4, x1, x2)

inst_25947:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000000001f; valaddr_reg:x3; val_offset:77841*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77841*0 + 3*603*FLEN/8, x4, x1, x2)

inst_25948:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000000003f; valaddr_reg:x3; val_offset:77844*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77844*0 + 3*604*FLEN/8, x4, x1, x2)

inst_25949:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000000007f; valaddr_reg:x3; val_offset:77847*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77847*0 + 3*605*FLEN/8, x4, x1, x2)

inst_25950:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000000000ff; valaddr_reg:x3; val_offset:77850*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77850*0 + 3*606*FLEN/8, x4, x1, x2)

inst_25951:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000000001ff; valaddr_reg:x3; val_offset:77853*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77853*0 + 3*607*FLEN/8, x4, x1, x2)

inst_25952:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000000003ff; valaddr_reg:x3; val_offset:77856*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77856*0 + 3*608*FLEN/8, x4, x1, x2)

inst_25953:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000000007ff; valaddr_reg:x3; val_offset:77859*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77859*0 + 3*609*FLEN/8, x4, x1, x2)

inst_25954:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000000fff; valaddr_reg:x3; val_offset:77862*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77862*0 + 3*610*FLEN/8, x4, x1, x2)

inst_25955:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000001fff; valaddr_reg:x3; val_offset:77865*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77865*0 + 3*611*FLEN/8, x4, x1, x2)

inst_25956:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000003fff; valaddr_reg:x3; val_offset:77868*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77868*0 + 3*612*FLEN/8, x4, x1, x2)

inst_25957:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000007fff; valaddr_reg:x3; val_offset:77871*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77871*0 + 3*613*FLEN/8, x4, x1, x2)

inst_25958:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000000ffff; valaddr_reg:x3; val_offset:77874*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77874*0 + 3*614*FLEN/8, x4, x1, x2)

inst_25959:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000001ffff; valaddr_reg:x3; val_offset:77877*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77877*0 + 3*615*FLEN/8, x4, x1, x2)

inst_25960:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000003ffff; valaddr_reg:x3; val_offset:77880*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77880*0 + 3*616*FLEN/8, x4, x1, x2)

inst_25961:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000007ffff; valaddr_reg:x3; val_offset:77883*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77883*0 + 3*617*FLEN/8, x4, x1, x2)

inst_25962:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000000fffff; valaddr_reg:x3; val_offset:77886*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77886*0 + 3*618*FLEN/8, x4, x1, x2)

inst_25963:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000001fffff; valaddr_reg:x3; val_offset:77889*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77889*0 + 3*619*FLEN/8, x4, x1, x2)

inst_25964:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000003fffff; valaddr_reg:x3; val_offset:77892*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77892*0 + 3*620*FLEN/8, x4, x1, x2)

inst_25965:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000007fffff; valaddr_reg:x3; val_offset:77895*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77895*0 + 3*621*FLEN/8, x4, x1, x2)

inst_25966:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000000ffffff; valaddr_reg:x3; val_offset:77898*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77898*0 + 3*622*FLEN/8, x4, x1, x2)

inst_25967:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000001ffffff; valaddr_reg:x3; val_offset:77901*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77901*0 + 3*623*FLEN/8, x4, x1, x2)

inst_25968:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000003ffffff; valaddr_reg:x3; val_offset:77904*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77904*0 + 3*624*FLEN/8, x4, x1, x2)

inst_25969:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000007ffffff; valaddr_reg:x3; val_offset:77907*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77907*0 + 3*625*FLEN/8, x4, x1, x2)

inst_25970:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000000fffffff; valaddr_reg:x3; val_offset:77910*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77910*0 + 3*626*FLEN/8, x4, x1, x2)

inst_25971:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000001fffffff; valaddr_reg:x3; val_offset:77913*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77913*0 + 3*627*FLEN/8, x4, x1, x2)

inst_25972:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000003fffffff; valaddr_reg:x3; val_offset:77916*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77916*0 + 3*628*FLEN/8, x4, x1, x2)

inst_25973:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000007fffffff; valaddr_reg:x3; val_offset:77919*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77919*0 + 3*629*FLEN/8, x4, x1, x2)

inst_25974:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800000ffffffff; valaddr_reg:x3; val_offset:77922*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77922*0 + 3*630*FLEN/8, x4, x1, x2)

inst_25975:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800001ffffffff; valaddr_reg:x3; val_offset:77925*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77925*0 + 3*631*FLEN/8, x4, x1, x2)

inst_25976:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800003ffffffff; valaddr_reg:x3; val_offset:77928*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77928*0 + 3*632*FLEN/8, x4, x1, x2)

inst_25977:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800007ffffffff; valaddr_reg:x3; val_offset:77931*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77931*0 + 3*633*FLEN/8, x4, x1, x2)

inst_25978:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180000fffffffff; valaddr_reg:x3; val_offset:77934*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77934*0 + 3*634*FLEN/8, x4, x1, x2)

inst_25979:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180001fffffffff; valaddr_reg:x3; val_offset:77937*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77937*0 + 3*635*FLEN/8, x4, x1, x2)

inst_25980:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180003fffffffff; valaddr_reg:x3; val_offset:77940*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77940*0 + 3*636*FLEN/8, x4, x1, x2)

inst_25981:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180007fffffffff; valaddr_reg:x3; val_offset:77943*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77943*0 + 3*637*FLEN/8, x4, x1, x2)

inst_25982:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18000ffffffffff; valaddr_reg:x3; val_offset:77946*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77946*0 + 3*638*FLEN/8, x4, x1, x2)

inst_25983:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18001ffffffffff; valaddr_reg:x3; val_offset:77949*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77949*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_25984:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18003ffffffffff; valaddr_reg:x3; val_offset:77952*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77952*0 + 3*640*FLEN/8, x4, x1, x2)

inst_25985:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18007ffffffffff; valaddr_reg:x3; val_offset:77955*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77955*0 + 3*641*FLEN/8, x4, x1, x2)

inst_25986:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1800fffffffffff; valaddr_reg:x3; val_offset:77958*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77958*0 + 3*642*FLEN/8, x4, x1, x2)

inst_25987:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1801fffffffffff; valaddr_reg:x3; val_offset:77961*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77961*0 + 3*643*FLEN/8, x4, x1, x2)

inst_25988:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1803fffffffffff; valaddr_reg:x3; val_offset:77964*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77964*0 + 3*644*FLEN/8, x4, x1, x2)

inst_25989:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x1807fffffffffff; valaddr_reg:x3; val_offset:77967*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77967*0 + 3*645*FLEN/8, x4, x1, x2)

inst_25990:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x180ffffffffffff; valaddr_reg:x3; val_offset:77970*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77970*0 + 3*646*FLEN/8, x4, x1, x2)

inst_25991:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x181ffffffffffff; valaddr_reg:x3; val_offset:77973*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77973*0 + 3*647*FLEN/8, x4, x1, x2)

inst_25992:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x183ffffffffffff; valaddr_reg:x3; val_offset:77976*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77976*0 + 3*648*FLEN/8, x4, x1, x2)

inst_25993:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x187ffffffffffff; valaddr_reg:x3; val_offset:77979*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77979*0 + 3*649*FLEN/8, x4, x1, x2)

inst_25994:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x188000000000000; valaddr_reg:x3; val_offset:77982*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77982*0 + 3*650*FLEN/8, x4, x1, x2)

inst_25995:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18c000000000000; valaddr_reg:x3; val_offset:77985*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77985*0 + 3*651*FLEN/8, x4, x1, x2)

inst_25996:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18e000000000000; valaddr_reg:x3; val_offset:77988*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77988*0 + 3*652*FLEN/8, x4, x1, x2)

inst_25997:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18f000000000000; valaddr_reg:x3; val_offset:77991*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77991*0 + 3*653*FLEN/8, x4, x1, x2)

inst_25998:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18f800000000000; valaddr_reg:x3; val_offset:77994*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77994*0 + 3*654*FLEN/8, x4, x1, x2)

inst_25999:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fc00000000000; valaddr_reg:x3; val_offset:77997*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 77997*0 + 3*655*FLEN/8, x4, x1, x2)

inst_26000:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fe00000000000; valaddr_reg:x3; val_offset:78000*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78000*0 + 3*656*FLEN/8, x4, x1, x2)

inst_26001:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ff00000000000; valaddr_reg:x3; val_offset:78003*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78003*0 + 3*657*FLEN/8, x4, x1, x2)

inst_26002:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ff80000000000; valaddr_reg:x3; val_offset:78006*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78006*0 + 3*658*FLEN/8, x4, x1, x2)

inst_26003:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffc0000000000; valaddr_reg:x3; val_offset:78009*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78009*0 + 3*659*FLEN/8, x4, x1, x2)

inst_26004:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffe0000000000; valaddr_reg:x3; val_offset:78012*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78012*0 + 3*660*FLEN/8, x4, x1, x2)

inst_26005:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fff0000000000; valaddr_reg:x3; val_offset:78015*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78015*0 + 3*661*FLEN/8, x4, x1, x2)

inst_26006:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fff8000000000; valaddr_reg:x3; val_offset:78018*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78018*0 + 3*662*FLEN/8, x4, x1, x2)

inst_26007:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffc000000000; valaddr_reg:x3; val_offset:78021*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78021*0 + 3*663*FLEN/8, x4, x1, x2)

inst_26008:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffe000000000; valaddr_reg:x3; val_offset:78024*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78024*0 + 3*664*FLEN/8, x4, x1, x2)

inst_26009:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffff000000000; valaddr_reg:x3; val_offset:78027*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78027*0 + 3*665*FLEN/8, x4, x1, x2)

inst_26010:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffff800000000; valaddr_reg:x3; val_offset:78030*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78030*0 + 3*666*FLEN/8, x4, x1, x2)

inst_26011:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffc00000000; valaddr_reg:x3; val_offset:78033*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78033*0 + 3*667*FLEN/8, x4, x1, x2)

inst_26012:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffe00000000; valaddr_reg:x3; val_offset:78036*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78036*0 + 3*668*FLEN/8, x4, x1, x2)

inst_26013:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffff00000000; valaddr_reg:x3; val_offset:78039*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78039*0 + 3*669*FLEN/8, x4, x1, x2)

inst_26014:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffff80000000; valaddr_reg:x3; val_offset:78042*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78042*0 + 3*670*FLEN/8, x4, x1, x2)

inst_26015:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffc0000000; valaddr_reg:x3; val_offset:78045*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78045*0 + 3*671*FLEN/8, x4, x1, x2)

inst_26016:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffe0000000; valaddr_reg:x3; val_offset:78048*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78048*0 + 3*672*FLEN/8, x4, x1, x2)

inst_26017:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffff0000000; valaddr_reg:x3; val_offset:78051*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78051*0 + 3*673*FLEN/8, x4, x1, x2)

inst_26018:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffff8000000; valaddr_reg:x3; val_offset:78054*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78054*0 + 3*674*FLEN/8, x4, x1, x2)

inst_26019:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffc000000; valaddr_reg:x3; val_offset:78057*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78057*0 + 3*675*FLEN/8, x4, x1, x2)

inst_26020:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffe000000; valaddr_reg:x3; val_offset:78060*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78060*0 + 3*676*FLEN/8, x4, x1, x2)

inst_26021:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffff000000; valaddr_reg:x3; val_offset:78063*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78063*0 + 3*677*FLEN/8, x4, x1, x2)

inst_26022:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffff800000; valaddr_reg:x3; val_offset:78066*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78066*0 + 3*678*FLEN/8, x4, x1, x2)

inst_26023:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffc00000; valaddr_reg:x3; val_offset:78069*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78069*0 + 3*679*FLEN/8, x4, x1, x2)

inst_26024:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffe00000; valaddr_reg:x3; val_offset:78072*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78072*0 + 3*680*FLEN/8, x4, x1, x2)

inst_26025:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffff00000; valaddr_reg:x3; val_offset:78075*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78075*0 + 3*681*FLEN/8, x4, x1, x2)

inst_26026:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffff80000; valaddr_reg:x3; val_offset:78078*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78078*0 + 3*682*FLEN/8, x4, x1, x2)

inst_26027:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffc0000; valaddr_reg:x3; val_offset:78081*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78081*0 + 3*683*FLEN/8, x4, x1, x2)

inst_26028:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffe0000; valaddr_reg:x3; val_offset:78084*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78084*0 + 3*684*FLEN/8, x4, x1, x2)

inst_26029:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffff0000; valaddr_reg:x3; val_offset:78087*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78087*0 + 3*685*FLEN/8, x4, x1, x2)

inst_26030:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffff8000; valaddr_reg:x3; val_offset:78090*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78090*0 + 3*686*FLEN/8, x4, x1, x2)

inst_26031:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffffc000; valaddr_reg:x3; val_offset:78093*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78093*0 + 3*687*FLEN/8, x4, x1, x2)

inst_26032:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffffe000; valaddr_reg:x3; val_offset:78096*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78096*0 + 3*688*FLEN/8, x4, x1, x2)

inst_26033:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffff000; valaddr_reg:x3; val_offset:78099*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78099*0 + 3*689*FLEN/8, x4, x1, x2)

inst_26034:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffff800; valaddr_reg:x3; val_offset:78102*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78102*0 + 3*690*FLEN/8, x4, x1, x2)

inst_26035:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffffc00; valaddr_reg:x3; val_offset:78105*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78105*0 + 3*691*FLEN/8, x4, x1, x2)

inst_26036:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffffe00; valaddr_reg:x3; val_offset:78108*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78108*0 + 3*692*FLEN/8, x4, x1, x2)

inst_26037:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffffff00; valaddr_reg:x3; val_offset:78111*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78111*0 + 3*693*FLEN/8, x4, x1, x2)

inst_26038:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffffff80; valaddr_reg:x3; val_offset:78114*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78114*0 + 3*694*FLEN/8, x4, x1, x2)

inst_26039:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffffffc0; valaddr_reg:x3; val_offset:78117*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78117*0 + 3*695*FLEN/8, x4, x1, x2)

inst_26040:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffffffe0; valaddr_reg:x3; val_offset:78120*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78120*0 + 3*696*FLEN/8, x4, x1, x2)

inst_26041:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffffff0; valaddr_reg:x3; val_offset:78123*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78123*0 + 3*697*FLEN/8, x4, x1, x2)

inst_26042:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffffff8; valaddr_reg:x3; val_offset:78126*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78126*0 + 3*698*FLEN/8, x4, x1, x2)

inst_26043:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffffffc; valaddr_reg:x3; val_offset:78129*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78129*0 + 3*699*FLEN/8, x4, x1, x2)

inst_26044:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18ffffffffffffe; valaddr_reg:x3; val_offset:78132*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78132*0 + 3*700*FLEN/8, x4, x1, x2)

inst_26045:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xdd50bf9c5c11b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x018 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8dd50bf9c5c11b; op2val:0x0;
op3val:0x18fffffffffffff; valaddr_reg:x3; val_offset:78135*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78135*0 + 3*701*FLEN/8, x4, x1, x2)

inst_26046:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000000000; valaddr_reg:x3; val_offset:78138*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78138*0 + 3*702*FLEN/8, x4, x1, x2)

inst_26047:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000000001; valaddr_reg:x3; val_offset:78141*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78141*0 + 3*703*FLEN/8, x4, x1, x2)

inst_26048:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000000003; valaddr_reg:x3; val_offset:78144*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78144*0 + 3*704*FLEN/8, x4, x1, x2)

inst_26049:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000000007; valaddr_reg:x3; val_offset:78147*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78147*0 + 3*705*FLEN/8, x4, x1, x2)

inst_26050:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000000000f; valaddr_reg:x3; val_offset:78150*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78150*0 + 3*706*FLEN/8, x4, x1, x2)

inst_26051:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000000001f; valaddr_reg:x3; val_offset:78153*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78153*0 + 3*707*FLEN/8, x4, x1, x2)

inst_26052:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000000003f; valaddr_reg:x3; val_offset:78156*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78156*0 + 3*708*FLEN/8, x4, x1, x2)

inst_26053:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000000007f; valaddr_reg:x3; val_offset:78159*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78159*0 + 3*709*FLEN/8, x4, x1, x2)

inst_26054:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000000000ff; valaddr_reg:x3; val_offset:78162*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78162*0 + 3*710*FLEN/8, x4, x1, x2)

inst_26055:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000000001ff; valaddr_reg:x3; val_offset:78165*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78165*0 + 3*711*FLEN/8, x4, x1, x2)

inst_26056:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000000003ff; valaddr_reg:x3; val_offset:78168*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78168*0 + 3*712*FLEN/8, x4, x1, x2)

inst_26057:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000000007ff; valaddr_reg:x3; val_offset:78171*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78171*0 + 3*713*FLEN/8, x4, x1, x2)

inst_26058:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000000fff; valaddr_reg:x3; val_offset:78174*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78174*0 + 3*714*FLEN/8, x4, x1, x2)

inst_26059:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000001fff; valaddr_reg:x3; val_offset:78177*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78177*0 + 3*715*FLEN/8, x4, x1, x2)

inst_26060:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000003fff; valaddr_reg:x3; val_offset:78180*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78180*0 + 3*716*FLEN/8, x4, x1, x2)

inst_26061:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000007fff; valaddr_reg:x3; val_offset:78183*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78183*0 + 3*717*FLEN/8, x4, x1, x2)

inst_26062:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000000ffff; valaddr_reg:x3; val_offset:78186*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78186*0 + 3*718*FLEN/8, x4, x1, x2)

inst_26063:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000001ffff; valaddr_reg:x3; val_offset:78189*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78189*0 + 3*719*FLEN/8, x4, x1, x2)

inst_26064:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000003ffff; valaddr_reg:x3; val_offset:78192*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78192*0 + 3*720*FLEN/8, x4, x1, x2)

inst_26065:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000007ffff; valaddr_reg:x3; val_offset:78195*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78195*0 + 3*721*FLEN/8, x4, x1, x2)

inst_26066:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000000fffff; valaddr_reg:x3; val_offset:78198*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78198*0 + 3*722*FLEN/8, x4, x1, x2)

inst_26067:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000001fffff; valaddr_reg:x3; val_offset:78201*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78201*0 + 3*723*FLEN/8, x4, x1, x2)

inst_26068:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000003fffff; valaddr_reg:x3; val_offset:78204*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78204*0 + 3*724*FLEN/8, x4, x1, x2)

inst_26069:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000007fffff; valaddr_reg:x3; val_offset:78207*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78207*0 + 3*725*FLEN/8, x4, x1, x2)

inst_26070:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000000ffffff; valaddr_reg:x3; val_offset:78210*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78210*0 + 3*726*FLEN/8, x4, x1, x2)

inst_26071:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000001ffffff; valaddr_reg:x3; val_offset:78213*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78213*0 + 3*727*FLEN/8, x4, x1, x2)

inst_26072:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000003ffffff; valaddr_reg:x3; val_offset:78216*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78216*0 + 3*728*FLEN/8, x4, x1, x2)

inst_26073:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000007ffffff; valaddr_reg:x3; val_offset:78219*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78219*0 + 3*729*FLEN/8, x4, x1, x2)

inst_26074:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000000fffffff; valaddr_reg:x3; val_offset:78222*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78222*0 + 3*730*FLEN/8, x4, x1, x2)

inst_26075:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000001fffffff; valaddr_reg:x3; val_offset:78225*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78225*0 + 3*731*FLEN/8, x4, x1, x2)

inst_26076:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000003fffffff; valaddr_reg:x3; val_offset:78228*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78228*0 + 3*732*FLEN/8, x4, x1, x2)

inst_26077:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000007fffffff; valaddr_reg:x3; val_offset:78231*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78231*0 + 3*733*FLEN/8, x4, x1, x2)

inst_26078:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00000ffffffff; valaddr_reg:x3; val_offset:78234*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78234*0 + 3*734*FLEN/8, x4, x1, x2)

inst_26079:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00001ffffffff; valaddr_reg:x3; val_offset:78237*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78237*0 + 3*735*FLEN/8, x4, x1, x2)

inst_26080:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00003ffffffff; valaddr_reg:x3; val_offset:78240*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78240*0 + 3*736*FLEN/8, x4, x1, x2)

inst_26081:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00007ffffffff; valaddr_reg:x3; val_offset:78243*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78243*0 + 3*737*FLEN/8, x4, x1, x2)

inst_26082:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0000fffffffff; valaddr_reg:x3; val_offset:78246*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78246*0 + 3*738*FLEN/8, x4, x1, x2)

inst_26083:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0001fffffffff; valaddr_reg:x3; val_offset:78249*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78249*0 + 3*739*FLEN/8, x4, x1, x2)

inst_26084:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0003fffffffff; valaddr_reg:x3; val_offset:78252*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78252*0 + 3*740*FLEN/8, x4, x1, x2)

inst_26085:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0007fffffffff; valaddr_reg:x3; val_offset:78255*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78255*0 + 3*741*FLEN/8, x4, x1, x2)

inst_26086:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e000ffffffffff; valaddr_reg:x3; val_offset:78258*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78258*0 + 3*742*FLEN/8, x4, x1, x2)

inst_26087:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e001ffffffffff; valaddr_reg:x3; val_offset:78261*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78261*0 + 3*743*FLEN/8, x4, x1, x2)

inst_26088:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e003ffffffffff; valaddr_reg:x3; val_offset:78264*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78264*0 + 3*744*FLEN/8, x4, x1, x2)

inst_26089:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e007ffffffffff; valaddr_reg:x3; val_offset:78267*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78267*0 + 3*745*FLEN/8, x4, x1, x2)

inst_26090:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e00fffffffffff; valaddr_reg:x3; val_offset:78270*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78270*0 + 3*746*FLEN/8, x4, x1, x2)

inst_26091:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e01fffffffffff; valaddr_reg:x3; val_offset:78273*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78273*0 + 3*747*FLEN/8, x4, x1, x2)

inst_26092:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e03fffffffffff; valaddr_reg:x3; val_offset:78276*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78276*0 + 3*748*FLEN/8, x4, x1, x2)

inst_26093:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e07fffffffffff; valaddr_reg:x3; val_offset:78279*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78279*0 + 3*749*FLEN/8, x4, x1, x2)

inst_26094:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e0ffffffffffff; valaddr_reg:x3; val_offset:78282*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78282*0 + 3*750*FLEN/8, x4, x1, x2)

inst_26095:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e1ffffffffffff; valaddr_reg:x3; val_offset:78285*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78285*0 + 3*751*FLEN/8, x4, x1, x2)

inst_26096:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e3ffffffffffff; valaddr_reg:x3; val_offset:78288*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78288*0 + 3*752*FLEN/8, x4, x1, x2)

inst_26097:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e7ffffffffffff; valaddr_reg:x3; val_offset:78291*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78291*0 + 3*753*FLEN/8, x4, x1, x2)

inst_26098:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9e8000000000000; valaddr_reg:x3; val_offset:78294*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78294*0 + 3*754*FLEN/8, x4, x1, x2)

inst_26099:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9ec000000000000; valaddr_reg:x3; val_offset:78297*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78297*0 + 3*755*FLEN/8, x4, x1, x2)

inst_26100:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9ee000000000000; valaddr_reg:x3; val_offset:78300*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78300*0 + 3*756*FLEN/8, x4, x1, x2)

inst_26101:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9ef000000000000; valaddr_reg:x3; val_offset:78303*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78303*0 + 3*757*FLEN/8, x4, x1, x2)

inst_26102:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9ef800000000000; valaddr_reg:x3; val_offset:78306*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78306*0 + 3*758*FLEN/8, x4, x1, x2)

inst_26103:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9efc00000000000; valaddr_reg:x3; val_offset:78309*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78309*0 + 3*759*FLEN/8, x4, x1, x2)

inst_26104:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9efe00000000000; valaddr_reg:x3; val_offset:78312*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78312*0 + 3*760*FLEN/8, x4, x1, x2)

inst_26105:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9eff00000000000; valaddr_reg:x3; val_offset:78315*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78315*0 + 3*761*FLEN/8, x4, x1, x2)

inst_26106:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9eff80000000000; valaddr_reg:x3; val_offset:78318*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78318*0 + 3*762*FLEN/8, x4, x1, x2)

inst_26107:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9effc0000000000; valaddr_reg:x3; val_offset:78321*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78321*0 + 3*763*FLEN/8, x4, x1, x2)

inst_26108:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9effe0000000000; valaddr_reg:x3; val_offset:78324*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78324*0 + 3*764*FLEN/8, x4, x1, x2)

inst_26109:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9efff0000000000; valaddr_reg:x3; val_offset:78327*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78327*0 + 3*765*FLEN/8, x4, x1, x2)

inst_26110:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9efff8000000000; valaddr_reg:x3; val_offset:78330*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78330*0 + 3*766*FLEN/8, x4, x1, x2)

inst_26111:
// fs1 == 0 and fe1 == 0x5f8 and fm1 == 0xde6b575f89d53 and fs2 == 1 and fe2 == 0x605 and fm2 == 0x11f8087987e96 and fs3 == 1 and fe3 == 0x29e and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f8de6b575f89d53; op2val:0xe0511f8087987e96;
op3val:0xa9efffc000000000; valaddr_reg:x3; val_offset:78333*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 78333*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225179985663492095,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225179989958459391,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225179998548393983,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225180015728263167,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225180050088001535,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225180118807478271,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225180256246431743,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225180531124338687,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225181080880152575,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225182180391780351,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225184379415035903,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225188777461547007,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225197573554569215,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225215165740613631,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225250350112702463,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225320718856880127,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225461456345235455,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(225742931321946111,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(226305881275367423,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(227431781182210047,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(227431781182210048,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(228557681089052672,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229120631042473984,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229402106019184640,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229542843507539968,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229613212251717632,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229648396623806464,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229665988809850880,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229674784902873088,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229679182949384192,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229681381972639744,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229682481484267520,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683031240081408,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683306117988352,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683443556941824,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683512276418560,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683546636156928,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683563816026112,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683572405960704,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683576700928000,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683578848411648,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683579922153472,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580459024384,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580727459840,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580861677568,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580928786432,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580962340864,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580979118080,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580987506688,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580991700992,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580993798144,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580994846720,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995371008,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995633152,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995764224,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995829760,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995862528,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995878912,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995887104,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995891200,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995893248,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995894272,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995894784,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895040,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895168,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895232,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895264,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895280,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895288,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895292,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895294,64,FLEN)
NAN_BOXED(6885001023023735635,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(229683580995895295,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489216,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489217,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489219,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489223,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489231,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489247,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489279,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489343,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489471,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492489727,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492490239,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492491263,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492493311,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492497407,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492505599,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492521983,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492554751,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492620287,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247492751359,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247493013503,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247493537791,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247494586367,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247496683519,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247500877823,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247509266431,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247526043647,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247559598079,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247626706943,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405247760924671,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405248029360127,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405248566231039,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405249639972863,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405251787456511,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405256082423807,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405264672358399,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405281852227583,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405316211965951,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405384931442687,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405522370396159,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260405797248303103,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260406347004116991,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260407446515744767,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260409645539000319,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260414043585511423,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260422839678533631,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260440431864578047,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260475616236666879,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260545984980844543,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260686722469199871,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4260968197445910527,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4261531147399331839,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4262657047306174463,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4262657047306174464,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4263782947213017088,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264345897166438400,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264627372143149056,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264768109631504384,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264838478375682048,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264873662747770880,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264891254933815296,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264900051026837504,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264904449073348608,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264906648096604160,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264907747608231936,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908297364045824,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908572241952768,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908709680906240,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908778400382976,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908812760121344,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908829939990528,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908838529925120,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908842824892416,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908844972376064,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908846046117888,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908846582988800,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908846851424256,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908846985641984,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847052750848,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847086305280,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847103082496,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847111471104,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847115665408,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847117762560,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847118811136,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119335424,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119597568,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119728640,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119794176,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119826944,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119843328,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119851520,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119855616,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119857664,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119858688,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859200,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859456,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859584,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859648,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859680,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859696,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859704,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859708,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859710,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4264908847119859711,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6885034577097836979,64,FLEN)
NAN_BOXED(2328904072466512698,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951566848,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951566849,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951566851,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951566855,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951566863,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951566879,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951566911,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951566975,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951567103,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951567359,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951567871,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951568895,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951570943,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951575039,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951583231,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951599615,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951632383,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951697919,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667951828991,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667952091135,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667952615423,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667953663999,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667955761151,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667959955455,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667968344063,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935667985121279,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935668018675711,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935668085784575,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935668220002303,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935668488437759,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935669025308671,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935670099050495,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935672246534143,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935676541501439,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935685131436031,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935702311305215,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935736671043583,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935805390520319,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681935942829473791,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681936217707380735,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681936767463194623,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681937866974822399,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681940065998077951,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681944464044589055,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681953260137611263,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13681970852323655679,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13682006036695744511,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13682076405439922175,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13682217142928277503,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13682498617904988159,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13683061567858409471,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13684187467765252095,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13684187467765252096,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13685313367672094720,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13685876317625516032,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686157792602226688,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686298530090582016,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686368898834759680,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686404083206848512,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686421675392892928,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686430471485915136,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686434869532426240,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686437068555681792,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686438168067309568,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686438717823123456,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686438992701030400,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439130139983872,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439198859460608,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439233219198976,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439250399068160,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439258989002752,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439263283970048,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439265431453696,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439266505195520,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267042066432,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267310501888,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267444719616,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267511828480,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267545382912,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267562160128,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267570548736,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267574743040,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267576840192,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267577888768,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578413056,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578675200,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578806272,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578871808,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578904576,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578920960,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578929152,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578933248,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578935296,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578936320,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578936832,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937088,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937216,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937280,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937312,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937328,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937336,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937340,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937342,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13686439267578937343,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6885106376466923783,64,FLEN)
NAN_BOXED(11520706231446712262,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005568,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005569,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005571,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005575,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005583,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005599,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005631,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005695,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005823,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497006079,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497006591,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497007615,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497009663,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497013759,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497021951,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497038335,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497071103,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497136639,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497267711,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497529855,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014498054143,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014499102719,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014501199871,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014505394175,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014513782783,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014530559999,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014564114431,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014631223295,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014765441023,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588015033876479,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588015570747391,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588016644489215,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588018791972863,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588023086940159,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588031676874751,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588048856743935,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588083216482303,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588151935959039,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588289374912511,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588564252819455,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493589114008633343,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493590213520261119,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493592412543516671,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493596810590027775,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493605606683049983,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493623198869094399,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493658383241183231,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493728751985360895,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493869489473716223,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9494150964450426879,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9494713914403848191,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9495839814310690815,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9495839814310690816,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9496965714217533440,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497528664170954752,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497810139147665408,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497950876636020736,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498021245380198400,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498056429752287232,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498074021938331648,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498082818031353856,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498087216077864960,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498089415101120512,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498090514612748288,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091064368562176,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091339246469120,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091476685422592,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091545404899328,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091579764637696,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091596944506880,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091605534441472,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091609829408768,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091611976892416,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613050634240,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613587505152,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613855940608,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613990158336,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614057267200,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614090821632,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614107598848,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614115987456,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614120181760,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614122278912,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614123327488,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614123851776,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124113920,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124244992,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124310528,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124343296,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124359680,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124367872,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124371968,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124374016,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375040,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375552,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375808,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375936,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376000,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376032,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376048,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376056,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376060,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376062,64,FLEN)
NAN_BOXED(6885163891718895983,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376063,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077632,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077633,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077635,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077639,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077647,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077663,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077695,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077759,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459077887,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459078143,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459078655,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459079679,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459081727,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459085823,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459094015,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459110399,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459143167,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459208703,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459339775,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420459601919,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420460126207,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420461174783,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420463271935,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420467466239,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420475854847,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420492632063,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420526186495,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420593295359,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420727513087,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530420995948543,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530421532819455,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530422606561279,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530424754044927,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530429049012223,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530437638946815,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530454818815999,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530489178554367,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530557898031103,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530695336984575,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421530970214891519,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421531519970705407,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421532619482333183,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421534818505588735,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421539216552099839,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421548012645122047,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421565604831166463,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421600789203255295,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421671157947432959,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9421811895435788287,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9422093370412498943,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9422656320365920255,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9423782220272762879,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9423782220272762880,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9424908120179605504,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9425471070133026816,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9425752545109737472,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9425893282598092800,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9425963651342270464,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9425998835714359296,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426016427900403712,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426025223993425920,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426029622039937024,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426031821063192576,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426032920574820352,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426033470330634240,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426033745208541184,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426033882647494656,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426033951366971392,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426033985726709760,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034002906578944,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034011496513536,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034015791480832,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034017938964480,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034019012706304,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034019549577216,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034019818012672,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034019952230400,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020019339264,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020052893696,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020069670912,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020078059520,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020082253824,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020084350976,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020085399552,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020085923840,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086185984,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086317056,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086382592,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086415360,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086431744,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086439936,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086444032,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086446080,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086447104,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086447616,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086447872,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086448000,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086448064,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086448096,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086448112,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086448120,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086448124,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086448126,64,FLEN)
NAN_BOXED(6885347669309641411,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9426034020086448127,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5404319552844595,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5790342378047780,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6305039478318694,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6433713753386422,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6605279453476727,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6905519428634760,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891904,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891905,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891907,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891911,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891919,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891935,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056891967,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056892031,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056892159,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056892415,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056892927,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056893951,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056895999,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056900095,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056908287,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056924671,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391056957439,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391057022975,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391057154047,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391057416191,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391057940479,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391058989055,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391061086207,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391065280511,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391073669119,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391090446335,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391124000767,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391191109631,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391325327359,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086391593762815,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086392130633727,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086393204375551,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086395351859199,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086399646826495,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086408236761087,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086425416630271,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086459776368639,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086528495845375,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086665934798847,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108086940812705791,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108087490568519679,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108088590080147455,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108090789103403007,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108095187149914111,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108103983242936319,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108121575428980735,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108156759801069567,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108227128545247231,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108367866033602559,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(108649341010313215,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(109212290963734527,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(110338190870577151,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(110338190870577152,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(111464090777419776,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112027040730841088,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112308515707551744,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112449253195907072,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112519621940084736,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112554806312173568,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112572398498217984,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112581194591240192,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112585592637751296,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112587791661006848,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112588891172634624,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589440928448512,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589715806355456,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589853245308928,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589921964785664,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589956324524032,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589973504393216,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589982094327808,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589986389295104,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589988536778752,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589989610520576,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990147391488,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990415826944,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990550044672,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990617153536,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990650707968,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990667485184,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990675873792,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990680068096,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990682165248,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990683213824,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990683738112,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684000256,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684131328,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684196864,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684229632,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684246016,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684254208,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684258304,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684260352,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684261376,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684261888,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262144,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262272,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262336,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262368,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262384,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262392,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262396,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262398,64,FLEN)
NAN_BOXED(6885393652731199771,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(112589990684262399,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008128,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008129,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008131,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008135,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008143,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008159,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008191,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008255,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008383,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193008639,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193009151,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193010175,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193012223,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193016319,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193024511,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193040895,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193073663,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193139199,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193270271,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787193532415,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787194056703,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787195105279,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787197202431,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787201396735,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787209785343,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787226562559,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787260116991,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787327225855,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787461443583,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783787729879039,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783788266749951,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783789340491775,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783791487975423,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783795782942719,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783804372877311,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783821552746495,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783855912484863,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240783924631961599,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240784062070915071,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240784336948822015,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240784886704635903,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240785986216263679,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240788185239519231,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240792583286030335,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240801379379052543,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240818971565096959,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240854155937185791,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12240924524681363455,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12241065262169718783,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12241346737146429439,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12241909687099850751,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12243035587006693375,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12243035587006693376,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12244161486913536000,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12244724436866957312,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245005911843667968,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245146649332023296,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245217018076200960,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245252202448289792,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245269794634334208,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245278590727356416,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245282988773867520,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245285187797123072,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245286287308750848,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245286837064564736,64,FLEN)
NAN_BOXED(6885413072362052947,64,FLEN)
NAN_BOXED(16163735174500613782,64,FLEN)
NAN_BOXED(12245287111942471680,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
