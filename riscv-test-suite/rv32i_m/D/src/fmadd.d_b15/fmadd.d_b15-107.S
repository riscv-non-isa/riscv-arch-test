
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_81408:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000000000ff; valaddr_reg:x3; val_offset:244224*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244224*0 + 3*0*FLEN/8, x4, x1, x2)

inst_81409:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000000001ff; valaddr_reg:x3; val_offset:244227*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244227*0 + 3*1*FLEN/8, x4, x1, x2)

inst_81410:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000000003ff; valaddr_reg:x3; val_offset:244230*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244230*0 + 3*2*FLEN/8, x4, x1, x2)

inst_81411:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000000007ff; valaddr_reg:x3; val_offset:244233*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244233*0 + 3*3*FLEN/8, x4, x1, x2)

inst_81412:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000000fff; valaddr_reg:x3; val_offset:244236*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244236*0 + 3*4*FLEN/8, x4, x1, x2)

inst_81413:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000001fff; valaddr_reg:x3; val_offset:244239*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244239*0 + 3*5*FLEN/8, x4, x1, x2)

inst_81414:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000003fff; valaddr_reg:x3; val_offset:244242*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244242*0 + 3*6*FLEN/8, x4, x1, x2)

inst_81415:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000007fff; valaddr_reg:x3; val_offset:244245*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244245*0 + 3*7*FLEN/8, x4, x1, x2)

inst_81416:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000000ffff; valaddr_reg:x3; val_offset:244248*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244248*0 + 3*8*FLEN/8, x4, x1, x2)

inst_81417:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000001ffff; valaddr_reg:x3; val_offset:244251*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244251*0 + 3*9*FLEN/8, x4, x1, x2)

inst_81418:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000003ffff; valaddr_reg:x3; val_offset:244254*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244254*0 + 3*10*FLEN/8, x4, x1, x2)

inst_81419:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000007ffff; valaddr_reg:x3; val_offset:244257*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244257*0 + 3*11*FLEN/8, x4, x1, x2)

inst_81420:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000000fffff; valaddr_reg:x3; val_offset:244260*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244260*0 + 3*12*FLEN/8, x4, x1, x2)

inst_81421:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000001fffff; valaddr_reg:x3; val_offset:244263*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244263*0 + 3*13*FLEN/8, x4, x1, x2)

inst_81422:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000003fffff; valaddr_reg:x3; val_offset:244266*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244266*0 + 3*14*FLEN/8, x4, x1, x2)

inst_81423:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000007fffff; valaddr_reg:x3; val_offset:244269*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244269*0 + 3*15*FLEN/8, x4, x1, x2)

inst_81424:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000ffffff; valaddr_reg:x3; val_offset:244272*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244272*0 + 3*16*FLEN/8, x4, x1, x2)

inst_81425:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000001ffffff; valaddr_reg:x3; val_offset:244275*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244275*0 + 3*17*FLEN/8, x4, x1, x2)

inst_81426:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000003ffffff; valaddr_reg:x3; val_offset:244278*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244278*0 + 3*18*FLEN/8, x4, x1, x2)

inst_81427:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000007ffffff; valaddr_reg:x3; val_offset:244281*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244281*0 + 3*19*FLEN/8, x4, x1, x2)

inst_81428:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000fffffff; valaddr_reg:x3; val_offset:244284*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244284*0 + 3*20*FLEN/8, x4, x1, x2)

inst_81429:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000001fffffff; valaddr_reg:x3; val_offset:244287*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244287*0 + 3*21*FLEN/8, x4, x1, x2)

inst_81430:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000003fffffff; valaddr_reg:x3; val_offset:244290*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244290*0 + 3*22*FLEN/8, x4, x1, x2)

inst_81431:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000007fffffff; valaddr_reg:x3; val_offset:244293*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244293*0 + 3*23*FLEN/8, x4, x1, x2)

inst_81432:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00000ffffffff; valaddr_reg:x3; val_offset:244296*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244296*0 + 3*24*FLEN/8, x4, x1, x2)

inst_81433:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00001ffffffff; valaddr_reg:x3; val_offset:244299*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244299*0 + 3*25*FLEN/8, x4, x1, x2)

inst_81434:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00003ffffffff; valaddr_reg:x3; val_offset:244302*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244302*0 + 3*26*FLEN/8, x4, x1, x2)

inst_81435:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00007ffffffff; valaddr_reg:x3; val_offset:244305*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244305*0 + 3*27*FLEN/8, x4, x1, x2)

inst_81436:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000fffffffff; valaddr_reg:x3; val_offset:244308*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244308*0 + 3*28*FLEN/8, x4, x1, x2)

inst_81437:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0001fffffffff; valaddr_reg:x3; val_offset:244311*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244311*0 + 3*29*FLEN/8, x4, x1, x2)

inst_81438:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0003fffffffff; valaddr_reg:x3; val_offset:244314*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244314*0 + 3*30*FLEN/8, x4, x1, x2)

inst_81439:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0007fffffffff; valaddr_reg:x3; val_offset:244317*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244317*0 + 3*31*FLEN/8, x4, x1, x2)

inst_81440:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000ffffffffff; valaddr_reg:x3; val_offset:244320*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244320*0 + 3*32*FLEN/8, x4, x1, x2)

inst_81441:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e001ffffffffff; valaddr_reg:x3; val_offset:244323*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244323*0 + 3*33*FLEN/8, x4, x1, x2)

inst_81442:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e003ffffffffff; valaddr_reg:x3; val_offset:244326*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244326*0 + 3*34*FLEN/8, x4, x1, x2)

inst_81443:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e007ffffffffff; valaddr_reg:x3; val_offset:244329*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244329*0 + 3*35*FLEN/8, x4, x1, x2)

inst_81444:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e00fffffffffff; valaddr_reg:x3; val_offset:244332*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244332*0 + 3*36*FLEN/8, x4, x1, x2)

inst_81445:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e01fffffffffff; valaddr_reg:x3; val_offset:244335*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244335*0 + 3*37*FLEN/8, x4, x1, x2)

inst_81446:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e03fffffffffff; valaddr_reg:x3; val_offset:244338*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244338*0 + 3*38*FLEN/8, x4, x1, x2)

inst_81447:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e07fffffffffff; valaddr_reg:x3; val_offset:244341*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244341*0 + 3*39*FLEN/8, x4, x1, x2)

inst_81448:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0ffffffffffff; valaddr_reg:x3; val_offset:244344*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244344*0 + 3*40*FLEN/8, x4, x1, x2)

inst_81449:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e1ffffffffffff; valaddr_reg:x3; val_offset:244347*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244347*0 + 3*41*FLEN/8, x4, x1, x2)

inst_81450:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e3ffffffffffff; valaddr_reg:x3; val_offset:244350*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244350*0 + 3*42*FLEN/8, x4, x1, x2)

inst_81451:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e7ffffffffffff; valaddr_reg:x3; val_offset:244353*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244353*0 + 3*43*FLEN/8, x4, x1, x2)

inst_81452:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e8000000000000; valaddr_reg:x3; val_offset:244356*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244356*0 + 3*44*FLEN/8, x4, x1, x2)

inst_81453:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2ec000000000000; valaddr_reg:x3; val_offset:244359*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244359*0 + 3*45*FLEN/8, x4, x1, x2)

inst_81454:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2ee000000000000; valaddr_reg:x3; val_offset:244362*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244362*0 + 3*46*FLEN/8, x4, x1, x2)

inst_81455:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2ef000000000000; valaddr_reg:x3; val_offset:244365*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244365*0 + 3*47*FLEN/8, x4, x1, x2)

inst_81456:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2ef800000000000; valaddr_reg:x3; val_offset:244368*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244368*0 + 3*48*FLEN/8, x4, x1, x2)

inst_81457:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efc00000000000; valaddr_reg:x3; val_offset:244371*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244371*0 + 3*49*FLEN/8, x4, x1, x2)

inst_81458:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efe00000000000; valaddr_reg:x3; val_offset:244374*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244374*0 + 3*50*FLEN/8, x4, x1, x2)

inst_81459:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2eff00000000000; valaddr_reg:x3; val_offset:244377*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244377*0 + 3*51*FLEN/8, x4, x1, x2)

inst_81460:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2eff80000000000; valaddr_reg:x3; val_offset:244380*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244380*0 + 3*52*FLEN/8, x4, x1, x2)

inst_81461:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effc0000000000; valaddr_reg:x3; val_offset:244383*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244383*0 + 3*53*FLEN/8, x4, x1, x2)

inst_81462:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effe0000000000; valaddr_reg:x3; val_offset:244386*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244386*0 + 3*54*FLEN/8, x4, x1, x2)

inst_81463:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efff0000000000; valaddr_reg:x3; val_offset:244389*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244389*0 + 3*55*FLEN/8, x4, x1, x2)

inst_81464:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efff8000000000; valaddr_reg:x3; val_offset:244392*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244392*0 + 3*56*FLEN/8, x4, x1, x2)

inst_81465:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffc000000000; valaddr_reg:x3; val_offset:244395*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244395*0 + 3*57*FLEN/8, x4, x1, x2)

inst_81466:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffe000000000; valaddr_reg:x3; val_offset:244398*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244398*0 + 3*58*FLEN/8, x4, x1, x2)

inst_81467:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effff000000000; valaddr_reg:x3; val_offset:244401*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244401*0 + 3*59*FLEN/8, x4, x1, x2)

inst_81468:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effff800000000; valaddr_reg:x3; val_offset:244404*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244404*0 + 3*60*FLEN/8, x4, x1, x2)

inst_81469:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffc00000000; valaddr_reg:x3; val_offset:244407*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244407*0 + 3*61*FLEN/8, x4, x1, x2)

inst_81470:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffe00000000; valaddr_reg:x3; val_offset:244410*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244410*0 + 3*62*FLEN/8, x4, x1, x2)

inst_81471:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffff00000000; valaddr_reg:x3; val_offset:244413*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244413*0 + 3*63*FLEN/8, x4, x1, x2)

inst_81472:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffff80000000; valaddr_reg:x3; val_offset:244416*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244416*0 + 3*64*FLEN/8, x4, x1, x2)

inst_81473:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffc0000000; valaddr_reg:x3; val_offset:244419*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244419*0 + 3*65*FLEN/8, x4, x1, x2)

inst_81474:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffe0000000; valaddr_reg:x3; val_offset:244422*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244422*0 + 3*66*FLEN/8, x4, x1, x2)

inst_81475:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffff0000000; valaddr_reg:x3; val_offset:244425*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244425*0 + 3*67*FLEN/8, x4, x1, x2)

inst_81476:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffff8000000; valaddr_reg:x3; val_offset:244428*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244428*0 + 3*68*FLEN/8, x4, x1, x2)

inst_81477:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffc000000; valaddr_reg:x3; val_offset:244431*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244431*0 + 3*69*FLEN/8, x4, x1, x2)

inst_81478:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffe000000; valaddr_reg:x3; val_offset:244434*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244434*0 + 3*70*FLEN/8, x4, x1, x2)

inst_81479:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffff000000; valaddr_reg:x3; val_offset:244437*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244437*0 + 3*71*FLEN/8, x4, x1, x2)

inst_81480:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffff800000; valaddr_reg:x3; val_offset:244440*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244440*0 + 3*72*FLEN/8, x4, x1, x2)

inst_81481:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffc00000; valaddr_reg:x3; val_offset:244443*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244443*0 + 3*73*FLEN/8, x4, x1, x2)

inst_81482:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffe00000; valaddr_reg:x3; val_offset:244446*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244446*0 + 3*74*FLEN/8, x4, x1, x2)

inst_81483:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffff00000; valaddr_reg:x3; val_offset:244449*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244449*0 + 3*75*FLEN/8, x4, x1, x2)

inst_81484:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffff80000; valaddr_reg:x3; val_offset:244452*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244452*0 + 3*76*FLEN/8, x4, x1, x2)

inst_81485:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffc0000; valaddr_reg:x3; val_offset:244455*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244455*0 + 3*77*FLEN/8, x4, x1, x2)

inst_81486:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffe0000; valaddr_reg:x3; val_offset:244458*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244458*0 + 3*78*FLEN/8, x4, x1, x2)

inst_81487:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffff0000; valaddr_reg:x3; val_offset:244461*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244461*0 + 3*79*FLEN/8, x4, x1, x2)

inst_81488:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffff8000; valaddr_reg:x3; val_offset:244464*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244464*0 + 3*80*FLEN/8, x4, x1, x2)

inst_81489:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffffc000; valaddr_reg:x3; val_offset:244467*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244467*0 + 3*81*FLEN/8, x4, x1, x2)

inst_81490:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffffe000; valaddr_reg:x3; val_offset:244470*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244470*0 + 3*82*FLEN/8, x4, x1, x2)

inst_81491:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffff000; valaddr_reg:x3; val_offset:244473*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244473*0 + 3*83*FLEN/8, x4, x1, x2)

inst_81492:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffff800; valaddr_reg:x3; val_offset:244476*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244476*0 + 3*84*FLEN/8, x4, x1, x2)

inst_81493:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffffc00; valaddr_reg:x3; val_offset:244479*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244479*0 + 3*85*FLEN/8, x4, x1, x2)

inst_81494:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffffe00; valaddr_reg:x3; val_offset:244482*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244482*0 + 3*86*FLEN/8, x4, x1, x2)

inst_81495:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffffff00; valaddr_reg:x3; val_offset:244485*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244485*0 + 3*87*FLEN/8, x4, x1, x2)

inst_81496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffffff80; valaddr_reg:x3; val_offset:244488*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244488*0 + 3*88*FLEN/8, x4, x1, x2)

inst_81497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffffffc0; valaddr_reg:x3; val_offset:244491*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244491*0 + 3*89*FLEN/8, x4, x1, x2)

inst_81498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffffffe0; valaddr_reg:x3; val_offset:244494*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244494*0 + 3*90*FLEN/8, x4, x1, x2)

inst_81499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffffff0; valaddr_reg:x3; val_offset:244497*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244497*0 + 3*91*FLEN/8, x4, x1, x2)

inst_81500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffffff8; valaddr_reg:x3; val_offset:244500*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244500*0 + 3*92*FLEN/8, x4, x1, x2)

inst_81501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffffffc; valaddr_reg:x3; val_offset:244503*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244503*0 + 3*93*FLEN/8, x4, x1, x2)

inst_81502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2effffffffffffe; valaddr_reg:x3; val_offset:244506*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244506*0 + 3*94*FLEN/8, x4, x1, x2)

inst_81503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2efffffffffffff; valaddr_reg:x3; val_offset:244509*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244509*0 + 3*95*FLEN/8, x4, x1, x2)

inst_81504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:244512*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244512*0 + 3*96*FLEN/8, x4, x1, x2)

inst_81505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:244515*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244515*0 + 3*97*FLEN/8, x4, x1, x2)

inst_81506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:244518*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244518*0 + 3*98*FLEN/8, x4, x1, x2)

inst_81507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:244521*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244521*0 + 3*99*FLEN/8, x4, x1, x2)

inst_81508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:244524*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244524*0 + 3*100*FLEN/8, x4, x1, x2)

inst_81509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:244527*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244527*0 + 3*101*FLEN/8, x4, x1, x2)

inst_81510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:244530*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244530*0 + 3*102*FLEN/8, x4, x1, x2)

inst_81511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:244533*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244533*0 + 3*103*FLEN/8, x4, x1, x2)

inst_81512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:244536*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244536*0 + 3*104*FLEN/8, x4, x1, x2)

inst_81513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:244539*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244539*0 + 3*105*FLEN/8, x4, x1, x2)

inst_81514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:244542*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244542*0 + 3*106*FLEN/8, x4, x1, x2)

inst_81515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:244545*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244545*0 + 3*107*FLEN/8, x4, x1, x2)

inst_81516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:244548*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244548*0 + 3*108*FLEN/8, x4, x1, x2)

inst_81517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:244551*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244551*0 + 3*109*FLEN/8, x4, x1, x2)

inst_81518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:244554*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244554*0 + 3*110*FLEN/8, x4, x1, x2)

inst_81519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:244557*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244557*0 + 3*111*FLEN/8, x4, x1, x2)

inst_81520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:244560*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244560*0 + 3*112*FLEN/8, x4, x1, x2)

inst_81521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:244563*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244563*0 + 3*113*FLEN/8, x4, x1, x2)

inst_81522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:244566*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244566*0 + 3*114*FLEN/8, x4, x1, x2)

inst_81523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:244569*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244569*0 + 3*115*FLEN/8, x4, x1, x2)

inst_81524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:244572*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244572*0 + 3*116*FLEN/8, x4, x1, x2)

inst_81525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:244575*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244575*0 + 3*117*FLEN/8, x4, x1, x2)

inst_81526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000000000; valaddr_reg:x3; val_offset:244578*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244578*0 + 3*118*FLEN/8, x4, x1, x2)

inst_81527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000000001; valaddr_reg:x3; val_offset:244581*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244581*0 + 3*119*FLEN/8, x4, x1, x2)

inst_81528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000000003; valaddr_reg:x3; val_offset:244584*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244584*0 + 3*120*FLEN/8, x4, x1, x2)

inst_81529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000000007; valaddr_reg:x3; val_offset:244587*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244587*0 + 3*121*FLEN/8, x4, x1, x2)

inst_81530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000000000f; valaddr_reg:x3; val_offset:244590*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244590*0 + 3*122*FLEN/8, x4, x1, x2)

inst_81531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000000001f; valaddr_reg:x3; val_offset:244593*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244593*0 + 3*123*FLEN/8, x4, x1, x2)

inst_81532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000000003f; valaddr_reg:x3; val_offset:244596*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244596*0 + 3*124*FLEN/8, x4, x1, x2)

inst_81533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000000007f; valaddr_reg:x3; val_offset:244599*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244599*0 + 3*125*FLEN/8, x4, x1, x2)

inst_81534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000000000ff; valaddr_reg:x3; val_offset:244602*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244602*0 + 3*126*FLEN/8, x4, x1, x2)

inst_81535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000000001ff; valaddr_reg:x3; val_offset:244605*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244605*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_81536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000000003ff; valaddr_reg:x3; val_offset:244608*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244608*0 + 3*128*FLEN/8, x4, x1, x2)

inst_81537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000000007ff; valaddr_reg:x3; val_offset:244611*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244611*0 + 3*129*FLEN/8, x4, x1, x2)

inst_81538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000000fff; valaddr_reg:x3; val_offset:244614*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244614*0 + 3*130*FLEN/8, x4, x1, x2)

inst_81539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000001fff; valaddr_reg:x3; val_offset:244617*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244617*0 + 3*131*FLEN/8, x4, x1, x2)

inst_81540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000003fff; valaddr_reg:x3; val_offset:244620*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244620*0 + 3*132*FLEN/8, x4, x1, x2)

inst_81541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000007fff; valaddr_reg:x3; val_offset:244623*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244623*0 + 3*133*FLEN/8, x4, x1, x2)

inst_81542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000000ffff; valaddr_reg:x3; val_offset:244626*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244626*0 + 3*134*FLEN/8, x4, x1, x2)

inst_81543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000001ffff; valaddr_reg:x3; val_offset:244629*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244629*0 + 3*135*FLEN/8, x4, x1, x2)

inst_81544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000003ffff; valaddr_reg:x3; val_offset:244632*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244632*0 + 3*136*FLEN/8, x4, x1, x2)

inst_81545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000007ffff; valaddr_reg:x3; val_offset:244635*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244635*0 + 3*137*FLEN/8, x4, x1, x2)

inst_81546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000000fffff; valaddr_reg:x3; val_offset:244638*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244638*0 + 3*138*FLEN/8, x4, x1, x2)

inst_81547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000001fffff; valaddr_reg:x3; val_offset:244641*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244641*0 + 3*139*FLEN/8, x4, x1, x2)

inst_81548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000003fffff; valaddr_reg:x3; val_offset:244644*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244644*0 + 3*140*FLEN/8, x4, x1, x2)

inst_81549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000007fffff; valaddr_reg:x3; val_offset:244647*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244647*0 + 3*141*FLEN/8, x4, x1, x2)

inst_81550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000000ffffff; valaddr_reg:x3; val_offset:244650*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244650*0 + 3*142*FLEN/8, x4, x1, x2)

inst_81551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000001ffffff; valaddr_reg:x3; val_offset:244653*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244653*0 + 3*143*FLEN/8, x4, x1, x2)

inst_81552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000003ffffff; valaddr_reg:x3; val_offset:244656*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244656*0 + 3*144*FLEN/8, x4, x1, x2)

inst_81553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000007ffffff; valaddr_reg:x3; val_offset:244659*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244659*0 + 3*145*FLEN/8, x4, x1, x2)

inst_81554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000000fffffff; valaddr_reg:x3; val_offset:244662*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244662*0 + 3*146*FLEN/8, x4, x1, x2)

inst_81555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000001fffffff; valaddr_reg:x3; val_offset:244665*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244665*0 + 3*147*FLEN/8, x4, x1, x2)

inst_81556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000003fffffff; valaddr_reg:x3; val_offset:244668*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244668*0 + 3*148*FLEN/8, x4, x1, x2)

inst_81557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000007fffffff; valaddr_reg:x3; val_offset:244671*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244671*0 + 3*149*FLEN/8, x4, x1, x2)

inst_81558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00000ffffffff; valaddr_reg:x3; val_offset:244674*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244674*0 + 3*150*FLEN/8, x4, x1, x2)

inst_81559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00001ffffffff; valaddr_reg:x3; val_offset:244677*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244677*0 + 3*151*FLEN/8, x4, x1, x2)

inst_81560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00003ffffffff; valaddr_reg:x3; val_offset:244680*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244680*0 + 3*152*FLEN/8, x4, x1, x2)

inst_81561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00007ffffffff; valaddr_reg:x3; val_offset:244683*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244683*0 + 3*153*FLEN/8, x4, x1, x2)

inst_81562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0000fffffffff; valaddr_reg:x3; val_offset:244686*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244686*0 + 3*154*FLEN/8, x4, x1, x2)

inst_81563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0001fffffffff; valaddr_reg:x3; val_offset:244689*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244689*0 + 3*155*FLEN/8, x4, x1, x2)

inst_81564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0003fffffffff; valaddr_reg:x3; val_offset:244692*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244692*0 + 3*156*FLEN/8, x4, x1, x2)

inst_81565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0007fffffffff; valaddr_reg:x3; val_offset:244695*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244695*0 + 3*157*FLEN/8, x4, x1, x2)

inst_81566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d000ffffffffff; valaddr_reg:x3; val_offset:244698*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244698*0 + 3*158*FLEN/8, x4, x1, x2)

inst_81567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d001ffffffffff; valaddr_reg:x3; val_offset:244701*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244701*0 + 3*159*FLEN/8, x4, x1, x2)

inst_81568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d003ffffffffff; valaddr_reg:x3; val_offset:244704*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244704*0 + 3*160*FLEN/8, x4, x1, x2)

inst_81569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d007ffffffffff; valaddr_reg:x3; val_offset:244707*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244707*0 + 3*161*FLEN/8, x4, x1, x2)

inst_81570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d00fffffffffff; valaddr_reg:x3; val_offset:244710*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244710*0 + 3*162*FLEN/8, x4, x1, x2)

inst_81571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d01fffffffffff; valaddr_reg:x3; val_offset:244713*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244713*0 + 3*163*FLEN/8, x4, x1, x2)

inst_81572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d03fffffffffff; valaddr_reg:x3; val_offset:244716*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244716*0 + 3*164*FLEN/8, x4, x1, x2)

inst_81573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d07fffffffffff; valaddr_reg:x3; val_offset:244719*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244719*0 + 3*165*FLEN/8, x4, x1, x2)

inst_81574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d0ffffffffffff; valaddr_reg:x3; val_offset:244722*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244722*0 + 3*166*FLEN/8, x4, x1, x2)

inst_81575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d1ffffffffffff; valaddr_reg:x3; val_offset:244725*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244725*0 + 3*167*FLEN/8, x4, x1, x2)

inst_81576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d3ffffffffffff; valaddr_reg:x3; val_offset:244728*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244728*0 + 3*168*FLEN/8, x4, x1, x2)

inst_81577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d7ffffffffffff; valaddr_reg:x3; val_offset:244731*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244731*0 + 3*169*FLEN/8, x4, x1, x2)

inst_81578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83d8000000000000; valaddr_reg:x3; val_offset:244734*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244734*0 + 3*170*FLEN/8, x4, x1, x2)

inst_81579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dc000000000000; valaddr_reg:x3; val_offset:244737*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244737*0 + 3*171*FLEN/8, x4, x1, x2)

inst_81580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83de000000000000; valaddr_reg:x3; val_offset:244740*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244740*0 + 3*172*FLEN/8, x4, x1, x2)

inst_81581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83df000000000000; valaddr_reg:x3; val_offset:244743*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244743*0 + 3*173*FLEN/8, x4, x1, x2)

inst_81582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83df800000000000; valaddr_reg:x3; val_offset:244746*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244746*0 + 3*174*FLEN/8, x4, x1, x2)

inst_81583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfc00000000000; valaddr_reg:x3; val_offset:244749*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244749*0 + 3*175*FLEN/8, x4, x1, x2)

inst_81584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfe00000000000; valaddr_reg:x3; val_offset:244752*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244752*0 + 3*176*FLEN/8, x4, x1, x2)

inst_81585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dff00000000000; valaddr_reg:x3; val_offset:244755*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244755*0 + 3*177*FLEN/8, x4, x1, x2)

inst_81586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dff80000000000; valaddr_reg:x3; val_offset:244758*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244758*0 + 3*178*FLEN/8, x4, x1, x2)

inst_81587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffc0000000000; valaddr_reg:x3; val_offset:244761*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244761*0 + 3*179*FLEN/8, x4, x1, x2)

inst_81588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffe0000000000; valaddr_reg:x3; val_offset:244764*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244764*0 + 3*180*FLEN/8, x4, x1, x2)

inst_81589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfff0000000000; valaddr_reg:x3; val_offset:244767*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244767*0 + 3*181*FLEN/8, x4, x1, x2)

inst_81590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfff8000000000; valaddr_reg:x3; val_offset:244770*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244770*0 + 3*182*FLEN/8, x4, x1, x2)

inst_81591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffc000000000; valaddr_reg:x3; val_offset:244773*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244773*0 + 3*183*FLEN/8, x4, x1, x2)

inst_81592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffe000000000; valaddr_reg:x3; val_offset:244776*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244776*0 + 3*184*FLEN/8, x4, x1, x2)

inst_81593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffff000000000; valaddr_reg:x3; val_offset:244779*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244779*0 + 3*185*FLEN/8, x4, x1, x2)

inst_81594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffff800000000; valaddr_reg:x3; val_offset:244782*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244782*0 + 3*186*FLEN/8, x4, x1, x2)

inst_81595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffc00000000; valaddr_reg:x3; val_offset:244785*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244785*0 + 3*187*FLEN/8, x4, x1, x2)

inst_81596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffe00000000; valaddr_reg:x3; val_offset:244788*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244788*0 + 3*188*FLEN/8, x4, x1, x2)

inst_81597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffff00000000; valaddr_reg:x3; val_offset:244791*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244791*0 + 3*189*FLEN/8, x4, x1, x2)

inst_81598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffff80000000; valaddr_reg:x3; val_offset:244794*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244794*0 + 3*190*FLEN/8, x4, x1, x2)

inst_81599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffc0000000; valaddr_reg:x3; val_offset:244797*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244797*0 + 3*191*FLEN/8, x4, x1, x2)

inst_81600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffe0000000; valaddr_reg:x3; val_offset:244800*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244800*0 + 3*192*FLEN/8, x4, x1, x2)

inst_81601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffff0000000; valaddr_reg:x3; val_offset:244803*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244803*0 + 3*193*FLEN/8, x4, x1, x2)

inst_81602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffff8000000; valaddr_reg:x3; val_offset:244806*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244806*0 + 3*194*FLEN/8, x4, x1, x2)

inst_81603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffc000000; valaddr_reg:x3; val_offset:244809*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244809*0 + 3*195*FLEN/8, x4, x1, x2)

inst_81604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffe000000; valaddr_reg:x3; val_offset:244812*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244812*0 + 3*196*FLEN/8, x4, x1, x2)

inst_81605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffff000000; valaddr_reg:x3; val_offset:244815*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244815*0 + 3*197*FLEN/8, x4, x1, x2)

inst_81606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffff800000; valaddr_reg:x3; val_offset:244818*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244818*0 + 3*198*FLEN/8, x4, x1, x2)

inst_81607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffc00000; valaddr_reg:x3; val_offset:244821*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244821*0 + 3*199*FLEN/8, x4, x1, x2)

inst_81608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffe00000; valaddr_reg:x3; val_offset:244824*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244824*0 + 3*200*FLEN/8, x4, x1, x2)

inst_81609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffff00000; valaddr_reg:x3; val_offset:244827*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244827*0 + 3*201*FLEN/8, x4, x1, x2)

inst_81610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffff80000; valaddr_reg:x3; val_offset:244830*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244830*0 + 3*202*FLEN/8, x4, x1, x2)

inst_81611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffc0000; valaddr_reg:x3; val_offset:244833*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244833*0 + 3*203*FLEN/8, x4, x1, x2)

inst_81612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffe0000; valaddr_reg:x3; val_offset:244836*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244836*0 + 3*204*FLEN/8, x4, x1, x2)

inst_81613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffff0000; valaddr_reg:x3; val_offset:244839*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244839*0 + 3*205*FLEN/8, x4, x1, x2)

inst_81614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffff8000; valaddr_reg:x3; val_offset:244842*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244842*0 + 3*206*FLEN/8, x4, x1, x2)

inst_81615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffffc000; valaddr_reg:x3; val_offset:244845*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244845*0 + 3*207*FLEN/8, x4, x1, x2)

inst_81616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffffe000; valaddr_reg:x3; val_offset:244848*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244848*0 + 3*208*FLEN/8, x4, x1, x2)

inst_81617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffff000; valaddr_reg:x3; val_offset:244851*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244851*0 + 3*209*FLEN/8, x4, x1, x2)

inst_81618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffff800; valaddr_reg:x3; val_offset:244854*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244854*0 + 3*210*FLEN/8, x4, x1, x2)

inst_81619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffffc00; valaddr_reg:x3; val_offset:244857*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244857*0 + 3*211*FLEN/8, x4, x1, x2)

inst_81620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffffe00; valaddr_reg:x3; val_offset:244860*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244860*0 + 3*212*FLEN/8, x4, x1, x2)

inst_81621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffffff00; valaddr_reg:x3; val_offset:244863*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244863*0 + 3*213*FLEN/8, x4, x1, x2)

inst_81622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffffff80; valaddr_reg:x3; val_offset:244866*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244866*0 + 3*214*FLEN/8, x4, x1, x2)

inst_81623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffffffc0; valaddr_reg:x3; val_offset:244869*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244869*0 + 3*215*FLEN/8, x4, x1, x2)

inst_81624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffffffe0; valaddr_reg:x3; val_offset:244872*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244872*0 + 3*216*FLEN/8, x4, x1, x2)

inst_81625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffffff0; valaddr_reg:x3; val_offset:244875*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244875*0 + 3*217*FLEN/8, x4, x1, x2)

inst_81626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffffff8; valaddr_reg:x3; val_offset:244878*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244878*0 + 3*218*FLEN/8, x4, x1, x2)

inst_81627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffffffc; valaddr_reg:x3; val_offset:244881*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244881*0 + 3*219*FLEN/8, x4, x1, x2)

inst_81628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dffffffffffffe; valaddr_reg:x3; val_offset:244884*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244884*0 + 3*220*FLEN/8, x4, x1, x2)

inst_81629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9bd90b8e42a3f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9bd90b8e42a3f; op2val:0x8000;
op3val:0x83dfffffffffffff; valaddr_reg:x3; val_offset:244887*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244887*0 + 3*221*FLEN/8, x4, x1, x2)

inst_81630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000000000; valaddr_reg:x3; val_offset:244890*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244890*0 + 3*222*FLEN/8, x4, x1, x2)

inst_81631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000000001; valaddr_reg:x3; val_offset:244893*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244893*0 + 3*223*FLEN/8, x4, x1, x2)

inst_81632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000000003; valaddr_reg:x3; val_offset:244896*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244896*0 + 3*224*FLEN/8, x4, x1, x2)

inst_81633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000000007; valaddr_reg:x3; val_offset:244899*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244899*0 + 3*225*FLEN/8, x4, x1, x2)

inst_81634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000000000f; valaddr_reg:x3; val_offset:244902*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244902*0 + 3*226*FLEN/8, x4, x1, x2)

inst_81635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000000001f; valaddr_reg:x3; val_offset:244905*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244905*0 + 3*227*FLEN/8, x4, x1, x2)

inst_81636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000000003f; valaddr_reg:x3; val_offset:244908*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244908*0 + 3*228*FLEN/8, x4, x1, x2)

inst_81637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000000007f; valaddr_reg:x3; val_offset:244911*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244911*0 + 3*229*FLEN/8, x4, x1, x2)

inst_81638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000000000ff; valaddr_reg:x3; val_offset:244914*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244914*0 + 3*230*FLEN/8, x4, x1, x2)

inst_81639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000000001ff; valaddr_reg:x3; val_offset:244917*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244917*0 + 3*231*FLEN/8, x4, x1, x2)

inst_81640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000000003ff; valaddr_reg:x3; val_offset:244920*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244920*0 + 3*232*FLEN/8, x4, x1, x2)

inst_81641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000000007ff; valaddr_reg:x3; val_offset:244923*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244923*0 + 3*233*FLEN/8, x4, x1, x2)

inst_81642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000000fff; valaddr_reg:x3; val_offset:244926*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244926*0 + 3*234*FLEN/8, x4, x1, x2)

inst_81643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000001fff; valaddr_reg:x3; val_offset:244929*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244929*0 + 3*235*FLEN/8, x4, x1, x2)

inst_81644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000003fff; valaddr_reg:x3; val_offset:244932*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244932*0 + 3*236*FLEN/8, x4, x1, x2)

inst_81645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000007fff; valaddr_reg:x3; val_offset:244935*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244935*0 + 3*237*FLEN/8, x4, x1, x2)

inst_81646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000000ffff; valaddr_reg:x3; val_offset:244938*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244938*0 + 3*238*FLEN/8, x4, x1, x2)

inst_81647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000001ffff; valaddr_reg:x3; val_offset:244941*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244941*0 + 3*239*FLEN/8, x4, x1, x2)

inst_81648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000003ffff; valaddr_reg:x3; val_offset:244944*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244944*0 + 3*240*FLEN/8, x4, x1, x2)

inst_81649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000007ffff; valaddr_reg:x3; val_offset:244947*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244947*0 + 3*241*FLEN/8, x4, x1, x2)

inst_81650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000000fffff; valaddr_reg:x3; val_offset:244950*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244950*0 + 3*242*FLEN/8, x4, x1, x2)

inst_81651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000001fffff; valaddr_reg:x3; val_offset:244953*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244953*0 + 3*243*FLEN/8, x4, x1, x2)

inst_81652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000003fffff; valaddr_reg:x3; val_offset:244956*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244956*0 + 3*244*FLEN/8, x4, x1, x2)

inst_81653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000007fffff; valaddr_reg:x3; val_offset:244959*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244959*0 + 3*245*FLEN/8, x4, x1, x2)

inst_81654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000000ffffff; valaddr_reg:x3; val_offset:244962*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244962*0 + 3*246*FLEN/8, x4, x1, x2)

inst_81655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000001ffffff; valaddr_reg:x3; val_offset:244965*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244965*0 + 3*247*FLEN/8, x4, x1, x2)

inst_81656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000003ffffff; valaddr_reg:x3; val_offset:244968*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244968*0 + 3*248*FLEN/8, x4, x1, x2)

inst_81657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000007ffffff; valaddr_reg:x3; val_offset:244971*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244971*0 + 3*249*FLEN/8, x4, x1, x2)

inst_81658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000000fffffff; valaddr_reg:x3; val_offset:244974*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244974*0 + 3*250*FLEN/8, x4, x1, x2)

inst_81659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000001fffffff; valaddr_reg:x3; val_offset:244977*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244977*0 + 3*251*FLEN/8, x4, x1, x2)

inst_81660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000003fffffff; valaddr_reg:x3; val_offset:244980*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244980*0 + 3*252*FLEN/8, x4, x1, x2)

inst_81661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000007fffffff; valaddr_reg:x3; val_offset:244983*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244983*0 + 3*253*FLEN/8, x4, x1, x2)

inst_81662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00000ffffffff; valaddr_reg:x3; val_offset:244986*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244986*0 + 3*254*FLEN/8, x4, x1, x2)

inst_81663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00001ffffffff; valaddr_reg:x3; val_offset:244989*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244989*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_81664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00003ffffffff; valaddr_reg:x3; val_offset:244992*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244992*0 + 3*256*FLEN/8, x4, x1, x2)

inst_81665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00007ffffffff; valaddr_reg:x3; val_offset:244995*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244995*0 + 3*257*FLEN/8, x4, x1, x2)

inst_81666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0000fffffffff; valaddr_reg:x3; val_offset:244998*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244998*0 + 3*258*FLEN/8, x4, x1, x2)

inst_81667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0001fffffffff; valaddr_reg:x3; val_offset:245001*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245001*0 + 3*259*FLEN/8, x4, x1, x2)

inst_81668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0003fffffffff; valaddr_reg:x3; val_offset:245004*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245004*0 + 3*260*FLEN/8, x4, x1, x2)

inst_81669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0007fffffffff; valaddr_reg:x3; val_offset:245007*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245007*0 + 3*261*FLEN/8, x4, x1, x2)

inst_81670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec000ffffffffff; valaddr_reg:x3; val_offset:245010*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245010*0 + 3*262*FLEN/8, x4, x1, x2)

inst_81671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec001ffffffffff; valaddr_reg:x3; val_offset:245013*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245013*0 + 3*263*FLEN/8, x4, x1, x2)

inst_81672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec003ffffffffff; valaddr_reg:x3; val_offset:245016*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245016*0 + 3*264*FLEN/8, x4, x1, x2)

inst_81673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec007ffffffffff; valaddr_reg:x3; val_offset:245019*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245019*0 + 3*265*FLEN/8, x4, x1, x2)

inst_81674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec00fffffffffff; valaddr_reg:x3; val_offset:245022*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245022*0 + 3*266*FLEN/8, x4, x1, x2)

inst_81675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec01fffffffffff; valaddr_reg:x3; val_offset:245025*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245025*0 + 3*267*FLEN/8, x4, x1, x2)

inst_81676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec03fffffffffff; valaddr_reg:x3; val_offset:245028*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245028*0 + 3*268*FLEN/8, x4, x1, x2)

inst_81677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec07fffffffffff; valaddr_reg:x3; val_offset:245031*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245031*0 + 3*269*FLEN/8, x4, x1, x2)

inst_81678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec0ffffffffffff; valaddr_reg:x3; val_offset:245034*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245034*0 + 3*270*FLEN/8, x4, x1, x2)

inst_81679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec1ffffffffffff; valaddr_reg:x3; val_offset:245037*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245037*0 + 3*271*FLEN/8, x4, x1, x2)

inst_81680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec3ffffffffffff; valaddr_reg:x3; val_offset:245040*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245040*0 + 3*272*FLEN/8, x4, x1, x2)

inst_81681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec7ffffffffffff; valaddr_reg:x3; val_offset:245043*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245043*0 + 3*273*FLEN/8, x4, x1, x2)

inst_81682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbec8000000000000; valaddr_reg:x3; val_offset:245046*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245046*0 + 3*274*FLEN/8, x4, x1, x2)

inst_81683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecc000000000000; valaddr_reg:x3; val_offset:245049*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245049*0 + 3*275*FLEN/8, x4, x1, x2)

inst_81684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbece000000000000; valaddr_reg:x3; val_offset:245052*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245052*0 + 3*276*FLEN/8, x4, x1, x2)

inst_81685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecf000000000000; valaddr_reg:x3; val_offset:245055*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245055*0 + 3*277*FLEN/8, x4, x1, x2)

inst_81686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecf800000000000; valaddr_reg:x3; val_offset:245058*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245058*0 + 3*278*FLEN/8, x4, x1, x2)

inst_81687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfc00000000000; valaddr_reg:x3; val_offset:245061*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245061*0 + 3*279*FLEN/8, x4, x1, x2)

inst_81688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfe00000000000; valaddr_reg:x3; val_offset:245064*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245064*0 + 3*280*FLEN/8, x4, x1, x2)

inst_81689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecff00000000000; valaddr_reg:x3; val_offset:245067*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245067*0 + 3*281*FLEN/8, x4, x1, x2)

inst_81690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecff80000000000; valaddr_reg:x3; val_offset:245070*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245070*0 + 3*282*FLEN/8, x4, x1, x2)

inst_81691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffc0000000000; valaddr_reg:x3; val_offset:245073*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245073*0 + 3*283*FLEN/8, x4, x1, x2)

inst_81692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffe0000000000; valaddr_reg:x3; val_offset:245076*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245076*0 + 3*284*FLEN/8, x4, x1, x2)

inst_81693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfff0000000000; valaddr_reg:x3; val_offset:245079*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245079*0 + 3*285*FLEN/8, x4, x1, x2)

inst_81694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfff8000000000; valaddr_reg:x3; val_offset:245082*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245082*0 + 3*286*FLEN/8, x4, x1, x2)

inst_81695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffc000000000; valaddr_reg:x3; val_offset:245085*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245085*0 + 3*287*FLEN/8, x4, x1, x2)

inst_81696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffe000000000; valaddr_reg:x3; val_offset:245088*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245088*0 + 3*288*FLEN/8, x4, x1, x2)

inst_81697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffff000000000; valaddr_reg:x3; val_offset:245091*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245091*0 + 3*289*FLEN/8, x4, x1, x2)

inst_81698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffff800000000; valaddr_reg:x3; val_offset:245094*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245094*0 + 3*290*FLEN/8, x4, x1, x2)

inst_81699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffc00000000; valaddr_reg:x3; val_offset:245097*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245097*0 + 3*291*FLEN/8, x4, x1, x2)

inst_81700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffe00000000; valaddr_reg:x3; val_offset:245100*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245100*0 + 3*292*FLEN/8, x4, x1, x2)

inst_81701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffff00000000; valaddr_reg:x3; val_offset:245103*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245103*0 + 3*293*FLEN/8, x4, x1, x2)

inst_81702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffff80000000; valaddr_reg:x3; val_offset:245106*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245106*0 + 3*294*FLEN/8, x4, x1, x2)

inst_81703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffc0000000; valaddr_reg:x3; val_offset:245109*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245109*0 + 3*295*FLEN/8, x4, x1, x2)

inst_81704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffe0000000; valaddr_reg:x3; val_offset:245112*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245112*0 + 3*296*FLEN/8, x4, x1, x2)

inst_81705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffff0000000; valaddr_reg:x3; val_offset:245115*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245115*0 + 3*297*FLEN/8, x4, x1, x2)

inst_81706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffff8000000; valaddr_reg:x3; val_offset:245118*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245118*0 + 3*298*FLEN/8, x4, x1, x2)

inst_81707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffc000000; valaddr_reg:x3; val_offset:245121*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245121*0 + 3*299*FLEN/8, x4, x1, x2)

inst_81708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffe000000; valaddr_reg:x3; val_offset:245124*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245124*0 + 3*300*FLEN/8, x4, x1, x2)

inst_81709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffff000000; valaddr_reg:x3; val_offset:245127*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245127*0 + 3*301*FLEN/8, x4, x1, x2)

inst_81710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffff800000; valaddr_reg:x3; val_offset:245130*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245130*0 + 3*302*FLEN/8, x4, x1, x2)

inst_81711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffc00000; valaddr_reg:x3; val_offset:245133*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245133*0 + 3*303*FLEN/8, x4, x1, x2)

inst_81712:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffe00000; valaddr_reg:x3; val_offset:245136*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245136*0 + 3*304*FLEN/8, x4, x1, x2)

inst_81713:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffff00000; valaddr_reg:x3; val_offset:245139*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245139*0 + 3*305*FLEN/8, x4, x1, x2)

inst_81714:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffff80000; valaddr_reg:x3; val_offset:245142*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245142*0 + 3*306*FLEN/8, x4, x1, x2)

inst_81715:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffc0000; valaddr_reg:x3; val_offset:245145*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245145*0 + 3*307*FLEN/8, x4, x1, x2)

inst_81716:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffe0000; valaddr_reg:x3; val_offset:245148*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245148*0 + 3*308*FLEN/8, x4, x1, x2)

inst_81717:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffff0000; valaddr_reg:x3; val_offset:245151*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245151*0 + 3*309*FLEN/8, x4, x1, x2)

inst_81718:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffff8000; valaddr_reg:x3; val_offset:245154*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245154*0 + 3*310*FLEN/8, x4, x1, x2)

inst_81719:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffffc000; valaddr_reg:x3; val_offset:245157*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245157*0 + 3*311*FLEN/8, x4, x1, x2)

inst_81720:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffffe000; valaddr_reg:x3; val_offset:245160*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245160*0 + 3*312*FLEN/8, x4, x1, x2)

inst_81721:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffff000; valaddr_reg:x3; val_offset:245163*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245163*0 + 3*313*FLEN/8, x4, x1, x2)

inst_81722:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffff800; valaddr_reg:x3; val_offset:245166*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245166*0 + 3*314*FLEN/8, x4, x1, x2)

inst_81723:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffffc00; valaddr_reg:x3; val_offset:245169*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245169*0 + 3*315*FLEN/8, x4, x1, x2)

inst_81724:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffffe00; valaddr_reg:x3; val_offset:245172*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245172*0 + 3*316*FLEN/8, x4, x1, x2)

inst_81725:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffffff00; valaddr_reg:x3; val_offset:245175*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245175*0 + 3*317*FLEN/8, x4, x1, x2)

inst_81726:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffffff80; valaddr_reg:x3; val_offset:245178*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245178*0 + 3*318*FLEN/8, x4, x1, x2)

inst_81727:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffffffc0; valaddr_reg:x3; val_offset:245181*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245181*0 + 3*319*FLEN/8, x4, x1, x2)

inst_81728:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffffffe0; valaddr_reg:x3; val_offset:245184*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245184*0 + 3*320*FLEN/8, x4, x1, x2)

inst_81729:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffffff0; valaddr_reg:x3; val_offset:245187*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245187*0 + 3*321*FLEN/8, x4, x1, x2)

inst_81730:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffffff8; valaddr_reg:x3; val_offset:245190*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245190*0 + 3*322*FLEN/8, x4, x1, x2)

inst_81731:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffffffc; valaddr_reg:x3; val_offset:245193*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245193*0 + 3*323*FLEN/8, x4, x1, x2)

inst_81732:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecffffffffffffe; valaddr_reg:x3; val_offset:245196*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245196*0 + 3*324*FLEN/8, x4, x1, x2)

inst_81733:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3ec and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbecfffffffffffff; valaddr_reg:x3; val_offset:245199*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245199*0 + 3*325*FLEN/8, x4, x1, x2)

inst_81734:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:245202*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245202*0 + 3*326*FLEN/8, x4, x1, x2)

inst_81735:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:245205*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245205*0 + 3*327*FLEN/8, x4, x1, x2)

inst_81736:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:245208*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245208*0 + 3*328*FLEN/8, x4, x1, x2)

inst_81737:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:245211*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245211*0 + 3*329*FLEN/8, x4, x1, x2)

inst_81738:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:245214*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245214*0 + 3*330*FLEN/8, x4, x1, x2)

inst_81739:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:245217*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245217*0 + 3*331*FLEN/8, x4, x1, x2)

inst_81740:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:245220*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245220*0 + 3*332*FLEN/8, x4, x1, x2)

inst_81741:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:245223*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245223*0 + 3*333*FLEN/8, x4, x1, x2)

inst_81742:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:245226*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245226*0 + 3*334*FLEN/8, x4, x1, x2)

inst_81743:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:245229*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245229*0 + 3*335*FLEN/8, x4, x1, x2)

inst_81744:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:245232*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245232*0 + 3*336*FLEN/8, x4, x1, x2)

inst_81745:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:245235*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245235*0 + 3*337*FLEN/8, x4, x1, x2)

inst_81746:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:245238*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245238*0 + 3*338*FLEN/8, x4, x1, x2)

inst_81747:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:245241*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245241*0 + 3*339*FLEN/8, x4, x1, x2)

inst_81748:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:245244*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245244*0 + 3*340*FLEN/8, x4, x1, x2)

inst_81749:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:245247*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245247*0 + 3*341*FLEN/8, x4, x1, x2)

inst_81750:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:245250*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245250*0 + 3*342*FLEN/8, x4, x1, x2)

inst_81751:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:245253*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245253*0 + 3*343*FLEN/8, x4, x1, x2)

inst_81752:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:245256*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245256*0 + 3*344*FLEN/8, x4, x1, x2)

inst_81753:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:245259*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245259*0 + 3*345*FLEN/8, x4, x1, x2)

inst_81754:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:245262*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245262*0 + 3*346*FLEN/8, x4, x1, x2)

inst_81755:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9c37606126e28 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3df80ee9134a6 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9c37606126e28; op2val:0x9fc3df80ee9134a6;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:245265*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245265*0 + 3*347*FLEN/8, x4, x1, x2)

inst_81756:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000000000; valaddr_reg:x3; val_offset:245268*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245268*0 + 3*348*FLEN/8, x4, x1, x2)

inst_81757:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000000001; valaddr_reg:x3; val_offset:245271*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245271*0 + 3*349*FLEN/8, x4, x1, x2)

inst_81758:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000000003; valaddr_reg:x3; val_offset:245274*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245274*0 + 3*350*FLEN/8, x4, x1, x2)

inst_81759:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000000007; valaddr_reg:x3; val_offset:245277*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245277*0 + 3*351*FLEN/8, x4, x1, x2)

inst_81760:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000000000f; valaddr_reg:x3; val_offset:245280*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245280*0 + 3*352*FLEN/8, x4, x1, x2)

inst_81761:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000000001f; valaddr_reg:x3; val_offset:245283*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245283*0 + 3*353*FLEN/8, x4, x1, x2)

inst_81762:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000000003f; valaddr_reg:x3; val_offset:245286*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245286*0 + 3*354*FLEN/8, x4, x1, x2)

inst_81763:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000000007f; valaddr_reg:x3; val_offset:245289*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245289*0 + 3*355*FLEN/8, x4, x1, x2)

inst_81764:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000000000ff; valaddr_reg:x3; val_offset:245292*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245292*0 + 3*356*FLEN/8, x4, x1, x2)

inst_81765:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000000001ff; valaddr_reg:x3; val_offset:245295*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245295*0 + 3*357*FLEN/8, x4, x1, x2)

inst_81766:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000000003ff; valaddr_reg:x3; val_offset:245298*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245298*0 + 3*358*FLEN/8, x4, x1, x2)

inst_81767:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000000007ff; valaddr_reg:x3; val_offset:245301*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245301*0 + 3*359*FLEN/8, x4, x1, x2)

inst_81768:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000000fff; valaddr_reg:x3; val_offset:245304*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245304*0 + 3*360*FLEN/8, x4, x1, x2)

inst_81769:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000001fff; valaddr_reg:x3; val_offset:245307*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245307*0 + 3*361*FLEN/8, x4, x1, x2)

inst_81770:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000003fff; valaddr_reg:x3; val_offset:245310*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245310*0 + 3*362*FLEN/8, x4, x1, x2)

inst_81771:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000007fff; valaddr_reg:x3; val_offset:245313*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245313*0 + 3*363*FLEN/8, x4, x1, x2)

inst_81772:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000000ffff; valaddr_reg:x3; val_offset:245316*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245316*0 + 3*364*FLEN/8, x4, x1, x2)

inst_81773:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000001ffff; valaddr_reg:x3; val_offset:245319*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245319*0 + 3*365*FLEN/8, x4, x1, x2)

inst_81774:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000003ffff; valaddr_reg:x3; val_offset:245322*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245322*0 + 3*366*FLEN/8, x4, x1, x2)

inst_81775:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000007ffff; valaddr_reg:x3; val_offset:245325*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245325*0 + 3*367*FLEN/8, x4, x1, x2)

inst_81776:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000000fffff; valaddr_reg:x3; val_offset:245328*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245328*0 + 3*368*FLEN/8, x4, x1, x2)

inst_81777:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000001fffff; valaddr_reg:x3; val_offset:245331*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245331*0 + 3*369*FLEN/8, x4, x1, x2)

inst_81778:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000003fffff; valaddr_reg:x3; val_offset:245334*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245334*0 + 3*370*FLEN/8, x4, x1, x2)

inst_81779:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000007fffff; valaddr_reg:x3; val_offset:245337*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245337*0 + 3*371*FLEN/8, x4, x1, x2)

inst_81780:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000000ffffff; valaddr_reg:x3; val_offset:245340*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245340*0 + 3*372*FLEN/8, x4, x1, x2)

inst_81781:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000001ffffff; valaddr_reg:x3; val_offset:245343*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245343*0 + 3*373*FLEN/8, x4, x1, x2)

inst_81782:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000003ffffff; valaddr_reg:x3; val_offset:245346*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245346*0 + 3*374*FLEN/8, x4, x1, x2)

inst_81783:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000007ffffff; valaddr_reg:x3; val_offset:245349*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245349*0 + 3*375*FLEN/8, x4, x1, x2)

inst_81784:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000000fffffff; valaddr_reg:x3; val_offset:245352*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245352*0 + 3*376*FLEN/8, x4, x1, x2)

inst_81785:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000001fffffff; valaddr_reg:x3; val_offset:245355*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245355*0 + 3*377*FLEN/8, x4, x1, x2)

inst_81786:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000003fffffff; valaddr_reg:x3; val_offset:245358*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245358*0 + 3*378*FLEN/8, x4, x1, x2)

inst_81787:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000007fffffff; valaddr_reg:x3; val_offset:245361*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245361*0 + 3*379*FLEN/8, x4, x1, x2)

inst_81788:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900000ffffffff; valaddr_reg:x3; val_offset:245364*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245364*0 + 3*380*FLEN/8, x4, x1, x2)

inst_81789:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900001ffffffff; valaddr_reg:x3; val_offset:245367*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245367*0 + 3*381*FLEN/8, x4, x1, x2)

inst_81790:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900003ffffffff; valaddr_reg:x3; val_offset:245370*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245370*0 + 3*382*FLEN/8, x4, x1, x2)

inst_81791:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900007ffffffff; valaddr_reg:x3; val_offset:245373*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245373*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_81792:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90000fffffffff; valaddr_reg:x3; val_offset:245376*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245376*0 + 3*384*FLEN/8, x4, x1, x2)

inst_81793:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90001fffffffff; valaddr_reg:x3; val_offset:245379*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245379*0 + 3*385*FLEN/8, x4, x1, x2)

inst_81794:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90003fffffffff; valaddr_reg:x3; val_offset:245382*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245382*0 + 3*386*FLEN/8, x4, x1, x2)

inst_81795:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90007fffffffff; valaddr_reg:x3; val_offset:245385*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245385*0 + 3*387*FLEN/8, x4, x1, x2)

inst_81796:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9000ffffffffff; valaddr_reg:x3; val_offset:245388*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245388*0 + 3*388*FLEN/8, x4, x1, x2)

inst_81797:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9001ffffffffff; valaddr_reg:x3; val_offset:245391*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245391*0 + 3*389*FLEN/8, x4, x1, x2)

inst_81798:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9003ffffffffff; valaddr_reg:x3; val_offset:245394*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245394*0 + 3*390*FLEN/8, x4, x1, x2)

inst_81799:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9007ffffffffff; valaddr_reg:x3; val_offset:245397*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245397*0 + 3*391*FLEN/8, x4, x1, x2)

inst_81800:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd900fffffffffff; valaddr_reg:x3; val_offset:245400*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245400*0 + 3*392*FLEN/8, x4, x1, x2)

inst_81801:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd901fffffffffff; valaddr_reg:x3; val_offset:245403*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245403*0 + 3*393*FLEN/8, x4, x1, x2)

inst_81802:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd903fffffffffff; valaddr_reg:x3; val_offset:245406*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245406*0 + 3*394*FLEN/8, x4, x1, x2)

inst_81803:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd907fffffffffff; valaddr_reg:x3; val_offset:245409*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245409*0 + 3*395*FLEN/8, x4, x1, x2)

inst_81804:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd90ffffffffffff; valaddr_reg:x3; val_offset:245412*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245412*0 + 3*396*FLEN/8, x4, x1, x2)

inst_81805:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd91ffffffffffff; valaddr_reg:x3; val_offset:245415*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245415*0 + 3*397*FLEN/8, x4, x1, x2)

inst_81806:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd93ffffffffffff; valaddr_reg:x3; val_offset:245418*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245418*0 + 3*398*FLEN/8, x4, x1, x2)

inst_81807:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd97ffffffffffff; valaddr_reg:x3; val_offset:245421*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245421*0 + 3*399*FLEN/8, x4, x1, x2)

inst_81808:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd98000000000000; valaddr_reg:x3; val_offset:245424*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245424*0 + 3*400*FLEN/8, x4, x1, x2)

inst_81809:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9c000000000000; valaddr_reg:x3; val_offset:245427*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245427*0 + 3*401*FLEN/8, x4, x1, x2)

inst_81810:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9e000000000000; valaddr_reg:x3; val_offset:245430*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245430*0 + 3*402*FLEN/8, x4, x1, x2)

inst_81811:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9f000000000000; valaddr_reg:x3; val_offset:245433*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245433*0 + 3*403*FLEN/8, x4, x1, x2)

inst_81812:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9f800000000000; valaddr_reg:x3; val_offset:245436*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245436*0 + 3*404*FLEN/8, x4, x1, x2)

inst_81813:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fc00000000000; valaddr_reg:x3; val_offset:245439*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245439*0 + 3*405*FLEN/8, x4, x1, x2)

inst_81814:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fe00000000000; valaddr_reg:x3; val_offset:245442*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245442*0 + 3*406*FLEN/8, x4, x1, x2)

inst_81815:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ff00000000000; valaddr_reg:x3; val_offset:245445*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245445*0 + 3*407*FLEN/8, x4, x1, x2)

inst_81816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ff80000000000; valaddr_reg:x3; val_offset:245448*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245448*0 + 3*408*FLEN/8, x4, x1, x2)

inst_81817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffc0000000000; valaddr_reg:x3; val_offset:245451*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245451*0 + 3*409*FLEN/8, x4, x1, x2)

inst_81818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffe0000000000; valaddr_reg:x3; val_offset:245454*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245454*0 + 3*410*FLEN/8, x4, x1, x2)

inst_81819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fff0000000000; valaddr_reg:x3; val_offset:245457*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245457*0 + 3*411*FLEN/8, x4, x1, x2)

inst_81820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fff8000000000; valaddr_reg:x3; val_offset:245460*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245460*0 + 3*412*FLEN/8, x4, x1, x2)

inst_81821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffc000000000; valaddr_reg:x3; val_offset:245463*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245463*0 + 3*413*FLEN/8, x4, x1, x2)

inst_81822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffe000000000; valaddr_reg:x3; val_offset:245466*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245466*0 + 3*414*FLEN/8, x4, x1, x2)

inst_81823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffff000000000; valaddr_reg:x3; val_offset:245469*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245469*0 + 3*415*FLEN/8, x4, x1, x2)

inst_81824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffff800000000; valaddr_reg:x3; val_offset:245472*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245472*0 + 3*416*FLEN/8, x4, x1, x2)

inst_81825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffc00000000; valaddr_reg:x3; val_offset:245475*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245475*0 + 3*417*FLEN/8, x4, x1, x2)

inst_81826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffe00000000; valaddr_reg:x3; val_offset:245478*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245478*0 + 3*418*FLEN/8, x4, x1, x2)

inst_81827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffff00000000; valaddr_reg:x3; val_offset:245481*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245481*0 + 3*419*FLEN/8, x4, x1, x2)

inst_81828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffff80000000; valaddr_reg:x3; val_offset:245484*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245484*0 + 3*420*FLEN/8, x4, x1, x2)

inst_81829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffc0000000; valaddr_reg:x3; val_offset:245487*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245487*0 + 3*421*FLEN/8, x4, x1, x2)

inst_81830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffe0000000; valaddr_reg:x3; val_offset:245490*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245490*0 + 3*422*FLEN/8, x4, x1, x2)

inst_81831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffff0000000; valaddr_reg:x3; val_offset:245493*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245493*0 + 3*423*FLEN/8, x4, x1, x2)

inst_81832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffff8000000; valaddr_reg:x3; val_offset:245496*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245496*0 + 3*424*FLEN/8, x4, x1, x2)

inst_81833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffc000000; valaddr_reg:x3; val_offset:245499*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245499*0 + 3*425*FLEN/8, x4, x1, x2)

inst_81834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffe000000; valaddr_reg:x3; val_offset:245502*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245502*0 + 3*426*FLEN/8, x4, x1, x2)

inst_81835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffff000000; valaddr_reg:x3; val_offset:245505*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245505*0 + 3*427*FLEN/8, x4, x1, x2)

inst_81836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffff800000; valaddr_reg:x3; val_offset:245508*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245508*0 + 3*428*FLEN/8, x4, x1, x2)

inst_81837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffc00000; valaddr_reg:x3; val_offset:245511*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245511*0 + 3*429*FLEN/8, x4, x1, x2)

inst_81838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffe00000; valaddr_reg:x3; val_offset:245514*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245514*0 + 3*430*FLEN/8, x4, x1, x2)

inst_81839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffff00000; valaddr_reg:x3; val_offset:245517*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245517*0 + 3*431*FLEN/8, x4, x1, x2)

inst_81840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffff80000; valaddr_reg:x3; val_offset:245520*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245520*0 + 3*432*FLEN/8, x4, x1, x2)

inst_81841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffc0000; valaddr_reg:x3; val_offset:245523*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245523*0 + 3*433*FLEN/8, x4, x1, x2)

inst_81842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffe0000; valaddr_reg:x3; val_offset:245526*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245526*0 + 3*434*FLEN/8, x4, x1, x2)

inst_81843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffff0000; valaddr_reg:x3; val_offset:245529*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245529*0 + 3*435*FLEN/8, x4, x1, x2)

inst_81844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffff8000; valaddr_reg:x3; val_offset:245532*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245532*0 + 3*436*FLEN/8, x4, x1, x2)

inst_81845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffffc000; valaddr_reg:x3; val_offset:245535*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245535*0 + 3*437*FLEN/8, x4, x1, x2)

inst_81846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffffe000; valaddr_reg:x3; val_offset:245538*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245538*0 + 3*438*FLEN/8, x4, x1, x2)

inst_81847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffff000; valaddr_reg:x3; val_offset:245541*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245541*0 + 3*439*FLEN/8, x4, x1, x2)

inst_81848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffff800; valaddr_reg:x3; val_offset:245544*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245544*0 + 3*440*FLEN/8, x4, x1, x2)

inst_81849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffffc00; valaddr_reg:x3; val_offset:245547*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245547*0 + 3*441*FLEN/8, x4, x1, x2)

inst_81850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffffe00; valaddr_reg:x3; val_offset:245550*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245550*0 + 3*442*FLEN/8, x4, x1, x2)

inst_81851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffffff00; valaddr_reg:x3; val_offset:245553*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245553*0 + 3*443*FLEN/8, x4, x1, x2)

inst_81852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffffff80; valaddr_reg:x3; val_offset:245556*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245556*0 + 3*444*FLEN/8, x4, x1, x2)

inst_81853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffffffc0; valaddr_reg:x3; val_offset:245559*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245559*0 + 3*445*FLEN/8, x4, x1, x2)

inst_81854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffffffe0; valaddr_reg:x3; val_offset:245562*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245562*0 + 3*446*FLEN/8, x4, x1, x2)

inst_81855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffffff0; valaddr_reg:x3; val_offset:245565*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245565*0 + 3*447*FLEN/8, x4, x1, x2)

inst_81856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffffff8; valaddr_reg:x3; val_offset:245568*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245568*0 + 3*448*FLEN/8, x4, x1, x2)

inst_81857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffffffc; valaddr_reg:x3; val_offset:245571*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245571*0 + 3*449*FLEN/8, x4, x1, x2)

inst_81858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9ffffffffffffe; valaddr_reg:x3; val_offset:245574*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245574*0 + 3*450*FLEN/8, x4, x1, x2)

inst_81859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3d9 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbd9fffffffffffff; valaddr_reg:x3; val_offset:245577*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245577*0 + 3*451*FLEN/8, x4, x1, x2)

inst_81860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:245580*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245580*0 + 3*452*FLEN/8, x4, x1, x2)

inst_81861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:245583*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245583*0 + 3*453*FLEN/8, x4, x1, x2)

inst_81862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:245586*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245586*0 + 3*454*FLEN/8, x4, x1, x2)

inst_81863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:245589*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245589*0 + 3*455*FLEN/8, x4, x1, x2)

inst_81864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:245592*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245592*0 + 3*456*FLEN/8, x4, x1, x2)

inst_81865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:245595*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245595*0 + 3*457*FLEN/8, x4, x1, x2)

inst_81866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:245598*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245598*0 + 3*458*FLEN/8, x4, x1, x2)

inst_81867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:245601*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245601*0 + 3*459*FLEN/8, x4, x1, x2)

inst_81868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:245604*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245604*0 + 3*460*FLEN/8, x4, x1, x2)

inst_81869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:245607*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245607*0 + 3*461*FLEN/8, x4, x1, x2)

inst_81870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:245610*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245610*0 + 3*462*FLEN/8, x4, x1, x2)

inst_81871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:245613*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245613*0 + 3*463*FLEN/8, x4, x1, x2)

inst_81872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:245616*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245616*0 + 3*464*FLEN/8, x4, x1, x2)

inst_81873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:245619*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245619*0 + 3*465*FLEN/8, x4, x1, x2)

inst_81874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:245622*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245622*0 + 3*466*FLEN/8, x4, x1, x2)

inst_81875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:245625*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245625*0 + 3*467*FLEN/8, x4, x1, x2)

inst_81876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:245628*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245628*0 + 3*468*FLEN/8, x4, x1, x2)

inst_81877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:245631*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245631*0 + 3*469*FLEN/8, x4, x1, x2)

inst_81878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:245634*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245634*0 + 3*470*FLEN/8, x4, x1, x2)

inst_81879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:245637*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245637*0 + 3*471*FLEN/8, x4, x1, x2)

inst_81880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:245640*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245640*0 + 3*472*FLEN/8, x4, x1, x2)

inst_81881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9d365cde1b8c2 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x3d33d85363889 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9d365cde1b8c2; op2val:0x9fc3d33d85363889;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:245643*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245643*0 + 3*473*FLEN/8, x4, x1, x2)

inst_81882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:245646*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245646*0 + 3*474*FLEN/8, x4, x1, x2)

inst_81883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:245649*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245649*0 + 3*475*FLEN/8, x4, x1, x2)

inst_81884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:245652*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245652*0 + 3*476*FLEN/8, x4, x1, x2)

inst_81885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:245655*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245655*0 + 3*477*FLEN/8, x4, x1, x2)

inst_81886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:245658*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245658*0 + 3*478*FLEN/8, x4, x1, x2)

inst_81887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:245661*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245661*0 + 3*479*FLEN/8, x4, x1, x2)

inst_81888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:245664*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245664*0 + 3*480*FLEN/8, x4, x1, x2)

inst_81889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:245667*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245667*0 + 3*481*FLEN/8, x4, x1, x2)

inst_81890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:245670*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245670*0 + 3*482*FLEN/8, x4, x1, x2)

inst_81891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:245673*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245673*0 + 3*483*FLEN/8, x4, x1, x2)

inst_81892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:245676*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245676*0 + 3*484*FLEN/8, x4, x1, x2)

inst_81893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:245679*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245679*0 + 3*485*FLEN/8, x4, x1, x2)

inst_81894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:245682*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245682*0 + 3*486*FLEN/8, x4, x1, x2)

inst_81895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:245685*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245685*0 + 3*487*FLEN/8, x4, x1, x2)

inst_81896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:245688*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245688*0 + 3*488*FLEN/8, x4, x1, x2)

inst_81897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:245691*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245691*0 + 3*489*FLEN/8, x4, x1, x2)

inst_81898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:245694*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245694*0 + 3*490*FLEN/8, x4, x1, x2)

inst_81899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:245697*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245697*0 + 3*491*FLEN/8, x4, x1, x2)

inst_81900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:245700*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245700*0 + 3*492*FLEN/8, x4, x1, x2)

inst_81901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:245703*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245703*0 + 3*493*FLEN/8, x4, x1, x2)

inst_81902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:245706*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245706*0 + 3*494*FLEN/8, x4, x1, x2)

inst_81903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:245709*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245709*0 + 3*495*FLEN/8, x4, x1, x2)

inst_81904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000000000; valaddr_reg:x3; val_offset:245712*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245712*0 + 3*496*FLEN/8, x4, x1, x2)

inst_81905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000000001; valaddr_reg:x3; val_offset:245715*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245715*0 + 3*497*FLEN/8, x4, x1, x2)

inst_81906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000000003; valaddr_reg:x3; val_offset:245718*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245718*0 + 3*498*FLEN/8, x4, x1, x2)

inst_81907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000000007; valaddr_reg:x3; val_offset:245721*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245721*0 + 3*499*FLEN/8, x4, x1, x2)

inst_81908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000000000f; valaddr_reg:x3; val_offset:245724*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245724*0 + 3*500*FLEN/8, x4, x1, x2)

inst_81909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000000001f; valaddr_reg:x3; val_offset:245727*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245727*0 + 3*501*FLEN/8, x4, x1, x2)

inst_81910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000000003f; valaddr_reg:x3; val_offset:245730*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245730*0 + 3*502*FLEN/8, x4, x1, x2)

inst_81911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000000007f; valaddr_reg:x3; val_offset:245733*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245733*0 + 3*503*FLEN/8, x4, x1, x2)

inst_81912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000000000ff; valaddr_reg:x3; val_offset:245736*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245736*0 + 3*504*FLEN/8, x4, x1, x2)

inst_81913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000000001ff; valaddr_reg:x3; val_offset:245739*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245739*0 + 3*505*FLEN/8, x4, x1, x2)

inst_81914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000000003ff; valaddr_reg:x3; val_offset:245742*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245742*0 + 3*506*FLEN/8, x4, x1, x2)

inst_81915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000000007ff; valaddr_reg:x3; val_offset:245745*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245745*0 + 3*507*FLEN/8, x4, x1, x2)

inst_81916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000000fff; valaddr_reg:x3; val_offset:245748*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245748*0 + 3*508*FLEN/8, x4, x1, x2)

inst_81917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000001fff; valaddr_reg:x3; val_offset:245751*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245751*0 + 3*509*FLEN/8, x4, x1, x2)

inst_81918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000003fff; valaddr_reg:x3; val_offset:245754*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245754*0 + 3*510*FLEN/8, x4, x1, x2)

inst_81919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000007fff; valaddr_reg:x3; val_offset:245757*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245757*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_81920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000000ffff; valaddr_reg:x3; val_offset:245760*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245760*0 + 3*512*FLEN/8, x4, x1, x2)

inst_81921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000001ffff; valaddr_reg:x3; val_offset:245763*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245763*0 + 3*513*FLEN/8, x4, x1, x2)

inst_81922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000003ffff; valaddr_reg:x3; val_offset:245766*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245766*0 + 3*514*FLEN/8, x4, x1, x2)

inst_81923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000007ffff; valaddr_reg:x3; val_offset:245769*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245769*0 + 3*515*FLEN/8, x4, x1, x2)

inst_81924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000000fffff; valaddr_reg:x3; val_offset:245772*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245772*0 + 3*516*FLEN/8, x4, x1, x2)

inst_81925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000001fffff; valaddr_reg:x3; val_offset:245775*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245775*0 + 3*517*FLEN/8, x4, x1, x2)

inst_81926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000003fffff; valaddr_reg:x3; val_offset:245778*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245778*0 + 3*518*FLEN/8, x4, x1, x2)

inst_81927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000007fffff; valaddr_reg:x3; val_offset:245781*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245781*0 + 3*519*FLEN/8, x4, x1, x2)

inst_81928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000000ffffff; valaddr_reg:x3; val_offset:245784*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245784*0 + 3*520*FLEN/8, x4, x1, x2)

inst_81929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000001ffffff; valaddr_reg:x3; val_offset:245787*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245787*0 + 3*521*FLEN/8, x4, x1, x2)

inst_81930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000003ffffff; valaddr_reg:x3; val_offset:245790*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245790*0 + 3*522*FLEN/8, x4, x1, x2)

inst_81931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000007ffffff; valaddr_reg:x3; val_offset:245793*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245793*0 + 3*523*FLEN/8, x4, x1, x2)

inst_81932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000000fffffff; valaddr_reg:x3; val_offset:245796*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245796*0 + 3*524*FLEN/8, x4, x1, x2)

inst_81933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000001fffffff; valaddr_reg:x3; val_offset:245799*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245799*0 + 3*525*FLEN/8, x4, x1, x2)

inst_81934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000003fffffff; valaddr_reg:x3; val_offset:245802*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245802*0 + 3*526*FLEN/8, x4, x1, x2)

inst_81935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000007fffffff; valaddr_reg:x3; val_offset:245805*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245805*0 + 3*527*FLEN/8, x4, x1, x2)

inst_81936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00000ffffffff; valaddr_reg:x3; val_offset:245808*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245808*0 + 3*528*FLEN/8, x4, x1, x2)

inst_81937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00001ffffffff; valaddr_reg:x3; val_offset:245811*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245811*0 + 3*529*FLEN/8, x4, x1, x2)

inst_81938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00003ffffffff; valaddr_reg:x3; val_offset:245814*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245814*0 + 3*530*FLEN/8, x4, x1, x2)

inst_81939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00007ffffffff; valaddr_reg:x3; val_offset:245817*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245817*0 + 3*531*FLEN/8, x4, x1, x2)

inst_81940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0000fffffffff; valaddr_reg:x3; val_offset:245820*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245820*0 + 3*532*FLEN/8, x4, x1, x2)

inst_81941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0001fffffffff; valaddr_reg:x3; val_offset:245823*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245823*0 + 3*533*FLEN/8, x4, x1, x2)

inst_81942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0003fffffffff; valaddr_reg:x3; val_offset:245826*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245826*0 + 3*534*FLEN/8, x4, x1, x2)

inst_81943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0007fffffffff; valaddr_reg:x3; val_offset:245829*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245829*0 + 3*535*FLEN/8, x4, x1, x2)

inst_81944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d000ffffffffff; valaddr_reg:x3; val_offset:245832*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245832*0 + 3*536*FLEN/8, x4, x1, x2)

inst_81945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d001ffffffffff; valaddr_reg:x3; val_offset:245835*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245835*0 + 3*537*FLEN/8, x4, x1, x2)

inst_81946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d003ffffffffff; valaddr_reg:x3; val_offset:245838*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245838*0 + 3*538*FLEN/8, x4, x1, x2)

inst_81947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d007ffffffffff; valaddr_reg:x3; val_offset:245841*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245841*0 + 3*539*FLEN/8, x4, x1, x2)

inst_81948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d00fffffffffff; valaddr_reg:x3; val_offset:245844*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245844*0 + 3*540*FLEN/8, x4, x1, x2)

inst_81949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d01fffffffffff; valaddr_reg:x3; val_offset:245847*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245847*0 + 3*541*FLEN/8, x4, x1, x2)

inst_81950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d03fffffffffff; valaddr_reg:x3; val_offset:245850*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245850*0 + 3*542*FLEN/8, x4, x1, x2)

inst_81951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d07fffffffffff; valaddr_reg:x3; val_offset:245853*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245853*0 + 3*543*FLEN/8, x4, x1, x2)

inst_81952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d0ffffffffffff; valaddr_reg:x3; val_offset:245856*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245856*0 + 3*544*FLEN/8, x4, x1, x2)

inst_81953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d1ffffffffffff; valaddr_reg:x3; val_offset:245859*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245859*0 + 3*545*FLEN/8, x4, x1, x2)

inst_81954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d3ffffffffffff; valaddr_reg:x3; val_offset:245862*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245862*0 + 3*546*FLEN/8, x4, x1, x2)

inst_81955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d7ffffffffffff; valaddr_reg:x3; val_offset:245865*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245865*0 + 3*547*FLEN/8, x4, x1, x2)

inst_81956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80d8000000000000; valaddr_reg:x3; val_offset:245868*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245868*0 + 3*548*FLEN/8, x4, x1, x2)

inst_81957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dc000000000000; valaddr_reg:x3; val_offset:245871*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245871*0 + 3*549*FLEN/8, x4, x1, x2)

inst_81958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80de000000000000; valaddr_reg:x3; val_offset:245874*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245874*0 + 3*550*FLEN/8, x4, x1, x2)

inst_81959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80df000000000000; valaddr_reg:x3; val_offset:245877*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245877*0 + 3*551*FLEN/8, x4, x1, x2)

inst_81960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80df800000000000; valaddr_reg:x3; val_offset:245880*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245880*0 + 3*552*FLEN/8, x4, x1, x2)

inst_81961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfc00000000000; valaddr_reg:x3; val_offset:245883*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245883*0 + 3*553*FLEN/8, x4, x1, x2)

inst_81962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfe00000000000; valaddr_reg:x3; val_offset:245886*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245886*0 + 3*554*FLEN/8, x4, x1, x2)

inst_81963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dff00000000000; valaddr_reg:x3; val_offset:245889*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245889*0 + 3*555*FLEN/8, x4, x1, x2)

inst_81964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dff80000000000; valaddr_reg:x3; val_offset:245892*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245892*0 + 3*556*FLEN/8, x4, x1, x2)

inst_81965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffc0000000000; valaddr_reg:x3; val_offset:245895*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245895*0 + 3*557*FLEN/8, x4, x1, x2)

inst_81966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffe0000000000; valaddr_reg:x3; val_offset:245898*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245898*0 + 3*558*FLEN/8, x4, x1, x2)

inst_81967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfff0000000000; valaddr_reg:x3; val_offset:245901*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245901*0 + 3*559*FLEN/8, x4, x1, x2)

inst_81968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfff8000000000; valaddr_reg:x3; val_offset:245904*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245904*0 + 3*560*FLEN/8, x4, x1, x2)

inst_81969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffc000000000; valaddr_reg:x3; val_offset:245907*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245907*0 + 3*561*FLEN/8, x4, x1, x2)

inst_81970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffe000000000; valaddr_reg:x3; val_offset:245910*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245910*0 + 3*562*FLEN/8, x4, x1, x2)

inst_81971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffff000000000; valaddr_reg:x3; val_offset:245913*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245913*0 + 3*563*FLEN/8, x4, x1, x2)

inst_81972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffff800000000; valaddr_reg:x3; val_offset:245916*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245916*0 + 3*564*FLEN/8, x4, x1, x2)

inst_81973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffc00000000; valaddr_reg:x3; val_offset:245919*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245919*0 + 3*565*FLEN/8, x4, x1, x2)

inst_81974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffe00000000; valaddr_reg:x3; val_offset:245922*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245922*0 + 3*566*FLEN/8, x4, x1, x2)

inst_81975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffff00000000; valaddr_reg:x3; val_offset:245925*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245925*0 + 3*567*FLEN/8, x4, x1, x2)

inst_81976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffff80000000; valaddr_reg:x3; val_offset:245928*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245928*0 + 3*568*FLEN/8, x4, x1, x2)

inst_81977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffc0000000; valaddr_reg:x3; val_offset:245931*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245931*0 + 3*569*FLEN/8, x4, x1, x2)

inst_81978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffe0000000; valaddr_reg:x3; val_offset:245934*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245934*0 + 3*570*FLEN/8, x4, x1, x2)

inst_81979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffff0000000; valaddr_reg:x3; val_offset:245937*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245937*0 + 3*571*FLEN/8, x4, x1, x2)

inst_81980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffff8000000; valaddr_reg:x3; val_offset:245940*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245940*0 + 3*572*FLEN/8, x4, x1, x2)

inst_81981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffc000000; valaddr_reg:x3; val_offset:245943*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245943*0 + 3*573*FLEN/8, x4, x1, x2)

inst_81982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffe000000; valaddr_reg:x3; val_offset:245946*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245946*0 + 3*574*FLEN/8, x4, x1, x2)

inst_81983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffff000000; valaddr_reg:x3; val_offset:245949*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245949*0 + 3*575*FLEN/8, x4, x1, x2)

inst_81984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffff800000; valaddr_reg:x3; val_offset:245952*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245952*0 + 3*576*FLEN/8, x4, x1, x2)

inst_81985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffc00000; valaddr_reg:x3; val_offset:245955*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245955*0 + 3*577*FLEN/8, x4, x1, x2)

inst_81986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffe00000; valaddr_reg:x3; val_offset:245958*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245958*0 + 3*578*FLEN/8, x4, x1, x2)

inst_81987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffff00000; valaddr_reg:x3; val_offset:245961*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245961*0 + 3*579*FLEN/8, x4, x1, x2)

inst_81988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffff80000; valaddr_reg:x3; val_offset:245964*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245964*0 + 3*580*FLEN/8, x4, x1, x2)

inst_81989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffc0000; valaddr_reg:x3; val_offset:245967*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245967*0 + 3*581*FLEN/8, x4, x1, x2)

inst_81990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffe0000; valaddr_reg:x3; val_offset:245970*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245970*0 + 3*582*FLEN/8, x4, x1, x2)

inst_81991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffff0000; valaddr_reg:x3; val_offset:245973*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245973*0 + 3*583*FLEN/8, x4, x1, x2)

inst_81992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffff8000; valaddr_reg:x3; val_offset:245976*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245976*0 + 3*584*FLEN/8, x4, x1, x2)

inst_81993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffffc000; valaddr_reg:x3; val_offset:245979*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245979*0 + 3*585*FLEN/8, x4, x1, x2)

inst_81994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffffe000; valaddr_reg:x3; val_offset:245982*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245982*0 + 3*586*FLEN/8, x4, x1, x2)

inst_81995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffff000; valaddr_reg:x3; val_offset:245985*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245985*0 + 3*587*FLEN/8, x4, x1, x2)

inst_81996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffff800; valaddr_reg:x3; val_offset:245988*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245988*0 + 3*588*FLEN/8, x4, x1, x2)

inst_81997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffffc00; valaddr_reg:x3; val_offset:245991*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245991*0 + 3*589*FLEN/8, x4, x1, x2)

inst_81998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffffe00; valaddr_reg:x3; val_offset:245994*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245994*0 + 3*590*FLEN/8, x4, x1, x2)

inst_81999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffffff00; valaddr_reg:x3; val_offset:245997*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 245997*0 + 3*591*FLEN/8, x4, x1, x2)

inst_82000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffffff80; valaddr_reg:x3; val_offset:246000*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246000*0 + 3*592*FLEN/8, x4, x1, x2)

inst_82001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffffffc0; valaddr_reg:x3; val_offset:246003*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246003*0 + 3*593*FLEN/8, x4, x1, x2)

inst_82002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffffffe0; valaddr_reg:x3; val_offset:246006*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246006*0 + 3*594*FLEN/8, x4, x1, x2)

inst_82003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffffff0; valaddr_reg:x3; val_offset:246009*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246009*0 + 3*595*FLEN/8, x4, x1, x2)

inst_82004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffffff8; valaddr_reg:x3; val_offset:246012*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246012*0 + 3*596*FLEN/8, x4, x1, x2)

inst_82005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffffffc; valaddr_reg:x3; val_offset:246015*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246015*0 + 3*597*FLEN/8, x4, x1, x2)

inst_82006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dffffffffffffe; valaddr_reg:x3; val_offset:246018*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246018*0 + 3*598*FLEN/8, x4, x1, x2)

inst_82007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9e35999a602d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9e35999a602d4; op2val:0x8000;
op3val:0x80dfffffffffffff; valaddr_reg:x3; val_offset:246021*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246021*0 + 3*599*FLEN/8, x4, x1, x2)

inst_82008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:246024*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246024*0 + 3*600*FLEN/8, x4, x1, x2)

inst_82009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:246027*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246027*0 + 3*601*FLEN/8, x4, x1, x2)

inst_82010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:246030*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246030*0 + 3*602*FLEN/8, x4, x1, x2)

inst_82011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:246033*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246033*0 + 3*603*FLEN/8, x4, x1, x2)

inst_82012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:246036*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246036*0 + 3*604*FLEN/8, x4, x1, x2)

inst_82013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:246039*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246039*0 + 3*605*FLEN/8, x4, x1, x2)

inst_82014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:246042*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246042*0 + 3*606*FLEN/8, x4, x1, x2)

inst_82015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:246045*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246045*0 + 3*607*FLEN/8, x4, x1, x2)

inst_82016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:246048*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246048*0 + 3*608*FLEN/8, x4, x1, x2)

inst_82017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:246051*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246051*0 + 3*609*FLEN/8, x4, x1, x2)

inst_82018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:246054*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246054*0 + 3*610*FLEN/8, x4, x1, x2)

inst_82019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:246057*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246057*0 + 3*611*FLEN/8, x4, x1, x2)

inst_82020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:246060*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246060*0 + 3*612*FLEN/8, x4, x1, x2)

inst_82021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:246063*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246063*0 + 3*613*FLEN/8, x4, x1, x2)

inst_82022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:246066*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246066*0 + 3*614*FLEN/8, x4, x1, x2)

inst_82023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:246069*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246069*0 + 3*615*FLEN/8, x4, x1, x2)

inst_82024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:246072*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246072*0 + 3*616*FLEN/8, x4, x1, x2)

inst_82025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:246075*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246075*0 + 3*617*FLEN/8, x4, x1, x2)

inst_82026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:246078*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246078*0 + 3*618*FLEN/8, x4, x1, x2)

inst_82027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:246081*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246081*0 + 3*619*FLEN/8, x4, x1, x2)

inst_82028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:246084*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246084*0 + 3*620*FLEN/8, x4, x1, x2)

inst_82029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:246087*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246087*0 + 3*621*FLEN/8, x4, x1, x2)

inst_82030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000000000; valaddr_reg:x3; val_offset:246090*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246090*0 + 3*622*FLEN/8, x4, x1, x2)

inst_82031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000000001; valaddr_reg:x3; val_offset:246093*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246093*0 + 3*623*FLEN/8, x4, x1, x2)

inst_82032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000000003; valaddr_reg:x3; val_offset:246096*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246096*0 + 3*624*FLEN/8, x4, x1, x2)

inst_82033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000000007; valaddr_reg:x3; val_offset:246099*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246099*0 + 3*625*FLEN/8, x4, x1, x2)

inst_82034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000000000f; valaddr_reg:x3; val_offset:246102*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246102*0 + 3*626*FLEN/8, x4, x1, x2)

inst_82035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000000001f; valaddr_reg:x3; val_offset:246105*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246105*0 + 3*627*FLEN/8, x4, x1, x2)

inst_82036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000000003f; valaddr_reg:x3; val_offset:246108*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246108*0 + 3*628*FLEN/8, x4, x1, x2)

inst_82037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000000007f; valaddr_reg:x3; val_offset:246111*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246111*0 + 3*629*FLEN/8, x4, x1, x2)

inst_82038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000000000ff; valaddr_reg:x3; val_offset:246114*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246114*0 + 3*630*FLEN/8, x4, x1, x2)

inst_82039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000000001ff; valaddr_reg:x3; val_offset:246117*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246117*0 + 3*631*FLEN/8, x4, x1, x2)

inst_82040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000000003ff; valaddr_reg:x3; val_offset:246120*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246120*0 + 3*632*FLEN/8, x4, x1, x2)

inst_82041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000000007ff; valaddr_reg:x3; val_offset:246123*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246123*0 + 3*633*FLEN/8, x4, x1, x2)

inst_82042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000000fff; valaddr_reg:x3; val_offset:246126*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246126*0 + 3*634*FLEN/8, x4, x1, x2)

inst_82043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000001fff; valaddr_reg:x3; val_offset:246129*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246129*0 + 3*635*FLEN/8, x4, x1, x2)

inst_82044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000003fff; valaddr_reg:x3; val_offset:246132*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246132*0 + 3*636*FLEN/8, x4, x1, x2)

inst_82045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000007fff; valaddr_reg:x3; val_offset:246135*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246135*0 + 3*637*FLEN/8, x4, x1, x2)

inst_82046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000000ffff; valaddr_reg:x3; val_offset:246138*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246138*0 + 3*638*FLEN/8, x4, x1, x2)

inst_82047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000001ffff; valaddr_reg:x3; val_offset:246141*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246141*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_82048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000003ffff; valaddr_reg:x3; val_offset:246144*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246144*0 + 3*640*FLEN/8, x4, x1, x2)

inst_82049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000007ffff; valaddr_reg:x3; val_offset:246147*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246147*0 + 3*641*FLEN/8, x4, x1, x2)

inst_82050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000000fffff; valaddr_reg:x3; val_offset:246150*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246150*0 + 3*642*FLEN/8, x4, x1, x2)

inst_82051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000001fffff; valaddr_reg:x3; val_offset:246153*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246153*0 + 3*643*FLEN/8, x4, x1, x2)

inst_82052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000003fffff; valaddr_reg:x3; val_offset:246156*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246156*0 + 3*644*FLEN/8, x4, x1, x2)

inst_82053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000007fffff; valaddr_reg:x3; val_offset:246159*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246159*0 + 3*645*FLEN/8, x4, x1, x2)

inst_82054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000000ffffff; valaddr_reg:x3; val_offset:246162*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246162*0 + 3*646*FLEN/8, x4, x1, x2)

inst_82055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000001ffffff; valaddr_reg:x3; val_offset:246165*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246165*0 + 3*647*FLEN/8, x4, x1, x2)

inst_82056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000003ffffff; valaddr_reg:x3; val_offset:246168*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246168*0 + 3*648*FLEN/8, x4, x1, x2)

inst_82057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000007ffffff; valaddr_reg:x3; val_offset:246171*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246171*0 + 3*649*FLEN/8, x4, x1, x2)

inst_82058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000000fffffff; valaddr_reg:x3; val_offset:246174*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246174*0 + 3*650*FLEN/8, x4, x1, x2)

inst_82059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000001fffffff; valaddr_reg:x3; val_offset:246177*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246177*0 + 3*651*FLEN/8, x4, x1, x2)

inst_82060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000003fffffff; valaddr_reg:x3; val_offset:246180*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246180*0 + 3*652*FLEN/8, x4, x1, x2)

inst_82061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000007fffffff; valaddr_reg:x3; val_offset:246183*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246183*0 + 3*653*FLEN/8, x4, x1, x2)

inst_82062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100000ffffffff; valaddr_reg:x3; val_offset:246186*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246186*0 + 3*654*FLEN/8, x4, x1, x2)

inst_82063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100001ffffffff; valaddr_reg:x3; val_offset:246189*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246189*0 + 3*655*FLEN/8, x4, x1, x2)

inst_82064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100003ffffffff; valaddr_reg:x3; val_offset:246192*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246192*0 + 3*656*FLEN/8, x4, x1, x2)

inst_82065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100007ffffffff; valaddr_reg:x3; val_offset:246195*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246195*0 + 3*657*FLEN/8, x4, x1, x2)

inst_82066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110000fffffffff; valaddr_reg:x3; val_offset:246198*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246198*0 + 3*658*FLEN/8, x4, x1, x2)

inst_82067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110001fffffffff; valaddr_reg:x3; val_offset:246201*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246201*0 + 3*659*FLEN/8, x4, x1, x2)

inst_82068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110003fffffffff; valaddr_reg:x3; val_offset:246204*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246204*0 + 3*660*FLEN/8, x4, x1, x2)

inst_82069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110007fffffffff; valaddr_reg:x3; val_offset:246207*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246207*0 + 3*661*FLEN/8, x4, x1, x2)

inst_82070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11000ffffffffff; valaddr_reg:x3; val_offset:246210*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246210*0 + 3*662*FLEN/8, x4, x1, x2)

inst_82071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11001ffffffffff; valaddr_reg:x3; val_offset:246213*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246213*0 + 3*663*FLEN/8, x4, x1, x2)

inst_82072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11003ffffffffff; valaddr_reg:x3; val_offset:246216*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246216*0 + 3*664*FLEN/8, x4, x1, x2)

inst_82073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11007ffffffffff; valaddr_reg:x3; val_offset:246219*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246219*0 + 3*665*FLEN/8, x4, x1, x2)

inst_82074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1100fffffffffff; valaddr_reg:x3; val_offset:246222*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246222*0 + 3*666*FLEN/8, x4, x1, x2)

inst_82075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1101fffffffffff; valaddr_reg:x3; val_offset:246225*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246225*0 + 3*667*FLEN/8, x4, x1, x2)

inst_82076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1103fffffffffff; valaddr_reg:x3; val_offset:246228*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246228*0 + 3*668*FLEN/8, x4, x1, x2)

inst_82077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x1107fffffffffff; valaddr_reg:x3; val_offset:246231*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246231*0 + 3*669*FLEN/8, x4, x1, x2)

inst_82078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x110ffffffffffff; valaddr_reg:x3; val_offset:246234*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246234*0 + 3*670*FLEN/8, x4, x1, x2)

inst_82079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x111ffffffffffff; valaddr_reg:x3; val_offset:246237*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246237*0 + 3*671*FLEN/8, x4, x1, x2)

inst_82080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x113ffffffffffff; valaddr_reg:x3; val_offset:246240*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246240*0 + 3*672*FLEN/8, x4, x1, x2)

inst_82081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x117ffffffffffff; valaddr_reg:x3; val_offset:246243*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246243*0 + 3*673*FLEN/8, x4, x1, x2)

inst_82082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x118000000000000; valaddr_reg:x3; val_offset:246246*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246246*0 + 3*674*FLEN/8, x4, x1, x2)

inst_82083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11c000000000000; valaddr_reg:x3; val_offset:246249*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246249*0 + 3*675*FLEN/8, x4, x1, x2)

inst_82084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11e000000000000; valaddr_reg:x3; val_offset:246252*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246252*0 + 3*676*FLEN/8, x4, x1, x2)

inst_82085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11f000000000000; valaddr_reg:x3; val_offset:246255*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246255*0 + 3*677*FLEN/8, x4, x1, x2)

inst_82086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11f800000000000; valaddr_reg:x3; val_offset:246258*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246258*0 + 3*678*FLEN/8, x4, x1, x2)

inst_82087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fc00000000000; valaddr_reg:x3; val_offset:246261*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246261*0 + 3*679*FLEN/8, x4, x1, x2)

inst_82088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fe00000000000; valaddr_reg:x3; val_offset:246264*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246264*0 + 3*680*FLEN/8, x4, x1, x2)

inst_82089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ff00000000000; valaddr_reg:x3; val_offset:246267*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246267*0 + 3*681*FLEN/8, x4, x1, x2)

inst_82090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ff80000000000; valaddr_reg:x3; val_offset:246270*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246270*0 + 3*682*FLEN/8, x4, x1, x2)

inst_82091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffc0000000000; valaddr_reg:x3; val_offset:246273*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246273*0 + 3*683*FLEN/8, x4, x1, x2)

inst_82092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffe0000000000; valaddr_reg:x3; val_offset:246276*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246276*0 + 3*684*FLEN/8, x4, x1, x2)

inst_82093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fff0000000000; valaddr_reg:x3; val_offset:246279*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246279*0 + 3*685*FLEN/8, x4, x1, x2)

inst_82094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fff8000000000; valaddr_reg:x3; val_offset:246282*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246282*0 + 3*686*FLEN/8, x4, x1, x2)

inst_82095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffc000000000; valaddr_reg:x3; val_offset:246285*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246285*0 + 3*687*FLEN/8, x4, x1, x2)

inst_82096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffe000000000; valaddr_reg:x3; val_offset:246288*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246288*0 + 3*688*FLEN/8, x4, x1, x2)

inst_82097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffff000000000; valaddr_reg:x3; val_offset:246291*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246291*0 + 3*689*FLEN/8, x4, x1, x2)

inst_82098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffff800000000; valaddr_reg:x3; val_offset:246294*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246294*0 + 3*690*FLEN/8, x4, x1, x2)

inst_82099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffc00000000; valaddr_reg:x3; val_offset:246297*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246297*0 + 3*691*FLEN/8, x4, x1, x2)

inst_82100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffe00000000; valaddr_reg:x3; val_offset:246300*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246300*0 + 3*692*FLEN/8, x4, x1, x2)

inst_82101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffff00000000; valaddr_reg:x3; val_offset:246303*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246303*0 + 3*693*FLEN/8, x4, x1, x2)

inst_82102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffff80000000; valaddr_reg:x3; val_offset:246306*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246306*0 + 3*694*FLEN/8, x4, x1, x2)

inst_82103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffc0000000; valaddr_reg:x3; val_offset:246309*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246309*0 + 3*695*FLEN/8, x4, x1, x2)

inst_82104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffe0000000; valaddr_reg:x3; val_offset:246312*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246312*0 + 3*696*FLEN/8, x4, x1, x2)

inst_82105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffff0000000; valaddr_reg:x3; val_offset:246315*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246315*0 + 3*697*FLEN/8, x4, x1, x2)

inst_82106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffff8000000; valaddr_reg:x3; val_offset:246318*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246318*0 + 3*698*FLEN/8, x4, x1, x2)

inst_82107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffc000000; valaddr_reg:x3; val_offset:246321*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246321*0 + 3*699*FLEN/8, x4, x1, x2)

inst_82108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffe000000; valaddr_reg:x3; val_offset:246324*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246324*0 + 3*700*FLEN/8, x4, x1, x2)

inst_82109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffff000000; valaddr_reg:x3; val_offset:246327*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246327*0 + 3*701*FLEN/8, x4, x1, x2)

inst_82110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffff800000; valaddr_reg:x3; val_offset:246330*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246330*0 + 3*702*FLEN/8, x4, x1, x2)

inst_82111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffc00000; valaddr_reg:x3; val_offset:246333*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246333*0 + 3*703*FLEN/8, x4, x1, x2)

inst_82112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffe00000; valaddr_reg:x3; val_offset:246336*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246336*0 + 3*704*FLEN/8, x4, x1, x2)

inst_82113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffff00000; valaddr_reg:x3; val_offset:246339*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246339*0 + 3*705*FLEN/8, x4, x1, x2)

inst_82114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffff80000; valaddr_reg:x3; val_offset:246342*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246342*0 + 3*706*FLEN/8, x4, x1, x2)

inst_82115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffc0000; valaddr_reg:x3; val_offset:246345*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246345*0 + 3*707*FLEN/8, x4, x1, x2)

inst_82116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffe0000; valaddr_reg:x3; val_offset:246348*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246348*0 + 3*708*FLEN/8, x4, x1, x2)

inst_82117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffff0000; valaddr_reg:x3; val_offset:246351*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246351*0 + 3*709*FLEN/8, x4, x1, x2)

inst_82118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffff8000; valaddr_reg:x3; val_offset:246354*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246354*0 + 3*710*FLEN/8, x4, x1, x2)

inst_82119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffffc000; valaddr_reg:x3; val_offset:246357*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246357*0 + 3*711*FLEN/8, x4, x1, x2)

inst_82120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffffe000; valaddr_reg:x3; val_offset:246360*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246360*0 + 3*712*FLEN/8, x4, x1, x2)

inst_82121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffff000; valaddr_reg:x3; val_offset:246363*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246363*0 + 3*713*FLEN/8, x4, x1, x2)

inst_82122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffff800; valaddr_reg:x3; val_offset:246366*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246366*0 + 3*714*FLEN/8, x4, x1, x2)

inst_82123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffffc00; valaddr_reg:x3; val_offset:246369*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246369*0 + 3*715*FLEN/8, x4, x1, x2)

inst_82124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffffe00; valaddr_reg:x3; val_offset:246372*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246372*0 + 3*716*FLEN/8, x4, x1, x2)

inst_82125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffffff00; valaddr_reg:x3; val_offset:246375*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246375*0 + 3*717*FLEN/8, x4, x1, x2)

inst_82126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffffff80; valaddr_reg:x3; val_offset:246378*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246378*0 + 3*718*FLEN/8, x4, x1, x2)

inst_82127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffffffc0; valaddr_reg:x3; val_offset:246381*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246381*0 + 3*719*FLEN/8, x4, x1, x2)

inst_82128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffffffe0; valaddr_reg:x3; val_offset:246384*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246384*0 + 3*720*FLEN/8, x4, x1, x2)

inst_82129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffffff0; valaddr_reg:x3; val_offset:246387*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246387*0 + 3*721*FLEN/8, x4, x1, x2)

inst_82130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffffff8; valaddr_reg:x3; val_offset:246390*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246390*0 + 3*722*FLEN/8, x4, x1, x2)

inst_82131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffffffc; valaddr_reg:x3; val_offset:246393*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246393*0 + 3*723*FLEN/8, x4, x1, x2)

inst_82132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11ffffffffffffe; valaddr_reg:x3; val_offset:246396*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246396*0 + 3*724*FLEN/8, x4, x1, x2)

inst_82133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9ede223f26308 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x011 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9ede223f26308; op2val:0x0;
op3val:0x11fffffffffffff; valaddr_reg:x3; val_offset:246399*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246399*0 + 3*725*FLEN/8, x4, x1, x2)

inst_82134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:246402*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246402*0 + 3*726*FLEN/8, x4, x1, x2)

inst_82135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:246405*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246405*0 + 3*727*FLEN/8, x4, x1, x2)

inst_82136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:246408*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246408*0 + 3*728*FLEN/8, x4, x1, x2)

inst_82137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:246411*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246411*0 + 3*729*FLEN/8, x4, x1, x2)

inst_82138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:246414*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246414*0 + 3*730*FLEN/8, x4, x1, x2)

inst_82139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:246417*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246417*0 + 3*731*FLEN/8, x4, x1, x2)

inst_82140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:246420*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246420*0 + 3*732*FLEN/8, x4, x1, x2)

inst_82141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:246423*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246423*0 + 3*733*FLEN/8, x4, x1, x2)

inst_82142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:246426*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246426*0 + 3*734*FLEN/8, x4, x1, x2)

inst_82143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:246429*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246429*0 + 3*735*FLEN/8, x4, x1, x2)

inst_82144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:246432*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246432*0 + 3*736*FLEN/8, x4, x1, x2)

inst_82145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:246435*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246435*0 + 3*737*FLEN/8, x4, x1, x2)

inst_82146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:246438*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246438*0 + 3*738*FLEN/8, x4, x1, x2)

inst_82147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:246441*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246441*0 + 3*739*FLEN/8, x4, x1, x2)

inst_82148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:246444*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246444*0 + 3*740*FLEN/8, x4, x1, x2)

inst_82149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:246447*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246447*0 + 3*741*FLEN/8, x4, x1, x2)

inst_82150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:246450*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246450*0 + 3*742*FLEN/8, x4, x1, x2)

inst_82151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:246453*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246453*0 + 3*743*FLEN/8, x4, x1, x2)

inst_82152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:246456*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246456*0 + 3*744*FLEN/8, x4, x1, x2)

inst_82153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:246459*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246459*0 + 3*745*FLEN/8, x4, x1, x2)

inst_82154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:246462*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246462*0 + 3*746*FLEN/8, x4, x1, x2)

inst_82155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:246465*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246465*0 + 3*747*FLEN/8, x4, x1, x2)

inst_82156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8100000000000000; valaddr_reg:x3; val_offset:246468*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246468*0 + 3*748*FLEN/8, x4, x1, x2)

inst_82157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8100000000000001; valaddr_reg:x3; val_offset:246471*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246471*0 + 3*749*FLEN/8, x4, x1, x2)

inst_82158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8100000000000003; valaddr_reg:x3; val_offset:246474*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246474*0 + 3*750*FLEN/8, x4, x1, x2)

inst_82159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8100000000000007; valaddr_reg:x3; val_offset:246477*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246477*0 + 3*751*FLEN/8, x4, x1, x2)

inst_82160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x810000000000000f; valaddr_reg:x3; val_offset:246480*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246480*0 + 3*752*FLEN/8, x4, x1, x2)

inst_82161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x810000000000001f; valaddr_reg:x3; val_offset:246483*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246483*0 + 3*753*FLEN/8, x4, x1, x2)

inst_82162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x810000000000003f; valaddr_reg:x3; val_offset:246486*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246486*0 + 3*754*FLEN/8, x4, x1, x2)

inst_82163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x810000000000007f; valaddr_reg:x3; val_offset:246489*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246489*0 + 3*755*FLEN/8, x4, x1, x2)

inst_82164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x81000000000000ff; valaddr_reg:x3; val_offset:246492*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246492*0 + 3*756*FLEN/8, x4, x1, x2)

inst_82165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x81000000000001ff; valaddr_reg:x3; val_offset:246495*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246495*0 + 3*757*FLEN/8, x4, x1, x2)

inst_82166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x81000000000003ff; valaddr_reg:x3; val_offset:246498*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246498*0 + 3*758*FLEN/8, x4, x1, x2)

inst_82167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x81000000000007ff; valaddr_reg:x3; val_offset:246501*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246501*0 + 3*759*FLEN/8, x4, x1, x2)

inst_82168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8100000000000fff; valaddr_reg:x3; val_offset:246504*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246504*0 + 3*760*FLEN/8, x4, x1, x2)

inst_82169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8100000000001fff; valaddr_reg:x3; val_offset:246507*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246507*0 + 3*761*FLEN/8, x4, x1, x2)

inst_82170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8100000000003fff; valaddr_reg:x3; val_offset:246510*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246510*0 + 3*762*FLEN/8, x4, x1, x2)

inst_82171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x8100000000007fff; valaddr_reg:x3; val_offset:246513*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246513*0 + 3*763*FLEN/8, x4, x1, x2)

inst_82172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x810000000000ffff; valaddr_reg:x3; val_offset:246516*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246516*0 + 3*764*FLEN/8, x4, x1, x2)

inst_82173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x810000000001ffff; valaddr_reg:x3; val_offset:246519*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246519*0 + 3*765*FLEN/8, x4, x1, x2)

inst_82174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x810000000003ffff; valaddr_reg:x3; val_offset:246522*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246522*0 + 3*766*FLEN/8, x4, x1, x2)

inst_82175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x010 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9f8dcc4f1275c; op2val:0x8000;
op3val:0x810000000007ffff; valaddr_reg:x3; val_offset:246525*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 246525*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859043071,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859043327,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859043839,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859044863,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859046911,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859051007,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859059199,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859075583,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859108351,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859173887,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859304959,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859567103,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582860091391,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582861139967,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582863237119,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582867431423,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582875820031,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582892597247,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582926151679,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582993260543,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165583127478271,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165583395913727,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165583932784639,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165585006526463,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165587154010111,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165591448977407,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165600038911999,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165617218781183,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165651578519551,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165720297996287,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165857736949759,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207166132614856703,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207166682370670591,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207167781882298367,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207169980905553919,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207174378952065023,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207183175045087231,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207200767231131647,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207235951603220479,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207306320347398143,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207447057835753471,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207728532812464127,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(208291482765885439,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(209417382672728063,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(209417382672728064,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(210543282579570688,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211106232532992000,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211387707509702656,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211528444998057984,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211598813742235648,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211633998114324480,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211651590300368896,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211660386393391104,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211664784439902208,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211666983463157760,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211668082974785536,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211668632730599424,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211668907608506368,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669045047459840,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669113766936576,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669148126674944,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669165306544128,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669173896478720,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669178191446016,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669180338929664,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669181412671488,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669181949542400,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182217977856,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182352195584,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182419304448,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182452858880,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182469636096,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182478024704,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182482219008,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182484316160,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182485364736,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182485889024,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486151168,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486282240,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486347776,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486380544,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486396928,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486405120,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486409216,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486411264,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486412288,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486412800,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413056,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413184,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413248,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413280,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413296,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413304,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413308,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413310,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(211669182486413311,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376064,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376065,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376067,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376071,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376079,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376095,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376127,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376191,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376319,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376575,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124377087,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124378111,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124380159,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124384255,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124392447,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124408831,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124441599,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124507135,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124638207,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124900351,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614125424639,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614126473215,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614128570367,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614132764671,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614141153279,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614157930495,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614191484927,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614258593791,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614392811519,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614661246975,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091615198117887,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091616271859711,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091618419343359,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091622714310655,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091631304245247,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091648484114431,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091682843852799,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091751563329535,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091889002283007,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498092163880189951,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498092713636003839,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498093813147631615,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498096012170887167,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498100410217398271,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498109206310420479,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498126798496464895,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498161982868553727,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498232351612731391,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498373089101086719,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498654564077797375,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9499217514031218687,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9500343413938061311,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9500343413938061312,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9501469313844903936,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502032263798325248,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502313738775035904,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502454476263391232,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502524845007568896,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502560029379657728,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502577621565702144,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502586417658724352,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502590815705235456,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502593014728491008,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502594114240118784,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502594663995932672,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502594938873839616,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595076312793088,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595145032269824,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595179392008192,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595196571877376,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595205161811968,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595209456779264,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595211604262912,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595212678004736,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213214875648,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213483311104,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213617528832,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213684637696,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213718192128,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213734969344,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213743357952,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213747552256,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213749649408,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213750697984,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751222272,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751484416,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751615488,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751681024,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751713792,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751730176,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751738368,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751742464,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751744512,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751745536,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746048,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746304,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746432,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746496,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746528,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746544,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746552,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746556,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746558,64,FLEN)
NAN_BOXED(6893249133942155839,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9502595213751746559,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734753792,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734753793,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734753795,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734753799,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734753807,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734753823,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734753855,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734753919,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734754047,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734754303,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734754815,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734755839,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734757887,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734761983,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734770175,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734786559,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734819327,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062734884863,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062735015935,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062735278079,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062735802367,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062736850943,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062738948095,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062743142399,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062751531007,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062768308223,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062801862655,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986062868971519,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986063003189247,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986063271624703,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986063808495615,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986064882237439,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986067029721087,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986071324688383,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986079914622975,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986097094492159,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986131454230527,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986200173707263,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986337612660735,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744986612490567679,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744987162246381567,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744988261758009343,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744990460781264895,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13744994858827775999,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13745003654920798207,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13745021247106842623,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13745056431478931455,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13745126800223109119,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13745267537711464447,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13745549012688175103,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13746111962641596415,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13747237862548439039,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13747237862548439040,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13748363762455281664,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13748926712408702976,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749208187385413632,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749348924873768960,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749419293617946624,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749454477990035456,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749472070176079872,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749480866269102080,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749485264315613184,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749487463338868736,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749488562850496512,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489112606310400,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489387484217344,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489524923170816,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489593642647552,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489628002385920,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489645182255104,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489653772189696,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489658067156992,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489660214640640,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489661288382464,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489661825253376,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662093688832,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662227906560,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662295015424,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662328569856,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662345347072,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662353735680,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662357929984,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662360027136,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662361075712,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662361600000,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662361862144,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662361993216,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362058752,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362091520,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362107904,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362116096,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362120192,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362122240,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362123264,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362123776,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124032,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124160,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124224,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124256,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124272,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124280,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124284,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124286,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13749489662362124287,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6893255616342683176,64,FLEN)
NAN_BOXED(11512290817340421286,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714368,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714369,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714371,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714375,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714383,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714399,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714431,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714495,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714623,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814714879,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814715391,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814716415,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814718463,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814722559,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814730751,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814747135,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814779903,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814845439,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669814976511,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669815238655,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669815762943,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669816811519,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669818908671,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669823102975,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669831491583,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669848268799,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669881823231,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417669948932095,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417670083149823,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417670351585279,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417670888456191,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417671962198015,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417674109681663,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417678404648959,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417686994583551,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417704174452735,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417738534191103,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417807253667839,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659417944692621311,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659418219570528255,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659418769326342143,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659419868837969919,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659422067861225471,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659426465907736575,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659435262000758783,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659452854186803199,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659488038558892031,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659558407303069695,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659699144791425023,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13659980619768135679,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13660543569721556991,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13661669469628399615,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13661669469628399616,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13662795369535242240,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663358319488663552,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663639794465374208,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663780531953729536,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663850900697907200,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663886085069996032,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663903677256040448,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663912473349062656,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663916871395573760,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663919070418829312,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663920169930457088,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663920719686270976,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663920994564177920,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921132003131392,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921200722608128,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921235082346496,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921252262215680,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921260852150272,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921265147117568,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921267294601216,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921268368343040,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921268905213952,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269173649408,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269307867136,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269374976000,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269408530432,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269425307648,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269433696256,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269437890560,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269439987712,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269441036288,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269441560576,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269441822720,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269441953792,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442019328,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442052096,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442068480,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442076672,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442080768,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442082816,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442083840,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084352,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084608,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084736,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084800,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084832,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084848,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084856,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084860,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084862,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13663921269442084863,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6893273138866534594,64,FLEN)
NAN_BOXED(11512277333670508681,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592256,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592257,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592259,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592263,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592271,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592287,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592319,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592383,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592511,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010592767,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010593279,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010594303,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010596351,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010600447,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010608639,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010625023,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010657791,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010723327,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832010854399,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832011116543,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832011640831,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832012689407,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832014786559,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832018980863,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832027369471,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832044146687,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832077701119,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832144809983,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832279027711,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918832547463167,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918833084334079,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918834158075903,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918836305559551,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918840600526847,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918849190461439,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918866370330623,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918900730068991,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281918969449545727,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281919106888499199,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281919381766406143,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281919931522220031,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281921031033847807,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281923230057103359,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281927628103614463,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281936424196636671,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281954016382681087,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9281989200754769919,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9282059569498947583,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9282200306987302911,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9282481781964013567,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9283044731917434879,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9284170631824277503,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9284170631824277504,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9285296531731120128,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9285859481684541440,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286140956661252096,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286281694149607424,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286352062893785088,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286387247265873920,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286404839451918336,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286413635544940544,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286418033591451648,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286420232614707200,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286421332126334976,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286421881882148864,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422156760055808,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422294199009280,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422362918486016,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422397278224384,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422414458093568,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422423048028160,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422427342995456,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422429490479104,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422430564220928,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431101091840,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431369527296,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431503745024,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431570853888,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431604408320,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431621185536,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431629574144,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431633768448,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431635865600,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431636914176,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637438464,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637700608,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637831680,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637897216,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637929984,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637946368,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637954560,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637958656,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637960704,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637961728,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962240,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962496,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962624,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962688,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962720,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962736,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962744,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962748,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962750,64,FLEN)
NAN_BOXED(6893290678636643028,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9286422431637962751,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298432,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298433,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298435,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298439,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298447,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298463,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298495,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298559,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298687,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298943,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665299455,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665300479,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665302527,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665306623,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665314815,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665331199,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665363967,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665429503,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665560575,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665822719,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193666347007,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193667395583,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193669492735,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193673687039,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193682075647,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193698852863,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193732407295,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193799516159,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193933733887,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561194202169343,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561194739040255,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561195812782079,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561197960265727,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561202255233023,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561210845167615,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561228025036799,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561262384775167,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561331104251903,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561468543205375,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561743421112319,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76562293176926207,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76563392688553983,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76565591711809535,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76569989758320639,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76578785851342847,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76596378037387263,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76631562409476095,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76701931153653759,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76842668642009087,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(77124143618719743,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(77687093572141055,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(78812993478983679,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(78812993478983680,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(79938893385826304,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(80501843339247616,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(80783318315958272,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(80924055804313600,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(80994424548491264,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81029608920580096,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81047201106624512,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81055997199646720,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81060395246157824,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81062594269413376,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81063693781041152,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064243536855040,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064518414761984,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064655853715456,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064724573192192,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064758932930560,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064776112799744,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064784702734336,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064788997701632,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064791145185280,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064792218927104,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064792755798016,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793024233472,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793158451200,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793225560064,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793259114496,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793275891712,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793284280320,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793288474624,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793290571776,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793291620352,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292144640,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292406784,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292537856,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292603392,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292636160,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292652544,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292660736,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292664832,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292666880,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292667904,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668416,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668672,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668800,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668864,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668896,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668912,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668920,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668924,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668926,64,FLEN)
NAN_BOXED(6893302260188734216,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(81064793292668927,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703744,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703745,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703747,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703751,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703759,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703775,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703807,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703871,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892703999,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892704255,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892704767,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892705791,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892707839,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892711935,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892720127,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892736511,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892769279,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892834815,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630892965887,64,FLEN)
NAN_BOXED(6893314331747886940,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9295429630893228031,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
