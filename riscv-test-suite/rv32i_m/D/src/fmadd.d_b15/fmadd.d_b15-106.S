
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_80640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:241920*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241920*0 + 3*0*FLEN/8, x4, x1, x2)

inst_80641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:241923*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241923*0 + 3*1*FLEN/8, x4, x1, x2)

inst_80642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:241926*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241926*0 + 3*2*FLEN/8, x4, x1, x2)

inst_80643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:241929*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241929*0 + 3*3*FLEN/8, x4, x1, x2)

inst_80644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000000000; valaddr_reg:x3; val_offset:241932*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241932*0 + 3*4*FLEN/8, x4, x1, x2)

inst_80645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000000001; valaddr_reg:x3; val_offset:241935*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241935*0 + 3*5*FLEN/8, x4, x1, x2)

inst_80646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000000003; valaddr_reg:x3; val_offset:241938*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241938*0 + 3*6*FLEN/8, x4, x1, x2)

inst_80647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000000007; valaddr_reg:x3; val_offset:241941*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241941*0 + 3*7*FLEN/8, x4, x1, x2)

inst_80648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000000000f; valaddr_reg:x3; val_offset:241944*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241944*0 + 3*8*FLEN/8, x4, x1, x2)

inst_80649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000000001f; valaddr_reg:x3; val_offset:241947*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241947*0 + 3*9*FLEN/8, x4, x1, x2)

inst_80650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000000003f; valaddr_reg:x3; val_offset:241950*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241950*0 + 3*10*FLEN/8, x4, x1, x2)

inst_80651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000000007f; valaddr_reg:x3; val_offset:241953*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241953*0 + 3*11*FLEN/8, x4, x1, x2)

inst_80652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000000000ff; valaddr_reg:x3; val_offset:241956*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241956*0 + 3*12*FLEN/8, x4, x1, x2)

inst_80653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000000001ff; valaddr_reg:x3; val_offset:241959*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241959*0 + 3*13*FLEN/8, x4, x1, x2)

inst_80654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000000003ff; valaddr_reg:x3; val_offset:241962*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241962*0 + 3*14*FLEN/8, x4, x1, x2)

inst_80655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000000007ff; valaddr_reg:x3; val_offset:241965*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241965*0 + 3*15*FLEN/8, x4, x1, x2)

inst_80656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000000fff; valaddr_reg:x3; val_offset:241968*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241968*0 + 3*16*FLEN/8, x4, x1, x2)

inst_80657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000001fff; valaddr_reg:x3; val_offset:241971*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241971*0 + 3*17*FLEN/8, x4, x1, x2)

inst_80658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000003fff; valaddr_reg:x3; val_offset:241974*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241974*0 + 3*18*FLEN/8, x4, x1, x2)

inst_80659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000007fff; valaddr_reg:x3; val_offset:241977*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241977*0 + 3*19*FLEN/8, x4, x1, x2)

inst_80660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000000ffff; valaddr_reg:x3; val_offset:241980*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241980*0 + 3*20*FLEN/8, x4, x1, x2)

inst_80661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000001ffff; valaddr_reg:x3; val_offset:241983*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241983*0 + 3*21*FLEN/8, x4, x1, x2)

inst_80662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000003ffff; valaddr_reg:x3; val_offset:241986*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241986*0 + 3*22*FLEN/8, x4, x1, x2)

inst_80663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000007ffff; valaddr_reg:x3; val_offset:241989*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241989*0 + 3*23*FLEN/8, x4, x1, x2)

inst_80664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000000fffff; valaddr_reg:x3; val_offset:241992*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241992*0 + 3*24*FLEN/8, x4, x1, x2)

inst_80665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000001fffff; valaddr_reg:x3; val_offset:241995*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241995*0 + 3*25*FLEN/8, x4, x1, x2)

inst_80666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000003fffff; valaddr_reg:x3; val_offset:241998*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 241998*0 + 3*26*FLEN/8, x4, x1, x2)

inst_80667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000007fffff; valaddr_reg:x3; val_offset:242001*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242001*0 + 3*27*FLEN/8, x4, x1, x2)

inst_80668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000000ffffff; valaddr_reg:x3; val_offset:242004*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242004*0 + 3*28*FLEN/8, x4, x1, x2)

inst_80669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000001ffffff; valaddr_reg:x3; val_offset:242007*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242007*0 + 3*29*FLEN/8, x4, x1, x2)

inst_80670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000003ffffff; valaddr_reg:x3; val_offset:242010*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242010*0 + 3*30*FLEN/8, x4, x1, x2)

inst_80671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000007ffffff; valaddr_reg:x3; val_offset:242013*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242013*0 + 3*31*FLEN/8, x4, x1, x2)

inst_80672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000000fffffff; valaddr_reg:x3; val_offset:242016*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242016*0 + 3*32*FLEN/8, x4, x1, x2)

inst_80673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000001fffffff; valaddr_reg:x3; val_offset:242019*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242019*0 + 3*33*FLEN/8, x4, x1, x2)

inst_80674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000003fffffff; valaddr_reg:x3; val_offset:242022*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242022*0 + 3*34*FLEN/8, x4, x1, x2)

inst_80675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000007fffffff; valaddr_reg:x3; val_offset:242025*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242025*0 + 3*35*FLEN/8, x4, x1, x2)

inst_80676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000000ffffffff; valaddr_reg:x3; val_offset:242028*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242028*0 + 3*36*FLEN/8, x4, x1, x2)

inst_80677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000001ffffffff; valaddr_reg:x3; val_offset:242031*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242031*0 + 3*37*FLEN/8, x4, x1, x2)

inst_80678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000003ffffffff; valaddr_reg:x3; val_offset:242034*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242034*0 + 3*38*FLEN/8, x4, x1, x2)

inst_80679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000007ffffffff; valaddr_reg:x3; val_offset:242037*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242037*0 + 3*39*FLEN/8, x4, x1, x2)

inst_80680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400000fffffffff; valaddr_reg:x3; val_offset:242040*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242040*0 + 3*40*FLEN/8, x4, x1, x2)

inst_80681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400001fffffffff; valaddr_reg:x3; val_offset:242043*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242043*0 + 3*41*FLEN/8, x4, x1, x2)

inst_80682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400003fffffffff; valaddr_reg:x3; val_offset:242046*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242046*0 + 3*42*FLEN/8, x4, x1, x2)

inst_80683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400007fffffffff; valaddr_reg:x3; val_offset:242049*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242049*0 + 3*43*FLEN/8, x4, x1, x2)

inst_80684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40000ffffffffff; valaddr_reg:x3; val_offset:242052*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242052*0 + 3*44*FLEN/8, x4, x1, x2)

inst_80685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40001ffffffffff; valaddr_reg:x3; val_offset:242055*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242055*0 + 3*45*FLEN/8, x4, x1, x2)

inst_80686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40003ffffffffff; valaddr_reg:x3; val_offset:242058*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242058*0 + 3*46*FLEN/8, x4, x1, x2)

inst_80687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40007ffffffffff; valaddr_reg:x3; val_offset:242061*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242061*0 + 3*47*FLEN/8, x4, x1, x2)

inst_80688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4000fffffffffff; valaddr_reg:x3; val_offset:242064*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242064*0 + 3*48*FLEN/8, x4, x1, x2)

inst_80689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4001fffffffffff; valaddr_reg:x3; val_offset:242067*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242067*0 + 3*49*FLEN/8, x4, x1, x2)

inst_80690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4003fffffffffff; valaddr_reg:x3; val_offset:242070*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242070*0 + 3*50*FLEN/8, x4, x1, x2)

inst_80691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x4007fffffffffff; valaddr_reg:x3; val_offset:242073*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242073*0 + 3*51*FLEN/8, x4, x1, x2)

inst_80692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x400ffffffffffff; valaddr_reg:x3; val_offset:242076*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242076*0 + 3*52*FLEN/8, x4, x1, x2)

inst_80693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x401ffffffffffff; valaddr_reg:x3; val_offset:242079*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242079*0 + 3*53*FLEN/8, x4, x1, x2)

inst_80694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x403ffffffffffff; valaddr_reg:x3; val_offset:242082*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242082*0 + 3*54*FLEN/8, x4, x1, x2)

inst_80695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x407ffffffffffff; valaddr_reg:x3; val_offset:242085*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242085*0 + 3*55*FLEN/8, x4, x1, x2)

inst_80696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x408000000000000; valaddr_reg:x3; val_offset:242088*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242088*0 + 3*56*FLEN/8, x4, x1, x2)

inst_80697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40c000000000000; valaddr_reg:x3; val_offset:242091*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242091*0 + 3*57*FLEN/8, x4, x1, x2)

inst_80698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40e000000000000; valaddr_reg:x3; val_offset:242094*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242094*0 + 3*58*FLEN/8, x4, x1, x2)

inst_80699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40f000000000000; valaddr_reg:x3; val_offset:242097*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242097*0 + 3*59*FLEN/8, x4, x1, x2)

inst_80700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40f800000000000; valaddr_reg:x3; val_offset:242100*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242100*0 + 3*60*FLEN/8, x4, x1, x2)

inst_80701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fc00000000000; valaddr_reg:x3; val_offset:242103*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242103*0 + 3*61*FLEN/8, x4, x1, x2)

inst_80702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fe00000000000; valaddr_reg:x3; val_offset:242106*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242106*0 + 3*62*FLEN/8, x4, x1, x2)

inst_80703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ff00000000000; valaddr_reg:x3; val_offset:242109*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242109*0 + 3*63*FLEN/8, x4, x1, x2)

inst_80704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ff80000000000; valaddr_reg:x3; val_offset:242112*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242112*0 + 3*64*FLEN/8, x4, x1, x2)

inst_80705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffc0000000000; valaddr_reg:x3; val_offset:242115*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242115*0 + 3*65*FLEN/8, x4, x1, x2)

inst_80706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffe0000000000; valaddr_reg:x3; val_offset:242118*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242118*0 + 3*66*FLEN/8, x4, x1, x2)

inst_80707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fff0000000000; valaddr_reg:x3; val_offset:242121*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242121*0 + 3*67*FLEN/8, x4, x1, x2)

inst_80708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fff8000000000; valaddr_reg:x3; val_offset:242124*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242124*0 + 3*68*FLEN/8, x4, x1, x2)

inst_80709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffc000000000; valaddr_reg:x3; val_offset:242127*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242127*0 + 3*69*FLEN/8, x4, x1, x2)

inst_80710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffe000000000; valaddr_reg:x3; val_offset:242130*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242130*0 + 3*70*FLEN/8, x4, x1, x2)

inst_80711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffff000000000; valaddr_reg:x3; val_offset:242133*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242133*0 + 3*71*FLEN/8, x4, x1, x2)

inst_80712:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffff800000000; valaddr_reg:x3; val_offset:242136*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242136*0 + 3*72*FLEN/8, x4, x1, x2)

inst_80713:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffc00000000; valaddr_reg:x3; val_offset:242139*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242139*0 + 3*73*FLEN/8, x4, x1, x2)

inst_80714:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffe00000000; valaddr_reg:x3; val_offset:242142*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242142*0 + 3*74*FLEN/8, x4, x1, x2)

inst_80715:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffff00000000; valaddr_reg:x3; val_offset:242145*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242145*0 + 3*75*FLEN/8, x4, x1, x2)

inst_80716:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffff80000000; valaddr_reg:x3; val_offset:242148*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242148*0 + 3*76*FLEN/8, x4, x1, x2)

inst_80717:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffc0000000; valaddr_reg:x3; val_offset:242151*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242151*0 + 3*77*FLEN/8, x4, x1, x2)

inst_80718:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffe0000000; valaddr_reg:x3; val_offset:242154*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242154*0 + 3*78*FLEN/8, x4, x1, x2)

inst_80719:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffff0000000; valaddr_reg:x3; val_offset:242157*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242157*0 + 3*79*FLEN/8, x4, x1, x2)

inst_80720:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffff8000000; valaddr_reg:x3; val_offset:242160*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242160*0 + 3*80*FLEN/8, x4, x1, x2)

inst_80721:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffc000000; valaddr_reg:x3; val_offset:242163*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242163*0 + 3*81*FLEN/8, x4, x1, x2)

inst_80722:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffe000000; valaddr_reg:x3; val_offset:242166*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242166*0 + 3*82*FLEN/8, x4, x1, x2)

inst_80723:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffff000000; valaddr_reg:x3; val_offset:242169*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242169*0 + 3*83*FLEN/8, x4, x1, x2)

inst_80724:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffff800000; valaddr_reg:x3; val_offset:242172*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242172*0 + 3*84*FLEN/8, x4, x1, x2)

inst_80725:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffc00000; valaddr_reg:x3; val_offset:242175*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242175*0 + 3*85*FLEN/8, x4, x1, x2)

inst_80726:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffe00000; valaddr_reg:x3; val_offset:242178*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242178*0 + 3*86*FLEN/8, x4, x1, x2)

inst_80727:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffff00000; valaddr_reg:x3; val_offset:242181*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242181*0 + 3*87*FLEN/8, x4, x1, x2)

inst_80728:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffff80000; valaddr_reg:x3; val_offset:242184*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242184*0 + 3*88*FLEN/8, x4, x1, x2)

inst_80729:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffc0000; valaddr_reg:x3; val_offset:242187*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242187*0 + 3*89*FLEN/8, x4, x1, x2)

inst_80730:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffe0000; valaddr_reg:x3; val_offset:242190*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242190*0 + 3*90*FLEN/8, x4, x1, x2)

inst_80731:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffff0000; valaddr_reg:x3; val_offset:242193*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242193*0 + 3*91*FLEN/8, x4, x1, x2)

inst_80732:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffff8000; valaddr_reg:x3; val_offset:242196*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242196*0 + 3*92*FLEN/8, x4, x1, x2)

inst_80733:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffffc000; valaddr_reg:x3; val_offset:242199*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242199*0 + 3*93*FLEN/8, x4, x1, x2)

inst_80734:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffffe000; valaddr_reg:x3; val_offset:242202*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242202*0 + 3*94*FLEN/8, x4, x1, x2)

inst_80735:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffff000; valaddr_reg:x3; val_offset:242205*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242205*0 + 3*95*FLEN/8, x4, x1, x2)

inst_80736:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffff800; valaddr_reg:x3; val_offset:242208*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242208*0 + 3*96*FLEN/8, x4, x1, x2)

inst_80737:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffffc00; valaddr_reg:x3; val_offset:242211*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242211*0 + 3*97*FLEN/8, x4, x1, x2)

inst_80738:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffffe00; valaddr_reg:x3; val_offset:242214*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242214*0 + 3*98*FLEN/8, x4, x1, x2)

inst_80739:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffffff00; valaddr_reg:x3; val_offset:242217*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242217*0 + 3*99*FLEN/8, x4, x1, x2)

inst_80740:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffffff80; valaddr_reg:x3; val_offset:242220*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242220*0 + 3*100*FLEN/8, x4, x1, x2)

inst_80741:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffffffc0; valaddr_reg:x3; val_offset:242223*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242223*0 + 3*101*FLEN/8, x4, x1, x2)

inst_80742:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffffffe0; valaddr_reg:x3; val_offset:242226*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242226*0 + 3*102*FLEN/8, x4, x1, x2)

inst_80743:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffffff0; valaddr_reg:x3; val_offset:242229*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242229*0 + 3*103*FLEN/8, x4, x1, x2)

inst_80744:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffffff8; valaddr_reg:x3; val_offset:242232*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242232*0 + 3*104*FLEN/8, x4, x1, x2)

inst_80745:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffffffc; valaddr_reg:x3; val_offset:242235*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242235*0 + 3*105*FLEN/8, x4, x1, x2)

inst_80746:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40ffffffffffffe; valaddr_reg:x3; val_offset:242238*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242238*0 + 3*106*FLEN/8, x4, x1, x2)

inst_80747:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x988af058a2385 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa988af058a2385; op2val:0x0;
op3val:0x40fffffffffffff; valaddr_reg:x3; val_offset:242241*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242241*0 + 3*107*FLEN/8, x4, x1, x2)

inst_80748:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:242244*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242244*0 + 3*108*FLEN/8, x4, x1, x2)

inst_80749:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:242247*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242247*0 + 3*109*FLEN/8, x4, x1, x2)

inst_80750:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:242250*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242250*0 + 3*110*FLEN/8, x4, x1, x2)

inst_80751:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:242253*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242253*0 + 3*111*FLEN/8, x4, x1, x2)

inst_80752:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:242256*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242256*0 + 3*112*FLEN/8, x4, x1, x2)

inst_80753:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:242259*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242259*0 + 3*113*FLEN/8, x4, x1, x2)

inst_80754:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:242262*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242262*0 + 3*114*FLEN/8, x4, x1, x2)

inst_80755:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:242265*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242265*0 + 3*115*FLEN/8, x4, x1, x2)

inst_80756:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:242268*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242268*0 + 3*116*FLEN/8, x4, x1, x2)

inst_80757:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:242271*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242271*0 + 3*117*FLEN/8, x4, x1, x2)

inst_80758:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:242274*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242274*0 + 3*118*FLEN/8, x4, x1, x2)

inst_80759:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:242277*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242277*0 + 3*119*FLEN/8, x4, x1, x2)

inst_80760:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:242280*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242280*0 + 3*120*FLEN/8, x4, x1, x2)

inst_80761:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:242283*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242283*0 + 3*121*FLEN/8, x4, x1, x2)

inst_80762:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:242286*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242286*0 + 3*122*FLEN/8, x4, x1, x2)

inst_80763:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:242289*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242289*0 + 3*123*FLEN/8, x4, x1, x2)

inst_80764:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:242292*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242292*0 + 3*124*FLEN/8, x4, x1, x2)

inst_80765:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:242295*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242295*0 + 3*125*FLEN/8, x4, x1, x2)

inst_80766:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:242298*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242298*0 + 3*126*FLEN/8, x4, x1, x2)

inst_80767:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:242301*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242301*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_80768:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:242304*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242304*0 + 3*128*FLEN/8, x4, x1, x2)

inst_80769:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:242307*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242307*0 + 3*129*FLEN/8, x4, x1, x2)

inst_80770:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000000000; valaddr_reg:x3; val_offset:242310*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242310*0 + 3*130*FLEN/8, x4, x1, x2)

inst_80771:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000000001; valaddr_reg:x3; val_offset:242313*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242313*0 + 3*131*FLEN/8, x4, x1, x2)

inst_80772:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000000003; valaddr_reg:x3; val_offset:242316*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242316*0 + 3*132*FLEN/8, x4, x1, x2)

inst_80773:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000000007; valaddr_reg:x3; val_offset:242319*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242319*0 + 3*133*FLEN/8, x4, x1, x2)

inst_80774:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000000000f; valaddr_reg:x3; val_offset:242322*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242322*0 + 3*134*FLEN/8, x4, x1, x2)

inst_80775:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000000001f; valaddr_reg:x3; val_offset:242325*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242325*0 + 3*135*FLEN/8, x4, x1, x2)

inst_80776:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000000003f; valaddr_reg:x3; val_offset:242328*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242328*0 + 3*136*FLEN/8, x4, x1, x2)

inst_80777:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000000007f; valaddr_reg:x3; val_offset:242331*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242331*0 + 3*137*FLEN/8, x4, x1, x2)

inst_80778:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000000000ff; valaddr_reg:x3; val_offset:242334*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242334*0 + 3*138*FLEN/8, x4, x1, x2)

inst_80779:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000000001ff; valaddr_reg:x3; val_offset:242337*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242337*0 + 3*139*FLEN/8, x4, x1, x2)

inst_80780:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000000003ff; valaddr_reg:x3; val_offset:242340*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242340*0 + 3*140*FLEN/8, x4, x1, x2)

inst_80781:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000000007ff; valaddr_reg:x3; val_offset:242343*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242343*0 + 3*141*FLEN/8, x4, x1, x2)

inst_80782:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000000fff; valaddr_reg:x3; val_offset:242346*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242346*0 + 3*142*FLEN/8, x4, x1, x2)

inst_80783:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000001fff; valaddr_reg:x3; val_offset:242349*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242349*0 + 3*143*FLEN/8, x4, x1, x2)

inst_80784:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000003fff; valaddr_reg:x3; val_offset:242352*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242352*0 + 3*144*FLEN/8, x4, x1, x2)

inst_80785:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000007fff; valaddr_reg:x3; val_offset:242355*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242355*0 + 3*145*FLEN/8, x4, x1, x2)

inst_80786:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000000ffff; valaddr_reg:x3; val_offset:242358*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242358*0 + 3*146*FLEN/8, x4, x1, x2)

inst_80787:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000001ffff; valaddr_reg:x3; val_offset:242361*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242361*0 + 3*147*FLEN/8, x4, x1, x2)

inst_80788:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000003ffff; valaddr_reg:x3; val_offset:242364*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242364*0 + 3*148*FLEN/8, x4, x1, x2)

inst_80789:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000007ffff; valaddr_reg:x3; val_offset:242367*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242367*0 + 3*149*FLEN/8, x4, x1, x2)

inst_80790:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000000fffff; valaddr_reg:x3; val_offset:242370*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242370*0 + 3*150*FLEN/8, x4, x1, x2)

inst_80791:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000001fffff; valaddr_reg:x3; val_offset:242373*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242373*0 + 3*151*FLEN/8, x4, x1, x2)

inst_80792:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000003fffff; valaddr_reg:x3; val_offset:242376*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242376*0 + 3*152*FLEN/8, x4, x1, x2)

inst_80793:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000007fffff; valaddr_reg:x3; val_offset:242379*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242379*0 + 3*153*FLEN/8, x4, x1, x2)

inst_80794:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000000ffffff; valaddr_reg:x3; val_offset:242382*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242382*0 + 3*154*FLEN/8, x4, x1, x2)

inst_80795:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000001ffffff; valaddr_reg:x3; val_offset:242385*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242385*0 + 3*155*FLEN/8, x4, x1, x2)

inst_80796:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000003ffffff; valaddr_reg:x3; val_offset:242388*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242388*0 + 3*156*FLEN/8, x4, x1, x2)

inst_80797:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000007ffffff; valaddr_reg:x3; val_offset:242391*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242391*0 + 3*157*FLEN/8, x4, x1, x2)

inst_80798:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000000fffffff; valaddr_reg:x3; val_offset:242394*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242394*0 + 3*158*FLEN/8, x4, x1, x2)

inst_80799:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000001fffffff; valaddr_reg:x3; val_offset:242397*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242397*0 + 3*159*FLEN/8, x4, x1, x2)

inst_80800:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000003fffffff; valaddr_reg:x3; val_offset:242400*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242400*0 + 3*160*FLEN/8, x4, x1, x2)

inst_80801:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000007fffffff; valaddr_reg:x3; val_offset:242403*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242403*0 + 3*161*FLEN/8, x4, x1, x2)

inst_80802:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00000ffffffff; valaddr_reg:x3; val_offset:242406*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242406*0 + 3*162*FLEN/8, x4, x1, x2)

inst_80803:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00001ffffffff; valaddr_reg:x3; val_offset:242409*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242409*0 + 3*163*FLEN/8, x4, x1, x2)

inst_80804:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00003ffffffff; valaddr_reg:x3; val_offset:242412*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242412*0 + 3*164*FLEN/8, x4, x1, x2)

inst_80805:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00007ffffffff; valaddr_reg:x3; val_offset:242415*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242415*0 + 3*165*FLEN/8, x4, x1, x2)

inst_80806:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0000fffffffff; valaddr_reg:x3; val_offset:242418*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242418*0 + 3*166*FLEN/8, x4, x1, x2)

inst_80807:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0001fffffffff; valaddr_reg:x3; val_offset:242421*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242421*0 + 3*167*FLEN/8, x4, x1, x2)

inst_80808:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0003fffffffff; valaddr_reg:x3; val_offset:242424*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242424*0 + 3*168*FLEN/8, x4, x1, x2)

inst_80809:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0007fffffffff; valaddr_reg:x3; val_offset:242427*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242427*0 + 3*169*FLEN/8, x4, x1, x2)

inst_80810:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa000ffffffffff; valaddr_reg:x3; val_offset:242430*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242430*0 + 3*170*FLEN/8, x4, x1, x2)

inst_80811:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa001ffffffffff; valaddr_reg:x3; val_offset:242433*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242433*0 + 3*171*FLEN/8, x4, x1, x2)

inst_80812:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa003ffffffffff; valaddr_reg:x3; val_offset:242436*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242436*0 + 3*172*FLEN/8, x4, x1, x2)

inst_80813:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa007ffffffffff; valaddr_reg:x3; val_offset:242439*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242439*0 + 3*173*FLEN/8, x4, x1, x2)

inst_80814:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa00fffffffffff; valaddr_reg:x3; val_offset:242442*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242442*0 + 3*174*FLEN/8, x4, x1, x2)

inst_80815:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa01fffffffffff; valaddr_reg:x3; val_offset:242445*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242445*0 + 3*175*FLEN/8, x4, x1, x2)

inst_80816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa03fffffffffff; valaddr_reg:x3; val_offset:242448*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242448*0 + 3*176*FLEN/8, x4, x1, x2)

inst_80817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa07fffffffffff; valaddr_reg:x3; val_offset:242451*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242451*0 + 3*177*FLEN/8, x4, x1, x2)

inst_80818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa0ffffffffffff; valaddr_reg:x3; val_offset:242454*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242454*0 + 3*178*FLEN/8, x4, x1, x2)

inst_80819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa1ffffffffffff; valaddr_reg:x3; val_offset:242457*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242457*0 + 3*179*FLEN/8, x4, x1, x2)

inst_80820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa3ffffffffffff; valaddr_reg:x3; val_offset:242460*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242460*0 + 3*180*FLEN/8, x4, x1, x2)

inst_80821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa7ffffffffffff; valaddr_reg:x3; val_offset:242463*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242463*0 + 3*181*FLEN/8, x4, x1, x2)

inst_80822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfa8000000000000; valaddr_reg:x3; val_offset:242466*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242466*0 + 3*182*FLEN/8, x4, x1, x2)

inst_80823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfac000000000000; valaddr_reg:x3; val_offset:242469*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242469*0 + 3*183*FLEN/8, x4, x1, x2)

inst_80824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfae000000000000; valaddr_reg:x3; val_offset:242472*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242472*0 + 3*184*FLEN/8, x4, x1, x2)

inst_80825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaf000000000000; valaddr_reg:x3; val_offset:242475*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242475*0 + 3*185*FLEN/8, x4, x1, x2)

inst_80826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaf800000000000; valaddr_reg:x3; val_offset:242478*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242478*0 + 3*186*FLEN/8, x4, x1, x2)

inst_80827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafc00000000000; valaddr_reg:x3; val_offset:242481*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242481*0 + 3*187*FLEN/8, x4, x1, x2)

inst_80828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafe00000000000; valaddr_reg:x3; val_offset:242484*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242484*0 + 3*188*FLEN/8, x4, x1, x2)

inst_80829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaff00000000000; valaddr_reg:x3; val_offset:242487*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242487*0 + 3*189*FLEN/8, x4, x1, x2)

inst_80830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaff80000000000; valaddr_reg:x3; val_offset:242490*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242490*0 + 3*190*FLEN/8, x4, x1, x2)

inst_80831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffc0000000000; valaddr_reg:x3; val_offset:242493*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242493*0 + 3*191*FLEN/8, x4, x1, x2)

inst_80832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffe0000000000; valaddr_reg:x3; val_offset:242496*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242496*0 + 3*192*FLEN/8, x4, x1, x2)

inst_80833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafff0000000000; valaddr_reg:x3; val_offset:242499*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242499*0 + 3*193*FLEN/8, x4, x1, x2)

inst_80834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafff8000000000; valaddr_reg:x3; val_offset:242502*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242502*0 + 3*194*FLEN/8, x4, x1, x2)

inst_80835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffc000000000; valaddr_reg:x3; val_offset:242505*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242505*0 + 3*195*FLEN/8, x4, x1, x2)

inst_80836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffe000000000; valaddr_reg:x3; val_offset:242508*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242508*0 + 3*196*FLEN/8, x4, x1, x2)

inst_80837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffff000000000; valaddr_reg:x3; val_offset:242511*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242511*0 + 3*197*FLEN/8, x4, x1, x2)

inst_80838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffff800000000; valaddr_reg:x3; val_offset:242514*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242514*0 + 3*198*FLEN/8, x4, x1, x2)

inst_80839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffc00000000; valaddr_reg:x3; val_offset:242517*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242517*0 + 3*199*FLEN/8, x4, x1, x2)

inst_80840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffe00000000; valaddr_reg:x3; val_offset:242520*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242520*0 + 3*200*FLEN/8, x4, x1, x2)

inst_80841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffff00000000; valaddr_reg:x3; val_offset:242523*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242523*0 + 3*201*FLEN/8, x4, x1, x2)

inst_80842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffff80000000; valaddr_reg:x3; val_offset:242526*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242526*0 + 3*202*FLEN/8, x4, x1, x2)

inst_80843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffc0000000; valaddr_reg:x3; val_offset:242529*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242529*0 + 3*203*FLEN/8, x4, x1, x2)

inst_80844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffe0000000; valaddr_reg:x3; val_offset:242532*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242532*0 + 3*204*FLEN/8, x4, x1, x2)

inst_80845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffff0000000; valaddr_reg:x3; val_offset:242535*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242535*0 + 3*205*FLEN/8, x4, x1, x2)

inst_80846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffff8000000; valaddr_reg:x3; val_offset:242538*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242538*0 + 3*206*FLEN/8, x4, x1, x2)

inst_80847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffc000000; valaddr_reg:x3; val_offset:242541*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242541*0 + 3*207*FLEN/8, x4, x1, x2)

inst_80848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffe000000; valaddr_reg:x3; val_offset:242544*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242544*0 + 3*208*FLEN/8, x4, x1, x2)

inst_80849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffff000000; valaddr_reg:x3; val_offset:242547*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242547*0 + 3*209*FLEN/8, x4, x1, x2)

inst_80850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffff800000; valaddr_reg:x3; val_offset:242550*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242550*0 + 3*210*FLEN/8, x4, x1, x2)

inst_80851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffc00000; valaddr_reg:x3; val_offset:242553*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242553*0 + 3*211*FLEN/8, x4, x1, x2)

inst_80852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffe00000; valaddr_reg:x3; val_offset:242556*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242556*0 + 3*212*FLEN/8, x4, x1, x2)

inst_80853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffff00000; valaddr_reg:x3; val_offset:242559*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242559*0 + 3*213*FLEN/8, x4, x1, x2)

inst_80854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffff80000; valaddr_reg:x3; val_offset:242562*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242562*0 + 3*214*FLEN/8, x4, x1, x2)

inst_80855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffc0000; valaddr_reg:x3; val_offset:242565*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242565*0 + 3*215*FLEN/8, x4, x1, x2)

inst_80856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffe0000; valaddr_reg:x3; val_offset:242568*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242568*0 + 3*216*FLEN/8, x4, x1, x2)

inst_80857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffff0000; valaddr_reg:x3; val_offset:242571*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242571*0 + 3*217*FLEN/8, x4, x1, x2)

inst_80858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffff8000; valaddr_reg:x3; val_offset:242574*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242574*0 + 3*218*FLEN/8, x4, x1, x2)

inst_80859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffffc000; valaddr_reg:x3; val_offset:242577*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242577*0 + 3*219*FLEN/8, x4, x1, x2)

inst_80860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffffe000; valaddr_reg:x3; val_offset:242580*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242580*0 + 3*220*FLEN/8, x4, x1, x2)

inst_80861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffff000; valaddr_reg:x3; val_offset:242583*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242583*0 + 3*221*FLEN/8, x4, x1, x2)

inst_80862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffff800; valaddr_reg:x3; val_offset:242586*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242586*0 + 3*222*FLEN/8, x4, x1, x2)

inst_80863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffffc00; valaddr_reg:x3; val_offset:242589*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242589*0 + 3*223*FLEN/8, x4, x1, x2)

inst_80864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffffe00; valaddr_reg:x3; val_offset:242592*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242592*0 + 3*224*FLEN/8, x4, x1, x2)

inst_80865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffffff00; valaddr_reg:x3; val_offset:242595*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242595*0 + 3*225*FLEN/8, x4, x1, x2)

inst_80866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffffff80; valaddr_reg:x3; val_offset:242598*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242598*0 + 3*226*FLEN/8, x4, x1, x2)

inst_80867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffffffc0; valaddr_reg:x3; val_offset:242601*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242601*0 + 3*227*FLEN/8, x4, x1, x2)

inst_80868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffffffe0; valaddr_reg:x3; val_offset:242604*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242604*0 + 3*228*FLEN/8, x4, x1, x2)

inst_80869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffffff0; valaddr_reg:x3; val_offset:242607*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242607*0 + 3*229*FLEN/8, x4, x1, x2)

inst_80870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffffff8; valaddr_reg:x3; val_offset:242610*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242610*0 + 3*230*FLEN/8, x4, x1, x2)

inst_80871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffffffc; valaddr_reg:x3; val_offset:242613*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242613*0 + 3*231*FLEN/8, x4, x1, x2)

inst_80872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfaffffffffffffe; valaddr_reg:x3; val_offset:242616*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242616*0 + 3*232*FLEN/8, x4, x1, x2)

inst_80873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x989b40414f92c and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x40c7317e5e02e and fs3 == 1 and fe3 == 0x3fa and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa989b40414f92c; op2val:0x9fc40c7317e5e02e;
op3val:0xbfafffffffffffff; valaddr_reg:x3; val_offset:242619*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242619*0 + 3*233*FLEN/8, x4, x1, x2)

inst_80874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:242622*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242622*0 + 3*234*FLEN/8, x4, x1, x2)

inst_80875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:242625*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242625*0 + 3*235*FLEN/8, x4, x1, x2)

inst_80876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:242628*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242628*0 + 3*236*FLEN/8, x4, x1, x2)

inst_80877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:242631*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242631*0 + 3*237*FLEN/8, x4, x1, x2)

inst_80878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:242634*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242634*0 + 3*238*FLEN/8, x4, x1, x2)

inst_80879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:242637*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242637*0 + 3*239*FLEN/8, x4, x1, x2)

inst_80880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:242640*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242640*0 + 3*240*FLEN/8, x4, x1, x2)

inst_80881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:242643*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242643*0 + 3*241*FLEN/8, x4, x1, x2)

inst_80882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:242646*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242646*0 + 3*242*FLEN/8, x4, x1, x2)

inst_80883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:242649*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242649*0 + 3*243*FLEN/8, x4, x1, x2)

inst_80884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:242652*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242652*0 + 3*244*FLEN/8, x4, x1, x2)

inst_80885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:242655*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242655*0 + 3*245*FLEN/8, x4, x1, x2)

inst_80886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:242658*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242658*0 + 3*246*FLEN/8, x4, x1, x2)

inst_80887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:242661*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242661*0 + 3*247*FLEN/8, x4, x1, x2)

inst_80888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:242664*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242664*0 + 3*248*FLEN/8, x4, x1, x2)

inst_80889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:242667*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242667*0 + 3*249*FLEN/8, x4, x1, x2)

inst_80890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:242670*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242670*0 + 3*250*FLEN/8, x4, x1, x2)

inst_80891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:242673*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242673*0 + 3*251*FLEN/8, x4, x1, x2)

inst_80892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:242676*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242676*0 + 3*252*FLEN/8, x4, x1, x2)

inst_80893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:242679*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242679*0 + 3*253*FLEN/8, x4, x1, x2)

inst_80894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:242682*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242682*0 + 3*254*FLEN/8, x4, x1, x2)

inst_80895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:242685*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242685*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_80896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000000000; valaddr_reg:x3; val_offset:242688*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242688*0 + 3*256*FLEN/8, x4, x1, x2)

inst_80897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000000001; valaddr_reg:x3; val_offset:242691*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242691*0 + 3*257*FLEN/8, x4, x1, x2)

inst_80898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000000003; valaddr_reg:x3; val_offset:242694*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242694*0 + 3*258*FLEN/8, x4, x1, x2)

inst_80899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000000007; valaddr_reg:x3; val_offset:242697*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242697*0 + 3*259*FLEN/8, x4, x1, x2)

inst_80900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000000000f; valaddr_reg:x3; val_offset:242700*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242700*0 + 3*260*FLEN/8, x4, x1, x2)

inst_80901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000000001f; valaddr_reg:x3; val_offset:242703*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242703*0 + 3*261*FLEN/8, x4, x1, x2)

inst_80902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000000003f; valaddr_reg:x3; val_offset:242706*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242706*0 + 3*262*FLEN/8, x4, x1, x2)

inst_80903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000000007f; valaddr_reg:x3; val_offset:242709*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242709*0 + 3*263*FLEN/8, x4, x1, x2)

inst_80904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000000000ff; valaddr_reg:x3; val_offset:242712*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242712*0 + 3*264*FLEN/8, x4, x1, x2)

inst_80905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000000001ff; valaddr_reg:x3; val_offset:242715*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242715*0 + 3*265*FLEN/8, x4, x1, x2)

inst_80906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000000003ff; valaddr_reg:x3; val_offset:242718*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242718*0 + 3*266*FLEN/8, x4, x1, x2)

inst_80907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000000007ff; valaddr_reg:x3; val_offset:242721*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242721*0 + 3*267*FLEN/8, x4, x1, x2)

inst_80908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000000fff; valaddr_reg:x3; val_offset:242724*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242724*0 + 3*268*FLEN/8, x4, x1, x2)

inst_80909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000001fff; valaddr_reg:x3; val_offset:242727*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242727*0 + 3*269*FLEN/8, x4, x1, x2)

inst_80910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000003fff; valaddr_reg:x3; val_offset:242730*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242730*0 + 3*270*FLEN/8, x4, x1, x2)

inst_80911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000007fff; valaddr_reg:x3; val_offset:242733*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242733*0 + 3*271*FLEN/8, x4, x1, x2)

inst_80912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000000ffff; valaddr_reg:x3; val_offset:242736*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242736*0 + 3*272*FLEN/8, x4, x1, x2)

inst_80913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000001ffff; valaddr_reg:x3; val_offset:242739*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242739*0 + 3*273*FLEN/8, x4, x1, x2)

inst_80914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000003ffff; valaddr_reg:x3; val_offset:242742*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242742*0 + 3*274*FLEN/8, x4, x1, x2)

inst_80915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000007ffff; valaddr_reg:x3; val_offset:242745*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242745*0 + 3*275*FLEN/8, x4, x1, x2)

inst_80916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000000fffff; valaddr_reg:x3; val_offset:242748*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242748*0 + 3*276*FLEN/8, x4, x1, x2)

inst_80917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000001fffff; valaddr_reg:x3; val_offset:242751*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242751*0 + 3*277*FLEN/8, x4, x1, x2)

inst_80918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000003fffff; valaddr_reg:x3; val_offset:242754*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242754*0 + 3*278*FLEN/8, x4, x1, x2)

inst_80919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000007fffff; valaddr_reg:x3; val_offset:242757*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242757*0 + 3*279*FLEN/8, x4, x1, x2)

inst_80920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000000ffffff; valaddr_reg:x3; val_offset:242760*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242760*0 + 3*280*FLEN/8, x4, x1, x2)

inst_80921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000001ffffff; valaddr_reg:x3; val_offset:242763*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242763*0 + 3*281*FLEN/8, x4, x1, x2)

inst_80922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000003ffffff; valaddr_reg:x3; val_offset:242766*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242766*0 + 3*282*FLEN/8, x4, x1, x2)

inst_80923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000007ffffff; valaddr_reg:x3; val_offset:242769*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242769*0 + 3*283*FLEN/8, x4, x1, x2)

inst_80924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000000fffffff; valaddr_reg:x3; val_offset:242772*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242772*0 + 3*284*FLEN/8, x4, x1, x2)

inst_80925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000001fffffff; valaddr_reg:x3; val_offset:242775*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242775*0 + 3*285*FLEN/8, x4, x1, x2)

inst_80926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000003fffffff; valaddr_reg:x3; val_offset:242778*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242778*0 + 3*286*FLEN/8, x4, x1, x2)

inst_80927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000007fffffff; valaddr_reg:x3; val_offset:242781*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242781*0 + 3*287*FLEN/8, x4, x1, x2)

inst_80928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00000ffffffff; valaddr_reg:x3; val_offset:242784*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242784*0 + 3*288*FLEN/8, x4, x1, x2)

inst_80929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00001ffffffff; valaddr_reg:x3; val_offset:242787*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242787*0 + 3*289*FLEN/8, x4, x1, x2)

inst_80930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00003ffffffff; valaddr_reg:x3; val_offset:242790*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242790*0 + 3*290*FLEN/8, x4, x1, x2)

inst_80931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00007ffffffff; valaddr_reg:x3; val_offset:242793*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242793*0 + 3*291*FLEN/8, x4, x1, x2)

inst_80932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0000fffffffff; valaddr_reg:x3; val_offset:242796*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242796*0 + 3*292*FLEN/8, x4, x1, x2)

inst_80933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0001fffffffff; valaddr_reg:x3; val_offset:242799*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242799*0 + 3*293*FLEN/8, x4, x1, x2)

inst_80934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0003fffffffff; valaddr_reg:x3; val_offset:242802*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242802*0 + 3*294*FLEN/8, x4, x1, x2)

inst_80935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0007fffffffff; valaddr_reg:x3; val_offset:242805*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242805*0 + 3*295*FLEN/8, x4, x1, x2)

inst_80936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc000ffffffffff; valaddr_reg:x3; val_offset:242808*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242808*0 + 3*296*FLEN/8, x4, x1, x2)

inst_80937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc001ffffffffff; valaddr_reg:x3; val_offset:242811*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242811*0 + 3*297*FLEN/8, x4, x1, x2)

inst_80938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc003ffffffffff; valaddr_reg:x3; val_offset:242814*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242814*0 + 3*298*FLEN/8, x4, x1, x2)

inst_80939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc007ffffffffff; valaddr_reg:x3; val_offset:242817*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242817*0 + 3*299*FLEN/8, x4, x1, x2)

inst_80940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc00fffffffffff; valaddr_reg:x3; val_offset:242820*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242820*0 + 3*300*FLEN/8, x4, x1, x2)

inst_80941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc01fffffffffff; valaddr_reg:x3; val_offset:242823*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242823*0 + 3*301*FLEN/8, x4, x1, x2)

inst_80942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc03fffffffffff; valaddr_reg:x3; val_offset:242826*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242826*0 + 3*302*FLEN/8, x4, x1, x2)

inst_80943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc07fffffffffff; valaddr_reg:x3; val_offset:242829*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242829*0 + 3*303*FLEN/8, x4, x1, x2)

inst_80944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc0ffffffffffff; valaddr_reg:x3; val_offset:242832*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242832*0 + 3*304*FLEN/8, x4, x1, x2)

inst_80945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc1ffffffffffff; valaddr_reg:x3; val_offset:242835*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242835*0 + 3*305*FLEN/8, x4, x1, x2)

inst_80946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc3ffffffffffff; valaddr_reg:x3; val_offset:242838*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242838*0 + 3*306*FLEN/8, x4, x1, x2)

inst_80947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc7ffffffffffff; valaddr_reg:x3; val_offset:242841*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242841*0 + 3*307*FLEN/8, x4, x1, x2)

inst_80948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xc8000000000000; valaddr_reg:x3; val_offset:242844*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242844*0 + 3*308*FLEN/8, x4, x1, x2)

inst_80949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcc000000000000; valaddr_reg:x3; val_offset:242847*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242847*0 + 3*309*FLEN/8, x4, x1, x2)

inst_80950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xce000000000000; valaddr_reg:x3; val_offset:242850*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242850*0 + 3*310*FLEN/8, x4, x1, x2)

inst_80951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcf000000000000; valaddr_reg:x3; val_offset:242853*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242853*0 + 3*311*FLEN/8, x4, x1, x2)

inst_80952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcf800000000000; valaddr_reg:x3; val_offset:242856*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242856*0 + 3*312*FLEN/8, x4, x1, x2)

inst_80953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfc00000000000; valaddr_reg:x3; val_offset:242859*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242859*0 + 3*313*FLEN/8, x4, x1, x2)

inst_80954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfe00000000000; valaddr_reg:x3; val_offset:242862*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242862*0 + 3*314*FLEN/8, x4, x1, x2)

inst_80955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcff00000000000; valaddr_reg:x3; val_offset:242865*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242865*0 + 3*315*FLEN/8, x4, x1, x2)

inst_80956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcff80000000000; valaddr_reg:x3; val_offset:242868*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242868*0 + 3*316*FLEN/8, x4, x1, x2)

inst_80957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffc0000000000; valaddr_reg:x3; val_offset:242871*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242871*0 + 3*317*FLEN/8, x4, x1, x2)

inst_80958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffe0000000000; valaddr_reg:x3; val_offset:242874*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242874*0 + 3*318*FLEN/8, x4, x1, x2)

inst_80959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfff0000000000; valaddr_reg:x3; val_offset:242877*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242877*0 + 3*319*FLEN/8, x4, x1, x2)

inst_80960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfff8000000000; valaddr_reg:x3; val_offset:242880*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242880*0 + 3*320*FLEN/8, x4, x1, x2)

inst_80961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffc000000000; valaddr_reg:x3; val_offset:242883*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242883*0 + 3*321*FLEN/8, x4, x1, x2)

inst_80962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffe000000000; valaddr_reg:x3; val_offset:242886*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242886*0 + 3*322*FLEN/8, x4, x1, x2)

inst_80963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffff000000000; valaddr_reg:x3; val_offset:242889*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242889*0 + 3*323*FLEN/8, x4, x1, x2)

inst_80964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffff800000000; valaddr_reg:x3; val_offset:242892*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242892*0 + 3*324*FLEN/8, x4, x1, x2)

inst_80965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffc00000000; valaddr_reg:x3; val_offset:242895*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242895*0 + 3*325*FLEN/8, x4, x1, x2)

inst_80966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffe00000000; valaddr_reg:x3; val_offset:242898*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242898*0 + 3*326*FLEN/8, x4, x1, x2)

inst_80967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffff00000000; valaddr_reg:x3; val_offset:242901*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242901*0 + 3*327*FLEN/8, x4, x1, x2)

inst_80968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffff80000000; valaddr_reg:x3; val_offset:242904*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242904*0 + 3*328*FLEN/8, x4, x1, x2)

inst_80969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffc0000000; valaddr_reg:x3; val_offset:242907*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242907*0 + 3*329*FLEN/8, x4, x1, x2)

inst_80970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffe0000000; valaddr_reg:x3; val_offset:242910*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242910*0 + 3*330*FLEN/8, x4, x1, x2)

inst_80971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffff0000000; valaddr_reg:x3; val_offset:242913*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242913*0 + 3*331*FLEN/8, x4, x1, x2)

inst_80972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffff8000000; valaddr_reg:x3; val_offset:242916*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242916*0 + 3*332*FLEN/8, x4, x1, x2)

inst_80973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffc000000; valaddr_reg:x3; val_offset:242919*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242919*0 + 3*333*FLEN/8, x4, x1, x2)

inst_80974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffe000000; valaddr_reg:x3; val_offset:242922*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242922*0 + 3*334*FLEN/8, x4, x1, x2)

inst_80975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffff000000; valaddr_reg:x3; val_offset:242925*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242925*0 + 3*335*FLEN/8, x4, x1, x2)

inst_80976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffff800000; valaddr_reg:x3; val_offset:242928*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242928*0 + 3*336*FLEN/8, x4, x1, x2)

inst_80977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffc00000; valaddr_reg:x3; val_offset:242931*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242931*0 + 3*337*FLEN/8, x4, x1, x2)

inst_80978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffe00000; valaddr_reg:x3; val_offset:242934*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242934*0 + 3*338*FLEN/8, x4, x1, x2)

inst_80979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffff00000; valaddr_reg:x3; val_offset:242937*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242937*0 + 3*339*FLEN/8, x4, x1, x2)

inst_80980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffff80000; valaddr_reg:x3; val_offset:242940*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242940*0 + 3*340*FLEN/8, x4, x1, x2)

inst_80981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffc0000; valaddr_reg:x3; val_offset:242943*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242943*0 + 3*341*FLEN/8, x4, x1, x2)

inst_80982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffe0000; valaddr_reg:x3; val_offset:242946*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242946*0 + 3*342*FLEN/8, x4, x1, x2)

inst_80983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffff0000; valaddr_reg:x3; val_offset:242949*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242949*0 + 3*343*FLEN/8, x4, x1, x2)

inst_80984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffff8000; valaddr_reg:x3; val_offset:242952*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242952*0 + 3*344*FLEN/8, x4, x1, x2)

inst_80985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffffc000; valaddr_reg:x3; val_offset:242955*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242955*0 + 3*345*FLEN/8, x4, x1, x2)

inst_80986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffffe000; valaddr_reg:x3; val_offset:242958*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242958*0 + 3*346*FLEN/8, x4, x1, x2)

inst_80987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffff000; valaddr_reg:x3; val_offset:242961*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242961*0 + 3*347*FLEN/8, x4, x1, x2)

inst_80988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffff800; valaddr_reg:x3; val_offset:242964*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242964*0 + 3*348*FLEN/8, x4, x1, x2)

inst_80989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffffc00; valaddr_reg:x3; val_offset:242967*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242967*0 + 3*349*FLEN/8, x4, x1, x2)

inst_80990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffffe00; valaddr_reg:x3; val_offset:242970*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242970*0 + 3*350*FLEN/8, x4, x1, x2)

inst_80991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffffff00; valaddr_reg:x3; val_offset:242973*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242973*0 + 3*351*FLEN/8, x4, x1, x2)

inst_80992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffffff80; valaddr_reg:x3; val_offset:242976*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242976*0 + 3*352*FLEN/8, x4, x1, x2)

inst_80993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffffffc0; valaddr_reg:x3; val_offset:242979*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242979*0 + 3*353*FLEN/8, x4, x1, x2)

inst_80994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffffffe0; valaddr_reg:x3; val_offset:242982*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242982*0 + 3*354*FLEN/8, x4, x1, x2)

inst_80995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffffff0; valaddr_reg:x3; val_offset:242985*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242985*0 + 3*355*FLEN/8, x4, x1, x2)

inst_80996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffffff8; valaddr_reg:x3; val_offset:242988*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242988*0 + 3*356*FLEN/8, x4, x1, x2)

inst_80997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffffffc; valaddr_reg:x3; val_offset:242991*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242991*0 + 3*357*FLEN/8, x4, x1, x2)

inst_80998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcffffffffffffe; valaddr_reg:x3; val_offset:242994*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242994*0 + 3*358*FLEN/8, x4, x1, x2)

inst_80999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994b4b50084ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994b4b50084ba; op2val:0x0;
op3val:0xcfffffffffffff; valaddr_reg:x3; val_offset:242997*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 242997*0 + 3*359*FLEN/8, x4, x1, x2)

inst_81000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:243000*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243000*0 + 3*360*FLEN/8, x4, x1, x2)

inst_81001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:243003*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243003*0 + 3*361*FLEN/8, x4, x1, x2)

inst_81002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:243006*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243006*0 + 3*362*FLEN/8, x4, x1, x2)

inst_81003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:243009*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243009*0 + 3*363*FLEN/8, x4, x1, x2)

inst_81004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:243012*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243012*0 + 3*364*FLEN/8, x4, x1, x2)

inst_81005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:243015*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243015*0 + 3*365*FLEN/8, x4, x1, x2)

inst_81006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:243018*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243018*0 + 3*366*FLEN/8, x4, x1, x2)

inst_81007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:243021*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243021*0 + 3*367*FLEN/8, x4, x1, x2)

inst_81008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:243024*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243024*0 + 3*368*FLEN/8, x4, x1, x2)

inst_81009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:243027*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243027*0 + 3*369*FLEN/8, x4, x1, x2)

inst_81010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:243030*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243030*0 + 3*370*FLEN/8, x4, x1, x2)

inst_81011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:243033*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243033*0 + 3*371*FLEN/8, x4, x1, x2)

inst_81012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:243036*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243036*0 + 3*372*FLEN/8, x4, x1, x2)

inst_81013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:243039*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243039*0 + 3*373*FLEN/8, x4, x1, x2)

inst_81014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:243042*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243042*0 + 3*374*FLEN/8, x4, x1, x2)

inst_81015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:243045*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243045*0 + 3*375*FLEN/8, x4, x1, x2)

inst_81016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:243048*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243048*0 + 3*376*FLEN/8, x4, x1, x2)

inst_81017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:243051*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243051*0 + 3*377*FLEN/8, x4, x1, x2)

inst_81018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:243054*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243054*0 + 3*378*FLEN/8, x4, x1, x2)

inst_81019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:243057*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243057*0 + 3*379*FLEN/8, x4, x1, x2)

inst_81020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:243060*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243060*0 + 3*380*FLEN/8, x4, x1, x2)

inst_81021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:243063*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243063*0 + 3*381*FLEN/8, x4, x1, x2)

inst_81022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000000000; valaddr_reg:x3; val_offset:243066*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243066*0 + 3*382*FLEN/8, x4, x1, x2)

inst_81023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000000001; valaddr_reg:x3; val_offset:243069*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243069*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_81024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000000003; valaddr_reg:x3; val_offset:243072*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243072*0 + 3*384*FLEN/8, x4, x1, x2)

inst_81025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000000007; valaddr_reg:x3; val_offset:243075*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243075*0 + 3*385*FLEN/8, x4, x1, x2)

inst_81026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000000000f; valaddr_reg:x3; val_offset:243078*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243078*0 + 3*386*FLEN/8, x4, x1, x2)

inst_81027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000000001f; valaddr_reg:x3; val_offset:243081*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243081*0 + 3*387*FLEN/8, x4, x1, x2)

inst_81028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000000003f; valaddr_reg:x3; val_offset:243084*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243084*0 + 3*388*FLEN/8, x4, x1, x2)

inst_81029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000000007f; valaddr_reg:x3; val_offset:243087*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243087*0 + 3*389*FLEN/8, x4, x1, x2)

inst_81030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000000000ff; valaddr_reg:x3; val_offset:243090*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243090*0 + 3*390*FLEN/8, x4, x1, x2)

inst_81031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000000001ff; valaddr_reg:x3; val_offset:243093*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243093*0 + 3*391*FLEN/8, x4, x1, x2)

inst_81032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000000003ff; valaddr_reg:x3; val_offset:243096*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243096*0 + 3*392*FLEN/8, x4, x1, x2)

inst_81033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000000007ff; valaddr_reg:x3; val_offset:243099*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243099*0 + 3*393*FLEN/8, x4, x1, x2)

inst_81034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000000fff; valaddr_reg:x3; val_offset:243102*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243102*0 + 3*394*FLEN/8, x4, x1, x2)

inst_81035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000001fff; valaddr_reg:x3; val_offset:243105*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243105*0 + 3*395*FLEN/8, x4, x1, x2)

inst_81036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000003fff; valaddr_reg:x3; val_offset:243108*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243108*0 + 3*396*FLEN/8, x4, x1, x2)

inst_81037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000007fff; valaddr_reg:x3; val_offset:243111*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243111*0 + 3*397*FLEN/8, x4, x1, x2)

inst_81038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000000ffff; valaddr_reg:x3; val_offset:243114*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243114*0 + 3*398*FLEN/8, x4, x1, x2)

inst_81039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000001ffff; valaddr_reg:x3; val_offset:243117*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243117*0 + 3*399*FLEN/8, x4, x1, x2)

inst_81040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000003ffff; valaddr_reg:x3; val_offset:243120*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243120*0 + 3*400*FLEN/8, x4, x1, x2)

inst_81041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000007ffff; valaddr_reg:x3; val_offset:243123*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243123*0 + 3*401*FLEN/8, x4, x1, x2)

inst_81042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000000fffff; valaddr_reg:x3; val_offset:243126*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243126*0 + 3*402*FLEN/8, x4, x1, x2)

inst_81043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000001fffff; valaddr_reg:x3; val_offset:243129*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243129*0 + 3*403*FLEN/8, x4, x1, x2)

inst_81044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000003fffff; valaddr_reg:x3; val_offset:243132*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243132*0 + 3*404*FLEN/8, x4, x1, x2)

inst_81045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000007fffff; valaddr_reg:x3; val_offset:243135*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243135*0 + 3*405*FLEN/8, x4, x1, x2)

inst_81046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000000ffffff; valaddr_reg:x3; val_offset:243138*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243138*0 + 3*406*FLEN/8, x4, x1, x2)

inst_81047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000001ffffff; valaddr_reg:x3; val_offset:243141*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243141*0 + 3*407*FLEN/8, x4, x1, x2)

inst_81048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000003ffffff; valaddr_reg:x3; val_offset:243144*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243144*0 + 3*408*FLEN/8, x4, x1, x2)

inst_81049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000007ffffff; valaddr_reg:x3; val_offset:243147*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243147*0 + 3*409*FLEN/8, x4, x1, x2)

inst_81050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000000fffffff; valaddr_reg:x3; val_offset:243150*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243150*0 + 3*410*FLEN/8, x4, x1, x2)

inst_81051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000001fffffff; valaddr_reg:x3; val_offset:243153*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243153*0 + 3*411*FLEN/8, x4, x1, x2)

inst_81052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000003fffffff; valaddr_reg:x3; val_offset:243156*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243156*0 + 3*412*FLEN/8, x4, x1, x2)

inst_81053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000007fffffff; valaddr_reg:x3; val_offset:243159*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243159*0 + 3*413*FLEN/8, x4, x1, x2)

inst_81054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00000ffffffff; valaddr_reg:x3; val_offset:243162*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243162*0 + 3*414*FLEN/8, x4, x1, x2)

inst_81055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00001ffffffff; valaddr_reg:x3; val_offset:243165*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243165*0 + 3*415*FLEN/8, x4, x1, x2)

inst_81056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00003ffffffff; valaddr_reg:x3; val_offset:243168*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243168*0 + 3*416*FLEN/8, x4, x1, x2)

inst_81057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00007ffffffff; valaddr_reg:x3; val_offset:243171*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243171*0 + 3*417*FLEN/8, x4, x1, x2)

inst_81058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0000fffffffff; valaddr_reg:x3; val_offset:243174*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243174*0 + 3*418*FLEN/8, x4, x1, x2)

inst_81059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0001fffffffff; valaddr_reg:x3; val_offset:243177*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243177*0 + 3*419*FLEN/8, x4, x1, x2)

inst_81060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0003fffffffff; valaddr_reg:x3; val_offset:243180*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243180*0 + 3*420*FLEN/8, x4, x1, x2)

inst_81061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0007fffffffff; valaddr_reg:x3; val_offset:243183*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243183*0 + 3*421*FLEN/8, x4, x1, x2)

inst_81062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c000ffffffffff; valaddr_reg:x3; val_offset:243186*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243186*0 + 3*422*FLEN/8, x4, x1, x2)

inst_81063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c001ffffffffff; valaddr_reg:x3; val_offset:243189*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243189*0 + 3*423*FLEN/8, x4, x1, x2)

inst_81064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c003ffffffffff; valaddr_reg:x3; val_offset:243192*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243192*0 + 3*424*FLEN/8, x4, x1, x2)

inst_81065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c007ffffffffff; valaddr_reg:x3; val_offset:243195*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243195*0 + 3*425*FLEN/8, x4, x1, x2)

inst_81066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c00fffffffffff; valaddr_reg:x3; val_offset:243198*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243198*0 + 3*426*FLEN/8, x4, x1, x2)

inst_81067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c01fffffffffff; valaddr_reg:x3; val_offset:243201*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243201*0 + 3*427*FLEN/8, x4, x1, x2)

inst_81068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c03fffffffffff; valaddr_reg:x3; val_offset:243204*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243204*0 + 3*428*FLEN/8, x4, x1, x2)

inst_81069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c07fffffffffff; valaddr_reg:x3; val_offset:243207*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243207*0 + 3*429*FLEN/8, x4, x1, x2)

inst_81070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c0ffffffffffff; valaddr_reg:x3; val_offset:243210*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243210*0 + 3*430*FLEN/8, x4, x1, x2)

inst_81071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c1ffffffffffff; valaddr_reg:x3; val_offset:243213*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243213*0 + 3*431*FLEN/8, x4, x1, x2)

inst_81072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c3ffffffffffff; valaddr_reg:x3; val_offset:243216*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243216*0 + 3*432*FLEN/8, x4, x1, x2)

inst_81073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c7ffffffffffff; valaddr_reg:x3; val_offset:243219*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243219*0 + 3*433*FLEN/8, x4, x1, x2)

inst_81074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3c8000000000000; valaddr_reg:x3; val_offset:243222*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243222*0 + 3*434*FLEN/8, x4, x1, x2)

inst_81075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cc000000000000; valaddr_reg:x3; val_offset:243225*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243225*0 + 3*435*FLEN/8, x4, x1, x2)

inst_81076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3ce000000000000; valaddr_reg:x3; val_offset:243228*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243228*0 + 3*436*FLEN/8, x4, x1, x2)

inst_81077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cf000000000000; valaddr_reg:x3; val_offset:243231*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243231*0 + 3*437*FLEN/8, x4, x1, x2)

inst_81078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cf800000000000; valaddr_reg:x3; val_offset:243234*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243234*0 + 3*438*FLEN/8, x4, x1, x2)

inst_81079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfc00000000000; valaddr_reg:x3; val_offset:243237*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243237*0 + 3*439*FLEN/8, x4, x1, x2)

inst_81080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfe00000000000; valaddr_reg:x3; val_offset:243240*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243240*0 + 3*440*FLEN/8, x4, x1, x2)

inst_81081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cff00000000000; valaddr_reg:x3; val_offset:243243*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243243*0 + 3*441*FLEN/8, x4, x1, x2)

inst_81082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cff80000000000; valaddr_reg:x3; val_offset:243246*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243246*0 + 3*442*FLEN/8, x4, x1, x2)

inst_81083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffc0000000000; valaddr_reg:x3; val_offset:243249*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243249*0 + 3*443*FLEN/8, x4, x1, x2)

inst_81084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffe0000000000; valaddr_reg:x3; val_offset:243252*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243252*0 + 3*444*FLEN/8, x4, x1, x2)

inst_81085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfff0000000000; valaddr_reg:x3; val_offset:243255*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243255*0 + 3*445*FLEN/8, x4, x1, x2)

inst_81086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfff8000000000; valaddr_reg:x3; val_offset:243258*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243258*0 + 3*446*FLEN/8, x4, x1, x2)

inst_81087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffc000000000; valaddr_reg:x3; val_offset:243261*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243261*0 + 3*447*FLEN/8, x4, x1, x2)

inst_81088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffe000000000; valaddr_reg:x3; val_offset:243264*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243264*0 + 3*448*FLEN/8, x4, x1, x2)

inst_81089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffff000000000; valaddr_reg:x3; val_offset:243267*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243267*0 + 3*449*FLEN/8, x4, x1, x2)

inst_81090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffff800000000; valaddr_reg:x3; val_offset:243270*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243270*0 + 3*450*FLEN/8, x4, x1, x2)

inst_81091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffc00000000; valaddr_reg:x3; val_offset:243273*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243273*0 + 3*451*FLEN/8, x4, x1, x2)

inst_81092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffe00000000; valaddr_reg:x3; val_offset:243276*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243276*0 + 3*452*FLEN/8, x4, x1, x2)

inst_81093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffff00000000; valaddr_reg:x3; val_offset:243279*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243279*0 + 3*453*FLEN/8, x4, x1, x2)

inst_81094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffff80000000; valaddr_reg:x3; val_offset:243282*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243282*0 + 3*454*FLEN/8, x4, x1, x2)

inst_81095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffc0000000; valaddr_reg:x3; val_offset:243285*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243285*0 + 3*455*FLEN/8, x4, x1, x2)

inst_81096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffe0000000; valaddr_reg:x3; val_offset:243288*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243288*0 + 3*456*FLEN/8, x4, x1, x2)

inst_81097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffff0000000; valaddr_reg:x3; val_offset:243291*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243291*0 + 3*457*FLEN/8, x4, x1, x2)

inst_81098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffff8000000; valaddr_reg:x3; val_offset:243294*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243294*0 + 3*458*FLEN/8, x4, x1, x2)

inst_81099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffc000000; valaddr_reg:x3; val_offset:243297*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243297*0 + 3*459*FLEN/8, x4, x1, x2)

inst_81100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffe000000; valaddr_reg:x3; val_offset:243300*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243300*0 + 3*460*FLEN/8, x4, x1, x2)

inst_81101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffff000000; valaddr_reg:x3; val_offset:243303*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243303*0 + 3*461*FLEN/8, x4, x1, x2)

inst_81102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffff800000; valaddr_reg:x3; val_offset:243306*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243306*0 + 3*462*FLEN/8, x4, x1, x2)

inst_81103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffc00000; valaddr_reg:x3; val_offset:243309*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243309*0 + 3*463*FLEN/8, x4, x1, x2)

inst_81104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffe00000; valaddr_reg:x3; val_offset:243312*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243312*0 + 3*464*FLEN/8, x4, x1, x2)

inst_81105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffff00000; valaddr_reg:x3; val_offset:243315*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243315*0 + 3*465*FLEN/8, x4, x1, x2)

inst_81106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffff80000; valaddr_reg:x3; val_offset:243318*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243318*0 + 3*466*FLEN/8, x4, x1, x2)

inst_81107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffc0000; valaddr_reg:x3; val_offset:243321*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243321*0 + 3*467*FLEN/8, x4, x1, x2)

inst_81108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffe0000; valaddr_reg:x3; val_offset:243324*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243324*0 + 3*468*FLEN/8, x4, x1, x2)

inst_81109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffff0000; valaddr_reg:x3; val_offset:243327*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243327*0 + 3*469*FLEN/8, x4, x1, x2)

inst_81110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffff8000; valaddr_reg:x3; val_offset:243330*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243330*0 + 3*470*FLEN/8, x4, x1, x2)

inst_81111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffffc000; valaddr_reg:x3; val_offset:243333*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243333*0 + 3*471*FLEN/8, x4, x1, x2)

inst_81112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffffe000; valaddr_reg:x3; val_offset:243336*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243336*0 + 3*472*FLEN/8, x4, x1, x2)

inst_81113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffff000; valaddr_reg:x3; val_offset:243339*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243339*0 + 3*473*FLEN/8, x4, x1, x2)

inst_81114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffff800; valaddr_reg:x3; val_offset:243342*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243342*0 + 3*474*FLEN/8, x4, x1, x2)

inst_81115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffffc00; valaddr_reg:x3; val_offset:243345*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243345*0 + 3*475*FLEN/8, x4, x1, x2)

inst_81116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffffe00; valaddr_reg:x3; val_offset:243348*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243348*0 + 3*476*FLEN/8, x4, x1, x2)

inst_81117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffffff00; valaddr_reg:x3; val_offset:243351*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243351*0 + 3*477*FLEN/8, x4, x1, x2)

inst_81118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffffff80; valaddr_reg:x3; val_offset:243354*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243354*0 + 3*478*FLEN/8, x4, x1, x2)

inst_81119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffffffc0; valaddr_reg:x3; val_offset:243357*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243357*0 + 3*479*FLEN/8, x4, x1, x2)

inst_81120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffffffe0; valaddr_reg:x3; val_offset:243360*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243360*0 + 3*480*FLEN/8, x4, x1, x2)

inst_81121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffffff0; valaddr_reg:x3; val_offset:243363*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243363*0 + 3*481*FLEN/8, x4, x1, x2)

inst_81122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffffff8; valaddr_reg:x3; val_offset:243366*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243366*0 + 3*482*FLEN/8, x4, x1, x2)

inst_81123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffffffc; valaddr_reg:x3; val_offset:243369*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243369*0 + 3*483*FLEN/8, x4, x1, x2)

inst_81124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cffffffffffffe; valaddr_reg:x3; val_offset:243372*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243372*0 + 3*484*FLEN/8, x4, x1, x2)

inst_81125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x994e82a69a97d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa994e82a69a97d; op2val:0x0;
op3val:0x3cfffffffffffff; valaddr_reg:x3; val_offset:243375*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243375*0 + 3*485*FLEN/8, x4, x1, x2)

inst_81126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000000000; valaddr_reg:x3; val_offset:243378*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243378*0 + 3*486*FLEN/8, x4, x1, x2)

inst_81127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000000001; valaddr_reg:x3; val_offset:243381*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243381*0 + 3*487*FLEN/8, x4, x1, x2)

inst_81128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000000003; valaddr_reg:x3; val_offset:243384*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243384*0 + 3*488*FLEN/8, x4, x1, x2)

inst_81129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000000007; valaddr_reg:x3; val_offset:243387*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243387*0 + 3*489*FLEN/8, x4, x1, x2)

inst_81130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000000000f; valaddr_reg:x3; val_offset:243390*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243390*0 + 3*490*FLEN/8, x4, x1, x2)

inst_81131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000000001f; valaddr_reg:x3; val_offset:243393*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243393*0 + 3*491*FLEN/8, x4, x1, x2)

inst_81132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000000003f; valaddr_reg:x3; val_offset:243396*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243396*0 + 3*492*FLEN/8, x4, x1, x2)

inst_81133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000000007f; valaddr_reg:x3; val_offset:243399*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243399*0 + 3*493*FLEN/8, x4, x1, x2)

inst_81134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000000000ff; valaddr_reg:x3; val_offset:243402*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243402*0 + 3*494*FLEN/8, x4, x1, x2)

inst_81135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000000001ff; valaddr_reg:x3; val_offset:243405*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243405*0 + 3*495*FLEN/8, x4, x1, x2)

inst_81136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000000003ff; valaddr_reg:x3; val_offset:243408*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243408*0 + 3*496*FLEN/8, x4, x1, x2)

inst_81137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000000007ff; valaddr_reg:x3; val_offset:243411*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243411*0 + 3*497*FLEN/8, x4, x1, x2)

inst_81138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000000fff; valaddr_reg:x3; val_offset:243414*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243414*0 + 3*498*FLEN/8, x4, x1, x2)

inst_81139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000001fff; valaddr_reg:x3; val_offset:243417*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243417*0 + 3*499*FLEN/8, x4, x1, x2)

inst_81140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000003fff; valaddr_reg:x3; val_offset:243420*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243420*0 + 3*500*FLEN/8, x4, x1, x2)

inst_81141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000007fff; valaddr_reg:x3; val_offset:243423*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243423*0 + 3*501*FLEN/8, x4, x1, x2)

inst_81142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000000ffff; valaddr_reg:x3; val_offset:243426*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243426*0 + 3*502*FLEN/8, x4, x1, x2)

inst_81143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000001ffff; valaddr_reg:x3; val_offset:243429*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243429*0 + 3*503*FLEN/8, x4, x1, x2)

inst_81144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000003ffff; valaddr_reg:x3; val_offset:243432*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243432*0 + 3*504*FLEN/8, x4, x1, x2)

inst_81145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000007ffff; valaddr_reg:x3; val_offset:243435*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243435*0 + 3*505*FLEN/8, x4, x1, x2)

inst_81146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000000fffff; valaddr_reg:x3; val_offset:243438*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243438*0 + 3*506*FLEN/8, x4, x1, x2)

inst_81147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000001fffff; valaddr_reg:x3; val_offset:243441*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243441*0 + 3*507*FLEN/8, x4, x1, x2)

inst_81148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000003fffff; valaddr_reg:x3; val_offset:243444*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243444*0 + 3*508*FLEN/8, x4, x1, x2)

inst_81149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000007fffff; valaddr_reg:x3; val_offset:243447*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243447*0 + 3*509*FLEN/8, x4, x1, x2)

inst_81150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000000ffffff; valaddr_reg:x3; val_offset:243450*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243450*0 + 3*510*FLEN/8, x4, x1, x2)

inst_81151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000001ffffff; valaddr_reg:x3; val_offset:243453*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243453*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_81152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000003ffffff; valaddr_reg:x3; val_offset:243456*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243456*0 + 3*512*FLEN/8, x4, x1, x2)

inst_81153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000007ffffff; valaddr_reg:x3; val_offset:243459*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243459*0 + 3*513*FLEN/8, x4, x1, x2)

inst_81154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000000fffffff; valaddr_reg:x3; val_offset:243462*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243462*0 + 3*514*FLEN/8, x4, x1, x2)

inst_81155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000001fffffff; valaddr_reg:x3; val_offset:243465*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243465*0 + 3*515*FLEN/8, x4, x1, x2)

inst_81156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000003fffffff; valaddr_reg:x3; val_offset:243468*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243468*0 + 3*516*FLEN/8, x4, x1, x2)

inst_81157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000007fffffff; valaddr_reg:x3; val_offset:243471*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243471*0 + 3*517*FLEN/8, x4, x1, x2)

inst_81158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400000ffffffff; valaddr_reg:x3; val_offset:243474*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243474*0 + 3*518*FLEN/8, x4, x1, x2)

inst_81159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400001ffffffff; valaddr_reg:x3; val_offset:243477*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243477*0 + 3*519*FLEN/8, x4, x1, x2)

inst_81160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400003ffffffff; valaddr_reg:x3; val_offset:243480*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243480*0 + 3*520*FLEN/8, x4, x1, x2)

inst_81161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400007ffffffff; valaddr_reg:x3; val_offset:243483*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243483*0 + 3*521*FLEN/8, x4, x1, x2)

inst_81162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40000fffffffff; valaddr_reg:x3; val_offset:243486*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243486*0 + 3*522*FLEN/8, x4, x1, x2)

inst_81163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40001fffffffff; valaddr_reg:x3; val_offset:243489*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243489*0 + 3*523*FLEN/8, x4, x1, x2)

inst_81164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40003fffffffff; valaddr_reg:x3; val_offset:243492*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243492*0 + 3*524*FLEN/8, x4, x1, x2)

inst_81165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40007fffffffff; valaddr_reg:x3; val_offset:243495*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243495*0 + 3*525*FLEN/8, x4, x1, x2)

inst_81166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4000ffffffffff; valaddr_reg:x3; val_offset:243498*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243498*0 + 3*526*FLEN/8, x4, x1, x2)

inst_81167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4001ffffffffff; valaddr_reg:x3; val_offset:243501*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243501*0 + 3*527*FLEN/8, x4, x1, x2)

inst_81168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4003ffffffffff; valaddr_reg:x3; val_offset:243504*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243504*0 + 3*528*FLEN/8, x4, x1, x2)

inst_81169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4007ffffffffff; valaddr_reg:x3; val_offset:243507*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243507*0 + 3*529*FLEN/8, x4, x1, x2)

inst_81170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e400fffffffffff; valaddr_reg:x3; val_offset:243510*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243510*0 + 3*530*FLEN/8, x4, x1, x2)

inst_81171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e401fffffffffff; valaddr_reg:x3; val_offset:243513*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243513*0 + 3*531*FLEN/8, x4, x1, x2)

inst_81172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e403fffffffffff; valaddr_reg:x3; val_offset:243516*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243516*0 + 3*532*FLEN/8, x4, x1, x2)

inst_81173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e407fffffffffff; valaddr_reg:x3; val_offset:243519*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243519*0 + 3*533*FLEN/8, x4, x1, x2)

inst_81174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e40ffffffffffff; valaddr_reg:x3; val_offset:243522*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243522*0 + 3*534*FLEN/8, x4, x1, x2)

inst_81175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e41ffffffffffff; valaddr_reg:x3; val_offset:243525*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243525*0 + 3*535*FLEN/8, x4, x1, x2)

inst_81176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e43ffffffffffff; valaddr_reg:x3; val_offset:243528*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243528*0 + 3*536*FLEN/8, x4, x1, x2)

inst_81177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e47ffffffffffff; valaddr_reg:x3; val_offset:243531*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243531*0 + 3*537*FLEN/8, x4, x1, x2)

inst_81178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e48000000000000; valaddr_reg:x3; val_offset:243534*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243534*0 + 3*538*FLEN/8, x4, x1, x2)

inst_81179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4c000000000000; valaddr_reg:x3; val_offset:243537*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243537*0 + 3*539*FLEN/8, x4, x1, x2)

inst_81180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4e000000000000; valaddr_reg:x3; val_offset:243540*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243540*0 + 3*540*FLEN/8, x4, x1, x2)

inst_81181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4f000000000000; valaddr_reg:x3; val_offset:243543*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243543*0 + 3*541*FLEN/8, x4, x1, x2)

inst_81182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4f800000000000; valaddr_reg:x3; val_offset:243546*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243546*0 + 3*542*FLEN/8, x4, x1, x2)

inst_81183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fc00000000000; valaddr_reg:x3; val_offset:243549*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243549*0 + 3*543*FLEN/8, x4, x1, x2)

inst_81184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fe00000000000; valaddr_reg:x3; val_offset:243552*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243552*0 + 3*544*FLEN/8, x4, x1, x2)

inst_81185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ff00000000000; valaddr_reg:x3; val_offset:243555*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243555*0 + 3*545*FLEN/8, x4, x1, x2)

inst_81186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ff80000000000; valaddr_reg:x3; val_offset:243558*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243558*0 + 3*546*FLEN/8, x4, x1, x2)

inst_81187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffc0000000000; valaddr_reg:x3; val_offset:243561*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243561*0 + 3*547*FLEN/8, x4, x1, x2)

inst_81188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffe0000000000; valaddr_reg:x3; val_offset:243564*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243564*0 + 3*548*FLEN/8, x4, x1, x2)

inst_81189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fff0000000000; valaddr_reg:x3; val_offset:243567*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243567*0 + 3*549*FLEN/8, x4, x1, x2)

inst_81190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fff8000000000; valaddr_reg:x3; val_offset:243570*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243570*0 + 3*550*FLEN/8, x4, x1, x2)

inst_81191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffc000000000; valaddr_reg:x3; val_offset:243573*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243573*0 + 3*551*FLEN/8, x4, x1, x2)

inst_81192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffe000000000; valaddr_reg:x3; val_offset:243576*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243576*0 + 3*552*FLEN/8, x4, x1, x2)

inst_81193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffff000000000; valaddr_reg:x3; val_offset:243579*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243579*0 + 3*553*FLEN/8, x4, x1, x2)

inst_81194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffff800000000; valaddr_reg:x3; val_offset:243582*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243582*0 + 3*554*FLEN/8, x4, x1, x2)

inst_81195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffc00000000; valaddr_reg:x3; val_offset:243585*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243585*0 + 3*555*FLEN/8, x4, x1, x2)

inst_81196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffe00000000; valaddr_reg:x3; val_offset:243588*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243588*0 + 3*556*FLEN/8, x4, x1, x2)

inst_81197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffff00000000; valaddr_reg:x3; val_offset:243591*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243591*0 + 3*557*FLEN/8, x4, x1, x2)

inst_81198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffff80000000; valaddr_reg:x3; val_offset:243594*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243594*0 + 3*558*FLEN/8, x4, x1, x2)

inst_81199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffc0000000; valaddr_reg:x3; val_offset:243597*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243597*0 + 3*559*FLEN/8, x4, x1, x2)

inst_81200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffe0000000; valaddr_reg:x3; val_offset:243600*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243600*0 + 3*560*FLEN/8, x4, x1, x2)

inst_81201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffff0000000; valaddr_reg:x3; val_offset:243603*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243603*0 + 3*561*FLEN/8, x4, x1, x2)

inst_81202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffff8000000; valaddr_reg:x3; val_offset:243606*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243606*0 + 3*562*FLEN/8, x4, x1, x2)

inst_81203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffc000000; valaddr_reg:x3; val_offset:243609*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243609*0 + 3*563*FLEN/8, x4, x1, x2)

inst_81204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffe000000; valaddr_reg:x3; val_offset:243612*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243612*0 + 3*564*FLEN/8, x4, x1, x2)

inst_81205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffff000000; valaddr_reg:x3; val_offset:243615*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243615*0 + 3*565*FLEN/8, x4, x1, x2)

inst_81206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffff800000; valaddr_reg:x3; val_offset:243618*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243618*0 + 3*566*FLEN/8, x4, x1, x2)

inst_81207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffc00000; valaddr_reg:x3; val_offset:243621*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243621*0 + 3*567*FLEN/8, x4, x1, x2)

inst_81208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffe00000; valaddr_reg:x3; val_offset:243624*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243624*0 + 3*568*FLEN/8, x4, x1, x2)

inst_81209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffff00000; valaddr_reg:x3; val_offset:243627*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243627*0 + 3*569*FLEN/8, x4, x1, x2)

inst_81210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffff80000; valaddr_reg:x3; val_offset:243630*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243630*0 + 3*570*FLEN/8, x4, x1, x2)

inst_81211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffc0000; valaddr_reg:x3; val_offset:243633*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243633*0 + 3*571*FLEN/8, x4, x1, x2)

inst_81212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffe0000; valaddr_reg:x3; val_offset:243636*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243636*0 + 3*572*FLEN/8, x4, x1, x2)

inst_81213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffff0000; valaddr_reg:x3; val_offset:243639*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243639*0 + 3*573*FLEN/8, x4, x1, x2)

inst_81214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffff8000; valaddr_reg:x3; val_offset:243642*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243642*0 + 3*574*FLEN/8, x4, x1, x2)

inst_81215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffffc000; valaddr_reg:x3; val_offset:243645*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243645*0 + 3*575*FLEN/8, x4, x1, x2)

inst_81216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffffe000; valaddr_reg:x3; val_offset:243648*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243648*0 + 3*576*FLEN/8, x4, x1, x2)

inst_81217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffff000; valaddr_reg:x3; val_offset:243651*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243651*0 + 3*577*FLEN/8, x4, x1, x2)

inst_81218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffff800; valaddr_reg:x3; val_offset:243654*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243654*0 + 3*578*FLEN/8, x4, x1, x2)

inst_81219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffffc00; valaddr_reg:x3; val_offset:243657*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243657*0 + 3*579*FLEN/8, x4, x1, x2)

inst_81220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffffe00; valaddr_reg:x3; val_offset:243660*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243660*0 + 3*580*FLEN/8, x4, x1, x2)

inst_81221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffffff00; valaddr_reg:x3; val_offset:243663*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243663*0 + 3*581*FLEN/8, x4, x1, x2)

inst_81222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffffff80; valaddr_reg:x3; val_offset:243666*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243666*0 + 3*582*FLEN/8, x4, x1, x2)

inst_81223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffffffc0; valaddr_reg:x3; val_offset:243669*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243669*0 + 3*583*FLEN/8, x4, x1, x2)

inst_81224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffffffe0; valaddr_reg:x3; val_offset:243672*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243672*0 + 3*584*FLEN/8, x4, x1, x2)

inst_81225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffffff0; valaddr_reg:x3; val_offset:243675*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243675*0 + 3*585*FLEN/8, x4, x1, x2)

inst_81226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffffff8; valaddr_reg:x3; val_offset:243678*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243678*0 + 3*586*FLEN/8, x4, x1, x2)

inst_81227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffffffc; valaddr_reg:x3; val_offset:243681*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243681*0 + 3*587*FLEN/8, x4, x1, x2)

inst_81228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4ffffffffffffe; valaddr_reg:x3; val_offset:243684*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243684*0 + 3*588*FLEN/8, x4, x1, x2)

inst_81229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3e4 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3e4fffffffffffff; valaddr_reg:x3; val_offset:243687*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243687*0 + 3*589*FLEN/8, x4, x1, x2)

inst_81230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:243690*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243690*0 + 3*590*FLEN/8, x4, x1, x2)

inst_81231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:243693*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243693*0 + 3*591*FLEN/8, x4, x1, x2)

inst_81232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:243696*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243696*0 + 3*592*FLEN/8, x4, x1, x2)

inst_81233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:243699*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243699*0 + 3*593*FLEN/8, x4, x1, x2)

inst_81234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:243702*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243702*0 + 3*594*FLEN/8, x4, x1, x2)

inst_81235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:243705*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243705*0 + 3*595*FLEN/8, x4, x1, x2)

inst_81236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:243708*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243708*0 + 3*596*FLEN/8, x4, x1, x2)

inst_81237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:243711*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243711*0 + 3*597*FLEN/8, x4, x1, x2)

inst_81238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:243714*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243714*0 + 3*598*FLEN/8, x4, x1, x2)

inst_81239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:243717*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243717*0 + 3*599*FLEN/8, x4, x1, x2)

inst_81240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:243720*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243720*0 + 3*600*FLEN/8, x4, x1, x2)

inst_81241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:243723*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243723*0 + 3*601*FLEN/8, x4, x1, x2)

inst_81242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:243726*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243726*0 + 3*602*FLEN/8, x4, x1, x2)

inst_81243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:243729*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243729*0 + 3*603*FLEN/8, x4, x1, x2)

inst_81244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:243732*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243732*0 + 3*604*FLEN/8, x4, x1, x2)

inst_81245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:243735*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243735*0 + 3*605*FLEN/8, x4, x1, x2)

inst_81246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:243738*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243738*0 + 3*606*FLEN/8, x4, x1, x2)

inst_81247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:243741*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243741*0 + 3*607*FLEN/8, x4, x1, x2)

inst_81248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:243744*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243744*0 + 3*608*FLEN/8, x4, x1, x2)

inst_81249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:243747*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243747*0 + 3*609*FLEN/8, x4, x1, x2)

inst_81250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:243750*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243750*0 + 3*610*FLEN/8, x4, x1, x2)

inst_81251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99829ab2b5b93 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x4011f826a4ddc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99829ab2b5b93; op2val:0x2034011f826a4ddc;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:243753*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243753*0 + 3*611*FLEN/8, x4, x1, x2)

inst_81252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:243756*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243756*0 + 3*612*FLEN/8, x4, x1, x2)

inst_81253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:243759*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243759*0 + 3*613*FLEN/8, x4, x1, x2)

inst_81254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:243762*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243762*0 + 3*614*FLEN/8, x4, x1, x2)

inst_81255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:243765*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243765*0 + 3*615*FLEN/8, x4, x1, x2)

inst_81256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:243768*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243768*0 + 3*616*FLEN/8, x4, x1, x2)

inst_81257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:243771*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243771*0 + 3*617*FLEN/8, x4, x1, x2)

inst_81258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:243774*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243774*0 + 3*618*FLEN/8, x4, x1, x2)

inst_81259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:243777*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243777*0 + 3*619*FLEN/8, x4, x1, x2)

inst_81260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:243780*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243780*0 + 3*620*FLEN/8, x4, x1, x2)

inst_81261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:243783*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243783*0 + 3*621*FLEN/8, x4, x1, x2)

inst_81262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:243786*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243786*0 + 3*622*FLEN/8, x4, x1, x2)

inst_81263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:243789*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243789*0 + 3*623*FLEN/8, x4, x1, x2)

inst_81264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:243792*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243792*0 + 3*624*FLEN/8, x4, x1, x2)

inst_81265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:243795*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243795*0 + 3*625*FLEN/8, x4, x1, x2)

inst_81266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:243798*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243798*0 + 3*626*FLEN/8, x4, x1, x2)

inst_81267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:243801*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243801*0 + 3*627*FLEN/8, x4, x1, x2)

inst_81268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:243804*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243804*0 + 3*628*FLEN/8, x4, x1, x2)

inst_81269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:243807*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243807*0 + 3*629*FLEN/8, x4, x1, x2)

inst_81270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:243810*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243810*0 + 3*630*FLEN/8, x4, x1, x2)

inst_81271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:243813*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243813*0 + 3*631*FLEN/8, x4, x1, x2)

inst_81272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:243816*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243816*0 + 3*632*FLEN/8, x4, x1, x2)

inst_81273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:243819*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243819*0 + 3*633*FLEN/8, x4, x1, x2)

inst_81274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000000000; valaddr_reg:x3; val_offset:243822*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243822*0 + 3*634*FLEN/8, x4, x1, x2)

inst_81275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000000001; valaddr_reg:x3; val_offset:243825*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243825*0 + 3*635*FLEN/8, x4, x1, x2)

inst_81276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000000003; valaddr_reg:x3; val_offset:243828*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243828*0 + 3*636*FLEN/8, x4, x1, x2)

inst_81277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000000007; valaddr_reg:x3; val_offset:243831*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243831*0 + 3*637*FLEN/8, x4, x1, x2)

inst_81278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000000000f; valaddr_reg:x3; val_offset:243834*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243834*0 + 3*638*FLEN/8, x4, x1, x2)

inst_81279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000000001f; valaddr_reg:x3; val_offset:243837*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243837*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_81280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000000003f; valaddr_reg:x3; val_offset:243840*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243840*0 + 3*640*FLEN/8, x4, x1, x2)

inst_81281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000000007f; valaddr_reg:x3; val_offset:243843*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243843*0 + 3*641*FLEN/8, x4, x1, x2)

inst_81282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000000000ff; valaddr_reg:x3; val_offset:243846*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243846*0 + 3*642*FLEN/8, x4, x1, x2)

inst_81283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000000001ff; valaddr_reg:x3; val_offset:243849*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243849*0 + 3*643*FLEN/8, x4, x1, x2)

inst_81284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000000003ff; valaddr_reg:x3; val_offset:243852*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243852*0 + 3*644*FLEN/8, x4, x1, x2)

inst_81285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000000007ff; valaddr_reg:x3; val_offset:243855*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243855*0 + 3*645*FLEN/8, x4, x1, x2)

inst_81286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000000fff; valaddr_reg:x3; val_offset:243858*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243858*0 + 3*646*FLEN/8, x4, x1, x2)

inst_81287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000001fff; valaddr_reg:x3; val_offset:243861*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243861*0 + 3*647*FLEN/8, x4, x1, x2)

inst_81288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000003fff; valaddr_reg:x3; val_offset:243864*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243864*0 + 3*648*FLEN/8, x4, x1, x2)

inst_81289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000007fff; valaddr_reg:x3; val_offset:243867*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243867*0 + 3*649*FLEN/8, x4, x1, x2)

inst_81290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000000ffff; valaddr_reg:x3; val_offset:243870*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243870*0 + 3*650*FLEN/8, x4, x1, x2)

inst_81291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000001ffff; valaddr_reg:x3; val_offset:243873*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243873*0 + 3*651*FLEN/8, x4, x1, x2)

inst_81292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000003ffff; valaddr_reg:x3; val_offset:243876*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243876*0 + 3*652*FLEN/8, x4, x1, x2)

inst_81293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000007ffff; valaddr_reg:x3; val_offset:243879*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243879*0 + 3*653*FLEN/8, x4, x1, x2)

inst_81294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000000fffff; valaddr_reg:x3; val_offset:243882*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243882*0 + 3*654*FLEN/8, x4, x1, x2)

inst_81295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000001fffff; valaddr_reg:x3; val_offset:243885*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243885*0 + 3*655*FLEN/8, x4, x1, x2)

inst_81296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000003fffff; valaddr_reg:x3; val_offset:243888*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243888*0 + 3*656*FLEN/8, x4, x1, x2)

inst_81297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000007fffff; valaddr_reg:x3; val_offset:243891*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243891*0 + 3*657*FLEN/8, x4, x1, x2)

inst_81298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000000ffffff; valaddr_reg:x3; val_offset:243894*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243894*0 + 3*658*FLEN/8, x4, x1, x2)

inst_81299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000001ffffff; valaddr_reg:x3; val_offset:243897*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243897*0 + 3*659*FLEN/8, x4, x1, x2)

inst_81300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000003ffffff; valaddr_reg:x3; val_offset:243900*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243900*0 + 3*660*FLEN/8, x4, x1, x2)

inst_81301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000007ffffff; valaddr_reg:x3; val_offset:243903*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243903*0 + 3*661*FLEN/8, x4, x1, x2)

inst_81302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000000fffffff; valaddr_reg:x3; val_offset:243906*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243906*0 + 3*662*FLEN/8, x4, x1, x2)

inst_81303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000001fffffff; valaddr_reg:x3; val_offset:243909*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243909*0 + 3*663*FLEN/8, x4, x1, x2)

inst_81304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000003fffffff; valaddr_reg:x3; val_offset:243912*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243912*0 + 3*664*FLEN/8, x4, x1, x2)

inst_81305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000007fffffff; valaddr_reg:x3; val_offset:243915*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243915*0 + 3*665*FLEN/8, x4, x1, x2)

inst_81306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00000ffffffff; valaddr_reg:x3; val_offset:243918*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243918*0 + 3*666*FLEN/8, x4, x1, x2)

inst_81307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00001ffffffff; valaddr_reg:x3; val_offset:243921*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243921*0 + 3*667*FLEN/8, x4, x1, x2)

inst_81308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00003ffffffff; valaddr_reg:x3; val_offset:243924*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243924*0 + 3*668*FLEN/8, x4, x1, x2)

inst_81309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00007ffffffff; valaddr_reg:x3; val_offset:243927*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243927*0 + 3*669*FLEN/8, x4, x1, x2)

inst_81310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0000fffffffff; valaddr_reg:x3; val_offset:243930*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243930*0 + 3*670*FLEN/8, x4, x1, x2)

inst_81311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0001fffffffff; valaddr_reg:x3; val_offset:243933*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243933*0 + 3*671*FLEN/8, x4, x1, x2)

inst_81312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0003fffffffff; valaddr_reg:x3; val_offset:243936*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243936*0 + 3*672*FLEN/8, x4, x1, x2)

inst_81313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0007fffffffff; valaddr_reg:x3; val_offset:243939*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243939*0 + 3*673*FLEN/8, x4, x1, x2)

inst_81314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c000ffffffffff; valaddr_reg:x3; val_offset:243942*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243942*0 + 3*674*FLEN/8, x4, x1, x2)

inst_81315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c001ffffffffff; valaddr_reg:x3; val_offset:243945*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243945*0 + 3*675*FLEN/8, x4, x1, x2)

inst_81316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c003ffffffffff; valaddr_reg:x3; val_offset:243948*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243948*0 + 3*676*FLEN/8, x4, x1, x2)

inst_81317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c007ffffffffff; valaddr_reg:x3; val_offset:243951*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243951*0 + 3*677*FLEN/8, x4, x1, x2)

inst_81318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c00fffffffffff; valaddr_reg:x3; val_offset:243954*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243954*0 + 3*678*FLEN/8, x4, x1, x2)

inst_81319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c01fffffffffff; valaddr_reg:x3; val_offset:243957*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243957*0 + 3*679*FLEN/8, x4, x1, x2)

inst_81320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c03fffffffffff; valaddr_reg:x3; val_offset:243960*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243960*0 + 3*680*FLEN/8, x4, x1, x2)

inst_81321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c07fffffffffff; valaddr_reg:x3; val_offset:243963*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243963*0 + 3*681*FLEN/8, x4, x1, x2)

inst_81322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c0ffffffffffff; valaddr_reg:x3; val_offset:243966*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243966*0 + 3*682*FLEN/8, x4, x1, x2)

inst_81323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c1ffffffffffff; valaddr_reg:x3; val_offset:243969*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243969*0 + 3*683*FLEN/8, x4, x1, x2)

inst_81324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c3ffffffffffff; valaddr_reg:x3; val_offset:243972*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243972*0 + 3*684*FLEN/8, x4, x1, x2)

inst_81325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c7ffffffffffff; valaddr_reg:x3; val_offset:243975*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243975*0 + 3*685*FLEN/8, x4, x1, x2)

inst_81326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83c8000000000000; valaddr_reg:x3; val_offset:243978*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243978*0 + 3*686*FLEN/8, x4, x1, x2)

inst_81327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cc000000000000; valaddr_reg:x3; val_offset:243981*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243981*0 + 3*687*FLEN/8, x4, x1, x2)

inst_81328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83ce000000000000; valaddr_reg:x3; val_offset:243984*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243984*0 + 3*688*FLEN/8, x4, x1, x2)

inst_81329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cf000000000000; valaddr_reg:x3; val_offset:243987*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243987*0 + 3*689*FLEN/8, x4, x1, x2)

inst_81330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cf800000000000; valaddr_reg:x3; val_offset:243990*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243990*0 + 3*690*FLEN/8, x4, x1, x2)

inst_81331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfc00000000000; valaddr_reg:x3; val_offset:243993*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243993*0 + 3*691*FLEN/8, x4, x1, x2)

inst_81332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfe00000000000; valaddr_reg:x3; val_offset:243996*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243996*0 + 3*692*FLEN/8, x4, x1, x2)

inst_81333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cff00000000000; valaddr_reg:x3; val_offset:243999*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 243999*0 + 3*693*FLEN/8, x4, x1, x2)

inst_81334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cff80000000000; valaddr_reg:x3; val_offset:244002*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244002*0 + 3*694*FLEN/8, x4, x1, x2)

inst_81335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffc0000000000; valaddr_reg:x3; val_offset:244005*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244005*0 + 3*695*FLEN/8, x4, x1, x2)

inst_81336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffe0000000000; valaddr_reg:x3; val_offset:244008*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244008*0 + 3*696*FLEN/8, x4, x1, x2)

inst_81337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfff0000000000; valaddr_reg:x3; val_offset:244011*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244011*0 + 3*697*FLEN/8, x4, x1, x2)

inst_81338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfff8000000000; valaddr_reg:x3; val_offset:244014*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244014*0 + 3*698*FLEN/8, x4, x1, x2)

inst_81339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffc000000000; valaddr_reg:x3; val_offset:244017*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244017*0 + 3*699*FLEN/8, x4, x1, x2)

inst_81340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffe000000000; valaddr_reg:x3; val_offset:244020*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244020*0 + 3*700*FLEN/8, x4, x1, x2)

inst_81341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffff000000000; valaddr_reg:x3; val_offset:244023*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244023*0 + 3*701*FLEN/8, x4, x1, x2)

inst_81342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffff800000000; valaddr_reg:x3; val_offset:244026*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244026*0 + 3*702*FLEN/8, x4, x1, x2)

inst_81343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffc00000000; valaddr_reg:x3; val_offset:244029*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244029*0 + 3*703*FLEN/8, x4, x1, x2)

inst_81344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffe00000000; valaddr_reg:x3; val_offset:244032*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244032*0 + 3*704*FLEN/8, x4, x1, x2)

inst_81345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffff00000000; valaddr_reg:x3; val_offset:244035*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244035*0 + 3*705*FLEN/8, x4, x1, x2)

inst_81346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffff80000000; valaddr_reg:x3; val_offset:244038*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244038*0 + 3*706*FLEN/8, x4, x1, x2)

inst_81347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffc0000000; valaddr_reg:x3; val_offset:244041*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244041*0 + 3*707*FLEN/8, x4, x1, x2)

inst_81348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffe0000000; valaddr_reg:x3; val_offset:244044*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244044*0 + 3*708*FLEN/8, x4, x1, x2)

inst_81349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffff0000000; valaddr_reg:x3; val_offset:244047*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244047*0 + 3*709*FLEN/8, x4, x1, x2)

inst_81350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffff8000000; valaddr_reg:x3; val_offset:244050*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244050*0 + 3*710*FLEN/8, x4, x1, x2)

inst_81351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffc000000; valaddr_reg:x3; val_offset:244053*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244053*0 + 3*711*FLEN/8, x4, x1, x2)

inst_81352:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffe000000; valaddr_reg:x3; val_offset:244056*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244056*0 + 3*712*FLEN/8, x4, x1, x2)

inst_81353:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffff000000; valaddr_reg:x3; val_offset:244059*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244059*0 + 3*713*FLEN/8, x4, x1, x2)

inst_81354:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffff800000; valaddr_reg:x3; val_offset:244062*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244062*0 + 3*714*FLEN/8, x4, x1, x2)

inst_81355:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffc00000; valaddr_reg:x3; val_offset:244065*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244065*0 + 3*715*FLEN/8, x4, x1, x2)

inst_81356:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffe00000; valaddr_reg:x3; val_offset:244068*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244068*0 + 3*716*FLEN/8, x4, x1, x2)

inst_81357:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffff00000; valaddr_reg:x3; val_offset:244071*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244071*0 + 3*717*FLEN/8, x4, x1, x2)

inst_81358:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffff80000; valaddr_reg:x3; val_offset:244074*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244074*0 + 3*718*FLEN/8, x4, x1, x2)

inst_81359:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffc0000; valaddr_reg:x3; val_offset:244077*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244077*0 + 3*719*FLEN/8, x4, x1, x2)

inst_81360:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffe0000; valaddr_reg:x3; val_offset:244080*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244080*0 + 3*720*FLEN/8, x4, x1, x2)

inst_81361:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffff0000; valaddr_reg:x3; val_offset:244083*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244083*0 + 3*721*FLEN/8, x4, x1, x2)

inst_81362:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffff8000; valaddr_reg:x3; val_offset:244086*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244086*0 + 3*722*FLEN/8, x4, x1, x2)

inst_81363:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffffc000; valaddr_reg:x3; val_offset:244089*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244089*0 + 3*723*FLEN/8, x4, x1, x2)

inst_81364:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffffe000; valaddr_reg:x3; val_offset:244092*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244092*0 + 3*724*FLEN/8, x4, x1, x2)

inst_81365:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffff000; valaddr_reg:x3; val_offset:244095*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244095*0 + 3*725*FLEN/8, x4, x1, x2)

inst_81366:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffff800; valaddr_reg:x3; val_offset:244098*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244098*0 + 3*726*FLEN/8, x4, x1, x2)

inst_81367:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffffc00; valaddr_reg:x3; val_offset:244101*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244101*0 + 3*727*FLEN/8, x4, x1, x2)

inst_81368:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffffe00; valaddr_reg:x3; val_offset:244104*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244104*0 + 3*728*FLEN/8, x4, x1, x2)

inst_81369:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffffff00; valaddr_reg:x3; val_offset:244107*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244107*0 + 3*729*FLEN/8, x4, x1, x2)

inst_81370:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffffff80; valaddr_reg:x3; val_offset:244110*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244110*0 + 3*730*FLEN/8, x4, x1, x2)

inst_81371:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffffffc0; valaddr_reg:x3; val_offset:244113*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244113*0 + 3*731*FLEN/8, x4, x1, x2)

inst_81372:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffffffe0; valaddr_reg:x3; val_offset:244116*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244116*0 + 3*732*FLEN/8, x4, x1, x2)

inst_81373:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffffff0; valaddr_reg:x3; val_offset:244119*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244119*0 + 3*733*FLEN/8, x4, x1, x2)

inst_81374:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffffff8; valaddr_reg:x3; val_offset:244122*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244122*0 + 3*734*FLEN/8, x4, x1, x2)

inst_81375:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffffffc; valaddr_reg:x3; val_offset:244125*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244125*0 + 3*735*FLEN/8, x4, x1, x2)

inst_81376:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cffffffffffffe; valaddr_reg:x3; val_offset:244128*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244128*0 + 3*736*FLEN/8, x4, x1, x2)

inst_81377:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x99fb7503e8d08 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x03c and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa99fb7503e8d08; op2val:0x8000;
op3val:0x83cfffffffffffff; valaddr_reg:x3; val_offset:244131*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244131*0 + 3*737*FLEN/8, x4, x1, x2)

inst_81378:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:244134*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244134*0 + 3*738*FLEN/8, x4, x1, x2)

inst_81379:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:244137*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244137*0 + 3*739*FLEN/8, x4, x1, x2)

inst_81380:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:244140*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244140*0 + 3*740*FLEN/8, x4, x1, x2)

inst_81381:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:244143*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244143*0 + 3*741*FLEN/8, x4, x1, x2)

inst_81382:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:244146*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244146*0 + 3*742*FLEN/8, x4, x1, x2)

inst_81383:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:244149*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244149*0 + 3*743*FLEN/8, x4, x1, x2)

inst_81384:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:244152*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244152*0 + 3*744*FLEN/8, x4, x1, x2)

inst_81385:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:244155*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244155*0 + 3*745*FLEN/8, x4, x1, x2)

inst_81386:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:244158*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244158*0 + 3*746*FLEN/8, x4, x1, x2)

inst_81387:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:244161*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244161*0 + 3*747*FLEN/8, x4, x1, x2)

inst_81388:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:244164*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244164*0 + 3*748*FLEN/8, x4, x1, x2)

inst_81389:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:244167*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244167*0 + 3*749*FLEN/8, x4, x1, x2)

inst_81390:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:244170*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244170*0 + 3*750*FLEN/8, x4, x1, x2)

inst_81391:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:244173*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244173*0 + 3*751*FLEN/8, x4, x1, x2)

inst_81392:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:244176*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244176*0 + 3*752*FLEN/8, x4, x1, x2)

inst_81393:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:244179*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244179*0 + 3*753*FLEN/8, x4, x1, x2)

inst_81394:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:244182*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244182*0 + 3*754*FLEN/8, x4, x1, x2)

inst_81395:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:244185*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244185*0 + 3*755*FLEN/8, x4, x1, x2)

inst_81396:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:244188*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244188*0 + 3*756*FLEN/8, x4, x1, x2)

inst_81397:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:244191*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244191*0 + 3*757*FLEN/8, x4, x1, x2)

inst_81398:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:244194*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244194*0 + 3*758*FLEN/8, x4, x1, x2)

inst_81399:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:244197*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244197*0 + 3*759*FLEN/8, x4, x1, x2)

inst_81400:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000000000; valaddr_reg:x3; val_offset:244200*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244200*0 + 3*760*FLEN/8, x4, x1, x2)

inst_81401:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000000001; valaddr_reg:x3; val_offset:244203*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244203*0 + 3*761*FLEN/8, x4, x1, x2)

inst_81402:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000000003; valaddr_reg:x3; val_offset:244206*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244206*0 + 3*762*FLEN/8, x4, x1, x2)

inst_81403:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e0000000000007; valaddr_reg:x3; val_offset:244209*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244209*0 + 3*763*FLEN/8, x4, x1, x2)

inst_81404:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000000000f; valaddr_reg:x3; val_offset:244212*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244212*0 + 3*764*FLEN/8, x4, x1, x2)

inst_81405:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000000001f; valaddr_reg:x3; val_offset:244215*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244215*0 + 3*765*FLEN/8, x4, x1, x2)

inst_81406:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000000003f; valaddr_reg:x3; val_offset:244218*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244218*0 + 3*766*FLEN/8, x4, x1, x2)

inst_81407:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x9b500afdec2de and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x02e and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa9b500afdec2de; op2val:0x0;
op3val:0x2e000000000007f; valaddr_reg:x3; val_offset:244221*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 244221*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711744,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711745,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711747,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711751,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711759,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711775,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711807,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711871,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711999,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151712255,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151712767,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151713791,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151715839,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151719935,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151728127,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151744511,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151777279,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151842815,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151973887,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376152236031,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376152760319,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376153808895,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376155906047,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376160100351,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376168488959,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376185266175,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376218820607,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376285929471,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376420147199,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376688582655,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230377225453567,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230378299195391,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230380446679039,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230384741646335,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230393331580927,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230410511450111,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230444871188479,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230513590665215,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230651029618687,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230925907525631,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288231475663339519,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288232575174967295,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288234774198222847,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288239172244733951,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288247968337756159,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288265560523800575,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288300744895889407,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288371113640067071,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288511851128422399,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288793326105133055,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(289356276058554367,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(290482175965396991,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(290482175965396992,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(291608075872239616,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292171025825660928,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292452500802371584,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292593238290726912,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292663607034904576,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292698791406993408,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292716383593037824,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292725179686060032,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292729577732571136,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292731776755826688,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292732876267454464,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733426023268352,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733700901175296,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733838340128768,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733907059605504,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733941419343872,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733958599213056,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733967189147648,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733971484114944,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733973631598592,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733974705340416,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975242211328,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975510646784,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975644864512,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975711973376,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975745527808,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975762305024,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975770693632,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975774887936,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975776985088,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778033664,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778557952,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778820096,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778951168,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779016704,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779049472,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779065856,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779074048,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779078144,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779080192,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081216,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081728,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081984,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082112,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082176,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082208,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082224,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082232,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082236,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082238,64,FLEN)
NAN_BOXED(6893190989960848261,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082239,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940736,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940737,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940739,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940743,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940751,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940767,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940799,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940863,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517940991,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517941247,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517941759,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517942783,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517944831,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517948927,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517957119,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457517973503,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457518006271,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457518071807,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457518202879,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457518465023,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457518989311,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457520037887,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457522135039,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457526329343,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457534717951,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457551495167,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457585049599,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457652158463,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036457786376191,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036458054811647,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036458591682559,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036459665424383,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036461812908031,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036466107875327,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036474697809919,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036491877679103,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036526237417471,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036594956894207,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808036732395847679,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808037007273754623,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808037557029568511,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808038656541196287,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808040855564451839,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808045253610962943,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808054049703985151,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808071641890029567,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808106826262118399,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808177195006296063,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808317932494651391,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13808599407471362047,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13809162357424783359,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13810288257331625983,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13810288257331625984,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13811414157238468608,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13811977107191889920,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812258582168600576,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812399319656955904,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812469688401133568,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812504872773222400,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812522464959266816,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812531261052289024,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812535659098800128,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812537858122055680,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812538957633683456,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812539507389497344,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812539782267404288,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812539919706357760,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812539988425834496,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540022785572864,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540039965442048,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540048555376640,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540052850343936,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540054997827584,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540056071569408,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540056608440320,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540056876875776,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057011093504,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057078202368,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057111756800,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057128534016,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057136922624,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057141116928,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057143214080,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057144262656,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057144786944,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145049088,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145180160,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145245696,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145278464,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145294848,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145303040,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145307136,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145309184,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145310208,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145310720,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145310976,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145311104,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145311168,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145311200,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145311216,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145311224,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145311228,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145311230,64,FLEN)
NAN_BOXED(6893192110922856748,64,FLEN)
NAN_BOXED(11512340235927543854,64,FLEN)
NAN_BOXED(13812540057145311231,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528445952,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528445953,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528445955,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528445959,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528445967,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528445983,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528446015,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528446079,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528446207,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528446463,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528446975,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528447999,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528450047,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528454143,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528462335,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528478719,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528511487,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528577023,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528708095,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195528970239,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195529494527,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195530543103,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195532640255,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195536834559,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195545223167,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195562000383,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195595554815,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195662663679,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043195796881407,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043196065316863,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043196602187775,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043197675929599,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043199823413247,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043204118380543,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043212708315135,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043229888184319,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043264247922687,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043332967399423,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043470406352895,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54043745284259839,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54044295040073727,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54045394551701503,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54047593574957055,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54051991621468159,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54060787714490367,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54078379900534783,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54113564272623615,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54183933016801279,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54324670505156607,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(54606145481867263,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(55169095435288575,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(56294995342131199,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(56294995342131200,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(57420895248973824,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(57983845202395136,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58265320179105792,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58406057667461120,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58476426411638784,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58511610783727616,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58529202969772032,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58537999062794240,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58542397109305344,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58544596132560896,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58545695644188672,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546245400002560,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546520277909504,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546657716862976,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546726436339712,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546760796078080,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546777975947264,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546786565881856,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546790860849152,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546793008332800,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546794082074624,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546794618945536,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546794887380992,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795021598720,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795088707584,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795122262016,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795139039232,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795147427840,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795151622144,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795153719296,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795154767872,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155292160,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155554304,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155685376,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155750912,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155783680,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155800064,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155808256,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155812352,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155814400,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155815424,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155815936,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816192,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816320,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816384,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816416,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816432,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816440,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816444,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816446,64,FLEN)
NAN_BOXED(6893204208518988986,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816447,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229760,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229761,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229763,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229767,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229775,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229791,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229823,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229887,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642230015,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642230271,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642230783,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642231807,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642233855,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642237951,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642246143,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642262527,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642295295,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642360831,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642491903,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642754047,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977643278335,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977644326911,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977646424063,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977650618367,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977659006975,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977675784191,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977709338623,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977776447487,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977910665215,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215978179100671,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215978715971583,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215979789713407,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215981937197055,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215986232164351,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215994822098943,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270216012001968127,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270216046361706495,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270216115081183231,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270216252520136703,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270216527398043647,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270217077153857535,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270218176665485311,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270220375688740863,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270224773735251967,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270233569828274175,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270251162014318591,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270286346386407423,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270356715130585087,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270497452618940415,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270778927595651071,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(271341877549072383,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(272467777455915007,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(272467777455915008,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(273593677362757632,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274156627316178944,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274438102292889600,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274578839781244928,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274649208525422592,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274684392897511424,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274701985083555840,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274710781176578048,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274715179223089152,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274717378246344704,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274718477757972480,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719027513786368,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719302391693312,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719439830646784,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719508550123520,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719542909861888,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719560089731072,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719568679665664,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719572974632960,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719575122116608,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719576195858432,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719576732729344,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577001164800,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577135382528,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577202491392,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577236045824,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577252823040,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577261211648,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577265405952,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577267503104,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577268551680,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269075968,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269338112,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269469184,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269534720,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269567488,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269583872,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269592064,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269596160,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269598208,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269599232,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269599744,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600000,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600128,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600192,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600224,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600240,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600248,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600252,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600254,64,FLEN)
NAN_BOXED(6893204429532146045,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(274719577269600255,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014016,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014017,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014019,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014023,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014031,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014047,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014079,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014143,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014271,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861014527,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861015039,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861016063,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861018111,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861022207,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861030399,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861046783,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861079551,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861145087,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861276159,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228861538303,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228862062591,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228863111167,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228865208319,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228869402623,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228877791231,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228894568447,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228928122879,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585228995231743,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585229129449471,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585229397884927,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585229934755839,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585231008497663,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585233155981311,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585237450948607,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585246040883199,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585263220752383,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585297580490751,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585366299967487,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585503738920959,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485585778616827903,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485586328372641791,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485587427884269567,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485589626907525119,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485594024954036223,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485602821047058431,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485620413233102847,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485655597605191679,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485725966349369343,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4485866703837724671,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4486148178814435327,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4486711128767856639,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4487837028674699263,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4487837028674699264,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4488962928581541888,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4489525878534963200,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4489807353511673856,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4489948091000029184,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490018459744206848,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490053644116295680,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490071236302340096,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490080032395362304,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490084430441873408,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490086629465128960,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490087728976756736,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088278732570624,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088553610477568,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088691049431040,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088759768907776,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088794128646144,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088811308515328,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088819898449920,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088824193417216,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088826340900864,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088827414642688,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088827951513600,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828219949056,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828354166784,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828421275648,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828454830080,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828471607296,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828479995904,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828484190208,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828486287360,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828487335936,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828487860224,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488122368,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488253440,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488318976,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488351744,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488368128,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488376320,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488380416,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488382464,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488383488,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384000,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384256,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384384,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384448,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384480,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384496,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384504,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384508,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384510,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4490088828488384511,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6893208009400081299,64,FLEN)
NAN_BOXED(2320480942846266844,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005568,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005569,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005571,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005575,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005583,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005599,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005631,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005695,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497005823,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497006079,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497006591,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497007615,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497009663,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497013759,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497021951,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497038335,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497071103,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497136639,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497267711,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014497529855,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014498054143,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014499102719,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014501199871,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014505394175,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014513782783,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014530559999,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014564114431,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014631223295,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588014765441023,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588015033876479,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588015570747391,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588016644489215,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588018791972863,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588023086940159,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588031676874751,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588048856743935,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588083216482303,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588151935959039,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588289374912511,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493588564252819455,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493589114008633343,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493590213520261119,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493592412543516671,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493596810590027775,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493605606683049983,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493623198869094399,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493658383241183231,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493728751985360895,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9493869489473716223,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9494150964450426879,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9494713914403848191,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9495839814310690815,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9495839814310690816,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9496965714217533440,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497528664170954752,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497810139147665408,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9497950876636020736,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498021245380198400,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498056429752287232,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498074021938331648,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498082818031353856,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498087216077864960,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498089415101120512,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498090514612748288,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091064368562176,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091339246469120,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091476685422592,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091545404899328,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091579764637696,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091596944506880,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091605534441472,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091609829408768,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091611976892416,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613050634240,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613587505152,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613855940608,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091613990158336,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614057267200,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614090821632,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614107598848,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614115987456,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614120181760,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614122278912,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614123327488,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614123851776,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124113920,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124244992,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124310528,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124343296,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124359680,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124367872,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124371968,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124374016,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375040,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375552,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375808,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124375936,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376000,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376032,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376048,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376056,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376060,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376062,64,FLEN)
NAN_BOXED(6893216314341362952,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9498091614124376063,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859042816,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859042817,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859042819,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859042823,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859042831,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859042847,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859042879,64,FLEN)
NAN_BOXED(6893239719222493918,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(207165582859042943,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
