
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_69888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a00fffffffffff; valaddr_reg:x3; val_offset:209664*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209664*0 + 3*0*FLEN/8, x4, x1, x2)

inst_69889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a01fffffffffff; valaddr_reg:x3; val_offset:209667*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209667*0 + 3*1*FLEN/8, x4, x1, x2)

inst_69890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a03fffffffffff; valaddr_reg:x3; val_offset:209670*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209670*0 + 3*2*FLEN/8, x4, x1, x2)

inst_69891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a07fffffffffff; valaddr_reg:x3; val_offset:209673*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209673*0 + 3*3*FLEN/8, x4, x1, x2)

inst_69892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a0ffffffffffff; valaddr_reg:x3; val_offset:209676*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209676*0 + 3*4*FLEN/8, x4, x1, x2)

inst_69893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a1ffffffffffff; valaddr_reg:x3; val_offset:209679*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209679*0 + 3*5*FLEN/8, x4, x1, x2)

inst_69894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a3ffffffffffff; valaddr_reg:x3; val_offset:209682*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209682*0 + 3*6*FLEN/8, x4, x1, x2)

inst_69895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a7ffffffffffff; valaddr_reg:x3; val_offset:209685*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209685*0 + 3*7*FLEN/8, x4, x1, x2)

inst_69896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81a8000000000000; valaddr_reg:x3; val_offset:209688*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209688*0 + 3*8*FLEN/8, x4, x1, x2)

inst_69897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81ac000000000000; valaddr_reg:x3; val_offset:209691*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209691*0 + 3*9*FLEN/8, x4, x1, x2)

inst_69898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81ae000000000000; valaddr_reg:x3; val_offset:209694*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209694*0 + 3*10*FLEN/8, x4, x1, x2)

inst_69899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81af000000000000; valaddr_reg:x3; val_offset:209697*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209697*0 + 3*11*FLEN/8, x4, x1, x2)

inst_69900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81af800000000000; valaddr_reg:x3; val_offset:209700*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209700*0 + 3*12*FLEN/8, x4, x1, x2)

inst_69901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afc00000000000; valaddr_reg:x3; val_offset:209703*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209703*0 + 3*13*FLEN/8, x4, x1, x2)

inst_69902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afe00000000000; valaddr_reg:x3; val_offset:209706*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209706*0 + 3*14*FLEN/8, x4, x1, x2)

inst_69903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81aff00000000000; valaddr_reg:x3; val_offset:209709*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209709*0 + 3*15*FLEN/8, x4, x1, x2)

inst_69904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81aff80000000000; valaddr_reg:x3; val_offset:209712*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209712*0 + 3*16*FLEN/8, x4, x1, x2)

inst_69905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affc0000000000; valaddr_reg:x3; val_offset:209715*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209715*0 + 3*17*FLEN/8, x4, x1, x2)

inst_69906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affe0000000000; valaddr_reg:x3; val_offset:209718*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209718*0 + 3*18*FLEN/8, x4, x1, x2)

inst_69907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afff0000000000; valaddr_reg:x3; val_offset:209721*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209721*0 + 3*19*FLEN/8, x4, x1, x2)

inst_69908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afff8000000000; valaddr_reg:x3; val_offset:209724*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209724*0 + 3*20*FLEN/8, x4, x1, x2)

inst_69909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffc000000000; valaddr_reg:x3; val_offset:209727*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209727*0 + 3*21*FLEN/8, x4, x1, x2)

inst_69910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffe000000000; valaddr_reg:x3; val_offset:209730*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209730*0 + 3*22*FLEN/8, x4, x1, x2)

inst_69911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affff000000000; valaddr_reg:x3; val_offset:209733*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209733*0 + 3*23*FLEN/8, x4, x1, x2)

inst_69912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affff800000000; valaddr_reg:x3; val_offset:209736*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209736*0 + 3*24*FLEN/8, x4, x1, x2)

inst_69913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffc00000000; valaddr_reg:x3; val_offset:209739*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209739*0 + 3*25*FLEN/8, x4, x1, x2)

inst_69914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffe00000000; valaddr_reg:x3; val_offset:209742*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209742*0 + 3*26*FLEN/8, x4, x1, x2)

inst_69915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffff00000000; valaddr_reg:x3; val_offset:209745*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209745*0 + 3*27*FLEN/8, x4, x1, x2)

inst_69916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffff80000000; valaddr_reg:x3; val_offset:209748*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209748*0 + 3*28*FLEN/8, x4, x1, x2)

inst_69917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffc0000000; valaddr_reg:x3; val_offset:209751*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209751*0 + 3*29*FLEN/8, x4, x1, x2)

inst_69918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffe0000000; valaddr_reg:x3; val_offset:209754*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209754*0 + 3*30*FLEN/8, x4, x1, x2)

inst_69919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffff0000000; valaddr_reg:x3; val_offset:209757*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209757*0 + 3*31*FLEN/8, x4, x1, x2)

inst_69920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffff8000000; valaddr_reg:x3; val_offset:209760*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209760*0 + 3*32*FLEN/8, x4, x1, x2)

inst_69921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffc000000; valaddr_reg:x3; val_offset:209763*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209763*0 + 3*33*FLEN/8, x4, x1, x2)

inst_69922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffe000000; valaddr_reg:x3; val_offset:209766*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209766*0 + 3*34*FLEN/8, x4, x1, x2)

inst_69923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffff000000; valaddr_reg:x3; val_offset:209769*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209769*0 + 3*35*FLEN/8, x4, x1, x2)

inst_69924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffff800000; valaddr_reg:x3; val_offset:209772*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209772*0 + 3*36*FLEN/8, x4, x1, x2)

inst_69925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffc00000; valaddr_reg:x3; val_offset:209775*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209775*0 + 3*37*FLEN/8, x4, x1, x2)

inst_69926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffe00000; valaddr_reg:x3; val_offset:209778*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209778*0 + 3*38*FLEN/8, x4, x1, x2)

inst_69927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffff00000; valaddr_reg:x3; val_offset:209781*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209781*0 + 3*39*FLEN/8, x4, x1, x2)

inst_69928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffff80000; valaddr_reg:x3; val_offset:209784*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209784*0 + 3*40*FLEN/8, x4, x1, x2)

inst_69929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffc0000; valaddr_reg:x3; val_offset:209787*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209787*0 + 3*41*FLEN/8, x4, x1, x2)

inst_69930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffe0000; valaddr_reg:x3; val_offset:209790*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209790*0 + 3*42*FLEN/8, x4, x1, x2)

inst_69931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffff0000; valaddr_reg:x3; val_offset:209793*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209793*0 + 3*43*FLEN/8, x4, x1, x2)

inst_69932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffff8000; valaddr_reg:x3; val_offset:209796*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209796*0 + 3*44*FLEN/8, x4, x1, x2)

inst_69933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffffc000; valaddr_reg:x3; val_offset:209799*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209799*0 + 3*45*FLEN/8, x4, x1, x2)

inst_69934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffffe000; valaddr_reg:x3; val_offset:209802*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209802*0 + 3*46*FLEN/8, x4, x1, x2)

inst_69935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffff000; valaddr_reg:x3; val_offset:209805*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209805*0 + 3*47*FLEN/8, x4, x1, x2)

inst_69936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffff800; valaddr_reg:x3; val_offset:209808*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209808*0 + 3*48*FLEN/8, x4, x1, x2)

inst_69937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffffc00; valaddr_reg:x3; val_offset:209811*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209811*0 + 3*49*FLEN/8, x4, x1, x2)

inst_69938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffffe00; valaddr_reg:x3; val_offset:209814*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209814*0 + 3*50*FLEN/8, x4, x1, x2)

inst_69939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffffff00; valaddr_reg:x3; val_offset:209817*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209817*0 + 3*51*FLEN/8, x4, x1, x2)

inst_69940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffffff80; valaddr_reg:x3; val_offset:209820*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209820*0 + 3*52*FLEN/8, x4, x1, x2)

inst_69941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffffffc0; valaddr_reg:x3; val_offset:209823*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209823*0 + 3*53*FLEN/8, x4, x1, x2)

inst_69942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffffffe0; valaddr_reg:x3; val_offset:209826*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209826*0 + 3*54*FLEN/8, x4, x1, x2)

inst_69943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffffff0; valaddr_reg:x3; val_offset:209829*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209829*0 + 3*55*FLEN/8, x4, x1, x2)

inst_69944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffffff8; valaddr_reg:x3; val_offset:209832*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209832*0 + 3*56*FLEN/8, x4, x1, x2)

inst_69945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffffffc; valaddr_reg:x3; val_offset:209835*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209835*0 + 3*57*FLEN/8, x4, x1, x2)

inst_69946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81affffffffffffe; valaddr_reg:x3; val_offset:209838*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209838*0 + 3*58*FLEN/8, x4, x1, x2)

inst_69947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x64e15e87b6907 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01a and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa64e15e87b6907; op2val:0x8000;
op3val:0x81afffffffffffff; valaddr_reg:x3; val_offset:209841*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209841*0 + 3*59*FLEN/8, x4, x1, x2)

inst_69948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:209844*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209844*0 + 3*60*FLEN/8, x4, x1, x2)

inst_69949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:209847*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209847*0 + 3*61*FLEN/8, x4, x1, x2)

inst_69950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:209850*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209850*0 + 3*62*FLEN/8, x4, x1, x2)

inst_69951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:209853*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209853*0 + 3*63*FLEN/8, x4, x1, x2)

inst_69952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:209856*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209856*0 + 3*64*FLEN/8, x4, x1, x2)

inst_69953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:209859*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209859*0 + 3*65*FLEN/8, x4, x1, x2)

inst_69954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:209862*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209862*0 + 3*66*FLEN/8, x4, x1, x2)

inst_69955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:209865*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209865*0 + 3*67*FLEN/8, x4, x1, x2)

inst_69956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:209868*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209868*0 + 3*68*FLEN/8, x4, x1, x2)

inst_69957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:209871*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209871*0 + 3*69*FLEN/8, x4, x1, x2)

inst_69958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:209874*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209874*0 + 3*70*FLEN/8, x4, x1, x2)

inst_69959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:209877*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209877*0 + 3*71*FLEN/8, x4, x1, x2)

inst_69960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:209880*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209880*0 + 3*72*FLEN/8, x4, x1, x2)

inst_69961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:209883*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209883*0 + 3*73*FLEN/8, x4, x1, x2)

inst_69962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:209886*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209886*0 + 3*74*FLEN/8, x4, x1, x2)

inst_69963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:209889*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209889*0 + 3*75*FLEN/8, x4, x1, x2)

inst_69964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:209892*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209892*0 + 3*76*FLEN/8, x4, x1, x2)

inst_69965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:209895*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209895*0 + 3*77*FLEN/8, x4, x1, x2)

inst_69966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:209898*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209898*0 + 3*78*FLEN/8, x4, x1, x2)

inst_69967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:209901*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209901*0 + 3*79*FLEN/8, x4, x1, x2)

inst_69968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:209904*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209904*0 + 3*80*FLEN/8, x4, x1, x2)

inst_69969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:209907*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209907*0 + 3*81*FLEN/8, x4, x1, x2)

inst_69970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000000000; valaddr_reg:x3; val_offset:209910*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209910*0 + 3*82*FLEN/8, x4, x1, x2)

inst_69971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000000001; valaddr_reg:x3; val_offset:209913*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209913*0 + 3*83*FLEN/8, x4, x1, x2)

inst_69972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000000003; valaddr_reg:x3; val_offset:209916*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209916*0 + 3*84*FLEN/8, x4, x1, x2)

inst_69973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000000007; valaddr_reg:x3; val_offset:209919*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209919*0 + 3*85*FLEN/8, x4, x1, x2)

inst_69974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000000000f; valaddr_reg:x3; val_offset:209922*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209922*0 + 3*86*FLEN/8, x4, x1, x2)

inst_69975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000000001f; valaddr_reg:x3; val_offset:209925*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209925*0 + 3*87*FLEN/8, x4, x1, x2)

inst_69976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000000003f; valaddr_reg:x3; val_offset:209928*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209928*0 + 3*88*FLEN/8, x4, x1, x2)

inst_69977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000000007f; valaddr_reg:x3; val_offset:209931*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209931*0 + 3*89*FLEN/8, x4, x1, x2)

inst_69978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000000000ff; valaddr_reg:x3; val_offset:209934*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209934*0 + 3*90*FLEN/8, x4, x1, x2)

inst_69979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000000001ff; valaddr_reg:x3; val_offset:209937*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209937*0 + 3*91*FLEN/8, x4, x1, x2)

inst_69980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000000003ff; valaddr_reg:x3; val_offset:209940*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209940*0 + 3*92*FLEN/8, x4, x1, x2)

inst_69981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000000007ff; valaddr_reg:x3; val_offset:209943*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209943*0 + 3*93*FLEN/8, x4, x1, x2)

inst_69982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000000fff; valaddr_reg:x3; val_offset:209946*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209946*0 + 3*94*FLEN/8, x4, x1, x2)

inst_69983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000001fff; valaddr_reg:x3; val_offset:209949*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209949*0 + 3*95*FLEN/8, x4, x1, x2)

inst_69984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000003fff; valaddr_reg:x3; val_offset:209952*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209952*0 + 3*96*FLEN/8, x4, x1, x2)

inst_69985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000007fff; valaddr_reg:x3; val_offset:209955*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209955*0 + 3*97*FLEN/8, x4, x1, x2)

inst_69986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000000ffff; valaddr_reg:x3; val_offset:209958*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209958*0 + 3*98*FLEN/8, x4, x1, x2)

inst_69987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000001ffff; valaddr_reg:x3; val_offset:209961*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209961*0 + 3*99*FLEN/8, x4, x1, x2)

inst_69988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000003ffff; valaddr_reg:x3; val_offset:209964*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209964*0 + 3*100*FLEN/8, x4, x1, x2)

inst_69989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000007ffff; valaddr_reg:x3; val_offset:209967*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209967*0 + 3*101*FLEN/8, x4, x1, x2)

inst_69990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000000fffff; valaddr_reg:x3; val_offset:209970*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209970*0 + 3*102*FLEN/8, x4, x1, x2)

inst_69991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000001fffff; valaddr_reg:x3; val_offset:209973*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209973*0 + 3*103*FLEN/8, x4, x1, x2)

inst_69992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000003fffff; valaddr_reg:x3; val_offset:209976*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209976*0 + 3*104*FLEN/8, x4, x1, x2)

inst_69993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000007fffff; valaddr_reg:x3; val_offset:209979*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209979*0 + 3*105*FLEN/8, x4, x1, x2)

inst_69994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000000ffffff; valaddr_reg:x3; val_offset:209982*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209982*0 + 3*106*FLEN/8, x4, x1, x2)

inst_69995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000001ffffff; valaddr_reg:x3; val_offset:209985*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209985*0 + 3*107*FLEN/8, x4, x1, x2)

inst_69996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000003ffffff; valaddr_reg:x3; val_offset:209988*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209988*0 + 3*108*FLEN/8, x4, x1, x2)

inst_69997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000007ffffff; valaddr_reg:x3; val_offset:209991*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209991*0 + 3*109*FLEN/8, x4, x1, x2)

inst_69998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000000fffffff; valaddr_reg:x3; val_offset:209994*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209994*0 + 3*110*FLEN/8, x4, x1, x2)

inst_69999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000001fffffff; valaddr_reg:x3; val_offset:209997*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 209997*0 + 3*111*FLEN/8, x4, x1, x2)

inst_70000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000003fffffff; valaddr_reg:x3; val_offset:210000*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210000*0 + 3*112*FLEN/8, x4, x1, x2)

inst_70001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000007fffffff; valaddr_reg:x3; val_offset:210003*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210003*0 + 3*113*FLEN/8, x4, x1, x2)

inst_70002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900000ffffffff; valaddr_reg:x3; val_offset:210006*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210006*0 + 3*114*FLEN/8, x4, x1, x2)

inst_70003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900001ffffffff; valaddr_reg:x3; val_offset:210009*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210009*0 + 3*115*FLEN/8, x4, x1, x2)

inst_70004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900003ffffffff; valaddr_reg:x3; val_offset:210012*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210012*0 + 3*116*FLEN/8, x4, x1, x2)

inst_70005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900007ffffffff; valaddr_reg:x3; val_offset:210015*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210015*0 + 3*117*FLEN/8, x4, x1, x2)

inst_70006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290000fffffffff; valaddr_reg:x3; val_offset:210018*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210018*0 + 3*118*FLEN/8, x4, x1, x2)

inst_70007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290001fffffffff; valaddr_reg:x3; val_offset:210021*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210021*0 + 3*119*FLEN/8, x4, x1, x2)

inst_70008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290003fffffffff; valaddr_reg:x3; val_offset:210024*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210024*0 + 3*120*FLEN/8, x4, x1, x2)

inst_70009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290007fffffffff; valaddr_reg:x3; val_offset:210027*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210027*0 + 3*121*FLEN/8, x4, x1, x2)

inst_70010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829000ffffffffff; valaddr_reg:x3; val_offset:210030*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210030*0 + 3*122*FLEN/8, x4, x1, x2)

inst_70011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829001ffffffffff; valaddr_reg:x3; val_offset:210033*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210033*0 + 3*123*FLEN/8, x4, x1, x2)

inst_70012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829003ffffffffff; valaddr_reg:x3; val_offset:210036*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210036*0 + 3*124*FLEN/8, x4, x1, x2)

inst_70013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829007ffffffffff; valaddr_reg:x3; val_offset:210039*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210039*0 + 3*125*FLEN/8, x4, x1, x2)

inst_70014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82900fffffffffff; valaddr_reg:x3; val_offset:210042*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210042*0 + 3*126*FLEN/8, x4, x1, x2)

inst_70015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82901fffffffffff; valaddr_reg:x3; val_offset:210045*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210045*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_70016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82903fffffffffff; valaddr_reg:x3; val_offset:210048*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210048*0 + 3*128*FLEN/8, x4, x1, x2)

inst_70017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x82907fffffffffff; valaddr_reg:x3; val_offset:210051*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210051*0 + 3*129*FLEN/8, x4, x1, x2)

inst_70018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8290ffffffffffff; valaddr_reg:x3; val_offset:210054*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210054*0 + 3*130*FLEN/8, x4, x1, x2)

inst_70019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8291ffffffffffff; valaddr_reg:x3; val_offset:210057*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210057*0 + 3*131*FLEN/8, x4, x1, x2)

inst_70020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8293ffffffffffff; valaddr_reg:x3; val_offset:210060*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210060*0 + 3*132*FLEN/8, x4, x1, x2)

inst_70021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8297ffffffffffff; valaddr_reg:x3; val_offset:210063*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210063*0 + 3*133*FLEN/8, x4, x1, x2)

inst_70022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x8298000000000000; valaddr_reg:x3; val_offset:210066*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210066*0 + 3*134*FLEN/8, x4, x1, x2)

inst_70023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829c000000000000; valaddr_reg:x3; val_offset:210069*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210069*0 + 3*135*FLEN/8, x4, x1, x2)

inst_70024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829e000000000000; valaddr_reg:x3; val_offset:210072*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210072*0 + 3*136*FLEN/8, x4, x1, x2)

inst_70025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829f000000000000; valaddr_reg:x3; val_offset:210075*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210075*0 + 3*137*FLEN/8, x4, x1, x2)

inst_70026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829f800000000000; valaddr_reg:x3; val_offset:210078*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210078*0 + 3*138*FLEN/8, x4, x1, x2)

inst_70027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fc00000000000; valaddr_reg:x3; val_offset:210081*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210081*0 + 3*139*FLEN/8, x4, x1, x2)

inst_70028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fe00000000000; valaddr_reg:x3; val_offset:210084*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210084*0 + 3*140*FLEN/8, x4, x1, x2)

inst_70029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ff00000000000; valaddr_reg:x3; val_offset:210087*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210087*0 + 3*141*FLEN/8, x4, x1, x2)

inst_70030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ff80000000000; valaddr_reg:x3; val_offset:210090*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210090*0 + 3*142*FLEN/8, x4, x1, x2)

inst_70031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffc0000000000; valaddr_reg:x3; val_offset:210093*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210093*0 + 3*143*FLEN/8, x4, x1, x2)

inst_70032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffe0000000000; valaddr_reg:x3; val_offset:210096*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210096*0 + 3*144*FLEN/8, x4, x1, x2)

inst_70033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fff0000000000; valaddr_reg:x3; val_offset:210099*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210099*0 + 3*145*FLEN/8, x4, x1, x2)

inst_70034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fff8000000000; valaddr_reg:x3; val_offset:210102*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210102*0 + 3*146*FLEN/8, x4, x1, x2)

inst_70035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffc000000000; valaddr_reg:x3; val_offset:210105*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210105*0 + 3*147*FLEN/8, x4, x1, x2)

inst_70036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffe000000000; valaddr_reg:x3; val_offset:210108*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210108*0 + 3*148*FLEN/8, x4, x1, x2)

inst_70037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffff000000000; valaddr_reg:x3; val_offset:210111*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210111*0 + 3*149*FLEN/8, x4, x1, x2)

inst_70038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffff800000000; valaddr_reg:x3; val_offset:210114*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210114*0 + 3*150*FLEN/8, x4, x1, x2)

inst_70039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffc00000000; valaddr_reg:x3; val_offset:210117*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210117*0 + 3*151*FLEN/8, x4, x1, x2)

inst_70040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffe00000000; valaddr_reg:x3; val_offset:210120*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210120*0 + 3*152*FLEN/8, x4, x1, x2)

inst_70041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffff00000000; valaddr_reg:x3; val_offset:210123*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210123*0 + 3*153*FLEN/8, x4, x1, x2)

inst_70042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffff80000000; valaddr_reg:x3; val_offset:210126*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210126*0 + 3*154*FLEN/8, x4, x1, x2)

inst_70043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffc0000000; valaddr_reg:x3; val_offset:210129*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210129*0 + 3*155*FLEN/8, x4, x1, x2)

inst_70044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffe0000000; valaddr_reg:x3; val_offset:210132*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210132*0 + 3*156*FLEN/8, x4, x1, x2)

inst_70045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffff0000000; valaddr_reg:x3; val_offset:210135*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210135*0 + 3*157*FLEN/8, x4, x1, x2)

inst_70046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffff8000000; valaddr_reg:x3; val_offset:210138*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210138*0 + 3*158*FLEN/8, x4, x1, x2)

inst_70047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffc000000; valaddr_reg:x3; val_offset:210141*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210141*0 + 3*159*FLEN/8, x4, x1, x2)

inst_70048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffe000000; valaddr_reg:x3; val_offset:210144*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210144*0 + 3*160*FLEN/8, x4, x1, x2)

inst_70049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffff000000; valaddr_reg:x3; val_offset:210147*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210147*0 + 3*161*FLEN/8, x4, x1, x2)

inst_70050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffff800000; valaddr_reg:x3; val_offset:210150*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210150*0 + 3*162*FLEN/8, x4, x1, x2)

inst_70051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffc00000; valaddr_reg:x3; val_offset:210153*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210153*0 + 3*163*FLEN/8, x4, x1, x2)

inst_70052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffe00000; valaddr_reg:x3; val_offset:210156*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210156*0 + 3*164*FLEN/8, x4, x1, x2)

inst_70053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffff00000; valaddr_reg:x3; val_offset:210159*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210159*0 + 3*165*FLEN/8, x4, x1, x2)

inst_70054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffff80000; valaddr_reg:x3; val_offset:210162*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210162*0 + 3*166*FLEN/8, x4, x1, x2)

inst_70055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffc0000; valaddr_reg:x3; val_offset:210165*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210165*0 + 3*167*FLEN/8, x4, x1, x2)

inst_70056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffe0000; valaddr_reg:x3; val_offset:210168*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210168*0 + 3*168*FLEN/8, x4, x1, x2)

inst_70057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffff0000; valaddr_reg:x3; val_offset:210171*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210171*0 + 3*169*FLEN/8, x4, x1, x2)

inst_70058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffff8000; valaddr_reg:x3; val_offset:210174*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210174*0 + 3*170*FLEN/8, x4, x1, x2)

inst_70059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffffc000; valaddr_reg:x3; val_offset:210177*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210177*0 + 3*171*FLEN/8, x4, x1, x2)

inst_70060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffffe000; valaddr_reg:x3; val_offset:210180*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210180*0 + 3*172*FLEN/8, x4, x1, x2)

inst_70061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffff000; valaddr_reg:x3; val_offset:210183*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210183*0 + 3*173*FLEN/8, x4, x1, x2)

inst_70062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffff800; valaddr_reg:x3; val_offset:210186*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210186*0 + 3*174*FLEN/8, x4, x1, x2)

inst_70063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffffc00; valaddr_reg:x3; val_offset:210189*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210189*0 + 3*175*FLEN/8, x4, x1, x2)

inst_70064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffffe00; valaddr_reg:x3; val_offset:210192*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210192*0 + 3*176*FLEN/8, x4, x1, x2)

inst_70065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffffff00; valaddr_reg:x3; val_offset:210195*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210195*0 + 3*177*FLEN/8, x4, x1, x2)

inst_70066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffffff80; valaddr_reg:x3; val_offset:210198*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210198*0 + 3*178*FLEN/8, x4, x1, x2)

inst_70067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffffffc0; valaddr_reg:x3; val_offset:210201*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210201*0 + 3*179*FLEN/8, x4, x1, x2)

inst_70068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffffffe0; valaddr_reg:x3; val_offset:210204*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210204*0 + 3*180*FLEN/8, x4, x1, x2)

inst_70069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffffff0; valaddr_reg:x3; val_offset:210207*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210207*0 + 3*181*FLEN/8, x4, x1, x2)

inst_70070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffffff8; valaddr_reg:x3; val_offset:210210*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210210*0 + 3*182*FLEN/8, x4, x1, x2)

inst_70071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffffffc; valaddr_reg:x3; val_offset:210213*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210213*0 + 3*183*FLEN/8, x4, x1, x2)

inst_70072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829ffffffffffffe; valaddr_reg:x3; val_offset:210216*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210216*0 + 3*184*FLEN/8, x4, x1, x2)

inst_70073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6535160e0062c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x029 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa6535160e0062c; op2val:0x8000;
op3val:0x829fffffffffffff; valaddr_reg:x3; val_offset:210219*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210219*0 + 3*185*FLEN/8, x4, x1, x2)

inst_70074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000000000; valaddr_reg:x3; val_offset:210222*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210222*0 + 3*186*FLEN/8, x4, x1, x2)

inst_70075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000000001; valaddr_reg:x3; val_offset:210225*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210225*0 + 3*187*FLEN/8, x4, x1, x2)

inst_70076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000000003; valaddr_reg:x3; val_offset:210228*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210228*0 + 3*188*FLEN/8, x4, x1, x2)

inst_70077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000000007; valaddr_reg:x3; val_offset:210231*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210231*0 + 3*189*FLEN/8, x4, x1, x2)

inst_70078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000000000f; valaddr_reg:x3; val_offset:210234*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210234*0 + 3*190*FLEN/8, x4, x1, x2)

inst_70079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000000001f; valaddr_reg:x3; val_offset:210237*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210237*0 + 3*191*FLEN/8, x4, x1, x2)

inst_70080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000000003f; valaddr_reg:x3; val_offset:210240*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210240*0 + 3*192*FLEN/8, x4, x1, x2)

inst_70081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000000007f; valaddr_reg:x3; val_offset:210243*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210243*0 + 3*193*FLEN/8, x4, x1, x2)

inst_70082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000000000ff; valaddr_reg:x3; val_offset:210246*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210246*0 + 3*194*FLEN/8, x4, x1, x2)

inst_70083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000000001ff; valaddr_reg:x3; val_offset:210249*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210249*0 + 3*195*FLEN/8, x4, x1, x2)

inst_70084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000000003ff; valaddr_reg:x3; val_offset:210252*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210252*0 + 3*196*FLEN/8, x4, x1, x2)

inst_70085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000000007ff; valaddr_reg:x3; val_offset:210255*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210255*0 + 3*197*FLEN/8, x4, x1, x2)

inst_70086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000000fff; valaddr_reg:x3; val_offset:210258*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210258*0 + 3*198*FLEN/8, x4, x1, x2)

inst_70087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000001fff; valaddr_reg:x3; val_offset:210261*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210261*0 + 3*199*FLEN/8, x4, x1, x2)

inst_70088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000003fff; valaddr_reg:x3; val_offset:210264*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210264*0 + 3*200*FLEN/8, x4, x1, x2)

inst_70089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000007fff; valaddr_reg:x3; val_offset:210267*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210267*0 + 3*201*FLEN/8, x4, x1, x2)

inst_70090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000000ffff; valaddr_reg:x3; val_offset:210270*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210270*0 + 3*202*FLEN/8, x4, x1, x2)

inst_70091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000001ffff; valaddr_reg:x3; val_offset:210273*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210273*0 + 3*203*FLEN/8, x4, x1, x2)

inst_70092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000003ffff; valaddr_reg:x3; val_offset:210276*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210276*0 + 3*204*FLEN/8, x4, x1, x2)

inst_70093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000007ffff; valaddr_reg:x3; val_offset:210279*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210279*0 + 3*205*FLEN/8, x4, x1, x2)

inst_70094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000000fffff; valaddr_reg:x3; val_offset:210282*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210282*0 + 3*206*FLEN/8, x4, x1, x2)

inst_70095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000001fffff; valaddr_reg:x3; val_offset:210285*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210285*0 + 3*207*FLEN/8, x4, x1, x2)

inst_70096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000003fffff; valaddr_reg:x3; val_offset:210288*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210288*0 + 3*208*FLEN/8, x4, x1, x2)

inst_70097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000007fffff; valaddr_reg:x3; val_offset:210291*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210291*0 + 3*209*FLEN/8, x4, x1, x2)

inst_70098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000000ffffff; valaddr_reg:x3; val_offset:210294*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210294*0 + 3*210*FLEN/8, x4, x1, x2)

inst_70099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000001ffffff; valaddr_reg:x3; val_offset:210297*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210297*0 + 3*211*FLEN/8, x4, x1, x2)

inst_70100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000003ffffff; valaddr_reg:x3; val_offset:210300*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210300*0 + 3*212*FLEN/8, x4, x1, x2)

inst_70101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000007ffffff; valaddr_reg:x3; val_offset:210303*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210303*0 + 3*213*FLEN/8, x4, x1, x2)

inst_70102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000000fffffff; valaddr_reg:x3; val_offset:210306*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210306*0 + 3*214*FLEN/8, x4, x1, x2)

inst_70103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000001fffffff; valaddr_reg:x3; val_offset:210309*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210309*0 + 3*215*FLEN/8, x4, x1, x2)

inst_70104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000003fffffff; valaddr_reg:x3; val_offset:210312*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210312*0 + 3*216*FLEN/8, x4, x1, x2)

inst_70105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000007fffffff; valaddr_reg:x3; val_offset:210315*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210315*0 + 3*217*FLEN/8, x4, x1, x2)

inst_70106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00000ffffffff; valaddr_reg:x3; val_offset:210318*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210318*0 + 3*218*FLEN/8, x4, x1, x2)

inst_70107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00001ffffffff; valaddr_reg:x3; val_offset:210321*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210321*0 + 3*219*FLEN/8, x4, x1, x2)

inst_70108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00003ffffffff; valaddr_reg:x3; val_offset:210324*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210324*0 + 3*220*FLEN/8, x4, x1, x2)

inst_70109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00007ffffffff; valaddr_reg:x3; val_offset:210327*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210327*0 + 3*221*FLEN/8, x4, x1, x2)

inst_70110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0000fffffffff; valaddr_reg:x3; val_offset:210330*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210330*0 + 3*222*FLEN/8, x4, x1, x2)

inst_70111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0001fffffffff; valaddr_reg:x3; val_offset:210333*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210333*0 + 3*223*FLEN/8, x4, x1, x2)

inst_70112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0003fffffffff; valaddr_reg:x3; val_offset:210336*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210336*0 + 3*224*FLEN/8, x4, x1, x2)

inst_70113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0007fffffffff; valaddr_reg:x3; val_offset:210339*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210339*0 + 3*225*FLEN/8, x4, x1, x2)

inst_70114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a000ffffffffff; valaddr_reg:x3; val_offset:210342*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210342*0 + 3*226*FLEN/8, x4, x1, x2)

inst_70115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a001ffffffffff; valaddr_reg:x3; val_offset:210345*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210345*0 + 3*227*FLEN/8, x4, x1, x2)

inst_70116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a003ffffffffff; valaddr_reg:x3; val_offset:210348*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210348*0 + 3*228*FLEN/8, x4, x1, x2)

inst_70117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a007ffffffffff; valaddr_reg:x3; val_offset:210351*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210351*0 + 3*229*FLEN/8, x4, x1, x2)

inst_70118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a00fffffffffff; valaddr_reg:x3; val_offset:210354*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210354*0 + 3*230*FLEN/8, x4, x1, x2)

inst_70119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a01fffffffffff; valaddr_reg:x3; val_offset:210357*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210357*0 + 3*231*FLEN/8, x4, x1, x2)

inst_70120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a03fffffffffff; valaddr_reg:x3; val_offset:210360*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210360*0 + 3*232*FLEN/8, x4, x1, x2)

inst_70121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a07fffffffffff; valaddr_reg:x3; val_offset:210363*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210363*0 + 3*233*FLEN/8, x4, x1, x2)

inst_70122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a0ffffffffffff; valaddr_reg:x3; val_offset:210366*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210366*0 + 3*234*FLEN/8, x4, x1, x2)

inst_70123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a1ffffffffffff; valaddr_reg:x3; val_offset:210369*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210369*0 + 3*235*FLEN/8, x4, x1, x2)

inst_70124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a3ffffffffffff; valaddr_reg:x3; val_offset:210372*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210372*0 + 3*236*FLEN/8, x4, x1, x2)

inst_70125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a7ffffffffffff; valaddr_reg:x3; val_offset:210375*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210375*0 + 3*237*FLEN/8, x4, x1, x2)

inst_70126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38a8000000000000; valaddr_reg:x3; val_offset:210378*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210378*0 + 3*238*FLEN/8, x4, x1, x2)

inst_70127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38ac000000000000; valaddr_reg:x3; val_offset:210381*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210381*0 + 3*239*FLEN/8, x4, x1, x2)

inst_70128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38ae000000000000; valaddr_reg:x3; val_offset:210384*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210384*0 + 3*240*FLEN/8, x4, x1, x2)

inst_70129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38af000000000000; valaddr_reg:x3; val_offset:210387*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210387*0 + 3*241*FLEN/8, x4, x1, x2)

inst_70130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38af800000000000; valaddr_reg:x3; val_offset:210390*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210390*0 + 3*242*FLEN/8, x4, x1, x2)

inst_70131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afc00000000000; valaddr_reg:x3; val_offset:210393*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210393*0 + 3*243*FLEN/8, x4, x1, x2)

inst_70132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afe00000000000; valaddr_reg:x3; val_offset:210396*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210396*0 + 3*244*FLEN/8, x4, x1, x2)

inst_70133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38aff00000000000; valaddr_reg:x3; val_offset:210399*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210399*0 + 3*245*FLEN/8, x4, x1, x2)

inst_70134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38aff80000000000; valaddr_reg:x3; val_offset:210402*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210402*0 + 3*246*FLEN/8, x4, x1, x2)

inst_70135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affc0000000000; valaddr_reg:x3; val_offset:210405*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210405*0 + 3*247*FLEN/8, x4, x1, x2)

inst_70136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affe0000000000; valaddr_reg:x3; val_offset:210408*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210408*0 + 3*248*FLEN/8, x4, x1, x2)

inst_70137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afff0000000000; valaddr_reg:x3; val_offset:210411*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210411*0 + 3*249*FLEN/8, x4, x1, x2)

inst_70138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afff8000000000; valaddr_reg:x3; val_offset:210414*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210414*0 + 3*250*FLEN/8, x4, x1, x2)

inst_70139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffc000000000; valaddr_reg:x3; val_offset:210417*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210417*0 + 3*251*FLEN/8, x4, x1, x2)

inst_70140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffe000000000; valaddr_reg:x3; val_offset:210420*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210420*0 + 3*252*FLEN/8, x4, x1, x2)

inst_70141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affff000000000; valaddr_reg:x3; val_offset:210423*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210423*0 + 3*253*FLEN/8, x4, x1, x2)

inst_70142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affff800000000; valaddr_reg:x3; val_offset:210426*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210426*0 + 3*254*FLEN/8, x4, x1, x2)

inst_70143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffc00000000; valaddr_reg:x3; val_offset:210429*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210429*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_70144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffe00000000; valaddr_reg:x3; val_offset:210432*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210432*0 + 3*256*FLEN/8, x4, x1, x2)

inst_70145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffff00000000; valaddr_reg:x3; val_offset:210435*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210435*0 + 3*257*FLEN/8, x4, x1, x2)

inst_70146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffff80000000; valaddr_reg:x3; val_offset:210438*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210438*0 + 3*258*FLEN/8, x4, x1, x2)

inst_70147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffc0000000; valaddr_reg:x3; val_offset:210441*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210441*0 + 3*259*FLEN/8, x4, x1, x2)

inst_70148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffe0000000; valaddr_reg:x3; val_offset:210444*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210444*0 + 3*260*FLEN/8, x4, x1, x2)

inst_70149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffff0000000; valaddr_reg:x3; val_offset:210447*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210447*0 + 3*261*FLEN/8, x4, x1, x2)

inst_70150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffff8000000; valaddr_reg:x3; val_offset:210450*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210450*0 + 3*262*FLEN/8, x4, x1, x2)

inst_70151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffc000000; valaddr_reg:x3; val_offset:210453*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210453*0 + 3*263*FLEN/8, x4, x1, x2)

inst_70152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffe000000; valaddr_reg:x3; val_offset:210456*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210456*0 + 3*264*FLEN/8, x4, x1, x2)

inst_70153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffff000000; valaddr_reg:x3; val_offset:210459*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210459*0 + 3*265*FLEN/8, x4, x1, x2)

inst_70154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffff800000; valaddr_reg:x3; val_offset:210462*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210462*0 + 3*266*FLEN/8, x4, x1, x2)

inst_70155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffc00000; valaddr_reg:x3; val_offset:210465*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210465*0 + 3*267*FLEN/8, x4, x1, x2)

inst_70156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffe00000; valaddr_reg:x3; val_offset:210468*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210468*0 + 3*268*FLEN/8, x4, x1, x2)

inst_70157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffff00000; valaddr_reg:x3; val_offset:210471*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210471*0 + 3*269*FLEN/8, x4, x1, x2)

inst_70158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffff80000; valaddr_reg:x3; val_offset:210474*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210474*0 + 3*270*FLEN/8, x4, x1, x2)

inst_70159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffc0000; valaddr_reg:x3; val_offset:210477*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210477*0 + 3*271*FLEN/8, x4, x1, x2)

inst_70160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffe0000; valaddr_reg:x3; val_offset:210480*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210480*0 + 3*272*FLEN/8, x4, x1, x2)

inst_70161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffff0000; valaddr_reg:x3; val_offset:210483*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210483*0 + 3*273*FLEN/8, x4, x1, x2)

inst_70162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffff8000; valaddr_reg:x3; val_offset:210486*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210486*0 + 3*274*FLEN/8, x4, x1, x2)

inst_70163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffffc000; valaddr_reg:x3; val_offset:210489*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210489*0 + 3*275*FLEN/8, x4, x1, x2)

inst_70164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffffe000; valaddr_reg:x3; val_offset:210492*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210492*0 + 3*276*FLEN/8, x4, x1, x2)

inst_70165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffff000; valaddr_reg:x3; val_offset:210495*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210495*0 + 3*277*FLEN/8, x4, x1, x2)

inst_70166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffff800; valaddr_reg:x3; val_offset:210498*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210498*0 + 3*278*FLEN/8, x4, x1, x2)

inst_70167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffffc00; valaddr_reg:x3; val_offset:210501*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210501*0 + 3*279*FLEN/8, x4, x1, x2)

inst_70168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffffe00; valaddr_reg:x3; val_offset:210504*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210504*0 + 3*280*FLEN/8, x4, x1, x2)

inst_70169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffffff00; valaddr_reg:x3; val_offset:210507*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210507*0 + 3*281*FLEN/8, x4, x1, x2)

inst_70170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffffff80; valaddr_reg:x3; val_offset:210510*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210510*0 + 3*282*FLEN/8, x4, x1, x2)

inst_70171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffffffc0; valaddr_reg:x3; val_offset:210513*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210513*0 + 3*283*FLEN/8, x4, x1, x2)

inst_70172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffffffe0; valaddr_reg:x3; val_offset:210516*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210516*0 + 3*284*FLEN/8, x4, x1, x2)

inst_70173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffffff0; valaddr_reg:x3; val_offset:210519*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210519*0 + 3*285*FLEN/8, x4, x1, x2)

inst_70174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffffff8; valaddr_reg:x3; val_offset:210522*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210522*0 + 3*286*FLEN/8, x4, x1, x2)

inst_70175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffffffc; valaddr_reg:x3; val_offset:210525*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210525*0 + 3*287*FLEN/8, x4, x1, x2)

inst_70176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38affffffffffffe; valaddr_reg:x3; val_offset:210528*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210528*0 + 3*288*FLEN/8, x4, x1, x2)

inst_70177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x38a and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x38afffffffffffff; valaddr_reg:x3; val_offset:210531*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210531*0 + 3*289*FLEN/8, x4, x1, x2)

inst_70178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:210534*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210534*0 + 3*290*FLEN/8, x4, x1, x2)

inst_70179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:210537*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210537*0 + 3*291*FLEN/8, x4, x1, x2)

inst_70180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:210540*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210540*0 + 3*292*FLEN/8, x4, x1, x2)

inst_70181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:210543*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210543*0 + 3*293*FLEN/8, x4, x1, x2)

inst_70182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:210546*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210546*0 + 3*294*FLEN/8, x4, x1, x2)

inst_70183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:210549*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210549*0 + 3*295*FLEN/8, x4, x1, x2)

inst_70184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:210552*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210552*0 + 3*296*FLEN/8, x4, x1, x2)

inst_70185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:210555*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210555*0 + 3*297*FLEN/8, x4, x1, x2)

inst_70186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:210558*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210558*0 + 3*298*FLEN/8, x4, x1, x2)

inst_70187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:210561*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210561*0 + 3*299*FLEN/8, x4, x1, x2)

inst_70188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:210564*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210564*0 + 3*300*FLEN/8, x4, x1, x2)

inst_70189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:210567*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210567*0 + 3*301*FLEN/8, x4, x1, x2)

inst_70190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:210570*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210570*0 + 3*302*FLEN/8, x4, x1, x2)

inst_70191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:210573*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210573*0 + 3*303*FLEN/8, x4, x1, x2)

inst_70192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:210576*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210576*0 + 3*304*FLEN/8, x4, x1, x2)

inst_70193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:210579*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210579*0 + 3*305*FLEN/8, x4, x1, x2)

inst_70194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:210582*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210582*0 + 3*306*FLEN/8, x4, x1, x2)

inst_70195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:210585*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210585*0 + 3*307*FLEN/8, x4, x1, x2)

inst_70196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:210588*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210588*0 + 3*308*FLEN/8, x4, x1, x2)

inst_70197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:210591*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210591*0 + 3*309*FLEN/8, x4, x1, x2)

inst_70198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:210594*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210594*0 + 3*310*FLEN/8, x4, x1, x2)

inst_70199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65388ceb0c8af and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6eebe22fc7985 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65388ceb0c8af; op2val:0x2036eebe22fc7985;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:210597*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210597*0 + 3*311*FLEN/8, x4, x1, x2)

inst_70200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:210600*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210600*0 + 3*312*FLEN/8, x4, x1, x2)

inst_70201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:210603*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210603*0 + 3*313*FLEN/8, x4, x1, x2)

inst_70202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:210606*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210606*0 + 3*314*FLEN/8, x4, x1, x2)

inst_70203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:210609*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210609*0 + 3*315*FLEN/8, x4, x1, x2)

inst_70204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:210612*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210612*0 + 3*316*FLEN/8, x4, x1, x2)

inst_70205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:210615*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210615*0 + 3*317*FLEN/8, x4, x1, x2)

inst_70206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:210618*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210618*0 + 3*318*FLEN/8, x4, x1, x2)

inst_70207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:210621*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210621*0 + 3*319*FLEN/8, x4, x1, x2)

inst_70208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:210624*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210624*0 + 3*320*FLEN/8, x4, x1, x2)

inst_70209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:210627*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210627*0 + 3*321*FLEN/8, x4, x1, x2)

inst_70210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:210630*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210630*0 + 3*322*FLEN/8, x4, x1, x2)

inst_70211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:210633*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210633*0 + 3*323*FLEN/8, x4, x1, x2)

inst_70212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:210636*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210636*0 + 3*324*FLEN/8, x4, x1, x2)

inst_70213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:210639*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210639*0 + 3*325*FLEN/8, x4, x1, x2)

inst_70214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:210642*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210642*0 + 3*326*FLEN/8, x4, x1, x2)

inst_70215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:210645*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210645*0 + 3*327*FLEN/8, x4, x1, x2)

inst_70216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:210648*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210648*0 + 3*328*FLEN/8, x4, x1, x2)

inst_70217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:210651*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210651*0 + 3*329*FLEN/8, x4, x1, x2)

inst_70218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:210654*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210654*0 + 3*330*FLEN/8, x4, x1, x2)

inst_70219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:210657*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210657*0 + 3*331*FLEN/8, x4, x1, x2)

inst_70220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:210660*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210660*0 + 3*332*FLEN/8, x4, x1, x2)

inst_70221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:210663*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210663*0 + 3*333*FLEN/8, x4, x1, x2)

inst_70222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000000000; valaddr_reg:x3; val_offset:210666*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210666*0 + 3*334*FLEN/8, x4, x1, x2)

inst_70223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000000001; valaddr_reg:x3; val_offset:210669*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210669*0 + 3*335*FLEN/8, x4, x1, x2)

inst_70224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000000003; valaddr_reg:x3; val_offset:210672*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210672*0 + 3*336*FLEN/8, x4, x1, x2)

inst_70225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000000007; valaddr_reg:x3; val_offset:210675*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210675*0 + 3*337*FLEN/8, x4, x1, x2)

inst_70226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000000000f; valaddr_reg:x3; val_offset:210678*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210678*0 + 3*338*FLEN/8, x4, x1, x2)

inst_70227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000000001f; valaddr_reg:x3; val_offset:210681*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210681*0 + 3*339*FLEN/8, x4, x1, x2)

inst_70228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000000003f; valaddr_reg:x3; val_offset:210684*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210684*0 + 3*340*FLEN/8, x4, x1, x2)

inst_70229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000000007f; valaddr_reg:x3; val_offset:210687*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210687*0 + 3*341*FLEN/8, x4, x1, x2)

inst_70230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000000000ff; valaddr_reg:x3; val_offset:210690*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210690*0 + 3*342*FLEN/8, x4, x1, x2)

inst_70231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000000001ff; valaddr_reg:x3; val_offset:210693*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210693*0 + 3*343*FLEN/8, x4, x1, x2)

inst_70232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000000003ff; valaddr_reg:x3; val_offset:210696*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210696*0 + 3*344*FLEN/8, x4, x1, x2)

inst_70233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000000007ff; valaddr_reg:x3; val_offset:210699*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210699*0 + 3*345*FLEN/8, x4, x1, x2)

inst_70234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000000fff; valaddr_reg:x3; val_offset:210702*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210702*0 + 3*346*FLEN/8, x4, x1, x2)

inst_70235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000001fff; valaddr_reg:x3; val_offset:210705*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210705*0 + 3*347*FLEN/8, x4, x1, x2)

inst_70236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000003fff; valaddr_reg:x3; val_offset:210708*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210708*0 + 3*348*FLEN/8, x4, x1, x2)

inst_70237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000007fff; valaddr_reg:x3; val_offset:210711*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210711*0 + 3*349*FLEN/8, x4, x1, x2)

inst_70238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000000ffff; valaddr_reg:x3; val_offset:210714*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210714*0 + 3*350*FLEN/8, x4, x1, x2)

inst_70239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000001ffff; valaddr_reg:x3; val_offset:210717*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210717*0 + 3*351*FLEN/8, x4, x1, x2)

inst_70240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000003ffff; valaddr_reg:x3; val_offset:210720*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210720*0 + 3*352*FLEN/8, x4, x1, x2)

inst_70241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000007ffff; valaddr_reg:x3; val_offset:210723*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210723*0 + 3*353*FLEN/8, x4, x1, x2)

inst_70242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000000fffff; valaddr_reg:x3; val_offset:210726*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210726*0 + 3*354*FLEN/8, x4, x1, x2)

inst_70243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000001fffff; valaddr_reg:x3; val_offset:210729*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210729*0 + 3*355*FLEN/8, x4, x1, x2)

inst_70244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000003fffff; valaddr_reg:x3; val_offset:210732*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210732*0 + 3*356*FLEN/8, x4, x1, x2)

inst_70245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000007fffff; valaddr_reg:x3; val_offset:210735*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210735*0 + 3*357*FLEN/8, x4, x1, x2)

inst_70246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000000ffffff; valaddr_reg:x3; val_offset:210738*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210738*0 + 3*358*FLEN/8, x4, x1, x2)

inst_70247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000001ffffff; valaddr_reg:x3; val_offset:210741*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210741*0 + 3*359*FLEN/8, x4, x1, x2)

inst_70248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000003ffffff; valaddr_reg:x3; val_offset:210744*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210744*0 + 3*360*FLEN/8, x4, x1, x2)

inst_70249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000007ffffff; valaddr_reg:x3; val_offset:210747*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210747*0 + 3*361*FLEN/8, x4, x1, x2)

inst_70250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000000fffffff; valaddr_reg:x3; val_offset:210750*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210750*0 + 3*362*FLEN/8, x4, x1, x2)

inst_70251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000001fffffff; valaddr_reg:x3; val_offset:210753*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210753*0 + 3*363*FLEN/8, x4, x1, x2)

inst_70252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000003fffffff; valaddr_reg:x3; val_offset:210756*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210756*0 + 3*364*FLEN/8, x4, x1, x2)

inst_70253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000007fffffff; valaddr_reg:x3; val_offset:210759*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210759*0 + 3*365*FLEN/8, x4, x1, x2)

inst_70254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300000ffffffff; valaddr_reg:x3; val_offset:210762*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210762*0 + 3*366*FLEN/8, x4, x1, x2)

inst_70255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300001ffffffff; valaddr_reg:x3; val_offset:210765*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210765*0 + 3*367*FLEN/8, x4, x1, x2)

inst_70256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300003ffffffff; valaddr_reg:x3; val_offset:210768*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210768*0 + 3*368*FLEN/8, x4, x1, x2)

inst_70257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300007ffffffff; valaddr_reg:x3; val_offset:210771*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210771*0 + 3*369*FLEN/8, x4, x1, x2)

inst_70258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030000fffffffff; valaddr_reg:x3; val_offset:210774*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210774*0 + 3*370*FLEN/8, x4, x1, x2)

inst_70259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030001fffffffff; valaddr_reg:x3; val_offset:210777*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210777*0 + 3*371*FLEN/8, x4, x1, x2)

inst_70260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030003fffffffff; valaddr_reg:x3; val_offset:210780*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210780*0 + 3*372*FLEN/8, x4, x1, x2)

inst_70261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030007fffffffff; valaddr_reg:x3; val_offset:210783*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210783*0 + 3*373*FLEN/8, x4, x1, x2)

inst_70262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803000ffffffffff; valaddr_reg:x3; val_offset:210786*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210786*0 + 3*374*FLEN/8, x4, x1, x2)

inst_70263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803001ffffffffff; valaddr_reg:x3; val_offset:210789*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210789*0 + 3*375*FLEN/8, x4, x1, x2)

inst_70264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803003ffffffffff; valaddr_reg:x3; val_offset:210792*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210792*0 + 3*376*FLEN/8, x4, x1, x2)

inst_70265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803007ffffffffff; valaddr_reg:x3; val_offset:210795*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210795*0 + 3*377*FLEN/8, x4, x1, x2)

inst_70266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80300fffffffffff; valaddr_reg:x3; val_offset:210798*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210798*0 + 3*378*FLEN/8, x4, x1, x2)

inst_70267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80301fffffffffff; valaddr_reg:x3; val_offset:210801*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210801*0 + 3*379*FLEN/8, x4, x1, x2)

inst_70268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80303fffffffffff; valaddr_reg:x3; val_offset:210804*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210804*0 + 3*380*FLEN/8, x4, x1, x2)

inst_70269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x80307fffffffffff; valaddr_reg:x3; val_offset:210807*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210807*0 + 3*381*FLEN/8, x4, x1, x2)

inst_70270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8030ffffffffffff; valaddr_reg:x3; val_offset:210810*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210810*0 + 3*382*FLEN/8, x4, x1, x2)

inst_70271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8031ffffffffffff; valaddr_reg:x3; val_offset:210813*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210813*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_70272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8033ffffffffffff; valaddr_reg:x3; val_offset:210816*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210816*0 + 3*384*FLEN/8, x4, x1, x2)

inst_70273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8037ffffffffffff; valaddr_reg:x3; val_offset:210819*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210819*0 + 3*385*FLEN/8, x4, x1, x2)

inst_70274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x8038000000000000; valaddr_reg:x3; val_offset:210822*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210822*0 + 3*386*FLEN/8, x4, x1, x2)

inst_70275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803c000000000000; valaddr_reg:x3; val_offset:210825*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210825*0 + 3*387*FLEN/8, x4, x1, x2)

inst_70276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803e000000000000; valaddr_reg:x3; val_offset:210828*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210828*0 + 3*388*FLEN/8, x4, x1, x2)

inst_70277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803f000000000000; valaddr_reg:x3; val_offset:210831*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210831*0 + 3*389*FLEN/8, x4, x1, x2)

inst_70278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803f800000000000; valaddr_reg:x3; val_offset:210834*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210834*0 + 3*390*FLEN/8, x4, x1, x2)

inst_70279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fc00000000000; valaddr_reg:x3; val_offset:210837*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210837*0 + 3*391*FLEN/8, x4, x1, x2)

inst_70280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fe00000000000; valaddr_reg:x3; val_offset:210840*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210840*0 + 3*392*FLEN/8, x4, x1, x2)

inst_70281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ff00000000000; valaddr_reg:x3; val_offset:210843*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210843*0 + 3*393*FLEN/8, x4, x1, x2)

inst_70282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ff80000000000; valaddr_reg:x3; val_offset:210846*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210846*0 + 3*394*FLEN/8, x4, x1, x2)

inst_70283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffc0000000000; valaddr_reg:x3; val_offset:210849*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210849*0 + 3*395*FLEN/8, x4, x1, x2)

inst_70284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffe0000000000; valaddr_reg:x3; val_offset:210852*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210852*0 + 3*396*FLEN/8, x4, x1, x2)

inst_70285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fff0000000000; valaddr_reg:x3; val_offset:210855*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210855*0 + 3*397*FLEN/8, x4, x1, x2)

inst_70286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fff8000000000; valaddr_reg:x3; val_offset:210858*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210858*0 + 3*398*FLEN/8, x4, x1, x2)

inst_70287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffc000000000; valaddr_reg:x3; val_offset:210861*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210861*0 + 3*399*FLEN/8, x4, x1, x2)

inst_70288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffe000000000; valaddr_reg:x3; val_offset:210864*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210864*0 + 3*400*FLEN/8, x4, x1, x2)

inst_70289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffff000000000; valaddr_reg:x3; val_offset:210867*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210867*0 + 3*401*FLEN/8, x4, x1, x2)

inst_70290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffff800000000; valaddr_reg:x3; val_offset:210870*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210870*0 + 3*402*FLEN/8, x4, x1, x2)

inst_70291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffc00000000; valaddr_reg:x3; val_offset:210873*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210873*0 + 3*403*FLEN/8, x4, x1, x2)

inst_70292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffe00000000; valaddr_reg:x3; val_offset:210876*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210876*0 + 3*404*FLEN/8, x4, x1, x2)

inst_70293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffff00000000; valaddr_reg:x3; val_offset:210879*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210879*0 + 3*405*FLEN/8, x4, x1, x2)

inst_70294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffff80000000; valaddr_reg:x3; val_offset:210882*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210882*0 + 3*406*FLEN/8, x4, x1, x2)

inst_70295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffc0000000; valaddr_reg:x3; val_offset:210885*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210885*0 + 3*407*FLEN/8, x4, x1, x2)

inst_70296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffe0000000; valaddr_reg:x3; val_offset:210888*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210888*0 + 3*408*FLEN/8, x4, x1, x2)

inst_70297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffff0000000; valaddr_reg:x3; val_offset:210891*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210891*0 + 3*409*FLEN/8, x4, x1, x2)

inst_70298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffff8000000; valaddr_reg:x3; val_offset:210894*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210894*0 + 3*410*FLEN/8, x4, x1, x2)

inst_70299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffc000000; valaddr_reg:x3; val_offset:210897*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210897*0 + 3*411*FLEN/8, x4, x1, x2)

inst_70300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffe000000; valaddr_reg:x3; val_offset:210900*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210900*0 + 3*412*FLEN/8, x4, x1, x2)

inst_70301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffff000000; valaddr_reg:x3; val_offset:210903*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210903*0 + 3*413*FLEN/8, x4, x1, x2)

inst_70302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffff800000; valaddr_reg:x3; val_offset:210906*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210906*0 + 3*414*FLEN/8, x4, x1, x2)

inst_70303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffc00000; valaddr_reg:x3; val_offset:210909*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210909*0 + 3*415*FLEN/8, x4, x1, x2)

inst_70304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffe00000; valaddr_reg:x3; val_offset:210912*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210912*0 + 3*416*FLEN/8, x4, x1, x2)

inst_70305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffff00000; valaddr_reg:x3; val_offset:210915*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210915*0 + 3*417*FLEN/8, x4, x1, x2)

inst_70306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffff80000; valaddr_reg:x3; val_offset:210918*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210918*0 + 3*418*FLEN/8, x4, x1, x2)

inst_70307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffc0000; valaddr_reg:x3; val_offset:210921*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210921*0 + 3*419*FLEN/8, x4, x1, x2)

inst_70308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffe0000; valaddr_reg:x3; val_offset:210924*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210924*0 + 3*420*FLEN/8, x4, x1, x2)

inst_70309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffff0000; valaddr_reg:x3; val_offset:210927*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210927*0 + 3*421*FLEN/8, x4, x1, x2)

inst_70310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffff8000; valaddr_reg:x3; val_offset:210930*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210930*0 + 3*422*FLEN/8, x4, x1, x2)

inst_70311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffffc000; valaddr_reg:x3; val_offset:210933*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210933*0 + 3*423*FLEN/8, x4, x1, x2)

inst_70312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffffe000; valaddr_reg:x3; val_offset:210936*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210936*0 + 3*424*FLEN/8, x4, x1, x2)

inst_70313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffff000; valaddr_reg:x3; val_offset:210939*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210939*0 + 3*425*FLEN/8, x4, x1, x2)

inst_70314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffff800; valaddr_reg:x3; val_offset:210942*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210942*0 + 3*426*FLEN/8, x4, x1, x2)

inst_70315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffffc00; valaddr_reg:x3; val_offset:210945*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210945*0 + 3*427*FLEN/8, x4, x1, x2)

inst_70316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffffe00; valaddr_reg:x3; val_offset:210948*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210948*0 + 3*428*FLEN/8, x4, x1, x2)

inst_70317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffffff00; valaddr_reg:x3; val_offset:210951*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210951*0 + 3*429*FLEN/8, x4, x1, x2)

inst_70318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffffff80; valaddr_reg:x3; val_offset:210954*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210954*0 + 3*430*FLEN/8, x4, x1, x2)

inst_70319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffffffc0; valaddr_reg:x3; val_offset:210957*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210957*0 + 3*431*FLEN/8, x4, x1, x2)

inst_70320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffffffe0; valaddr_reg:x3; val_offset:210960*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210960*0 + 3*432*FLEN/8, x4, x1, x2)

inst_70321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffffff0; valaddr_reg:x3; val_offset:210963*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210963*0 + 3*433*FLEN/8, x4, x1, x2)

inst_70322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffffff8; valaddr_reg:x3; val_offset:210966*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210966*0 + 3*434*FLEN/8, x4, x1, x2)

inst_70323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffffffc; valaddr_reg:x3; val_offset:210969*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210969*0 + 3*435*FLEN/8, x4, x1, x2)

inst_70324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803ffffffffffffe; valaddr_reg:x3; val_offset:210972*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210972*0 + 3*436*FLEN/8, x4, x1, x2)

inst_70325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65a21c61847d5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65a21c61847d5; op2val:0x8000;
op3val:0x803fffffffffffff; valaddr_reg:x3; val_offset:210975*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210975*0 + 3*437*FLEN/8, x4, x1, x2)

inst_70326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000000000; valaddr_reg:x3; val_offset:210978*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210978*0 + 3*438*FLEN/8, x4, x1, x2)

inst_70327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000000001; valaddr_reg:x3; val_offset:210981*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210981*0 + 3*439*FLEN/8, x4, x1, x2)

inst_70328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000000003; valaddr_reg:x3; val_offset:210984*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210984*0 + 3*440*FLEN/8, x4, x1, x2)

inst_70329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000000007; valaddr_reg:x3; val_offset:210987*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210987*0 + 3*441*FLEN/8, x4, x1, x2)

inst_70330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000000000f; valaddr_reg:x3; val_offset:210990*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210990*0 + 3*442*FLEN/8, x4, x1, x2)

inst_70331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000000001f; valaddr_reg:x3; val_offset:210993*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210993*0 + 3*443*FLEN/8, x4, x1, x2)

inst_70332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000000003f; valaddr_reg:x3; val_offset:210996*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210996*0 + 3*444*FLEN/8, x4, x1, x2)

inst_70333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000000007f; valaddr_reg:x3; val_offset:210999*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 210999*0 + 3*445*FLEN/8, x4, x1, x2)

inst_70334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000000000ff; valaddr_reg:x3; val_offset:211002*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211002*0 + 3*446*FLEN/8, x4, x1, x2)

inst_70335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000000001ff; valaddr_reg:x3; val_offset:211005*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211005*0 + 3*447*FLEN/8, x4, x1, x2)

inst_70336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000000003ff; valaddr_reg:x3; val_offset:211008*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211008*0 + 3*448*FLEN/8, x4, x1, x2)

inst_70337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000000007ff; valaddr_reg:x3; val_offset:211011*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211011*0 + 3*449*FLEN/8, x4, x1, x2)

inst_70338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000000fff; valaddr_reg:x3; val_offset:211014*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211014*0 + 3*450*FLEN/8, x4, x1, x2)

inst_70339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000001fff; valaddr_reg:x3; val_offset:211017*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211017*0 + 3*451*FLEN/8, x4, x1, x2)

inst_70340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000003fff; valaddr_reg:x3; val_offset:211020*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211020*0 + 3*452*FLEN/8, x4, x1, x2)

inst_70341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000007fff; valaddr_reg:x3; val_offset:211023*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211023*0 + 3*453*FLEN/8, x4, x1, x2)

inst_70342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000000ffff; valaddr_reg:x3; val_offset:211026*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211026*0 + 3*454*FLEN/8, x4, x1, x2)

inst_70343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000001ffff; valaddr_reg:x3; val_offset:211029*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211029*0 + 3*455*FLEN/8, x4, x1, x2)

inst_70344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000003ffff; valaddr_reg:x3; val_offset:211032*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211032*0 + 3*456*FLEN/8, x4, x1, x2)

inst_70345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000007ffff; valaddr_reg:x3; val_offset:211035*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211035*0 + 3*457*FLEN/8, x4, x1, x2)

inst_70346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000000fffff; valaddr_reg:x3; val_offset:211038*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211038*0 + 3*458*FLEN/8, x4, x1, x2)

inst_70347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000001fffff; valaddr_reg:x3; val_offset:211041*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211041*0 + 3*459*FLEN/8, x4, x1, x2)

inst_70348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000003fffff; valaddr_reg:x3; val_offset:211044*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211044*0 + 3*460*FLEN/8, x4, x1, x2)

inst_70349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000007fffff; valaddr_reg:x3; val_offset:211047*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211047*0 + 3*461*FLEN/8, x4, x1, x2)

inst_70350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000000ffffff; valaddr_reg:x3; val_offset:211050*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211050*0 + 3*462*FLEN/8, x4, x1, x2)

inst_70351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000001ffffff; valaddr_reg:x3; val_offset:211053*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211053*0 + 3*463*FLEN/8, x4, x1, x2)

inst_70352:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000003ffffff; valaddr_reg:x3; val_offset:211056*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211056*0 + 3*464*FLEN/8, x4, x1, x2)

inst_70353:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000007ffffff; valaddr_reg:x3; val_offset:211059*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211059*0 + 3*465*FLEN/8, x4, x1, x2)

inst_70354:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000000fffffff; valaddr_reg:x3; val_offset:211062*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211062*0 + 3*466*FLEN/8, x4, x1, x2)

inst_70355:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000001fffffff; valaddr_reg:x3; val_offset:211065*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211065*0 + 3*467*FLEN/8, x4, x1, x2)

inst_70356:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000003fffffff; valaddr_reg:x3; val_offset:211068*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211068*0 + 3*468*FLEN/8, x4, x1, x2)

inst_70357:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000007fffffff; valaddr_reg:x3; val_offset:211071*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211071*0 + 3*469*FLEN/8, x4, x1, x2)

inst_70358:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000000ffffffff; valaddr_reg:x3; val_offset:211074*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211074*0 + 3*470*FLEN/8, x4, x1, x2)

inst_70359:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000001ffffffff; valaddr_reg:x3; val_offset:211077*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211077*0 + 3*471*FLEN/8, x4, x1, x2)

inst_70360:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000003ffffffff; valaddr_reg:x3; val_offset:211080*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211080*0 + 3*472*FLEN/8, x4, x1, x2)

inst_70361:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000007ffffffff; valaddr_reg:x3; val_offset:211083*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211083*0 + 3*473*FLEN/8, x4, x1, x2)

inst_70362:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00000fffffffff; valaddr_reg:x3; val_offset:211086*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211086*0 + 3*474*FLEN/8, x4, x1, x2)

inst_70363:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00001fffffffff; valaddr_reg:x3; val_offset:211089*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211089*0 + 3*475*FLEN/8, x4, x1, x2)

inst_70364:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00003fffffffff; valaddr_reg:x3; val_offset:211092*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211092*0 + 3*476*FLEN/8, x4, x1, x2)

inst_70365:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00007fffffffff; valaddr_reg:x3; val_offset:211095*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211095*0 + 3*477*FLEN/8, x4, x1, x2)

inst_70366:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0000ffffffffff; valaddr_reg:x3; val_offset:211098*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211098*0 + 3*478*FLEN/8, x4, x1, x2)

inst_70367:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0001ffffffffff; valaddr_reg:x3; val_offset:211101*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211101*0 + 3*479*FLEN/8, x4, x1, x2)

inst_70368:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0003ffffffffff; valaddr_reg:x3; val_offset:211104*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211104*0 + 3*480*FLEN/8, x4, x1, x2)

inst_70369:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0007ffffffffff; valaddr_reg:x3; val_offset:211107*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211107*0 + 3*481*FLEN/8, x4, x1, x2)

inst_70370:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b000fffffffffff; valaddr_reg:x3; val_offset:211110*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211110*0 + 3*482*FLEN/8, x4, x1, x2)

inst_70371:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b001fffffffffff; valaddr_reg:x3; val_offset:211113*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211113*0 + 3*483*FLEN/8, x4, x1, x2)

inst_70372:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b003fffffffffff; valaddr_reg:x3; val_offset:211116*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211116*0 + 3*484*FLEN/8, x4, x1, x2)

inst_70373:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b007fffffffffff; valaddr_reg:x3; val_offset:211119*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211119*0 + 3*485*FLEN/8, x4, x1, x2)

inst_70374:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b00ffffffffffff; valaddr_reg:x3; val_offset:211122*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211122*0 + 3*486*FLEN/8, x4, x1, x2)

inst_70375:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b01ffffffffffff; valaddr_reg:x3; val_offset:211125*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211125*0 + 3*487*FLEN/8, x4, x1, x2)

inst_70376:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b03ffffffffffff; valaddr_reg:x3; val_offset:211128*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211128*0 + 3*488*FLEN/8, x4, x1, x2)

inst_70377:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b07ffffffffffff; valaddr_reg:x3; val_offset:211131*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211131*0 + 3*489*FLEN/8, x4, x1, x2)

inst_70378:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b08000000000000; valaddr_reg:x3; val_offset:211134*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211134*0 + 3*490*FLEN/8, x4, x1, x2)

inst_70379:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0c000000000000; valaddr_reg:x3; val_offset:211137*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211137*0 + 3*491*FLEN/8, x4, x1, x2)

inst_70380:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0e000000000000; valaddr_reg:x3; val_offset:211140*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211140*0 + 3*492*FLEN/8, x4, x1, x2)

inst_70381:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0f000000000000; valaddr_reg:x3; val_offset:211143*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211143*0 + 3*493*FLEN/8, x4, x1, x2)

inst_70382:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0f800000000000; valaddr_reg:x3; val_offset:211146*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211146*0 + 3*494*FLEN/8, x4, x1, x2)

inst_70383:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fc00000000000; valaddr_reg:x3; val_offset:211149*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211149*0 + 3*495*FLEN/8, x4, x1, x2)

inst_70384:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fe00000000000; valaddr_reg:x3; val_offset:211152*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211152*0 + 3*496*FLEN/8, x4, x1, x2)

inst_70385:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ff00000000000; valaddr_reg:x3; val_offset:211155*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211155*0 + 3*497*FLEN/8, x4, x1, x2)

inst_70386:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ff80000000000; valaddr_reg:x3; val_offset:211158*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211158*0 + 3*498*FLEN/8, x4, x1, x2)

inst_70387:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffc0000000000; valaddr_reg:x3; val_offset:211161*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211161*0 + 3*499*FLEN/8, x4, x1, x2)

inst_70388:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffe0000000000; valaddr_reg:x3; val_offset:211164*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211164*0 + 3*500*FLEN/8, x4, x1, x2)

inst_70389:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fff0000000000; valaddr_reg:x3; val_offset:211167*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211167*0 + 3*501*FLEN/8, x4, x1, x2)

inst_70390:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fff8000000000; valaddr_reg:x3; val_offset:211170*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211170*0 + 3*502*FLEN/8, x4, x1, x2)

inst_70391:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffc000000000; valaddr_reg:x3; val_offset:211173*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211173*0 + 3*503*FLEN/8, x4, x1, x2)

inst_70392:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffe000000000; valaddr_reg:x3; val_offset:211176*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211176*0 + 3*504*FLEN/8, x4, x1, x2)

inst_70393:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffff000000000; valaddr_reg:x3; val_offset:211179*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211179*0 + 3*505*FLEN/8, x4, x1, x2)

inst_70394:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffff800000000; valaddr_reg:x3; val_offset:211182*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211182*0 + 3*506*FLEN/8, x4, x1, x2)

inst_70395:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffc00000000; valaddr_reg:x3; val_offset:211185*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211185*0 + 3*507*FLEN/8, x4, x1, x2)

inst_70396:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffe00000000; valaddr_reg:x3; val_offset:211188*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211188*0 + 3*508*FLEN/8, x4, x1, x2)

inst_70397:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffff00000000; valaddr_reg:x3; val_offset:211191*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211191*0 + 3*509*FLEN/8, x4, x1, x2)

inst_70398:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffff80000000; valaddr_reg:x3; val_offset:211194*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211194*0 + 3*510*FLEN/8, x4, x1, x2)

inst_70399:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffc0000000; valaddr_reg:x3; val_offset:211197*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211197*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_70400:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffe0000000; valaddr_reg:x3; val_offset:211200*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211200*0 + 3*512*FLEN/8, x4, x1, x2)

inst_70401:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffff0000000; valaddr_reg:x3; val_offset:211203*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211203*0 + 3*513*FLEN/8, x4, x1, x2)

inst_70402:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffff8000000; valaddr_reg:x3; val_offset:211206*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211206*0 + 3*514*FLEN/8, x4, x1, x2)

inst_70403:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffc000000; valaddr_reg:x3; val_offset:211209*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211209*0 + 3*515*FLEN/8, x4, x1, x2)

inst_70404:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffe000000; valaddr_reg:x3; val_offset:211212*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211212*0 + 3*516*FLEN/8, x4, x1, x2)

inst_70405:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffff000000; valaddr_reg:x3; val_offset:211215*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211215*0 + 3*517*FLEN/8, x4, x1, x2)

inst_70406:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffff800000; valaddr_reg:x3; val_offset:211218*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211218*0 + 3*518*FLEN/8, x4, x1, x2)

inst_70407:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffc00000; valaddr_reg:x3; val_offset:211221*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211221*0 + 3*519*FLEN/8, x4, x1, x2)

inst_70408:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffe00000; valaddr_reg:x3; val_offset:211224*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211224*0 + 3*520*FLEN/8, x4, x1, x2)

inst_70409:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffff00000; valaddr_reg:x3; val_offset:211227*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211227*0 + 3*521*FLEN/8, x4, x1, x2)

inst_70410:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffff80000; valaddr_reg:x3; val_offset:211230*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211230*0 + 3*522*FLEN/8, x4, x1, x2)

inst_70411:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffc0000; valaddr_reg:x3; val_offset:211233*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211233*0 + 3*523*FLEN/8, x4, x1, x2)

inst_70412:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffe0000; valaddr_reg:x3; val_offset:211236*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211236*0 + 3*524*FLEN/8, x4, x1, x2)

inst_70413:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffff0000; valaddr_reg:x3; val_offset:211239*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211239*0 + 3*525*FLEN/8, x4, x1, x2)

inst_70414:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffff8000; valaddr_reg:x3; val_offset:211242*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211242*0 + 3*526*FLEN/8, x4, x1, x2)

inst_70415:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffffc000; valaddr_reg:x3; val_offset:211245*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211245*0 + 3*527*FLEN/8, x4, x1, x2)

inst_70416:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffffe000; valaddr_reg:x3; val_offset:211248*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211248*0 + 3*528*FLEN/8, x4, x1, x2)

inst_70417:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffff000; valaddr_reg:x3; val_offset:211251*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211251*0 + 3*529*FLEN/8, x4, x1, x2)

inst_70418:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffff800; valaddr_reg:x3; val_offset:211254*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211254*0 + 3*530*FLEN/8, x4, x1, x2)

inst_70419:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffffc00; valaddr_reg:x3; val_offset:211257*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211257*0 + 3*531*FLEN/8, x4, x1, x2)

inst_70420:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffffe00; valaddr_reg:x3; val_offset:211260*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211260*0 + 3*532*FLEN/8, x4, x1, x2)

inst_70421:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffffff00; valaddr_reg:x3; val_offset:211263*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211263*0 + 3*533*FLEN/8, x4, x1, x2)

inst_70422:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffffff80; valaddr_reg:x3; val_offset:211266*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211266*0 + 3*534*FLEN/8, x4, x1, x2)

inst_70423:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffffffc0; valaddr_reg:x3; val_offset:211269*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211269*0 + 3*535*FLEN/8, x4, x1, x2)

inst_70424:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffffffe0; valaddr_reg:x3; val_offset:211272*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211272*0 + 3*536*FLEN/8, x4, x1, x2)

inst_70425:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffffff0; valaddr_reg:x3; val_offset:211275*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211275*0 + 3*537*FLEN/8, x4, x1, x2)

inst_70426:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffffff8; valaddr_reg:x3; val_offset:211278*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211278*0 + 3*538*FLEN/8, x4, x1, x2)

inst_70427:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffffffc; valaddr_reg:x3; val_offset:211281*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211281*0 + 3*539*FLEN/8, x4, x1, x2)

inst_70428:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0ffffffffffffe; valaddr_reg:x3; val_offset:211284*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211284*0 + 3*540*FLEN/8, x4, x1, x2)

inst_70429:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3b0 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3b0fffffffffffff; valaddr_reg:x3; val_offset:211287*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211287*0 + 3*541*FLEN/8, x4, x1, x2)

inst_70430:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:211290*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211290*0 + 3*542*FLEN/8, x4, x1, x2)

inst_70431:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:211293*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211293*0 + 3*543*FLEN/8, x4, x1, x2)

inst_70432:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:211296*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211296*0 + 3*544*FLEN/8, x4, x1, x2)

inst_70433:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:211299*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211299*0 + 3*545*FLEN/8, x4, x1, x2)

inst_70434:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:211302*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211302*0 + 3*546*FLEN/8, x4, x1, x2)

inst_70435:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:211305*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211305*0 + 3*547*FLEN/8, x4, x1, x2)

inst_70436:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:211308*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211308*0 + 3*548*FLEN/8, x4, x1, x2)

inst_70437:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:211311*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211311*0 + 3*549*FLEN/8, x4, x1, x2)

inst_70438:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:211314*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211314*0 + 3*550*FLEN/8, x4, x1, x2)

inst_70439:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:211317*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211317*0 + 3*551*FLEN/8, x4, x1, x2)

inst_70440:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:211320*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211320*0 + 3*552*FLEN/8, x4, x1, x2)

inst_70441:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:211323*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211323*0 + 3*553*FLEN/8, x4, x1, x2)

inst_70442:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:211326*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211326*0 + 3*554*FLEN/8, x4, x1, x2)

inst_70443:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:211329*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211329*0 + 3*555*FLEN/8, x4, x1, x2)

inst_70444:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:211332*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211332*0 + 3*556*FLEN/8, x4, x1, x2)

inst_70445:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:211335*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211335*0 + 3*557*FLEN/8, x4, x1, x2)

inst_70446:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:211338*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211338*0 + 3*558*FLEN/8, x4, x1, x2)

inst_70447:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:211341*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211341*0 + 3*559*FLEN/8, x4, x1, x2)

inst_70448:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:211344*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211344*0 + 3*560*FLEN/8, x4, x1, x2)

inst_70449:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:211347*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211347*0 + 3*561*FLEN/8, x4, x1, x2)

inst_70450:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:211350*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211350*0 + 3*562*FLEN/8, x4, x1, x2)

inst_70451:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65aca15566d64 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e74cd80843f0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65aca15566d64; op2val:0x2036e74cd80843f0;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:211353*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211353*0 + 3*563*FLEN/8, x4, x1, x2)

inst_70452:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:211356*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211356*0 + 3*564*FLEN/8, x4, x1, x2)

inst_70453:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:211359*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211359*0 + 3*565*FLEN/8, x4, x1, x2)

inst_70454:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:211362*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211362*0 + 3*566*FLEN/8, x4, x1, x2)

inst_70455:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:211365*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211365*0 + 3*567*FLEN/8, x4, x1, x2)

inst_70456:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:211368*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211368*0 + 3*568*FLEN/8, x4, x1, x2)

inst_70457:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:211371*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211371*0 + 3*569*FLEN/8, x4, x1, x2)

inst_70458:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:211374*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211374*0 + 3*570*FLEN/8, x4, x1, x2)

inst_70459:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:211377*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211377*0 + 3*571*FLEN/8, x4, x1, x2)

inst_70460:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:211380*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211380*0 + 3*572*FLEN/8, x4, x1, x2)

inst_70461:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:211383*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211383*0 + 3*573*FLEN/8, x4, x1, x2)

inst_70462:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:211386*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211386*0 + 3*574*FLEN/8, x4, x1, x2)

inst_70463:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:211389*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211389*0 + 3*575*FLEN/8, x4, x1, x2)

inst_70464:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:211392*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211392*0 + 3*576*FLEN/8, x4, x1, x2)

inst_70465:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:211395*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211395*0 + 3*577*FLEN/8, x4, x1, x2)

inst_70466:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:211398*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211398*0 + 3*578*FLEN/8, x4, x1, x2)

inst_70467:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:211401*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211401*0 + 3*579*FLEN/8, x4, x1, x2)

inst_70468:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:211404*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211404*0 + 3*580*FLEN/8, x4, x1, x2)

inst_70469:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:211407*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211407*0 + 3*581*FLEN/8, x4, x1, x2)

inst_70470:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:211410*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211410*0 + 3*582*FLEN/8, x4, x1, x2)

inst_70471:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:211413*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211413*0 + 3*583*FLEN/8, x4, x1, x2)

inst_70472:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:211416*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211416*0 + 3*584*FLEN/8, x4, x1, x2)

inst_70473:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:211419*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211419*0 + 3*585*FLEN/8, x4, x1, x2)

inst_70474:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000000000; valaddr_reg:x3; val_offset:211422*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211422*0 + 3*586*FLEN/8, x4, x1, x2)

inst_70475:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000000001; valaddr_reg:x3; val_offset:211425*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211425*0 + 3*587*FLEN/8, x4, x1, x2)

inst_70476:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000000003; valaddr_reg:x3; val_offset:211428*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211428*0 + 3*588*FLEN/8, x4, x1, x2)

inst_70477:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000000007; valaddr_reg:x3; val_offset:211431*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211431*0 + 3*589*FLEN/8, x4, x1, x2)

inst_70478:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000000000f; valaddr_reg:x3; val_offset:211434*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211434*0 + 3*590*FLEN/8, x4, x1, x2)

inst_70479:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000000001f; valaddr_reg:x3; val_offset:211437*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211437*0 + 3*591*FLEN/8, x4, x1, x2)

inst_70480:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000000003f; valaddr_reg:x3; val_offset:211440*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211440*0 + 3*592*FLEN/8, x4, x1, x2)

inst_70481:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000000007f; valaddr_reg:x3; val_offset:211443*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211443*0 + 3*593*FLEN/8, x4, x1, x2)

inst_70482:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000000000ff; valaddr_reg:x3; val_offset:211446*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211446*0 + 3*594*FLEN/8, x4, x1, x2)

inst_70483:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000000001ff; valaddr_reg:x3; val_offset:211449*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211449*0 + 3*595*FLEN/8, x4, x1, x2)

inst_70484:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000000003ff; valaddr_reg:x3; val_offset:211452*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211452*0 + 3*596*FLEN/8, x4, x1, x2)

inst_70485:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000000007ff; valaddr_reg:x3; val_offset:211455*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211455*0 + 3*597*FLEN/8, x4, x1, x2)

inst_70486:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000000fff; valaddr_reg:x3; val_offset:211458*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211458*0 + 3*598*FLEN/8, x4, x1, x2)

inst_70487:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000001fff; valaddr_reg:x3; val_offset:211461*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211461*0 + 3*599*FLEN/8, x4, x1, x2)

inst_70488:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000003fff; valaddr_reg:x3; val_offset:211464*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211464*0 + 3*600*FLEN/8, x4, x1, x2)

inst_70489:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000007fff; valaddr_reg:x3; val_offset:211467*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211467*0 + 3*601*FLEN/8, x4, x1, x2)

inst_70490:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000000ffff; valaddr_reg:x3; val_offset:211470*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211470*0 + 3*602*FLEN/8, x4, x1, x2)

inst_70491:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000001ffff; valaddr_reg:x3; val_offset:211473*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211473*0 + 3*603*FLEN/8, x4, x1, x2)

inst_70492:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000003ffff; valaddr_reg:x3; val_offset:211476*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211476*0 + 3*604*FLEN/8, x4, x1, x2)

inst_70493:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000007ffff; valaddr_reg:x3; val_offset:211479*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211479*0 + 3*605*FLEN/8, x4, x1, x2)

inst_70494:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000000fffff; valaddr_reg:x3; val_offset:211482*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211482*0 + 3*606*FLEN/8, x4, x1, x2)

inst_70495:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000001fffff; valaddr_reg:x3; val_offset:211485*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211485*0 + 3*607*FLEN/8, x4, x1, x2)

inst_70496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000003fffff; valaddr_reg:x3; val_offset:211488*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211488*0 + 3*608*FLEN/8, x4, x1, x2)

inst_70497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000007fffff; valaddr_reg:x3; val_offset:211491*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211491*0 + 3*609*FLEN/8, x4, x1, x2)

inst_70498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000000ffffff; valaddr_reg:x3; val_offset:211494*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211494*0 + 3*610*FLEN/8, x4, x1, x2)

inst_70499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000001ffffff; valaddr_reg:x3; val_offset:211497*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211497*0 + 3*611*FLEN/8, x4, x1, x2)

inst_70500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000003ffffff; valaddr_reg:x3; val_offset:211500*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211500*0 + 3*612*FLEN/8, x4, x1, x2)

inst_70501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000007ffffff; valaddr_reg:x3; val_offset:211503*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211503*0 + 3*613*FLEN/8, x4, x1, x2)

inst_70502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000000fffffff; valaddr_reg:x3; val_offset:211506*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211506*0 + 3*614*FLEN/8, x4, x1, x2)

inst_70503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000001fffffff; valaddr_reg:x3; val_offset:211509*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211509*0 + 3*615*FLEN/8, x4, x1, x2)

inst_70504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000003fffffff; valaddr_reg:x3; val_offset:211512*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211512*0 + 3*616*FLEN/8, x4, x1, x2)

inst_70505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000007fffffff; valaddr_reg:x3; val_offset:211515*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211515*0 + 3*617*FLEN/8, x4, x1, x2)

inst_70506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000000ffffffff; valaddr_reg:x3; val_offset:211518*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211518*0 + 3*618*FLEN/8, x4, x1, x2)

inst_70507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000001ffffffff; valaddr_reg:x3; val_offset:211521*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211521*0 + 3*619*FLEN/8, x4, x1, x2)

inst_70508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000003ffffffff; valaddr_reg:x3; val_offset:211524*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211524*0 + 3*620*FLEN/8, x4, x1, x2)

inst_70509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000007ffffffff; valaddr_reg:x3; val_offset:211527*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211527*0 + 3*621*FLEN/8, x4, x1, x2)

inst_70510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100000fffffffff; valaddr_reg:x3; val_offset:211530*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211530*0 + 3*622*FLEN/8, x4, x1, x2)

inst_70511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100001fffffffff; valaddr_reg:x3; val_offset:211533*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211533*0 + 3*623*FLEN/8, x4, x1, x2)

inst_70512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100003fffffffff; valaddr_reg:x3; val_offset:211536*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211536*0 + 3*624*FLEN/8, x4, x1, x2)

inst_70513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100007fffffffff; valaddr_reg:x3; val_offset:211539*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211539*0 + 3*625*FLEN/8, x4, x1, x2)

inst_70514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10000ffffffffff; valaddr_reg:x3; val_offset:211542*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211542*0 + 3*626*FLEN/8, x4, x1, x2)

inst_70515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10001ffffffffff; valaddr_reg:x3; val_offset:211545*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211545*0 + 3*627*FLEN/8, x4, x1, x2)

inst_70516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10003ffffffffff; valaddr_reg:x3; val_offset:211548*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211548*0 + 3*628*FLEN/8, x4, x1, x2)

inst_70517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10007ffffffffff; valaddr_reg:x3; val_offset:211551*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211551*0 + 3*629*FLEN/8, x4, x1, x2)

inst_70518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1000fffffffffff; valaddr_reg:x3; val_offset:211554*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211554*0 + 3*630*FLEN/8, x4, x1, x2)

inst_70519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1001fffffffffff; valaddr_reg:x3; val_offset:211557*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211557*0 + 3*631*FLEN/8, x4, x1, x2)

inst_70520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1003fffffffffff; valaddr_reg:x3; val_offset:211560*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211560*0 + 3*632*FLEN/8, x4, x1, x2)

inst_70521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x1007fffffffffff; valaddr_reg:x3; val_offset:211563*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211563*0 + 3*633*FLEN/8, x4, x1, x2)

inst_70522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x100ffffffffffff; valaddr_reg:x3; val_offset:211566*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211566*0 + 3*634*FLEN/8, x4, x1, x2)

inst_70523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x101ffffffffffff; valaddr_reg:x3; val_offset:211569*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211569*0 + 3*635*FLEN/8, x4, x1, x2)

inst_70524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x103ffffffffffff; valaddr_reg:x3; val_offset:211572*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211572*0 + 3*636*FLEN/8, x4, x1, x2)

inst_70525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x107ffffffffffff; valaddr_reg:x3; val_offset:211575*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211575*0 + 3*637*FLEN/8, x4, x1, x2)

inst_70526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x108000000000000; valaddr_reg:x3; val_offset:211578*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211578*0 + 3*638*FLEN/8, x4, x1, x2)

inst_70527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10c000000000000; valaddr_reg:x3; val_offset:211581*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211581*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_70528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10e000000000000; valaddr_reg:x3; val_offset:211584*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211584*0 + 3*640*FLEN/8, x4, x1, x2)

inst_70529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10f000000000000; valaddr_reg:x3; val_offset:211587*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211587*0 + 3*641*FLEN/8, x4, x1, x2)

inst_70530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10f800000000000; valaddr_reg:x3; val_offset:211590*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211590*0 + 3*642*FLEN/8, x4, x1, x2)

inst_70531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fc00000000000; valaddr_reg:x3; val_offset:211593*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211593*0 + 3*643*FLEN/8, x4, x1, x2)

inst_70532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fe00000000000; valaddr_reg:x3; val_offset:211596*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211596*0 + 3*644*FLEN/8, x4, x1, x2)

inst_70533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ff00000000000; valaddr_reg:x3; val_offset:211599*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211599*0 + 3*645*FLEN/8, x4, x1, x2)

inst_70534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ff80000000000; valaddr_reg:x3; val_offset:211602*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211602*0 + 3*646*FLEN/8, x4, x1, x2)

inst_70535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffc0000000000; valaddr_reg:x3; val_offset:211605*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211605*0 + 3*647*FLEN/8, x4, x1, x2)

inst_70536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffe0000000000; valaddr_reg:x3; val_offset:211608*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211608*0 + 3*648*FLEN/8, x4, x1, x2)

inst_70537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fff0000000000; valaddr_reg:x3; val_offset:211611*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211611*0 + 3*649*FLEN/8, x4, x1, x2)

inst_70538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fff8000000000; valaddr_reg:x3; val_offset:211614*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211614*0 + 3*650*FLEN/8, x4, x1, x2)

inst_70539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffc000000000; valaddr_reg:x3; val_offset:211617*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211617*0 + 3*651*FLEN/8, x4, x1, x2)

inst_70540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffe000000000; valaddr_reg:x3; val_offset:211620*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211620*0 + 3*652*FLEN/8, x4, x1, x2)

inst_70541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffff000000000; valaddr_reg:x3; val_offset:211623*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211623*0 + 3*653*FLEN/8, x4, x1, x2)

inst_70542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffff800000000; valaddr_reg:x3; val_offset:211626*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211626*0 + 3*654*FLEN/8, x4, x1, x2)

inst_70543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffc00000000; valaddr_reg:x3; val_offset:211629*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211629*0 + 3*655*FLEN/8, x4, x1, x2)

inst_70544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffe00000000; valaddr_reg:x3; val_offset:211632*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211632*0 + 3*656*FLEN/8, x4, x1, x2)

inst_70545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffff00000000; valaddr_reg:x3; val_offset:211635*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211635*0 + 3*657*FLEN/8, x4, x1, x2)

inst_70546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffff80000000; valaddr_reg:x3; val_offset:211638*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211638*0 + 3*658*FLEN/8, x4, x1, x2)

inst_70547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffc0000000; valaddr_reg:x3; val_offset:211641*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211641*0 + 3*659*FLEN/8, x4, x1, x2)

inst_70548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffe0000000; valaddr_reg:x3; val_offset:211644*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211644*0 + 3*660*FLEN/8, x4, x1, x2)

inst_70549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffff0000000; valaddr_reg:x3; val_offset:211647*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211647*0 + 3*661*FLEN/8, x4, x1, x2)

inst_70550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffff8000000; valaddr_reg:x3; val_offset:211650*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211650*0 + 3*662*FLEN/8, x4, x1, x2)

inst_70551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffc000000; valaddr_reg:x3; val_offset:211653*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211653*0 + 3*663*FLEN/8, x4, x1, x2)

inst_70552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffe000000; valaddr_reg:x3; val_offset:211656*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211656*0 + 3*664*FLEN/8, x4, x1, x2)

inst_70553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffff000000; valaddr_reg:x3; val_offset:211659*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211659*0 + 3*665*FLEN/8, x4, x1, x2)

inst_70554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffff800000; valaddr_reg:x3; val_offset:211662*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211662*0 + 3*666*FLEN/8, x4, x1, x2)

inst_70555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffc00000; valaddr_reg:x3; val_offset:211665*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211665*0 + 3*667*FLEN/8, x4, x1, x2)

inst_70556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffe00000; valaddr_reg:x3; val_offset:211668*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211668*0 + 3*668*FLEN/8, x4, x1, x2)

inst_70557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffff00000; valaddr_reg:x3; val_offset:211671*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211671*0 + 3*669*FLEN/8, x4, x1, x2)

inst_70558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffff80000; valaddr_reg:x3; val_offset:211674*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211674*0 + 3*670*FLEN/8, x4, x1, x2)

inst_70559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffc0000; valaddr_reg:x3; val_offset:211677*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211677*0 + 3*671*FLEN/8, x4, x1, x2)

inst_70560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffe0000; valaddr_reg:x3; val_offset:211680*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211680*0 + 3*672*FLEN/8, x4, x1, x2)

inst_70561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffff0000; valaddr_reg:x3; val_offset:211683*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211683*0 + 3*673*FLEN/8, x4, x1, x2)

inst_70562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffff8000; valaddr_reg:x3; val_offset:211686*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211686*0 + 3*674*FLEN/8, x4, x1, x2)

inst_70563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffffc000; valaddr_reg:x3; val_offset:211689*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211689*0 + 3*675*FLEN/8, x4, x1, x2)

inst_70564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffffe000; valaddr_reg:x3; val_offset:211692*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211692*0 + 3*676*FLEN/8, x4, x1, x2)

inst_70565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffff000; valaddr_reg:x3; val_offset:211695*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211695*0 + 3*677*FLEN/8, x4, x1, x2)

inst_70566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffff800; valaddr_reg:x3; val_offset:211698*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211698*0 + 3*678*FLEN/8, x4, x1, x2)

inst_70567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffffc00; valaddr_reg:x3; val_offset:211701*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211701*0 + 3*679*FLEN/8, x4, x1, x2)

inst_70568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffffe00; valaddr_reg:x3; val_offset:211704*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211704*0 + 3*680*FLEN/8, x4, x1, x2)

inst_70569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffffff00; valaddr_reg:x3; val_offset:211707*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211707*0 + 3*681*FLEN/8, x4, x1, x2)

inst_70570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffffff80; valaddr_reg:x3; val_offset:211710*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211710*0 + 3*682*FLEN/8, x4, x1, x2)

inst_70571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffffffc0; valaddr_reg:x3; val_offset:211713*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211713*0 + 3*683*FLEN/8, x4, x1, x2)

inst_70572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffffffe0; valaddr_reg:x3; val_offset:211716*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211716*0 + 3*684*FLEN/8, x4, x1, x2)

inst_70573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffffff0; valaddr_reg:x3; val_offset:211719*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211719*0 + 3*685*FLEN/8, x4, x1, x2)

inst_70574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffffff8; valaddr_reg:x3; val_offset:211722*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211722*0 + 3*686*FLEN/8, x4, x1, x2)

inst_70575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffffffc; valaddr_reg:x3; val_offset:211725*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211725*0 + 3*687*FLEN/8, x4, x1, x2)

inst_70576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10ffffffffffffe; valaddr_reg:x3; val_offset:211728*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211728*0 + 3*688*FLEN/8, x4, x1, x2)

inst_70577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x65bb8909b01b8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x010 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa65bb8909b01b8; op2val:0x0;
op3val:0x10fffffffffffff; valaddr_reg:x3; val_offset:211731*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211731*0 + 3*689*FLEN/8, x4, x1, x2)

inst_70578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000000000; valaddr_reg:x3; val_offset:211734*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211734*0 + 3*690*FLEN/8, x4, x1, x2)

inst_70579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000000001; valaddr_reg:x3; val_offset:211737*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211737*0 + 3*691*FLEN/8, x4, x1, x2)

inst_70580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000000003; valaddr_reg:x3; val_offset:211740*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211740*0 + 3*692*FLEN/8, x4, x1, x2)

inst_70581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000000007; valaddr_reg:x3; val_offset:211743*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211743*0 + 3*693*FLEN/8, x4, x1, x2)

inst_70582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000000000f; valaddr_reg:x3; val_offset:211746*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211746*0 + 3*694*FLEN/8, x4, x1, x2)

inst_70583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000000001f; valaddr_reg:x3; val_offset:211749*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211749*0 + 3*695*FLEN/8, x4, x1, x2)

inst_70584:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000000003f; valaddr_reg:x3; val_offset:211752*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211752*0 + 3*696*FLEN/8, x4, x1, x2)

inst_70585:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000000007f; valaddr_reg:x3; val_offset:211755*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211755*0 + 3*697*FLEN/8, x4, x1, x2)

inst_70586:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000000000ff; valaddr_reg:x3; val_offset:211758*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211758*0 + 3*698*FLEN/8, x4, x1, x2)

inst_70587:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000000001ff; valaddr_reg:x3; val_offset:211761*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211761*0 + 3*699*FLEN/8, x4, x1, x2)

inst_70588:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000000003ff; valaddr_reg:x3; val_offset:211764*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211764*0 + 3*700*FLEN/8, x4, x1, x2)

inst_70589:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000000007ff; valaddr_reg:x3; val_offset:211767*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211767*0 + 3*701*FLEN/8, x4, x1, x2)

inst_70590:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000000fff; valaddr_reg:x3; val_offset:211770*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211770*0 + 3*702*FLEN/8, x4, x1, x2)

inst_70591:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000001fff; valaddr_reg:x3; val_offset:211773*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211773*0 + 3*703*FLEN/8, x4, x1, x2)

inst_70592:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000003fff; valaddr_reg:x3; val_offset:211776*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211776*0 + 3*704*FLEN/8, x4, x1, x2)

inst_70593:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000007fff; valaddr_reg:x3; val_offset:211779*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211779*0 + 3*705*FLEN/8, x4, x1, x2)

inst_70594:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000000ffff; valaddr_reg:x3; val_offset:211782*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211782*0 + 3*706*FLEN/8, x4, x1, x2)

inst_70595:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000001ffff; valaddr_reg:x3; val_offset:211785*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211785*0 + 3*707*FLEN/8, x4, x1, x2)

inst_70596:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000003ffff; valaddr_reg:x3; val_offset:211788*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211788*0 + 3*708*FLEN/8, x4, x1, x2)

inst_70597:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000007ffff; valaddr_reg:x3; val_offset:211791*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211791*0 + 3*709*FLEN/8, x4, x1, x2)

inst_70598:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000000fffff; valaddr_reg:x3; val_offset:211794*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211794*0 + 3*710*FLEN/8, x4, x1, x2)

inst_70599:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000001fffff; valaddr_reg:x3; val_offset:211797*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211797*0 + 3*711*FLEN/8, x4, x1, x2)

inst_70600:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000003fffff; valaddr_reg:x3; val_offset:211800*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211800*0 + 3*712*FLEN/8, x4, x1, x2)

inst_70601:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000007fffff; valaddr_reg:x3; val_offset:211803*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211803*0 + 3*713*FLEN/8, x4, x1, x2)

inst_70602:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000000ffffff; valaddr_reg:x3; val_offset:211806*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211806*0 + 3*714*FLEN/8, x4, x1, x2)

inst_70603:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000001ffffff; valaddr_reg:x3; val_offset:211809*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211809*0 + 3*715*FLEN/8, x4, x1, x2)

inst_70604:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000003ffffff; valaddr_reg:x3; val_offset:211812*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211812*0 + 3*716*FLEN/8, x4, x1, x2)

inst_70605:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000007ffffff; valaddr_reg:x3; val_offset:211815*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211815*0 + 3*717*FLEN/8, x4, x1, x2)

inst_70606:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000000fffffff; valaddr_reg:x3; val_offset:211818*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211818*0 + 3*718*FLEN/8, x4, x1, x2)

inst_70607:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000001fffffff; valaddr_reg:x3; val_offset:211821*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211821*0 + 3*719*FLEN/8, x4, x1, x2)

inst_70608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000003fffffff; valaddr_reg:x3; val_offset:211824*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211824*0 + 3*720*FLEN/8, x4, x1, x2)

inst_70609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000007fffffff; valaddr_reg:x3; val_offset:211827*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211827*0 + 3*721*FLEN/8, x4, x1, x2)

inst_70610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300000ffffffff; valaddr_reg:x3; val_offset:211830*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211830*0 + 3*722*FLEN/8, x4, x1, x2)

inst_70611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300001ffffffff; valaddr_reg:x3; val_offset:211833*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211833*0 + 3*723*FLEN/8, x4, x1, x2)

inst_70612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300003ffffffff; valaddr_reg:x3; val_offset:211836*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211836*0 + 3*724*FLEN/8, x4, x1, x2)

inst_70613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300007ffffffff; valaddr_reg:x3; val_offset:211839*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211839*0 + 3*725*FLEN/8, x4, x1, x2)

inst_70614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830000fffffffff; valaddr_reg:x3; val_offset:211842*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211842*0 + 3*726*FLEN/8, x4, x1, x2)

inst_70615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830001fffffffff; valaddr_reg:x3; val_offset:211845*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211845*0 + 3*727*FLEN/8, x4, x1, x2)

inst_70616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830003fffffffff; valaddr_reg:x3; val_offset:211848*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211848*0 + 3*728*FLEN/8, x4, x1, x2)

inst_70617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830007fffffffff; valaddr_reg:x3; val_offset:211851*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211851*0 + 3*729*FLEN/8, x4, x1, x2)

inst_70618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383000ffffffffff; valaddr_reg:x3; val_offset:211854*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211854*0 + 3*730*FLEN/8, x4, x1, x2)

inst_70619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383001ffffffffff; valaddr_reg:x3; val_offset:211857*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211857*0 + 3*731*FLEN/8, x4, x1, x2)

inst_70620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383003ffffffffff; valaddr_reg:x3; val_offset:211860*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211860*0 + 3*732*FLEN/8, x4, x1, x2)

inst_70621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383007ffffffffff; valaddr_reg:x3; val_offset:211863*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211863*0 + 3*733*FLEN/8, x4, x1, x2)

inst_70622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38300fffffffffff; valaddr_reg:x3; val_offset:211866*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211866*0 + 3*734*FLEN/8, x4, x1, x2)

inst_70623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38301fffffffffff; valaddr_reg:x3; val_offset:211869*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211869*0 + 3*735*FLEN/8, x4, x1, x2)

inst_70624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38303fffffffffff; valaddr_reg:x3; val_offset:211872*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211872*0 + 3*736*FLEN/8, x4, x1, x2)

inst_70625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x38307fffffffffff; valaddr_reg:x3; val_offset:211875*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211875*0 + 3*737*FLEN/8, x4, x1, x2)

inst_70626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3830ffffffffffff; valaddr_reg:x3; val_offset:211878*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211878*0 + 3*738*FLEN/8, x4, x1, x2)

inst_70627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3831ffffffffffff; valaddr_reg:x3; val_offset:211881*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211881*0 + 3*739*FLEN/8, x4, x1, x2)

inst_70628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3833ffffffffffff; valaddr_reg:x3; val_offset:211884*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211884*0 + 3*740*FLEN/8, x4, x1, x2)

inst_70629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3837ffffffffffff; valaddr_reg:x3; val_offset:211887*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211887*0 + 3*741*FLEN/8, x4, x1, x2)

inst_70630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x3838000000000000; valaddr_reg:x3; val_offset:211890*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211890*0 + 3*742*FLEN/8, x4, x1, x2)

inst_70631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383c000000000000; valaddr_reg:x3; val_offset:211893*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211893*0 + 3*743*FLEN/8, x4, x1, x2)

inst_70632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383e000000000000; valaddr_reg:x3; val_offset:211896*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211896*0 + 3*744*FLEN/8, x4, x1, x2)

inst_70633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383f000000000000; valaddr_reg:x3; val_offset:211899*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211899*0 + 3*745*FLEN/8, x4, x1, x2)

inst_70634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383f800000000000; valaddr_reg:x3; val_offset:211902*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211902*0 + 3*746*FLEN/8, x4, x1, x2)

inst_70635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fc00000000000; valaddr_reg:x3; val_offset:211905*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211905*0 + 3*747*FLEN/8, x4, x1, x2)

inst_70636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fe00000000000; valaddr_reg:x3; val_offset:211908*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211908*0 + 3*748*FLEN/8, x4, x1, x2)

inst_70637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ff00000000000; valaddr_reg:x3; val_offset:211911*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211911*0 + 3*749*FLEN/8, x4, x1, x2)

inst_70638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ff80000000000; valaddr_reg:x3; val_offset:211914*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211914*0 + 3*750*FLEN/8, x4, x1, x2)

inst_70639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffc0000000000; valaddr_reg:x3; val_offset:211917*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211917*0 + 3*751*FLEN/8, x4, x1, x2)

inst_70640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffe0000000000; valaddr_reg:x3; val_offset:211920*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211920*0 + 3*752*FLEN/8, x4, x1, x2)

inst_70641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fff0000000000; valaddr_reg:x3; val_offset:211923*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211923*0 + 3*753*FLEN/8, x4, x1, x2)

inst_70642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fff8000000000; valaddr_reg:x3; val_offset:211926*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211926*0 + 3*754*FLEN/8, x4, x1, x2)

inst_70643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fffc000000000; valaddr_reg:x3; val_offset:211929*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211929*0 + 3*755*FLEN/8, x4, x1, x2)

inst_70644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fffe000000000; valaddr_reg:x3; val_offset:211932*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211932*0 + 3*756*FLEN/8, x4, x1, x2)

inst_70645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffff000000000; valaddr_reg:x3; val_offset:211935*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211935*0 + 3*757*FLEN/8, x4, x1, x2)

inst_70646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffff800000000; valaddr_reg:x3; val_offset:211938*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211938*0 + 3*758*FLEN/8, x4, x1, x2)

inst_70647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffffc00000000; valaddr_reg:x3; val_offset:211941*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211941*0 + 3*759*FLEN/8, x4, x1, x2)

inst_70648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffffe00000000; valaddr_reg:x3; val_offset:211944*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211944*0 + 3*760*FLEN/8, x4, x1, x2)

inst_70649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fffff00000000; valaddr_reg:x3; val_offset:211947*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211947*0 + 3*761*FLEN/8, x4, x1, x2)

inst_70650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fffff80000000; valaddr_reg:x3; val_offset:211950*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211950*0 + 3*762*FLEN/8, x4, x1, x2)

inst_70651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fffffc0000000; valaddr_reg:x3; val_offset:211953*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211953*0 + 3*763*FLEN/8, x4, x1, x2)

inst_70652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383fffffe0000000; valaddr_reg:x3; val_offset:211956*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211956*0 + 3*764*FLEN/8, x4, x1, x2)

inst_70653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffffff0000000; valaddr_reg:x3; val_offset:211959*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211959*0 + 3*765*FLEN/8, x4, x1, x2)

inst_70654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffffff8000000; valaddr_reg:x3; val_offset:211962*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211962*0 + 3*766*FLEN/8, x4, x1, x2)

inst_70655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x660dae3f3f3e9 and fs2 == 0 and fe2 == 0x203 and fm2 == 0x6e117986cd194 and fs3 == 0 and fe3 == 0x383 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa660dae3f3f3e9; op2val:0x2036e117986cd194;
op3val:0x383ffffffc000000; valaddr_reg:x3; val_offset:211965*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 211965*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340483219352453119,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340500811538497535,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340535995910586367,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340606364654764031,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9340747102143119359,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9341028577119830015,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9341591527073251327,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9342717426980093951,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9342717426980093952,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9343843326886936576,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344406276840357888,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344687751817068544,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344828489305423872,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344898858049601536,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344934042421690368,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344951634607734784,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344960430700756992,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344964828747268096,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344967027770523648,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344968127282151424,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344968677037965312,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344968951915872256,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969089354825728,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969158074302464,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969192434040832,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969209613910016,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969218203844608,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969222498811904,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969224646295552,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969225720037376,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226256908288,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226525343744,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226659561472,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226726670336,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226760224768,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226777001984,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226785390592,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226789584896,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226791682048,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226792730624,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793254912,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793517056,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793648128,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793713664,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793746432,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793762816,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793771008,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793775104,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793777152,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793778176,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793778688,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793778944,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779072,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779136,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779168,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779184,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779192,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779196,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779198,64,FLEN)
NAN_BOXED(6892282135738804487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779199,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966144,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966145,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966147,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966151,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966159,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966175,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966207,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966271,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966399,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576966655,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576967167,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576968191,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576970239,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576974335,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576982527,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621576998911,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577031679,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577097215,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577228287,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621577490431,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621578014719,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621579063295,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621581160447,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621585354751,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621593743359,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621610520575,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621644075007,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621711183871,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019621845401599,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019622113837055,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019622650707967,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019623724449791,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019625871933439,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019630166900735,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019638756835327,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019655936704511,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019690296442879,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019759015919615,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408019896454873087,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408020171332780031,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408020721088593919,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408021820600221695,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408024019623477247,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408028417669988351,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408037213763010559,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408054805949054975,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408089990321143807,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408160359065321471,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408301096553676799,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9408582571530387455,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9409145521483808767,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9410271421390651391,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9410271421390651392,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9411397321297494016,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9411960271250915328,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412241746227625984,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412382483715981312,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412452852460158976,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412488036832247808,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412505629018292224,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412514425111314432,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412518823157825536,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412521022181081088,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522121692708864,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522671448522752,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412522946326429696,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523083765383168,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523152484859904,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523186844598272,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523204024467456,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523212614402048,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523216909369344,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523219056852992,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220130594816,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220667465728,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523220935901184,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221070118912,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221137227776,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221170782208,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221187559424,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221195948032,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221200142336,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221202239488,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221203288064,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221203812352,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204074496,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204205568,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204271104,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204303872,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204320256,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204328448,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204332544,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204334592,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204335616,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336128,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336384,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336512,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336576,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336608,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336624,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336632,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336636,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336638,64,FLEN)
NAN_BOXED(6892287888719873580,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9412523221204336639,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669376,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669377,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669379,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669383,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669391,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669407,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669439,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669503,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669631,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397669887,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397670399,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397671423,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397673471,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397677567,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397685759,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397702143,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397734911,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397800447,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262397931519,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262398193663,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262398717951,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262399766527,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262401863679,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262406057983,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262414446591,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262431223807,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262464778239,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262531887103,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262666104831,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261262934540287,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261263471411199,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261264545153023,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261266692636671,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261270987603967,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261279577538559,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261296757407743,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261331117146111,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261399836622847,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261537275576319,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080261812153483263,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080262361909297151,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080263461420924927,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080265660444180479,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080270058490691583,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080278854583713791,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080296446769758207,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080331631141847039,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080401999886024703,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080542737374380031,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4080824212351090687,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4081387162304511999,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4082513062211354623,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4082513062211354624,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4083638962118197248,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084201912071618560,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084483387048329216,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084624124536684544,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084694493280862208,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084729677652951040,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084747269838995456,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084756065932017664,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084760463978528768,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084762663001784320,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084763762513412096,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764312269225984,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764587147132928,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764724586086400,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764793305563136,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764827665301504,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764844845170688,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764853435105280,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764857730072576,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764859877556224,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764860951298048,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764861488168960,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764861756604416,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764861890822144,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764861957931008,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764861991485440,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862008262656,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862016651264,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862020845568,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862022942720,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862023991296,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862024515584,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862024777728,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862024908800,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862024974336,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025007104,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025023488,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025031680,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025035776,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025037824,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025038848,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039360,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039616,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039744,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039808,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039840,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039856,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039864,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039868,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039870,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4084764862025039871,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6892288126785472687,64,FLEN)
NAN_BOXED(2321305158354237829,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887296,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887297,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887299,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887303,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887311,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887327,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887359,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887423,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887551,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736887807,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736888319,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736889343,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736891391,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736895487,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736903679,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736920063,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835736952831,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835737018367,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835737149439,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835737411583,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835737935871,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835738984447,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835741081599,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835745275903,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835753664511,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835770441727,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835803996159,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882835871105023,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882836005322751,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882836273758207,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882836810629119,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882837884370943,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882840031854591,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882844326821887,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882852916756479,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882870096625663,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882904456364031,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236882973175840767,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236883110614794239,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236883385492701183,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236883935248515071,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236885034760142847,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236887233783398399,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236891631829909503,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236900427922931711,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236918020108976127,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236953204481064959,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9237023573225242623,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9237164310713597951,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9237445785690308607,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9238008735643729919,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9239134635550572543,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9239134635550572544,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9240260535457415168,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9240823485410836480,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241104960387547136,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241245697875902464,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241316066620080128,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241351250992168960,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241368843178213376,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241377639271235584,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241382037317746688,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241384236341002240,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241385335852630016,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241385885608443904,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386160486350848,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386297925304320,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386366644781056,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386401004519424,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386418184388608,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386426774323200,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386431069290496,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386433216774144,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386434290515968,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386434827386880,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435095822336,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435230040064,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435297148928,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435330703360,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435347480576,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435355869184,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435360063488,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435362160640,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435363209216,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435363733504,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435363995648,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364126720,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364192256,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364225024,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364241408,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364249600,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364253696,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364255744,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364256768,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257280,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257536,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257664,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257728,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257760,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257776,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257784,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257788,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257790,64,FLEN)
NAN_BOXED(6892295380841023445,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257791,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748224,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748225,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748227,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748231,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748239,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748255,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748287,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748351,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748479,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237748735,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237749247,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237750271,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237752319,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237756415,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237764607,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237780991,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237813759,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048237879295,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048238010367,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048238272511,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048238796799,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048239845375,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048241942527,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048246136831,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048254525439,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048271302655,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048304857087,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048371965951,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048506183679,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398048774619135,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398049311490047,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398050385231871,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398052532715519,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398056827682815,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398065417617407,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398082597486591,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398116957224959,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398185676701695,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398323115655167,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251398597993562111,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251399147749375999,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251400247261003775,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251402446284259327,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251406844330770431,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251415640423792639,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251433232609837055,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251468416981925887,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251538785726103551,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251679523214458879,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4251960998191169535,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4252523948144590847,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4253649848051433471,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4253649848051433472,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4254775747958276096,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255338697911697408,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255620172888408064,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255760910376763392,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255831279120941056,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255866463493029888,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255884055679074304,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255892851772096512,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255897249818607616,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255899448841863168,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255900548353490944,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901098109304832,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901372987211776,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901510426165248,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901579145641984,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901613505380352,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901630685249536,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901639275184128,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901643570151424,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901645717635072,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901646791376896,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647328247808,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647596683264,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647730900992,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647798009856,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647831564288,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647848341504,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647856730112,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647860924416,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647863021568,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647864070144,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647864594432,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647864856576,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647864987648,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865053184,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865085952,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865102336,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865110528,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865114624,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865116672,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865117696,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118208,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118464,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118592,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118656,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118688,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118704,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118712,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118716,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118718,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4255901647865118719,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6892296103725002084,64,FLEN)
NAN_BOXED(2321296975184020464,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927936,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927937,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927939,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927943,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927951,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927967,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927999,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037928063,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037928191,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037928447,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037928959,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037929983,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037932031,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037936127,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037944319,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037960703,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037993471,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594038059007,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594038190079,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594038452223,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594038976511,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594040025087,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594042122239,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594046316543,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594054705151,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594071482367,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594105036799,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594172145663,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594306363391,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594574798847,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057595111669759,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057596185411583,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057598332895231,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057602627862527,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057611217797119,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057628397666303,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057662757404671,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057731476881407,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057868915834879,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72058143793741823,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72058693549555711,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72059793061183487,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72061992084439039,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72066390130950143,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72075186223972351,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72092778410016767,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72127962782105599,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72198331526283263,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72339069014638591,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72620543991349247,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(73183493944770559,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(74309393851613183,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(74309393851613184,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(75435293758455808,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(75998243711877120,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76279718688587776,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76420456176943104,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76490824921120768,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76526009293209600,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76543601479254016,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76552397572276224,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76556795618787328,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76558994642042880,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76560094153670656,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76560643909484544,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76560918787391488,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561056226344960,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561124945821696,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561159305560064,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561176485429248,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561185075363840,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561189370331136,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561191517814784,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561192591556608,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193128427520,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193396862976,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193531080704,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193598189568,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193631744000,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193648521216,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193656909824,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193661104128,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193663201280,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193664249856,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193664774144,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665036288,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665167360,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665232896,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665265664,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665282048,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665290240,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665294336,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665296384,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665297408,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665297920,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298176,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298304,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298368,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298400,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298416,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298424,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298428,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298430,64,FLEN)
NAN_BOXED(6892297127995310520,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(76561193665298431,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006075904,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006075905,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006075907,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006075911,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006075919,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006075935,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006075967,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006076031,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006076159,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006076415,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006076927,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006077951,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006079999,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006084095,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006092287,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006108671,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006141439,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006206975,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006338047,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065006600191,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065007124479,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065008173055,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065010270207,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065014464511,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065022853119,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065039630335,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065073184767,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065140293631,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065274511359,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736065542946815,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736066079817727,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736067153559551,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736069301043199,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736073596010495,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736082185945087,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736099365814271,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736133725552639,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736202445029375,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736339883982847,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048736614761889791,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048737164517703679,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048738264029331455,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048740463052587007,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048744861099098111,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048753657192120319,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048771249378164735,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048806433750253567,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4048876802494431231,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4049017539982786559,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4049299014959497215,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4049861964912918527,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4050987864819761151,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4050987864819761152,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4052113764726603776,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4052676714680025088,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4052958189656735744,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053098927145091072,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053169295889268736,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053204480261357568,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053222072447401984,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053230868540424192,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053235266586935296,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053237465610190848,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053238565121818624,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239114877632512,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239389755539456,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239527194492928,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239595913969664,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239630273708032,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239647453577216,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239656043511808,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239660338479104,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239662485962752,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239663559704576,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239664096575488,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239664365010944,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239664499228672,64,FLEN)
NAN_BOXED(6892302772980675561,64,FLEN)
NAN_BOXED(2321290149413835156,64,FLEN)
NAN_BOXED(4053239664566337536,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
