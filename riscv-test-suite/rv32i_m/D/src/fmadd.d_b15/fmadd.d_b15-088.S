
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_66816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:200448*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200448*0 + 3*0*FLEN/8, x4, x1, x2)

inst_66817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:200451*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200451*0 + 3*1*FLEN/8, x4, x1, x2)

inst_66818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:200454*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200454*0 + 3*2*FLEN/8, x4, x1, x2)

inst_66819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:200457*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200457*0 + 3*3*FLEN/8, x4, x1, x2)

inst_66820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:200460*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200460*0 + 3*4*FLEN/8, x4, x1, x2)

inst_66821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:200463*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200463*0 + 3*5*FLEN/8, x4, x1, x2)

inst_66822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:200466*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200466*0 + 3*6*FLEN/8, x4, x1, x2)

inst_66823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:200469*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200469*0 + 3*7*FLEN/8, x4, x1, x2)

inst_66824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:200472*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200472*0 + 3*8*FLEN/8, x4, x1, x2)

inst_66825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:200475*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200475*0 + 3*9*FLEN/8, x4, x1, x2)

inst_66826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:200478*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200478*0 + 3*10*FLEN/8, x4, x1, x2)

inst_66827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:200481*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200481*0 + 3*11*FLEN/8, x4, x1, x2)

inst_66828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:200484*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200484*0 + 3*12*FLEN/8, x4, x1, x2)

inst_66829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:200487*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200487*0 + 3*13*FLEN/8, x4, x1, x2)

inst_66830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:200490*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200490*0 + 3*14*FLEN/8, x4, x1, x2)

inst_66831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:200493*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200493*0 + 3*15*FLEN/8, x4, x1, x2)

inst_66832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000000000; valaddr_reg:x3; val_offset:200496*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200496*0 + 3*16*FLEN/8, x4, x1, x2)

inst_66833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000000001; valaddr_reg:x3; val_offset:200499*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200499*0 + 3*17*FLEN/8, x4, x1, x2)

inst_66834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000000003; valaddr_reg:x3; val_offset:200502*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200502*0 + 3*18*FLEN/8, x4, x1, x2)

inst_66835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000000007; valaddr_reg:x3; val_offset:200505*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200505*0 + 3*19*FLEN/8, x4, x1, x2)

inst_66836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000000000f; valaddr_reg:x3; val_offset:200508*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200508*0 + 3*20*FLEN/8, x4, x1, x2)

inst_66837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000000001f; valaddr_reg:x3; val_offset:200511*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200511*0 + 3*21*FLEN/8, x4, x1, x2)

inst_66838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000000003f; valaddr_reg:x3; val_offset:200514*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200514*0 + 3*22*FLEN/8, x4, x1, x2)

inst_66839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000000007f; valaddr_reg:x3; val_offset:200517*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200517*0 + 3*23*FLEN/8, x4, x1, x2)

inst_66840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000000000ff; valaddr_reg:x3; val_offset:200520*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200520*0 + 3*24*FLEN/8, x4, x1, x2)

inst_66841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000000001ff; valaddr_reg:x3; val_offset:200523*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200523*0 + 3*25*FLEN/8, x4, x1, x2)

inst_66842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000000003ff; valaddr_reg:x3; val_offset:200526*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200526*0 + 3*26*FLEN/8, x4, x1, x2)

inst_66843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000000007ff; valaddr_reg:x3; val_offset:200529*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200529*0 + 3*27*FLEN/8, x4, x1, x2)

inst_66844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000000fff; valaddr_reg:x3; val_offset:200532*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200532*0 + 3*28*FLEN/8, x4, x1, x2)

inst_66845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000001fff; valaddr_reg:x3; val_offset:200535*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200535*0 + 3*29*FLEN/8, x4, x1, x2)

inst_66846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000003fff; valaddr_reg:x3; val_offset:200538*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200538*0 + 3*30*FLEN/8, x4, x1, x2)

inst_66847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000007fff; valaddr_reg:x3; val_offset:200541*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200541*0 + 3*31*FLEN/8, x4, x1, x2)

inst_66848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000000ffff; valaddr_reg:x3; val_offset:200544*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200544*0 + 3*32*FLEN/8, x4, x1, x2)

inst_66849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000001ffff; valaddr_reg:x3; val_offset:200547*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200547*0 + 3*33*FLEN/8, x4, x1, x2)

inst_66850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000003ffff; valaddr_reg:x3; val_offset:200550*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200550*0 + 3*34*FLEN/8, x4, x1, x2)

inst_66851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000007ffff; valaddr_reg:x3; val_offset:200553*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200553*0 + 3*35*FLEN/8, x4, x1, x2)

inst_66852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000000fffff; valaddr_reg:x3; val_offset:200556*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200556*0 + 3*36*FLEN/8, x4, x1, x2)

inst_66853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000001fffff; valaddr_reg:x3; val_offset:200559*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200559*0 + 3*37*FLEN/8, x4, x1, x2)

inst_66854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000003fffff; valaddr_reg:x3; val_offset:200562*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200562*0 + 3*38*FLEN/8, x4, x1, x2)

inst_66855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000007fffff; valaddr_reg:x3; val_offset:200565*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200565*0 + 3*39*FLEN/8, x4, x1, x2)

inst_66856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000000ffffff; valaddr_reg:x3; val_offset:200568*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200568*0 + 3*40*FLEN/8, x4, x1, x2)

inst_66857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000001ffffff; valaddr_reg:x3; val_offset:200571*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200571*0 + 3*41*FLEN/8, x4, x1, x2)

inst_66858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000003ffffff; valaddr_reg:x3; val_offset:200574*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200574*0 + 3*42*FLEN/8, x4, x1, x2)

inst_66859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000007ffffff; valaddr_reg:x3; val_offset:200577*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200577*0 + 3*43*FLEN/8, x4, x1, x2)

inst_66860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000000fffffff; valaddr_reg:x3; val_offset:200580*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200580*0 + 3*44*FLEN/8, x4, x1, x2)

inst_66861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000001fffffff; valaddr_reg:x3; val_offset:200583*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200583*0 + 3*45*FLEN/8, x4, x1, x2)

inst_66862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000003fffffff; valaddr_reg:x3; val_offset:200586*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200586*0 + 3*46*FLEN/8, x4, x1, x2)

inst_66863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000007fffffff; valaddr_reg:x3; val_offset:200589*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200589*0 + 3*47*FLEN/8, x4, x1, x2)

inst_66864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00000ffffffff; valaddr_reg:x3; val_offset:200592*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200592*0 + 3*48*FLEN/8, x4, x1, x2)

inst_66865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00001ffffffff; valaddr_reg:x3; val_offset:200595*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200595*0 + 3*49*FLEN/8, x4, x1, x2)

inst_66866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00003ffffffff; valaddr_reg:x3; val_offset:200598*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200598*0 + 3*50*FLEN/8, x4, x1, x2)

inst_66867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00007ffffffff; valaddr_reg:x3; val_offset:200601*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200601*0 + 3*51*FLEN/8, x4, x1, x2)

inst_66868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0000fffffffff; valaddr_reg:x3; val_offset:200604*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200604*0 + 3*52*FLEN/8, x4, x1, x2)

inst_66869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0001fffffffff; valaddr_reg:x3; val_offset:200607*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200607*0 + 3*53*FLEN/8, x4, x1, x2)

inst_66870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0003fffffffff; valaddr_reg:x3; val_offset:200610*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200610*0 + 3*54*FLEN/8, x4, x1, x2)

inst_66871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0007fffffffff; valaddr_reg:x3; val_offset:200613*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200613*0 + 3*55*FLEN/8, x4, x1, x2)

inst_66872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e000ffffffffff; valaddr_reg:x3; val_offset:200616*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200616*0 + 3*56*FLEN/8, x4, x1, x2)

inst_66873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e001ffffffffff; valaddr_reg:x3; val_offset:200619*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200619*0 + 3*57*FLEN/8, x4, x1, x2)

inst_66874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e003ffffffffff; valaddr_reg:x3; val_offset:200622*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200622*0 + 3*58*FLEN/8, x4, x1, x2)

inst_66875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e007ffffffffff; valaddr_reg:x3; val_offset:200625*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200625*0 + 3*59*FLEN/8, x4, x1, x2)

inst_66876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e00fffffffffff; valaddr_reg:x3; val_offset:200628*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200628*0 + 3*60*FLEN/8, x4, x1, x2)

inst_66877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e01fffffffffff; valaddr_reg:x3; val_offset:200631*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200631*0 + 3*61*FLEN/8, x4, x1, x2)

inst_66878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e03fffffffffff; valaddr_reg:x3; val_offset:200634*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200634*0 + 3*62*FLEN/8, x4, x1, x2)

inst_66879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e07fffffffffff; valaddr_reg:x3; val_offset:200637*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200637*0 + 3*63*FLEN/8, x4, x1, x2)

inst_66880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e0ffffffffffff; valaddr_reg:x3; val_offset:200640*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200640*0 + 3*64*FLEN/8, x4, x1, x2)

inst_66881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e1ffffffffffff; valaddr_reg:x3; val_offset:200643*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200643*0 + 3*65*FLEN/8, x4, x1, x2)

inst_66882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e3ffffffffffff; valaddr_reg:x3; val_offset:200646*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200646*0 + 3*66*FLEN/8, x4, x1, x2)

inst_66883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e7ffffffffffff; valaddr_reg:x3; val_offset:200649*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200649*0 + 3*67*FLEN/8, x4, x1, x2)

inst_66884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81e8000000000000; valaddr_reg:x3; val_offset:200652*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200652*0 + 3*68*FLEN/8, x4, x1, x2)

inst_66885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81ec000000000000; valaddr_reg:x3; val_offset:200655*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200655*0 + 3*69*FLEN/8, x4, x1, x2)

inst_66886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81ee000000000000; valaddr_reg:x3; val_offset:200658*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200658*0 + 3*70*FLEN/8, x4, x1, x2)

inst_66887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81ef000000000000; valaddr_reg:x3; val_offset:200661*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200661*0 + 3*71*FLEN/8, x4, x1, x2)

inst_66888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81ef800000000000; valaddr_reg:x3; val_offset:200664*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200664*0 + 3*72*FLEN/8, x4, x1, x2)

inst_66889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efc00000000000; valaddr_reg:x3; val_offset:200667*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200667*0 + 3*73*FLEN/8, x4, x1, x2)

inst_66890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efe00000000000; valaddr_reg:x3; val_offset:200670*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200670*0 + 3*74*FLEN/8, x4, x1, x2)

inst_66891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81eff00000000000; valaddr_reg:x3; val_offset:200673*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200673*0 + 3*75*FLEN/8, x4, x1, x2)

inst_66892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81eff80000000000; valaddr_reg:x3; val_offset:200676*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200676*0 + 3*76*FLEN/8, x4, x1, x2)

inst_66893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effc0000000000; valaddr_reg:x3; val_offset:200679*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200679*0 + 3*77*FLEN/8, x4, x1, x2)

inst_66894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effe0000000000; valaddr_reg:x3; val_offset:200682*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200682*0 + 3*78*FLEN/8, x4, x1, x2)

inst_66895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efff0000000000; valaddr_reg:x3; val_offset:200685*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200685*0 + 3*79*FLEN/8, x4, x1, x2)

inst_66896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efff8000000000; valaddr_reg:x3; val_offset:200688*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200688*0 + 3*80*FLEN/8, x4, x1, x2)

inst_66897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffc000000000; valaddr_reg:x3; val_offset:200691*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200691*0 + 3*81*FLEN/8, x4, x1, x2)

inst_66898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffe000000000; valaddr_reg:x3; val_offset:200694*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200694*0 + 3*82*FLEN/8, x4, x1, x2)

inst_66899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effff000000000; valaddr_reg:x3; val_offset:200697*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200697*0 + 3*83*FLEN/8, x4, x1, x2)

inst_66900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effff800000000; valaddr_reg:x3; val_offset:200700*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200700*0 + 3*84*FLEN/8, x4, x1, x2)

inst_66901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffc00000000; valaddr_reg:x3; val_offset:200703*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200703*0 + 3*85*FLEN/8, x4, x1, x2)

inst_66902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffe00000000; valaddr_reg:x3; val_offset:200706*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200706*0 + 3*86*FLEN/8, x4, x1, x2)

inst_66903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffff00000000; valaddr_reg:x3; val_offset:200709*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200709*0 + 3*87*FLEN/8, x4, x1, x2)

inst_66904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffff80000000; valaddr_reg:x3; val_offset:200712*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200712*0 + 3*88*FLEN/8, x4, x1, x2)

inst_66905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffc0000000; valaddr_reg:x3; val_offset:200715*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200715*0 + 3*89*FLEN/8, x4, x1, x2)

inst_66906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffe0000000; valaddr_reg:x3; val_offset:200718*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200718*0 + 3*90*FLEN/8, x4, x1, x2)

inst_66907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffff0000000; valaddr_reg:x3; val_offset:200721*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200721*0 + 3*91*FLEN/8, x4, x1, x2)

inst_66908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffff8000000; valaddr_reg:x3; val_offset:200724*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200724*0 + 3*92*FLEN/8, x4, x1, x2)

inst_66909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffc000000; valaddr_reg:x3; val_offset:200727*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200727*0 + 3*93*FLEN/8, x4, x1, x2)

inst_66910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffe000000; valaddr_reg:x3; val_offset:200730*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200730*0 + 3*94*FLEN/8, x4, x1, x2)

inst_66911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffff000000; valaddr_reg:x3; val_offset:200733*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200733*0 + 3*95*FLEN/8, x4, x1, x2)

inst_66912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffff800000; valaddr_reg:x3; val_offset:200736*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200736*0 + 3*96*FLEN/8, x4, x1, x2)

inst_66913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffc00000; valaddr_reg:x3; val_offset:200739*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200739*0 + 3*97*FLEN/8, x4, x1, x2)

inst_66914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffe00000; valaddr_reg:x3; val_offset:200742*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200742*0 + 3*98*FLEN/8, x4, x1, x2)

inst_66915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffff00000; valaddr_reg:x3; val_offset:200745*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200745*0 + 3*99*FLEN/8, x4, x1, x2)

inst_66916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffff80000; valaddr_reg:x3; val_offset:200748*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200748*0 + 3*100*FLEN/8, x4, x1, x2)

inst_66917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffc0000; valaddr_reg:x3; val_offset:200751*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200751*0 + 3*101*FLEN/8, x4, x1, x2)

inst_66918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffe0000; valaddr_reg:x3; val_offset:200754*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200754*0 + 3*102*FLEN/8, x4, x1, x2)

inst_66919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffff0000; valaddr_reg:x3; val_offset:200757*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200757*0 + 3*103*FLEN/8, x4, x1, x2)

inst_66920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffff8000; valaddr_reg:x3; val_offset:200760*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200760*0 + 3*104*FLEN/8, x4, x1, x2)

inst_66921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffffc000; valaddr_reg:x3; val_offset:200763*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200763*0 + 3*105*FLEN/8, x4, x1, x2)

inst_66922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffffe000; valaddr_reg:x3; val_offset:200766*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200766*0 + 3*106*FLEN/8, x4, x1, x2)

inst_66923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffff000; valaddr_reg:x3; val_offset:200769*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200769*0 + 3*107*FLEN/8, x4, x1, x2)

inst_66924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffff800; valaddr_reg:x3; val_offset:200772*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200772*0 + 3*108*FLEN/8, x4, x1, x2)

inst_66925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffffc00; valaddr_reg:x3; val_offset:200775*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200775*0 + 3*109*FLEN/8, x4, x1, x2)

inst_66926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffffe00; valaddr_reg:x3; val_offset:200778*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200778*0 + 3*110*FLEN/8, x4, x1, x2)

inst_66927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffffff00; valaddr_reg:x3; val_offset:200781*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200781*0 + 3*111*FLEN/8, x4, x1, x2)

inst_66928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffffff80; valaddr_reg:x3; val_offset:200784*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200784*0 + 3*112*FLEN/8, x4, x1, x2)

inst_66929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffffffc0; valaddr_reg:x3; val_offset:200787*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200787*0 + 3*113*FLEN/8, x4, x1, x2)

inst_66930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffffffe0; valaddr_reg:x3; val_offset:200790*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200790*0 + 3*114*FLEN/8, x4, x1, x2)

inst_66931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffffff0; valaddr_reg:x3; val_offset:200793*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200793*0 + 3*115*FLEN/8, x4, x1, x2)

inst_66932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffffff8; valaddr_reg:x3; val_offset:200796*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200796*0 + 3*116*FLEN/8, x4, x1, x2)

inst_66933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffffffc; valaddr_reg:x3; val_offset:200799*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200799*0 + 3*117*FLEN/8, x4, x1, x2)

inst_66934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81effffffffffffe; valaddr_reg:x3; val_offset:200802*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200802*0 + 3*118*FLEN/8, x4, x1, x2)

inst_66935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5625f693222e6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01e and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5625f693222e6; op2val:0x8000;
op3val:0x81efffffffffffff; valaddr_reg:x3; val_offset:200805*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200805*0 + 3*119*FLEN/8, x4, x1, x2)

inst_66936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:200808*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200808*0 + 3*120*FLEN/8, x4, x1, x2)

inst_66937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:200811*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200811*0 + 3*121*FLEN/8, x4, x1, x2)

inst_66938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:200814*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200814*0 + 3*122*FLEN/8, x4, x1, x2)

inst_66939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:200817*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200817*0 + 3*123*FLEN/8, x4, x1, x2)

inst_66940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:200820*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200820*0 + 3*124*FLEN/8, x4, x1, x2)

inst_66941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:200823*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200823*0 + 3*125*FLEN/8, x4, x1, x2)

inst_66942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:200826*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200826*0 + 3*126*FLEN/8, x4, x1, x2)

inst_66943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:200829*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200829*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_66944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:200832*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200832*0 + 3*128*FLEN/8, x4, x1, x2)

inst_66945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:200835*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200835*0 + 3*129*FLEN/8, x4, x1, x2)

inst_66946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:200838*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200838*0 + 3*130*FLEN/8, x4, x1, x2)

inst_66947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:200841*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200841*0 + 3*131*FLEN/8, x4, x1, x2)

inst_66948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:200844*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200844*0 + 3*132*FLEN/8, x4, x1, x2)

inst_66949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:200847*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200847*0 + 3*133*FLEN/8, x4, x1, x2)

inst_66950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:200850*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200850*0 + 3*134*FLEN/8, x4, x1, x2)

inst_66951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:200853*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200853*0 + 3*135*FLEN/8, x4, x1, x2)

inst_66952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:200856*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200856*0 + 3*136*FLEN/8, x4, x1, x2)

inst_66953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:200859*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200859*0 + 3*137*FLEN/8, x4, x1, x2)

inst_66954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:200862*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200862*0 + 3*138*FLEN/8, x4, x1, x2)

inst_66955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:200865*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200865*0 + 3*139*FLEN/8, x4, x1, x2)

inst_66956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:200868*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200868*0 + 3*140*FLEN/8, x4, x1, x2)

inst_66957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:200871*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200871*0 + 3*141*FLEN/8, x4, x1, x2)

inst_66958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000000000; valaddr_reg:x3; val_offset:200874*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200874*0 + 3*142*FLEN/8, x4, x1, x2)

inst_66959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000000001; valaddr_reg:x3; val_offset:200877*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200877*0 + 3*143*FLEN/8, x4, x1, x2)

inst_66960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000000003; valaddr_reg:x3; val_offset:200880*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200880*0 + 3*144*FLEN/8, x4, x1, x2)

inst_66961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000000007; valaddr_reg:x3; val_offset:200883*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200883*0 + 3*145*FLEN/8, x4, x1, x2)

inst_66962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000000000f; valaddr_reg:x3; val_offset:200886*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200886*0 + 3*146*FLEN/8, x4, x1, x2)

inst_66963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000000001f; valaddr_reg:x3; val_offset:200889*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200889*0 + 3*147*FLEN/8, x4, x1, x2)

inst_66964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000000003f; valaddr_reg:x3; val_offset:200892*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200892*0 + 3*148*FLEN/8, x4, x1, x2)

inst_66965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000000007f; valaddr_reg:x3; val_offset:200895*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200895*0 + 3*149*FLEN/8, x4, x1, x2)

inst_66966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000000000ff; valaddr_reg:x3; val_offset:200898*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200898*0 + 3*150*FLEN/8, x4, x1, x2)

inst_66967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000000001ff; valaddr_reg:x3; val_offset:200901*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200901*0 + 3*151*FLEN/8, x4, x1, x2)

inst_66968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000000003ff; valaddr_reg:x3; val_offset:200904*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200904*0 + 3*152*FLEN/8, x4, x1, x2)

inst_66969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000000007ff; valaddr_reg:x3; val_offset:200907*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200907*0 + 3*153*FLEN/8, x4, x1, x2)

inst_66970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000000fff; valaddr_reg:x3; val_offset:200910*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200910*0 + 3*154*FLEN/8, x4, x1, x2)

inst_66971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000001fff; valaddr_reg:x3; val_offset:200913*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200913*0 + 3*155*FLEN/8, x4, x1, x2)

inst_66972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000003fff; valaddr_reg:x3; val_offset:200916*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200916*0 + 3*156*FLEN/8, x4, x1, x2)

inst_66973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000007fff; valaddr_reg:x3; val_offset:200919*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200919*0 + 3*157*FLEN/8, x4, x1, x2)

inst_66974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000000ffff; valaddr_reg:x3; val_offset:200922*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200922*0 + 3*158*FLEN/8, x4, x1, x2)

inst_66975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000001ffff; valaddr_reg:x3; val_offset:200925*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200925*0 + 3*159*FLEN/8, x4, x1, x2)

inst_66976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000003ffff; valaddr_reg:x3; val_offset:200928*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200928*0 + 3*160*FLEN/8, x4, x1, x2)

inst_66977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000007ffff; valaddr_reg:x3; val_offset:200931*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200931*0 + 3*161*FLEN/8, x4, x1, x2)

inst_66978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000000fffff; valaddr_reg:x3; val_offset:200934*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200934*0 + 3*162*FLEN/8, x4, x1, x2)

inst_66979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000001fffff; valaddr_reg:x3; val_offset:200937*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200937*0 + 3*163*FLEN/8, x4, x1, x2)

inst_66980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000003fffff; valaddr_reg:x3; val_offset:200940*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200940*0 + 3*164*FLEN/8, x4, x1, x2)

inst_66981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000007fffff; valaddr_reg:x3; val_offset:200943*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200943*0 + 3*165*FLEN/8, x4, x1, x2)

inst_66982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000000ffffff; valaddr_reg:x3; val_offset:200946*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200946*0 + 3*166*FLEN/8, x4, x1, x2)

inst_66983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000001ffffff; valaddr_reg:x3; val_offset:200949*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200949*0 + 3*167*FLEN/8, x4, x1, x2)

inst_66984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000003ffffff; valaddr_reg:x3; val_offset:200952*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200952*0 + 3*168*FLEN/8, x4, x1, x2)

inst_66985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000007ffffff; valaddr_reg:x3; val_offset:200955*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200955*0 + 3*169*FLEN/8, x4, x1, x2)

inst_66986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000000fffffff; valaddr_reg:x3; val_offset:200958*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200958*0 + 3*170*FLEN/8, x4, x1, x2)

inst_66987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000001fffffff; valaddr_reg:x3; val_offset:200961*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200961*0 + 3*171*FLEN/8, x4, x1, x2)

inst_66988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000003fffffff; valaddr_reg:x3; val_offset:200964*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200964*0 + 3*172*FLEN/8, x4, x1, x2)

inst_66989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000007fffffff; valaddr_reg:x3; val_offset:200967*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200967*0 + 3*173*FLEN/8, x4, x1, x2)

inst_66990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00000ffffffff; valaddr_reg:x3; val_offset:200970*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200970*0 + 3*174*FLEN/8, x4, x1, x2)

inst_66991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00001ffffffff; valaddr_reg:x3; val_offset:200973*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200973*0 + 3*175*FLEN/8, x4, x1, x2)

inst_66992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00003ffffffff; valaddr_reg:x3; val_offset:200976*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200976*0 + 3*176*FLEN/8, x4, x1, x2)

inst_66993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00007ffffffff; valaddr_reg:x3; val_offset:200979*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200979*0 + 3*177*FLEN/8, x4, x1, x2)

inst_66994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0000fffffffff; valaddr_reg:x3; val_offset:200982*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200982*0 + 3*178*FLEN/8, x4, x1, x2)

inst_66995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0001fffffffff; valaddr_reg:x3; val_offset:200985*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200985*0 + 3*179*FLEN/8, x4, x1, x2)

inst_66996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0003fffffffff; valaddr_reg:x3; val_offset:200988*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200988*0 + 3*180*FLEN/8, x4, x1, x2)

inst_66997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0007fffffffff; valaddr_reg:x3; val_offset:200991*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200991*0 + 3*181*FLEN/8, x4, x1, x2)

inst_66998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b000ffffffffff; valaddr_reg:x3; val_offset:200994*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200994*0 + 3*182*FLEN/8, x4, x1, x2)

inst_66999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b001ffffffffff; valaddr_reg:x3; val_offset:200997*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 200997*0 + 3*183*FLEN/8, x4, x1, x2)

inst_67000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b003ffffffffff; valaddr_reg:x3; val_offset:201000*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201000*0 + 3*184*FLEN/8, x4, x1, x2)

inst_67001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b007ffffffffff; valaddr_reg:x3; val_offset:201003*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201003*0 + 3*185*FLEN/8, x4, x1, x2)

inst_67002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b00fffffffffff; valaddr_reg:x3; val_offset:201006*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201006*0 + 3*186*FLEN/8, x4, x1, x2)

inst_67003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b01fffffffffff; valaddr_reg:x3; val_offset:201009*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201009*0 + 3*187*FLEN/8, x4, x1, x2)

inst_67004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b03fffffffffff; valaddr_reg:x3; val_offset:201012*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201012*0 + 3*188*FLEN/8, x4, x1, x2)

inst_67005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b07fffffffffff; valaddr_reg:x3; val_offset:201015*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201015*0 + 3*189*FLEN/8, x4, x1, x2)

inst_67006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b0ffffffffffff; valaddr_reg:x3; val_offset:201018*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201018*0 + 3*190*FLEN/8, x4, x1, x2)

inst_67007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b1ffffffffffff; valaddr_reg:x3; val_offset:201021*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201021*0 + 3*191*FLEN/8, x4, x1, x2)

inst_67008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b3ffffffffffff; valaddr_reg:x3; val_offset:201024*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201024*0 + 3*192*FLEN/8, x4, x1, x2)

inst_67009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b7ffffffffffff; valaddr_reg:x3; val_offset:201027*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201027*0 + 3*193*FLEN/8, x4, x1, x2)

inst_67010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3b8000000000000; valaddr_reg:x3; val_offset:201030*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201030*0 + 3*194*FLEN/8, x4, x1, x2)

inst_67011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bc000000000000; valaddr_reg:x3; val_offset:201033*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201033*0 + 3*195*FLEN/8, x4, x1, x2)

inst_67012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3be000000000000; valaddr_reg:x3; val_offset:201036*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201036*0 + 3*196*FLEN/8, x4, x1, x2)

inst_67013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bf000000000000; valaddr_reg:x3; val_offset:201039*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201039*0 + 3*197*FLEN/8, x4, x1, x2)

inst_67014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bf800000000000; valaddr_reg:x3; val_offset:201042*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201042*0 + 3*198*FLEN/8, x4, x1, x2)

inst_67015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfc00000000000; valaddr_reg:x3; val_offset:201045*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201045*0 + 3*199*FLEN/8, x4, x1, x2)

inst_67016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfe00000000000; valaddr_reg:x3; val_offset:201048*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201048*0 + 3*200*FLEN/8, x4, x1, x2)

inst_67017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bff00000000000; valaddr_reg:x3; val_offset:201051*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201051*0 + 3*201*FLEN/8, x4, x1, x2)

inst_67018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bff80000000000; valaddr_reg:x3; val_offset:201054*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201054*0 + 3*202*FLEN/8, x4, x1, x2)

inst_67019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffc0000000000; valaddr_reg:x3; val_offset:201057*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201057*0 + 3*203*FLEN/8, x4, x1, x2)

inst_67020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffe0000000000; valaddr_reg:x3; val_offset:201060*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201060*0 + 3*204*FLEN/8, x4, x1, x2)

inst_67021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfff0000000000; valaddr_reg:x3; val_offset:201063*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201063*0 + 3*205*FLEN/8, x4, x1, x2)

inst_67022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfff8000000000; valaddr_reg:x3; val_offset:201066*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201066*0 + 3*206*FLEN/8, x4, x1, x2)

inst_67023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffc000000000; valaddr_reg:x3; val_offset:201069*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201069*0 + 3*207*FLEN/8, x4, x1, x2)

inst_67024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffe000000000; valaddr_reg:x3; val_offset:201072*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201072*0 + 3*208*FLEN/8, x4, x1, x2)

inst_67025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffff000000000; valaddr_reg:x3; val_offset:201075*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201075*0 + 3*209*FLEN/8, x4, x1, x2)

inst_67026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffff800000000; valaddr_reg:x3; val_offset:201078*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201078*0 + 3*210*FLEN/8, x4, x1, x2)

inst_67027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffc00000000; valaddr_reg:x3; val_offset:201081*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201081*0 + 3*211*FLEN/8, x4, x1, x2)

inst_67028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffe00000000; valaddr_reg:x3; val_offset:201084*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201084*0 + 3*212*FLEN/8, x4, x1, x2)

inst_67029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffff00000000; valaddr_reg:x3; val_offset:201087*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201087*0 + 3*213*FLEN/8, x4, x1, x2)

inst_67030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffff80000000; valaddr_reg:x3; val_offset:201090*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201090*0 + 3*214*FLEN/8, x4, x1, x2)

inst_67031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffc0000000; valaddr_reg:x3; val_offset:201093*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201093*0 + 3*215*FLEN/8, x4, x1, x2)

inst_67032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffe0000000; valaddr_reg:x3; val_offset:201096*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201096*0 + 3*216*FLEN/8, x4, x1, x2)

inst_67033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffff0000000; valaddr_reg:x3; val_offset:201099*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201099*0 + 3*217*FLEN/8, x4, x1, x2)

inst_67034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffff8000000; valaddr_reg:x3; val_offset:201102*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201102*0 + 3*218*FLEN/8, x4, x1, x2)

inst_67035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffc000000; valaddr_reg:x3; val_offset:201105*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201105*0 + 3*219*FLEN/8, x4, x1, x2)

inst_67036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffe000000; valaddr_reg:x3; val_offset:201108*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201108*0 + 3*220*FLEN/8, x4, x1, x2)

inst_67037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffff000000; valaddr_reg:x3; val_offset:201111*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201111*0 + 3*221*FLEN/8, x4, x1, x2)

inst_67038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffff800000; valaddr_reg:x3; val_offset:201114*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201114*0 + 3*222*FLEN/8, x4, x1, x2)

inst_67039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffc00000; valaddr_reg:x3; val_offset:201117*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201117*0 + 3*223*FLEN/8, x4, x1, x2)

inst_67040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffe00000; valaddr_reg:x3; val_offset:201120*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201120*0 + 3*224*FLEN/8, x4, x1, x2)

inst_67041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffff00000; valaddr_reg:x3; val_offset:201123*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201123*0 + 3*225*FLEN/8, x4, x1, x2)

inst_67042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffff80000; valaddr_reg:x3; val_offset:201126*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201126*0 + 3*226*FLEN/8, x4, x1, x2)

inst_67043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffc0000; valaddr_reg:x3; val_offset:201129*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201129*0 + 3*227*FLEN/8, x4, x1, x2)

inst_67044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffe0000; valaddr_reg:x3; val_offset:201132*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201132*0 + 3*228*FLEN/8, x4, x1, x2)

inst_67045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffff0000; valaddr_reg:x3; val_offset:201135*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201135*0 + 3*229*FLEN/8, x4, x1, x2)

inst_67046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffff8000; valaddr_reg:x3; val_offset:201138*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201138*0 + 3*230*FLEN/8, x4, x1, x2)

inst_67047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffffc000; valaddr_reg:x3; val_offset:201141*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201141*0 + 3*231*FLEN/8, x4, x1, x2)

inst_67048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffffe000; valaddr_reg:x3; val_offset:201144*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201144*0 + 3*232*FLEN/8, x4, x1, x2)

inst_67049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffff000; valaddr_reg:x3; val_offset:201147*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201147*0 + 3*233*FLEN/8, x4, x1, x2)

inst_67050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffff800; valaddr_reg:x3; val_offset:201150*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201150*0 + 3*234*FLEN/8, x4, x1, x2)

inst_67051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffffc00; valaddr_reg:x3; val_offset:201153*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201153*0 + 3*235*FLEN/8, x4, x1, x2)

inst_67052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffffe00; valaddr_reg:x3; val_offset:201156*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201156*0 + 3*236*FLEN/8, x4, x1, x2)

inst_67053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffffff00; valaddr_reg:x3; val_offset:201159*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201159*0 + 3*237*FLEN/8, x4, x1, x2)

inst_67054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffffff80; valaddr_reg:x3; val_offset:201162*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201162*0 + 3*238*FLEN/8, x4, x1, x2)

inst_67055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffffffc0; valaddr_reg:x3; val_offset:201165*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201165*0 + 3*239*FLEN/8, x4, x1, x2)

inst_67056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffffffe0; valaddr_reg:x3; val_offset:201168*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201168*0 + 3*240*FLEN/8, x4, x1, x2)

inst_67057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffffff0; valaddr_reg:x3; val_offset:201171*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201171*0 + 3*241*FLEN/8, x4, x1, x2)

inst_67058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffffff8; valaddr_reg:x3; val_offset:201174*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201174*0 + 3*242*FLEN/8, x4, x1, x2)

inst_67059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffffffc; valaddr_reg:x3; val_offset:201177*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201177*0 + 3*243*FLEN/8, x4, x1, x2)

inst_67060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bffffffffffffe; valaddr_reg:x3; val_offset:201180*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201180*0 + 3*244*FLEN/8, x4, x1, x2)

inst_67061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x564425829852e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x03b and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa564425829852e; op2val:0x0;
op3val:0x3bfffffffffffff; valaddr_reg:x3; val_offset:201183*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201183*0 + 3*245*FLEN/8, x4, x1, x2)

inst_67062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:201186*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201186*0 + 3*246*FLEN/8, x4, x1, x2)

inst_67063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:201189*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201189*0 + 3*247*FLEN/8, x4, x1, x2)

inst_67064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:201192*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201192*0 + 3*248*FLEN/8, x4, x1, x2)

inst_67065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:201195*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201195*0 + 3*249*FLEN/8, x4, x1, x2)

inst_67066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:201198*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201198*0 + 3*250*FLEN/8, x4, x1, x2)

inst_67067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:201201*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201201*0 + 3*251*FLEN/8, x4, x1, x2)

inst_67068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:201204*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201204*0 + 3*252*FLEN/8, x4, x1, x2)

inst_67069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:201207*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201207*0 + 3*253*FLEN/8, x4, x1, x2)

inst_67070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:201210*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201210*0 + 3*254*FLEN/8, x4, x1, x2)

inst_67071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:201213*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201213*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_67072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:201216*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201216*0 + 3*256*FLEN/8, x4, x1, x2)

inst_67073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:201219*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201219*0 + 3*257*FLEN/8, x4, x1, x2)

inst_67074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:201222*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201222*0 + 3*258*FLEN/8, x4, x1, x2)

inst_67075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:201225*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201225*0 + 3*259*FLEN/8, x4, x1, x2)

inst_67076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:201228*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201228*0 + 3*260*FLEN/8, x4, x1, x2)

inst_67077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:201231*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201231*0 + 3*261*FLEN/8, x4, x1, x2)

inst_67078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:201234*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201234*0 + 3*262*FLEN/8, x4, x1, x2)

inst_67079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:201237*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201237*0 + 3*263*FLEN/8, x4, x1, x2)

inst_67080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:201240*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201240*0 + 3*264*FLEN/8, x4, x1, x2)

inst_67081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:201243*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201243*0 + 3*265*FLEN/8, x4, x1, x2)

inst_67082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:201246*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201246*0 + 3*266*FLEN/8, x4, x1, x2)

inst_67083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:201249*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201249*0 + 3*267*FLEN/8, x4, x1, x2)

inst_67084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000000000; valaddr_reg:x3; val_offset:201252*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201252*0 + 3*268*FLEN/8, x4, x1, x2)

inst_67085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000000001; valaddr_reg:x3; val_offset:201255*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201255*0 + 3*269*FLEN/8, x4, x1, x2)

inst_67086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000000003; valaddr_reg:x3; val_offset:201258*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201258*0 + 3*270*FLEN/8, x4, x1, x2)

inst_67087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000000007; valaddr_reg:x3; val_offset:201261*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201261*0 + 3*271*FLEN/8, x4, x1, x2)

inst_67088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000000000f; valaddr_reg:x3; val_offset:201264*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201264*0 + 3*272*FLEN/8, x4, x1, x2)

inst_67089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000000001f; valaddr_reg:x3; val_offset:201267*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201267*0 + 3*273*FLEN/8, x4, x1, x2)

inst_67090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000000003f; valaddr_reg:x3; val_offset:201270*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201270*0 + 3*274*FLEN/8, x4, x1, x2)

inst_67091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000000007f; valaddr_reg:x3; val_offset:201273*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201273*0 + 3*275*FLEN/8, x4, x1, x2)

inst_67092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000000000ff; valaddr_reg:x3; val_offset:201276*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201276*0 + 3*276*FLEN/8, x4, x1, x2)

inst_67093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000000001ff; valaddr_reg:x3; val_offset:201279*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201279*0 + 3*277*FLEN/8, x4, x1, x2)

inst_67094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000000003ff; valaddr_reg:x3; val_offset:201282*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201282*0 + 3*278*FLEN/8, x4, x1, x2)

inst_67095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000000007ff; valaddr_reg:x3; val_offset:201285*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201285*0 + 3*279*FLEN/8, x4, x1, x2)

inst_67096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000000fff; valaddr_reg:x3; val_offset:201288*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201288*0 + 3*280*FLEN/8, x4, x1, x2)

inst_67097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000001fff; valaddr_reg:x3; val_offset:201291*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201291*0 + 3*281*FLEN/8, x4, x1, x2)

inst_67098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000003fff; valaddr_reg:x3; val_offset:201294*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201294*0 + 3*282*FLEN/8, x4, x1, x2)

inst_67099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000007fff; valaddr_reg:x3; val_offset:201297*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201297*0 + 3*283*FLEN/8, x4, x1, x2)

inst_67100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000000ffff; valaddr_reg:x3; val_offset:201300*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201300*0 + 3*284*FLEN/8, x4, x1, x2)

inst_67101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000001ffff; valaddr_reg:x3; val_offset:201303*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201303*0 + 3*285*FLEN/8, x4, x1, x2)

inst_67102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000003ffff; valaddr_reg:x3; val_offset:201306*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201306*0 + 3*286*FLEN/8, x4, x1, x2)

inst_67103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000007ffff; valaddr_reg:x3; val_offset:201309*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201309*0 + 3*287*FLEN/8, x4, x1, x2)

inst_67104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000000fffff; valaddr_reg:x3; val_offset:201312*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201312*0 + 3*288*FLEN/8, x4, x1, x2)

inst_67105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000001fffff; valaddr_reg:x3; val_offset:201315*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201315*0 + 3*289*FLEN/8, x4, x1, x2)

inst_67106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000003fffff; valaddr_reg:x3; val_offset:201318*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201318*0 + 3*290*FLEN/8, x4, x1, x2)

inst_67107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000007fffff; valaddr_reg:x3; val_offset:201321*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201321*0 + 3*291*FLEN/8, x4, x1, x2)

inst_67108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000000ffffff; valaddr_reg:x3; val_offset:201324*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201324*0 + 3*292*FLEN/8, x4, x1, x2)

inst_67109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000001ffffff; valaddr_reg:x3; val_offset:201327*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201327*0 + 3*293*FLEN/8, x4, x1, x2)

inst_67110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000003ffffff; valaddr_reg:x3; val_offset:201330*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201330*0 + 3*294*FLEN/8, x4, x1, x2)

inst_67111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000007ffffff; valaddr_reg:x3; val_offset:201333*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201333*0 + 3*295*FLEN/8, x4, x1, x2)

inst_67112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000000fffffff; valaddr_reg:x3; val_offset:201336*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201336*0 + 3*296*FLEN/8, x4, x1, x2)

inst_67113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000001fffffff; valaddr_reg:x3; val_offset:201339*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201339*0 + 3*297*FLEN/8, x4, x1, x2)

inst_67114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000003fffffff; valaddr_reg:x3; val_offset:201342*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201342*0 + 3*298*FLEN/8, x4, x1, x2)

inst_67115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000007fffffff; valaddr_reg:x3; val_offset:201345*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201345*0 + 3*299*FLEN/8, x4, x1, x2)

inst_67116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400000ffffffff; valaddr_reg:x3; val_offset:201348*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201348*0 + 3*300*FLEN/8, x4, x1, x2)

inst_67117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400001ffffffff; valaddr_reg:x3; val_offset:201351*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201351*0 + 3*301*FLEN/8, x4, x1, x2)

inst_67118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400003ffffffff; valaddr_reg:x3; val_offset:201354*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201354*0 + 3*302*FLEN/8, x4, x1, x2)

inst_67119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400007ffffffff; valaddr_reg:x3; val_offset:201357*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201357*0 + 3*303*FLEN/8, x4, x1, x2)

inst_67120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340000fffffffff; valaddr_reg:x3; val_offset:201360*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201360*0 + 3*304*FLEN/8, x4, x1, x2)

inst_67121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340001fffffffff; valaddr_reg:x3; val_offset:201363*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201363*0 + 3*305*FLEN/8, x4, x1, x2)

inst_67122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340003fffffffff; valaddr_reg:x3; val_offset:201366*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201366*0 + 3*306*FLEN/8, x4, x1, x2)

inst_67123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340007fffffffff; valaddr_reg:x3; val_offset:201369*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201369*0 + 3*307*FLEN/8, x4, x1, x2)

inst_67124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834000ffffffffff; valaddr_reg:x3; val_offset:201372*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201372*0 + 3*308*FLEN/8, x4, x1, x2)

inst_67125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834001ffffffffff; valaddr_reg:x3; val_offset:201375*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201375*0 + 3*309*FLEN/8, x4, x1, x2)

inst_67126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834003ffffffffff; valaddr_reg:x3; val_offset:201378*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201378*0 + 3*310*FLEN/8, x4, x1, x2)

inst_67127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834007ffffffffff; valaddr_reg:x3; val_offset:201381*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201381*0 + 3*311*FLEN/8, x4, x1, x2)

inst_67128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83400fffffffffff; valaddr_reg:x3; val_offset:201384*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201384*0 + 3*312*FLEN/8, x4, x1, x2)

inst_67129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83401fffffffffff; valaddr_reg:x3; val_offset:201387*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201387*0 + 3*313*FLEN/8, x4, x1, x2)

inst_67130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83403fffffffffff; valaddr_reg:x3; val_offset:201390*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201390*0 + 3*314*FLEN/8, x4, x1, x2)

inst_67131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x83407fffffffffff; valaddr_reg:x3; val_offset:201393*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201393*0 + 3*315*FLEN/8, x4, x1, x2)

inst_67132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8340ffffffffffff; valaddr_reg:x3; val_offset:201396*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201396*0 + 3*316*FLEN/8, x4, x1, x2)

inst_67133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8341ffffffffffff; valaddr_reg:x3; val_offset:201399*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201399*0 + 3*317*FLEN/8, x4, x1, x2)

inst_67134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8343ffffffffffff; valaddr_reg:x3; val_offset:201402*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201402*0 + 3*318*FLEN/8, x4, x1, x2)

inst_67135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8347ffffffffffff; valaddr_reg:x3; val_offset:201405*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201405*0 + 3*319*FLEN/8, x4, x1, x2)

inst_67136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x8348000000000000; valaddr_reg:x3; val_offset:201408*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201408*0 + 3*320*FLEN/8, x4, x1, x2)

inst_67137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834c000000000000; valaddr_reg:x3; val_offset:201411*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201411*0 + 3*321*FLEN/8, x4, x1, x2)

inst_67138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834e000000000000; valaddr_reg:x3; val_offset:201414*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201414*0 + 3*322*FLEN/8, x4, x1, x2)

inst_67139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834f000000000000; valaddr_reg:x3; val_offset:201417*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201417*0 + 3*323*FLEN/8, x4, x1, x2)

inst_67140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834f800000000000; valaddr_reg:x3; val_offset:201420*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201420*0 + 3*324*FLEN/8, x4, x1, x2)

inst_67141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fc00000000000; valaddr_reg:x3; val_offset:201423*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201423*0 + 3*325*FLEN/8, x4, x1, x2)

inst_67142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fe00000000000; valaddr_reg:x3; val_offset:201426*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201426*0 + 3*326*FLEN/8, x4, x1, x2)

inst_67143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ff00000000000; valaddr_reg:x3; val_offset:201429*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201429*0 + 3*327*FLEN/8, x4, x1, x2)

inst_67144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ff80000000000; valaddr_reg:x3; val_offset:201432*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201432*0 + 3*328*FLEN/8, x4, x1, x2)

inst_67145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffc0000000000; valaddr_reg:x3; val_offset:201435*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201435*0 + 3*329*FLEN/8, x4, x1, x2)

inst_67146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffe0000000000; valaddr_reg:x3; val_offset:201438*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201438*0 + 3*330*FLEN/8, x4, x1, x2)

inst_67147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fff0000000000; valaddr_reg:x3; val_offset:201441*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201441*0 + 3*331*FLEN/8, x4, x1, x2)

inst_67148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fff8000000000; valaddr_reg:x3; val_offset:201444*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201444*0 + 3*332*FLEN/8, x4, x1, x2)

inst_67149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffc000000000; valaddr_reg:x3; val_offset:201447*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201447*0 + 3*333*FLEN/8, x4, x1, x2)

inst_67150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffe000000000; valaddr_reg:x3; val_offset:201450*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201450*0 + 3*334*FLEN/8, x4, x1, x2)

inst_67151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffff000000000; valaddr_reg:x3; val_offset:201453*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201453*0 + 3*335*FLEN/8, x4, x1, x2)

inst_67152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffff800000000; valaddr_reg:x3; val_offset:201456*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201456*0 + 3*336*FLEN/8, x4, x1, x2)

inst_67153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffc00000000; valaddr_reg:x3; val_offset:201459*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201459*0 + 3*337*FLEN/8, x4, x1, x2)

inst_67154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffe00000000; valaddr_reg:x3; val_offset:201462*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201462*0 + 3*338*FLEN/8, x4, x1, x2)

inst_67155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffff00000000; valaddr_reg:x3; val_offset:201465*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201465*0 + 3*339*FLEN/8, x4, x1, x2)

inst_67156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffff80000000; valaddr_reg:x3; val_offset:201468*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201468*0 + 3*340*FLEN/8, x4, x1, x2)

inst_67157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffc0000000; valaddr_reg:x3; val_offset:201471*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201471*0 + 3*341*FLEN/8, x4, x1, x2)

inst_67158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffe0000000; valaddr_reg:x3; val_offset:201474*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201474*0 + 3*342*FLEN/8, x4, x1, x2)

inst_67159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffff0000000; valaddr_reg:x3; val_offset:201477*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201477*0 + 3*343*FLEN/8, x4, x1, x2)

inst_67160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffff8000000; valaddr_reg:x3; val_offset:201480*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201480*0 + 3*344*FLEN/8, x4, x1, x2)

inst_67161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffc000000; valaddr_reg:x3; val_offset:201483*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201483*0 + 3*345*FLEN/8, x4, x1, x2)

inst_67162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffe000000; valaddr_reg:x3; val_offset:201486*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201486*0 + 3*346*FLEN/8, x4, x1, x2)

inst_67163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffff000000; valaddr_reg:x3; val_offset:201489*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201489*0 + 3*347*FLEN/8, x4, x1, x2)

inst_67164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffff800000; valaddr_reg:x3; val_offset:201492*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201492*0 + 3*348*FLEN/8, x4, x1, x2)

inst_67165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffc00000; valaddr_reg:x3; val_offset:201495*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201495*0 + 3*349*FLEN/8, x4, x1, x2)

inst_67166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffe00000; valaddr_reg:x3; val_offset:201498*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201498*0 + 3*350*FLEN/8, x4, x1, x2)

inst_67167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffff00000; valaddr_reg:x3; val_offset:201501*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201501*0 + 3*351*FLEN/8, x4, x1, x2)

inst_67168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffff80000; valaddr_reg:x3; val_offset:201504*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201504*0 + 3*352*FLEN/8, x4, x1, x2)

inst_67169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffc0000; valaddr_reg:x3; val_offset:201507*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201507*0 + 3*353*FLEN/8, x4, x1, x2)

inst_67170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffe0000; valaddr_reg:x3; val_offset:201510*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201510*0 + 3*354*FLEN/8, x4, x1, x2)

inst_67171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffff0000; valaddr_reg:x3; val_offset:201513*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201513*0 + 3*355*FLEN/8, x4, x1, x2)

inst_67172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffff8000; valaddr_reg:x3; val_offset:201516*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201516*0 + 3*356*FLEN/8, x4, x1, x2)

inst_67173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffffc000; valaddr_reg:x3; val_offset:201519*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201519*0 + 3*357*FLEN/8, x4, x1, x2)

inst_67174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffffe000; valaddr_reg:x3; val_offset:201522*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201522*0 + 3*358*FLEN/8, x4, x1, x2)

inst_67175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffff000; valaddr_reg:x3; val_offset:201525*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201525*0 + 3*359*FLEN/8, x4, x1, x2)

inst_67176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffff800; valaddr_reg:x3; val_offset:201528*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201528*0 + 3*360*FLEN/8, x4, x1, x2)

inst_67177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffffc00; valaddr_reg:x3; val_offset:201531*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201531*0 + 3*361*FLEN/8, x4, x1, x2)

inst_67178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffffe00; valaddr_reg:x3; val_offset:201534*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201534*0 + 3*362*FLEN/8, x4, x1, x2)

inst_67179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffffff00; valaddr_reg:x3; val_offset:201537*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201537*0 + 3*363*FLEN/8, x4, x1, x2)

inst_67180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffffff80; valaddr_reg:x3; val_offset:201540*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201540*0 + 3*364*FLEN/8, x4, x1, x2)

inst_67181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffffffc0; valaddr_reg:x3; val_offset:201543*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201543*0 + 3*365*FLEN/8, x4, x1, x2)

inst_67182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffffffe0; valaddr_reg:x3; val_offset:201546*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201546*0 + 3*366*FLEN/8, x4, x1, x2)

inst_67183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffffff0; valaddr_reg:x3; val_offset:201549*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201549*0 + 3*367*FLEN/8, x4, x1, x2)

inst_67184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffffff8; valaddr_reg:x3; val_offset:201552*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201552*0 + 3*368*FLEN/8, x4, x1, x2)

inst_67185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffffffc; valaddr_reg:x3; val_offset:201555*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201555*0 + 3*369*FLEN/8, x4, x1, x2)

inst_67186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834ffffffffffffe; valaddr_reg:x3; val_offset:201558*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201558*0 + 3*370*FLEN/8, x4, x1, x2)

inst_67187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5688295949924 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x034 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5688295949924; op2val:0x8000;
op3val:0x834fffffffffffff; valaddr_reg:x3; val_offset:201561*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201561*0 + 3*371*FLEN/8, x4, x1, x2)

inst_67188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000000000; valaddr_reg:x3; val_offset:201564*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201564*0 + 3*372*FLEN/8, x4, x1, x2)

inst_67189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000000001; valaddr_reg:x3; val_offset:201567*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201567*0 + 3*373*FLEN/8, x4, x1, x2)

inst_67190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000000003; valaddr_reg:x3; val_offset:201570*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201570*0 + 3*374*FLEN/8, x4, x1, x2)

inst_67191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000000007; valaddr_reg:x3; val_offset:201573*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201573*0 + 3*375*FLEN/8, x4, x1, x2)

inst_67192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000000000f; valaddr_reg:x3; val_offset:201576*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201576*0 + 3*376*FLEN/8, x4, x1, x2)

inst_67193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000000001f; valaddr_reg:x3; val_offset:201579*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201579*0 + 3*377*FLEN/8, x4, x1, x2)

inst_67194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000000003f; valaddr_reg:x3; val_offset:201582*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201582*0 + 3*378*FLEN/8, x4, x1, x2)

inst_67195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000000007f; valaddr_reg:x3; val_offset:201585*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201585*0 + 3*379*FLEN/8, x4, x1, x2)

inst_67196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000000000ff; valaddr_reg:x3; val_offset:201588*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201588*0 + 3*380*FLEN/8, x4, x1, x2)

inst_67197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000000001ff; valaddr_reg:x3; val_offset:201591*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201591*0 + 3*381*FLEN/8, x4, x1, x2)

inst_67198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000000003ff; valaddr_reg:x3; val_offset:201594*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201594*0 + 3*382*FLEN/8, x4, x1, x2)

inst_67199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000000007ff; valaddr_reg:x3; val_offset:201597*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201597*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_67200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000000fff; valaddr_reg:x3; val_offset:201600*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201600*0 + 3*384*FLEN/8, x4, x1, x2)

inst_67201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000001fff; valaddr_reg:x3; val_offset:201603*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201603*0 + 3*385*FLEN/8, x4, x1, x2)

inst_67202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000003fff; valaddr_reg:x3; val_offset:201606*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201606*0 + 3*386*FLEN/8, x4, x1, x2)

inst_67203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000007fff; valaddr_reg:x3; val_offset:201609*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201609*0 + 3*387*FLEN/8, x4, x1, x2)

inst_67204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000000ffff; valaddr_reg:x3; val_offset:201612*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201612*0 + 3*388*FLEN/8, x4, x1, x2)

inst_67205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000001ffff; valaddr_reg:x3; val_offset:201615*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201615*0 + 3*389*FLEN/8, x4, x1, x2)

inst_67206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000003ffff; valaddr_reg:x3; val_offset:201618*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201618*0 + 3*390*FLEN/8, x4, x1, x2)

inst_67207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000007ffff; valaddr_reg:x3; val_offset:201621*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201621*0 + 3*391*FLEN/8, x4, x1, x2)

inst_67208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000000fffff; valaddr_reg:x3; val_offset:201624*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201624*0 + 3*392*FLEN/8, x4, x1, x2)

inst_67209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000001fffff; valaddr_reg:x3; val_offset:201627*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201627*0 + 3*393*FLEN/8, x4, x1, x2)

inst_67210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000003fffff; valaddr_reg:x3; val_offset:201630*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201630*0 + 3*394*FLEN/8, x4, x1, x2)

inst_67211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000007fffff; valaddr_reg:x3; val_offset:201633*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201633*0 + 3*395*FLEN/8, x4, x1, x2)

inst_67212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000000ffffff; valaddr_reg:x3; val_offset:201636*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201636*0 + 3*396*FLEN/8, x4, x1, x2)

inst_67213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000001ffffff; valaddr_reg:x3; val_offset:201639*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201639*0 + 3*397*FLEN/8, x4, x1, x2)

inst_67214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000003ffffff; valaddr_reg:x3; val_offset:201642*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201642*0 + 3*398*FLEN/8, x4, x1, x2)

inst_67215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000007ffffff; valaddr_reg:x3; val_offset:201645*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201645*0 + 3*399*FLEN/8, x4, x1, x2)

inst_67216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000000fffffff; valaddr_reg:x3; val_offset:201648*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201648*0 + 3*400*FLEN/8, x4, x1, x2)

inst_67217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000001fffffff; valaddr_reg:x3; val_offset:201651*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201651*0 + 3*401*FLEN/8, x4, x1, x2)

inst_67218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000003fffffff; valaddr_reg:x3; val_offset:201654*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201654*0 + 3*402*FLEN/8, x4, x1, x2)

inst_67219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000007fffffff; valaddr_reg:x3; val_offset:201657*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201657*0 + 3*403*FLEN/8, x4, x1, x2)

inst_67220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00000ffffffff; valaddr_reg:x3; val_offset:201660*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201660*0 + 3*404*FLEN/8, x4, x1, x2)

inst_67221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00001ffffffff; valaddr_reg:x3; val_offset:201663*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201663*0 + 3*405*FLEN/8, x4, x1, x2)

inst_67222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00003ffffffff; valaddr_reg:x3; val_offset:201666*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201666*0 + 3*406*FLEN/8, x4, x1, x2)

inst_67223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00007ffffffff; valaddr_reg:x3; val_offset:201669*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201669*0 + 3*407*FLEN/8, x4, x1, x2)

inst_67224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0000fffffffff; valaddr_reg:x3; val_offset:201672*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201672*0 + 3*408*FLEN/8, x4, x1, x2)

inst_67225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0001fffffffff; valaddr_reg:x3; val_offset:201675*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201675*0 + 3*409*FLEN/8, x4, x1, x2)

inst_67226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0003fffffffff; valaddr_reg:x3; val_offset:201678*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201678*0 + 3*410*FLEN/8, x4, x1, x2)

inst_67227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0007fffffffff; valaddr_reg:x3; val_offset:201681*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201681*0 + 3*411*FLEN/8, x4, x1, x2)

inst_67228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca000ffffffffff; valaddr_reg:x3; val_offset:201684*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201684*0 + 3*412*FLEN/8, x4, x1, x2)

inst_67229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca001ffffffffff; valaddr_reg:x3; val_offset:201687*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201687*0 + 3*413*FLEN/8, x4, x1, x2)

inst_67230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca003ffffffffff; valaddr_reg:x3; val_offset:201690*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201690*0 + 3*414*FLEN/8, x4, x1, x2)

inst_67231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca007ffffffffff; valaddr_reg:x3; val_offset:201693*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201693*0 + 3*415*FLEN/8, x4, x1, x2)

inst_67232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca00fffffffffff; valaddr_reg:x3; val_offset:201696*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201696*0 + 3*416*FLEN/8, x4, x1, x2)

inst_67233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca01fffffffffff; valaddr_reg:x3; val_offset:201699*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201699*0 + 3*417*FLEN/8, x4, x1, x2)

inst_67234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca03fffffffffff; valaddr_reg:x3; val_offset:201702*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201702*0 + 3*418*FLEN/8, x4, x1, x2)

inst_67235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca07fffffffffff; valaddr_reg:x3; val_offset:201705*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201705*0 + 3*419*FLEN/8, x4, x1, x2)

inst_67236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca0ffffffffffff; valaddr_reg:x3; val_offset:201708*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201708*0 + 3*420*FLEN/8, x4, x1, x2)

inst_67237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca1ffffffffffff; valaddr_reg:x3; val_offset:201711*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201711*0 + 3*421*FLEN/8, x4, x1, x2)

inst_67238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca3ffffffffffff; valaddr_reg:x3; val_offset:201714*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201714*0 + 3*422*FLEN/8, x4, x1, x2)

inst_67239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca7ffffffffffff; valaddr_reg:x3; val_offset:201717*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201717*0 + 3*423*FLEN/8, x4, x1, x2)

inst_67240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbca8000000000000; valaddr_reg:x3; val_offset:201720*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201720*0 + 3*424*FLEN/8, x4, x1, x2)

inst_67241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcac000000000000; valaddr_reg:x3; val_offset:201723*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201723*0 + 3*425*FLEN/8, x4, x1, x2)

inst_67242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcae000000000000; valaddr_reg:x3; val_offset:201726*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201726*0 + 3*426*FLEN/8, x4, x1, x2)

inst_67243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaf000000000000; valaddr_reg:x3; val_offset:201729*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201729*0 + 3*427*FLEN/8, x4, x1, x2)

inst_67244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaf800000000000; valaddr_reg:x3; val_offset:201732*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201732*0 + 3*428*FLEN/8, x4, x1, x2)

inst_67245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafc00000000000; valaddr_reg:x3; val_offset:201735*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201735*0 + 3*429*FLEN/8, x4, x1, x2)

inst_67246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafe00000000000; valaddr_reg:x3; val_offset:201738*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201738*0 + 3*430*FLEN/8, x4, x1, x2)

inst_67247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaff00000000000; valaddr_reg:x3; val_offset:201741*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201741*0 + 3*431*FLEN/8, x4, x1, x2)

inst_67248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaff80000000000; valaddr_reg:x3; val_offset:201744*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201744*0 + 3*432*FLEN/8, x4, x1, x2)

inst_67249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffc0000000000; valaddr_reg:x3; val_offset:201747*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201747*0 + 3*433*FLEN/8, x4, x1, x2)

inst_67250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffe0000000000; valaddr_reg:x3; val_offset:201750*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201750*0 + 3*434*FLEN/8, x4, x1, x2)

inst_67251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafff0000000000; valaddr_reg:x3; val_offset:201753*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201753*0 + 3*435*FLEN/8, x4, x1, x2)

inst_67252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafff8000000000; valaddr_reg:x3; val_offset:201756*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201756*0 + 3*436*FLEN/8, x4, x1, x2)

inst_67253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffc000000000; valaddr_reg:x3; val_offset:201759*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201759*0 + 3*437*FLEN/8, x4, x1, x2)

inst_67254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffe000000000; valaddr_reg:x3; val_offset:201762*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201762*0 + 3*438*FLEN/8, x4, x1, x2)

inst_67255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffff000000000; valaddr_reg:x3; val_offset:201765*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201765*0 + 3*439*FLEN/8, x4, x1, x2)

inst_67256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffff800000000; valaddr_reg:x3; val_offset:201768*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201768*0 + 3*440*FLEN/8, x4, x1, x2)

inst_67257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffc00000000; valaddr_reg:x3; val_offset:201771*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201771*0 + 3*441*FLEN/8, x4, x1, x2)

inst_67258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffe00000000; valaddr_reg:x3; val_offset:201774*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201774*0 + 3*442*FLEN/8, x4, x1, x2)

inst_67259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffff00000000; valaddr_reg:x3; val_offset:201777*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201777*0 + 3*443*FLEN/8, x4, x1, x2)

inst_67260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffff80000000; valaddr_reg:x3; val_offset:201780*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201780*0 + 3*444*FLEN/8, x4, x1, x2)

inst_67261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffc0000000; valaddr_reg:x3; val_offset:201783*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201783*0 + 3*445*FLEN/8, x4, x1, x2)

inst_67262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffe0000000; valaddr_reg:x3; val_offset:201786*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201786*0 + 3*446*FLEN/8, x4, x1, x2)

inst_67263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffff0000000; valaddr_reg:x3; val_offset:201789*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201789*0 + 3*447*FLEN/8, x4, x1, x2)

inst_67264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffff8000000; valaddr_reg:x3; val_offset:201792*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201792*0 + 3*448*FLEN/8, x4, x1, x2)

inst_67265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffc000000; valaddr_reg:x3; val_offset:201795*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201795*0 + 3*449*FLEN/8, x4, x1, x2)

inst_67266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffe000000; valaddr_reg:x3; val_offset:201798*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201798*0 + 3*450*FLEN/8, x4, x1, x2)

inst_67267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffff000000; valaddr_reg:x3; val_offset:201801*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201801*0 + 3*451*FLEN/8, x4, x1, x2)

inst_67268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffff800000; valaddr_reg:x3; val_offset:201804*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201804*0 + 3*452*FLEN/8, x4, x1, x2)

inst_67269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffc00000; valaddr_reg:x3; val_offset:201807*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201807*0 + 3*453*FLEN/8, x4, x1, x2)

inst_67270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffe00000; valaddr_reg:x3; val_offset:201810*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201810*0 + 3*454*FLEN/8, x4, x1, x2)

inst_67271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffff00000; valaddr_reg:x3; val_offset:201813*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201813*0 + 3*455*FLEN/8, x4, x1, x2)

inst_67272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffff80000; valaddr_reg:x3; val_offset:201816*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201816*0 + 3*456*FLEN/8, x4, x1, x2)

inst_67273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffc0000; valaddr_reg:x3; val_offset:201819*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201819*0 + 3*457*FLEN/8, x4, x1, x2)

inst_67274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffe0000; valaddr_reg:x3; val_offset:201822*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201822*0 + 3*458*FLEN/8, x4, x1, x2)

inst_67275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffff0000; valaddr_reg:x3; val_offset:201825*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201825*0 + 3*459*FLEN/8, x4, x1, x2)

inst_67276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffff8000; valaddr_reg:x3; val_offset:201828*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201828*0 + 3*460*FLEN/8, x4, x1, x2)

inst_67277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffffc000; valaddr_reg:x3; val_offset:201831*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201831*0 + 3*461*FLEN/8, x4, x1, x2)

inst_67278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffffe000; valaddr_reg:x3; val_offset:201834*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201834*0 + 3*462*FLEN/8, x4, x1, x2)

inst_67279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffff000; valaddr_reg:x3; val_offset:201837*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201837*0 + 3*463*FLEN/8, x4, x1, x2)

inst_67280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffff800; valaddr_reg:x3; val_offset:201840*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201840*0 + 3*464*FLEN/8, x4, x1, x2)

inst_67281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffffc00; valaddr_reg:x3; val_offset:201843*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201843*0 + 3*465*FLEN/8, x4, x1, x2)

inst_67282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffffe00; valaddr_reg:x3; val_offset:201846*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201846*0 + 3*466*FLEN/8, x4, x1, x2)

inst_67283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffffff00; valaddr_reg:x3; val_offset:201849*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201849*0 + 3*467*FLEN/8, x4, x1, x2)

inst_67284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffffff80; valaddr_reg:x3; val_offset:201852*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201852*0 + 3*468*FLEN/8, x4, x1, x2)

inst_67285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffffffc0; valaddr_reg:x3; val_offset:201855*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201855*0 + 3*469*FLEN/8, x4, x1, x2)

inst_67286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffffffe0; valaddr_reg:x3; val_offset:201858*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201858*0 + 3*470*FLEN/8, x4, x1, x2)

inst_67287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffffff0; valaddr_reg:x3; val_offset:201861*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201861*0 + 3*471*FLEN/8, x4, x1, x2)

inst_67288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffffff8; valaddr_reg:x3; val_offset:201864*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201864*0 + 3*472*FLEN/8, x4, x1, x2)

inst_67289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffffffc; valaddr_reg:x3; val_offset:201867*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201867*0 + 3*473*FLEN/8, x4, x1, x2)

inst_67290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcaffffffffffffe; valaddr_reg:x3; val_offset:201870*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201870*0 + 3*474*FLEN/8, x4, x1, x2)

inst_67291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3ca and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbcafffffffffffff; valaddr_reg:x3; val_offset:201873*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201873*0 + 3*475*FLEN/8, x4, x1, x2)

inst_67292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:201876*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201876*0 + 3*476*FLEN/8, x4, x1, x2)

inst_67293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:201879*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201879*0 + 3*477*FLEN/8, x4, x1, x2)

inst_67294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:201882*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201882*0 + 3*478*FLEN/8, x4, x1, x2)

inst_67295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:201885*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201885*0 + 3*479*FLEN/8, x4, x1, x2)

inst_67296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:201888*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201888*0 + 3*480*FLEN/8, x4, x1, x2)

inst_67297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:201891*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201891*0 + 3*481*FLEN/8, x4, x1, x2)

inst_67298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:201894*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201894*0 + 3*482*FLEN/8, x4, x1, x2)

inst_67299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:201897*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201897*0 + 3*483*FLEN/8, x4, x1, x2)

inst_67300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:201900*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201900*0 + 3*484*FLEN/8, x4, x1, x2)

inst_67301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:201903*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201903*0 + 3*485*FLEN/8, x4, x1, x2)

inst_67302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:201906*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201906*0 + 3*486*FLEN/8, x4, x1, x2)

inst_67303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:201909*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201909*0 + 3*487*FLEN/8, x4, x1, x2)

inst_67304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:201912*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201912*0 + 3*488*FLEN/8, x4, x1, x2)

inst_67305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:201915*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201915*0 + 3*489*FLEN/8, x4, x1, x2)

inst_67306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:201918*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201918*0 + 3*490*FLEN/8, x4, x1, x2)

inst_67307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:201921*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201921*0 + 3*491*FLEN/8, x4, x1, x2)

inst_67308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:201924*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201924*0 + 3*492*FLEN/8, x4, x1, x2)

inst_67309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:201927*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201927*0 + 3*493*FLEN/8, x4, x1, x2)

inst_67310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:201930*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201930*0 + 3*494*FLEN/8, x4, x1, x2)

inst_67311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:201933*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201933*0 + 3*495*FLEN/8, x4, x1, x2)

inst_67312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:201936*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201936*0 + 3*496*FLEN/8, x4, x1, x2)

inst_67313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x57132c37fb117 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x7e0cfa102b8b3 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa57132c37fb117; op2val:0x9fc7e0cfa102b8b3;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:201939*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201939*0 + 3*497*FLEN/8, x4, x1, x2)

inst_67314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000008000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000; valaddr_reg:x3; val_offset:201942*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201942*0 + 3*498*FLEN/8, x4, x1, x2)

inst_67315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:201945*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201945*0 + 3*499*FLEN/8, x4, x1, x2)

inst_67316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:201948*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201948*0 + 3*500*FLEN/8, x4, x1, x2)

inst_67317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:201951*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201951*0 + 3*501*FLEN/8, x4, x1, x2)

inst_67318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:201954*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201954*0 + 3*502*FLEN/8, x4, x1, x2)

inst_67319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:201957*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201957*0 + 3*503*FLEN/8, x4, x1, x2)

inst_67320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:201960*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201960*0 + 3*504*FLEN/8, x4, x1, x2)

inst_67321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000000007f; valaddr_reg:x3; val_offset:201963*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201963*0 + 3*505*FLEN/8, x4, x1, x2)

inst_67322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000000000ff; valaddr_reg:x3; val_offset:201966*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201966*0 + 3*506*FLEN/8, x4, x1, x2)

inst_67323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000000001ff; valaddr_reg:x3; val_offset:201969*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201969*0 + 3*507*FLEN/8, x4, x1, x2)

inst_67324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000000003ff; valaddr_reg:x3; val_offset:201972*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201972*0 + 3*508*FLEN/8, x4, x1, x2)

inst_67325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000000007ff; valaddr_reg:x3; val_offset:201975*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201975*0 + 3*509*FLEN/8, x4, x1, x2)

inst_67326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000000000fff; valaddr_reg:x3; val_offset:201978*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201978*0 + 3*510*FLEN/8, x4, x1, x2)

inst_67327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000000001fff; valaddr_reg:x3; val_offset:201981*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201981*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_67328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000000003fff; valaddr_reg:x3; val_offset:201984*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201984*0 + 3*512*FLEN/8, x4, x1, x2)

inst_67329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000000007fff; valaddr_reg:x3; val_offset:201987*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201987*0 + 3*513*FLEN/8, x4, x1, x2)

inst_67330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000000ffff; valaddr_reg:x3; val_offset:201990*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201990*0 + 3*514*FLEN/8, x4, x1, x2)

inst_67331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000001ffff; valaddr_reg:x3; val_offset:201993*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201993*0 + 3*515*FLEN/8, x4, x1, x2)

inst_67332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000003ffff; valaddr_reg:x3; val_offset:201996*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201996*0 + 3*516*FLEN/8, x4, x1, x2)

inst_67333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000007ffff; valaddr_reg:x3; val_offset:201999*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 201999*0 + 3*517*FLEN/8, x4, x1, x2)

inst_67334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000000fffff; valaddr_reg:x3; val_offset:202002*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202002*0 + 3*518*FLEN/8, x4, x1, x2)

inst_67335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000001fffff; valaddr_reg:x3; val_offset:202005*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202005*0 + 3*519*FLEN/8, x4, x1, x2)

inst_67336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000003fffff; valaddr_reg:x3; val_offset:202008*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202008*0 + 3*520*FLEN/8, x4, x1, x2)

inst_67337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000007fffff; valaddr_reg:x3; val_offset:202011*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202011*0 + 3*521*FLEN/8, x4, x1, x2)

inst_67338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000000ffffff; valaddr_reg:x3; val_offset:202014*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202014*0 + 3*522*FLEN/8, x4, x1, x2)

inst_67339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000001ffffff; valaddr_reg:x3; val_offset:202017*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202017*0 + 3*523*FLEN/8, x4, x1, x2)

inst_67340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000003ffffff; valaddr_reg:x3; val_offset:202020*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202020*0 + 3*524*FLEN/8, x4, x1, x2)

inst_67341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000007ffffff; valaddr_reg:x3; val_offset:202023*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202023*0 + 3*525*FLEN/8, x4, x1, x2)

inst_67342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000000fffffff; valaddr_reg:x3; val_offset:202026*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202026*0 + 3*526*FLEN/8, x4, x1, x2)

inst_67343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000001fffffff; valaddr_reg:x3; val_offset:202029*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202029*0 + 3*527*FLEN/8, x4, x1, x2)

inst_67344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000003fffffff; valaddr_reg:x3; val_offset:202032*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202032*0 + 3*528*FLEN/8, x4, x1, x2)

inst_67345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000007fffffff; valaddr_reg:x3; val_offset:202035*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202035*0 + 3*529*FLEN/8, x4, x1, x2)

inst_67346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000000ffffffff; valaddr_reg:x3; val_offset:202038*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202038*0 + 3*530*FLEN/8, x4, x1, x2)

inst_67347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000001ffffffff; valaddr_reg:x3; val_offset:202041*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202041*0 + 3*531*FLEN/8, x4, x1, x2)

inst_67348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000003ffffffff; valaddr_reg:x3; val_offset:202044*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202044*0 + 3*532*FLEN/8, x4, x1, x2)

inst_67349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000007ffffffff; valaddr_reg:x3; val_offset:202047*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202047*0 + 3*533*FLEN/8, x4, x1, x2)

inst_67350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000000fffffffff; valaddr_reg:x3; val_offset:202050*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202050*0 + 3*534*FLEN/8, x4, x1, x2)

inst_67351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000001fffffffff; valaddr_reg:x3; val_offset:202053*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202053*0 + 3*535*FLEN/8, x4, x1, x2)

inst_67352:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000003fffffffff; valaddr_reg:x3; val_offset:202056*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202056*0 + 3*536*FLEN/8, x4, x1, x2)

inst_67353:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000007fffffffff; valaddr_reg:x3; val_offset:202059*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202059*0 + 3*537*FLEN/8, x4, x1, x2)

inst_67354:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800000ffffffffff; valaddr_reg:x3; val_offset:202062*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202062*0 + 3*538*FLEN/8, x4, x1, x2)

inst_67355:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800001ffffffffff; valaddr_reg:x3; val_offset:202065*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202065*0 + 3*539*FLEN/8, x4, x1, x2)

inst_67356:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800003ffffffffff; valaddr_reg:x3; val_offset:202068*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202068*0 + 3*540*FLEN/8, x4, x1, x2)

inst_67357:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800007ffffffffff; valaddr_reg:x3; val_offset:202071*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202071*0 + 3*541*FLEN/8, x4, x1, x2)

inst_67358:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80000fffffffffff; valaddr_reg:x3; val_offset:202074*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202074*0 + 3*542*FLEN/8, x4, x1, x2)

inst_67359:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80001fffffffffff; valaddr_reg:x3; val_offset:202077*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202077*0 + 3*543*FLEN/8, x4, x1, x2)

inst_67360:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80003fffffffffff; valaddr_reg:x3; val_offset:202080*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202080*0 + 3*544*FLEN/8, x4, x1, x2)

inst_67361:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x80007fffffffffff; valaddr_reg:x3; val_offset:202083*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202083*0 + 3*545*FLEN/8, x4, x1, x2)

inst_67362:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8000ffffffffffff; valaddr_reg:x3; val_offset:202086*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202086*0 + 3*546*FLEN/8, x4, x1, x2)

inst_67363:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8001ffffffffffff; valaddr_reg:x3; val_offset:202089*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202089*0 + 3*547*FLEN/8, x4, x1, x2)

inst_67364:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8003ffffffffffff; valaddr_reg:x3; val_offset:202092*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202092*0 + 3*548*FLEN/8, x4, x1, x2)

inst_67365:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8007ffffffffffff; valaddr_reg:x3; val_offset:202095*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202095*0 + 3*549*FLEN/8, x4, x1, x2)

inst_67366:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8008000000000000; valaddr_reg:x3; val_offset:202098*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202098*0 + 3*550*FLEN/8, x4, x1, x2)

inst_67367:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800c000000000000; valaddr_reg:x3; val_offset:202101*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202101*0 + 3*551*FLEN/8, x4, x1, x2)

inst_67368:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800e000000000000; valaddr_reg:x3; val_offset:202104*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202104*0 + 3*552*FLEN/8, x4, x1, x2)

inst_67369:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800f000000000000; valaddr_reg:x3; val_offset:202107*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202107*0 + 3*553*FLEN/8, x4, x1, x2)

inst_67370:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800f800000000000; valaddr_reg:x3; val_offset:202110*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202110*0 + 3*554*FLEN/8, x4, x1, x2)

inst_67371:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fc00000000000; valaddr_reg:x3; val_offset:202113*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202113*0 + 3*555*FLEN/8, x4, x1, x2)

inst_67372:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fe00000000000; valaddr_reg:x3; val_offset:202116*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202116*0 + 3*556*FLEN/8, x4, x1, x2)

inst_67373:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ff00000000000; valaddr_reg:x3; val_offset:202119*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202119*0 + 3*557*FLEN/8, x4, x1, x2)

inst_67374:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ff80000000000; valaddr_reg:x3; val_offset:202122*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202122*0 + 3*558*FLEN/8, x4, x1, x2)

inst_67375:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffc0000000000; valaddr_reg:x3; val_offset:202125*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202125*0 + 3*559*FLEN/8, x4, x1, x2)

inst_67376:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffe0000000000; valaddr_reg:x3; val_offset:202128*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202128*0 + 3*560*FLEN/8, x4, x1, x2)

inst_67377:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fff0000000000; valaddr_reg:x3; val_offset:202131*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202131*0 + 3*561*FLEN/8, x4, x1, x2)

inst_67378:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fff8000000000; valaddr_reg:x3; val_offset:202134*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202134*0 + 3*562*FLEN/8, x4, x1, x2)

inst_67379:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffc000000000; valaddr_reg:x3; val_offset:202137*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202137*0 + 3*563*FLEN/8, x4, x1, x2)

inst_67380:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffe000000000; valaddr_reg:x3; val_offset:202140*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202140*0 + 3*564*FLEN/8, x4, x1, x2)

inst_67381:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffff000000000; valaddr_reg:x3; val_offset:202143*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202143*0 + 3*565*FLEN/8, x4, x1, x2)

inst_67382:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffff800000000; valaddr_reg:x3; val_offset:202146*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202146*0 + 3*566*FLEN/8, x4, x1, x2)

inst_67383:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffc00000000; valaddr_reg:x3; val_offset:202149*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202149*0 + 3*567*FLEN/8, x4, x1, x2)

inst_67384:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffe00000000; valaddr_reg:x3; val_offset:202152*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202152*0 + 3*568*FLEN/8, x4, x1, x2)

inst_67385:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffff00000000; valaddr_reg:x3; val_offset:202155*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202155*0 + 3*569*FLEN/8, x4, x1, x2)

inst_67386:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffff80000000; valaddr_reg:x3; val_offset:202158*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202158*0 + 3*570*FLEN/8, x4, x1, x2)

inst_67387:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffc0000000; valaddr_reg:x3; val_offset:202161*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202161*0 + 3*571*FLEN/8, x4, x1, x2)

inst_67388:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffe0000000; valaddr_reg:x3; val_offset:202164*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202164*0 + 3*572*FLEN/8, x4, x1, x2)

inst_67389:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffff0000000; valaddr_reg:x3; val_offset:202167*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202167*0 + 3*573*FLEN/8, x4, x1, x2)

inst_67390:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffff8000000; valaddr_reg:x3; val_offset:202170*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202170*0 + 3*574*FLEN/8, x4, x1, x2)

inst_67391:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffc000000; valaddr_reg:x3; val_offset:202173*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202173*0 + 3*575*FLEN/8, x4, x1, x2)

inst_67392:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffe000000; valaddr_reg:x3; val_offset:202176*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202176*0 + 3*576*FLEN/8, x4, x1, x2)

inst_67393:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffff000000; valaddr_reg:x3; val_offset:202179*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202179*0 + 3*577*FLEN/8, x4, x1, x2)

inst_67394:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffff800000; valaddr_reg:x3; val_offset:202182*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202182*0 + 3*578*FLEN/8, x4, x1, x2)

inst_67395:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffc00000; valaddr_reg:x3; val_offset:202185*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202185*0 + 3*579*FLEN/8, x4, x1, x2)

inst_67396:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffe00000; valaddr_reg:x3; val_offset:202188*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202188*0 + 3*580*FLEN/8, x4, x1, x2)

inst_67397:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffff00000; valaddr_reg:x3; val_offset:202191*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202191*0 + 3*581*FLEN/8, x4, x1, x2)

inst_67398:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffff80000; valaddr_reg:x3; val_offset:202194*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202194*0 + 3*582*FLEN/8, x4, x1, x2)

inst_67399:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffc0000; valaddr_reg:x3; val_offset:202197*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202197*0 + 3*583*FLEN/8, x4, x1, x2)

inst_67400:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffe0000; valaddr_reg:x3; val_offset:202200*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202200*0 + 3*584*FLEN/8, x4, x1, x2)

inst_67401:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffff0000; valaddr_reg:x3; val_offset:202203*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202203*0 + 3*585*FLEN/8, x4, x1, x2)

inst_67402:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffff8000; valaddr_reg:x3; val_offset:202206*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202206*0 + 3*586*FLEN/8, x4, x1, x2)

inst_67403:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffffc000; valaddr_reg:x3; val_offset:202209*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202209*0 + 3*587*FLEN/8, x4, x1, x2)

inst_67404:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffffe000; valaddr_reg:x3; val_offset:202212*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202212*0 + 3*588*FLEN/8, x4, x1, x2)

inst_67405:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffff000; valaddr_reg:x3; val_offset:202215*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202215*0 + 3*589*FLEN/8, x4, x1, x2)

inst_67406:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffff800; valaddr_reg:x3; val_offset:202218*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202218*0 + 3*590*FLEN/8, x4, x1, x2)

inst_67407:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffffc00; valaddr_reg:x3; val_offset:202221*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202221*0 + 3*591*FLEN/8, x4, x1, x2)

inst_67408:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffffe00; valaddr_reg:x3; val_offset:202224*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202224*0 + 3*592*FLEN/8, x4, x1, x2)

inst_67409:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffffff00; valaddr_reg:x3; val_offset:202227*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202227*0 + 3*593*FLEN/8, x4, x1, x2)

inst_67410:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffffff80; valaddr_reg:x3; val_offset:202230*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202230*0 + 3*594*FLEN/8, x4, x1, x2)

inst_67411:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:202233*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202233*0 + 3*595*FLEN/8, x4, x1, x2)

inst_67412:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:202236*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202236*0 + 3*596*FLEN/8, x4, x1, x2)

inst_67413:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:202239*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202239*0 + 3*597*FLEN/8, x4, x1, x2)

inst_67414:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:202242*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202242*0 + 3*598*FLEN/8, x4, x1, x2)

inst_67415:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:202245*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202245*0 + 3*599*FLEN/8, x4, x1, x2)

inst_67416:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:202248*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202248*0 + 3*600*FLEN/8, x4, x1, x2)

inst_67417:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x800fffffffffffff; valaddr_reg:x3; val_offset:202251*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202251*0 + 3*601*FLEN/8, x4, x1, x2)

inst_67418:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:202254*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202254*0 + 3*602*FLEN/8, x4, x1, x2)

inst_67419:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:202257*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202257*0 + 3*603*FLEN/8, x4, x1, x2)

inst_67420:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:202260*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202260*0 + 3*604*FLEN/8, x4, x1, x2)

inst_67421:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:202263*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202263*0 + 3*605*FLEN/8, x4, x1, x2)

inst_67422:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:202266*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202266*0 + 3*606*FLEN/8, x4, x1, x2)

inst_67423:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:202269*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202269*0 + 3*607*FLEN/8, x4, x1, x2)

inst_67424:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:202272*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202272*0 + 3*608*FLEN/8, x4, x1, x2)

inst_67425:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:202275*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202275*0 + 3*609*FLEN/8, x4, x1, x2)

inst_67426:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:202278*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202278*0 + 3*610*FLEN/8, x4, x1, x2)

inst_67427:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:202281*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202281*0 + 3*611*FLEN/8, x4, x1, x2)

inst_67428:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:202284*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202284*0 + 3*612*FLEN/8, x4, x1, x2)

inst_67429:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:202287*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202287*0 + 3*613*FLEN/8, x4, x1, x2)

inst_67430:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:202290*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202290*0 + 3*614*FLEN/8, x4, x1, x2)

inst_67431:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:202293*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202293*0 + 3*615*FLEN/8, x4, x1, x2)

inst_67432:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:202296*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202296*0 + 3*616*FLEN/8, x4, x1, x2)

inst_67433:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:202299*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202299*0 + 3*617*FLEN/8, x4, x1, x2)

inst_67434:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:202302*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202302*0 + 3*618*FLEN/8, x4, x1, x2)

inst_67435:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:202305*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202305*0 + 3*619*FLEN/8, x4, x1, x2)

inst_67436:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:202308*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202308*0 + 3*620*FLEN/8, x4, x1, x2)

inst_67437:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:202311*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202311*0 + 3*621*FLEN/8, x4, x1, x2)

inst_67438:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:202314*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202314*0 + 3*622*FLEN/8, x4, x1, x2)

inst_67439:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x5867ecaea85c9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa5867ecaea85c9; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:202317*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202317*0 + 3*623*FLEN/8, x4, x1, x2)

inst_67440:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000000000; valaddr_reg:x3; val_offset:202320*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202320*0 + 3*624*FLEN/8, x4, x1, x2)

inst_67441:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000000001; valaddr_reg:x3; val_offset:202323*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202323*0 + 3*625*FLEN/8, x4, x1, x2)

inst_67442:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000000003; valaddr_reg:x3; val_offset:202326*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202326*0 + 3*626*FLEN/8, x4, x1, x2)

inst_67443:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000000007; valaddr_reg:x3; val_offset:202329*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202329*0 + 3*627*FLEN/8, x4, x1, x2)

inst_67444:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000000000f; valaddr_reg:x3; val_offset:202332*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202332*0 + 3*628*FLEN/8, x4, x1, x2)

inst_67445:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000000001f; valaddr_reg:x3; val_offset:202335*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202335*0 + 3*629*FLEN/8, x4, x1, x2)

inst_67446:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000000003f; valaddr_reg:x3; val_offset:202338*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202338*0 + 3*630*FLEN/8, x4, x1, x2)

inst_67447:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000000007f; valaddr_reg:x3; val_offset:202341*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202341*0 + 3*631*FLEN/8, x4, x1, x2)

inst_67448:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000000000ff; valaddr_reg:x3; val_offset:202344*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202344*0 + 3*632*FLEN/8, x4, x1, x2)

inst_67449:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000000001ff; valaddr_reg:x3; val_offset:202347*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202347*0 + 3*633*FLEN/8, x4, x1, x2)

inst_67450:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000000003ff; valaddr_reg:x3; val_offset:202350*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202350*0 + 3*634*FLEN/8, x4, x1, x2)

inst_67451:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000000007ff; valaddr_reg:x3; val_offset:202353*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202353*0 + 3*635*FLEN/8, x4, x1, x2)

inst_67452:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000000fff; valaddr_reg:x3; val_offset:202356*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202356*0 + 3*636*FLEN/8, x4, x1, x2)

inst_67453:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000001fff; valaddr_reg:x3; val_offset:202359*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202359*0 + 3*637*FLEN/8, x4, x1, x2)

inst_67454:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000003fff; valaddr_reg:x3; val_offset:202362*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202362*0 + 3*638*FLEN/8, x4, x1, x2)

inst_67455:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000007fff; valaddr_reg:x3; val_offset:202365*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202365*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_67456:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000000ffff; valaddr_reg:x3; val_offset:202368*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202368*0 + 3*640*FLEN/8, x4, x1, x2)

inst_67457:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000001ffff; valaddr_reg:x3; val_offset:202371*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202371*0 + 3*641*FLEN/8, x4, x1, x2)

inst_67458:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000003ffff; valaddr_reg:x3; val_offset:202374*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202374*0 + 3*642*FLEN/8, x4, x1, x2)

inst_67459:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000007ffff; valaddr_reg:x3; val_offset:202377*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202377*0 + 3*643*FLEN/8, x4, x1, x2)

inst_67460:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000000fffff; valaddr_reg:x3; val_offset:202380*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202380*0 + 3*644*FLEN/8, x4, x1, x2)

inst_67461:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000001fffff; valaddr_reg:x3; val_offset:202383*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202383*0 + 3*645*FLEN/8, x4, x1, x2)

inst_67462:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000003fffff; valaddr_reg:x3; val_offset:202386*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202386*0 + 3*646*FLEN/8, x4, x1, x2)

inst_67463:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000007fffff; valaddr_reg:x3; val_offset:202389*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202389*0 + 3*647*FLEN/8, x4, x1, x2)

inst_67464:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000000ffffff; valaddr_reg:x3; val_offset:202392*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202392*0 + 3*648*FLEN/8, x4, x1, x2)

inst_67465:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000001ffffff; valaddr_reg:x3; val_offset:202395*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202395*0 + 3*649*FLEN/8, x4, x1, x2)

inst_67466:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000003ffffff; valaddr_reg:x3; val_offset:202398*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202398*0 + 3*650*FLEN/8, x4, x1, x2)

inst_67467:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000007ffffff; valaddr_reg:x3; val_offset:202401*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202401*0 + 3*651*FLEN/8, x4, x1, x2)

inst_67468:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000000fffffff; valaddr_reg:x3; val_offset:202404*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202404*0 + 3*652*FLEN/8, x4, x1, x2)

inst_67469:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000001fffffff; valaddr_reg:x3; val_offset:202407*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202407*0 + 3*653*FLEN/8, x4, x1, x2)

inst_67470:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000003fffffff; valaddr_reg:x3; val_offset:202410*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202410*0 + 3*654*FLEN/8, x4, x1, x2)

inst_67471:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000007fffffff; valaddr_reg:x3; val_offset:202413*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202413*0 + 3*655*FLEN/8, x4, x1, x2)

inst_67472:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600000ffffffff; valaddr_reg:x3; val_offset:202416*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202416*0 + 3*656*FLEN/8, x4, x1, x2)

inst_67473:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600001ffffffff; valaddr_reg:x3; val_offset:202419*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202419*0 + 3*657*FLEN/8, x4, x1, x2)

inst_67474:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600003ffffffff; valaddr_reg:x3; val_offset:202422*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202422*0 + 3*658*FLEN/8, x4, x1, x2)

inst_67475:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600007ffffffff; valaddr_reg:x3; val_offset:202425*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202425*0 + 3*659*FLEN/8, x4, x1, x2)

inst_67476:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60000fffffffff; valaddr_reg:x3; val_offset:202428*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202428*0 + 3*660*FLEN/8, x4, x1, x2)

inst_67477:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60001fffffffff; valaddr_reg:x3; val_offset:202431*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202431*0 + 3*661*FLEN/8, x4, x1, x2)

inst_67478:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60003fffffffff; valaddr_reg:x3; val_offset:202434*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202434*0 + 3*662*FLEN/8, x4, x1, x2)

inst_67479:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60007fffffffff; valaddr_reg:x3; val_offset:202437*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202437*0 + 3*663*FLEN/8, x4, x1, x2)

inst_67480:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6000ffffffffff; valaddr_reg:x3; val_offset:202440*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202440*0 + 3*664*FLEN/8, x4, x1, x2)

inst_67481:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6001ffffffffff; valaddr_reg:x3; val_offset:202443*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202443*0 + 3*665*FLEN/8, x4, x1, x2)

inst_67482:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6003ffffffffff; valaddr_reg:x3; val_offset:202446*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202446*0 + 3*666*FLEN/8, x4, x1, x2)

inst_67483:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6007ffffffffff; valaddr_reg:x3; val_offset:202449*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202449*0 + 3*667*FLEN/8, x4, x1, x2)

inst_67484:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a600fffffffffff; valaddr_reg:x3; val_offset:202452*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202452*0 + 3*668*FLEN/8, x4, x1, x2)

inst_67485:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a601fffffffffff; valaddr_reg:x3; val_offset:202455*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202455*0 + 3*669*FLEN/8, x4, x1, x2)

inst_67486:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a603fffffffffff; valaddr_reg:x3; val_offset:202458*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202458*0 + 3*670*FLEN/8, x4, x1, x2)

inst_67487:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a607fffffffffff; valaddr_reg:x3; val_offset:202461*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202461*0 + 3*671*FLEN/8, x4, x1, x2)

inst_67488:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a60ffffffffffff; valaddr_reg:x3; val_offset:202464*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202464*0 + 3*672*FLEN/8, x4, x1, x2)

inst_67489:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a61ffffffffffff; valaddr_reg:x3; val_offset:202467*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202467*0 + 3*673*FLEN/8, x4, x1, x2)

inst_67490:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a63ffffffffffff; valaddr_reg:x3; val_offset:202470*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202470*0 + 3*674*FLEN/8, x4, x1, x2)

inst_67491:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a67ffffffffffff; valaddr_reg:x3; val_offset:202473*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202473*0 + 3*675*FLEN/8, x4, x1, x2)

inst_67492:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a68000000000000; valaddr_reg:x3; val_offset:202476*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202476*0 + 3*676*FLEN/8, x4, x1, x2)

inst_67493:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6c000000000000; valaddr_reg:x3; val_offset:202479*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202479*0 + 3*677*FLEN/8, x4, x1, x2)

inst_67494:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6e000000000000; valaddr_reg:x3; val_offset:202482*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202482*0 + 3*678*FLEN/8, x4, x1, x2)

inst_67495:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6f000000000000; valaddr_reg:x3; val_offset:202485*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202485*0 + 3*679*FLEN/8, x4, x1, x2)

inst_67496:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6f800000000000; valaddr_reg:x3; val_offset:202488*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202488*0 + 3*680*FLEN/8, x4, x1, x2)

inst_67497:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fc00000000000; valaddr_reg:x3; val_offset:202491*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202491*0 + 3*681*FLEN/8, x4, x1, x2)

inst_67498:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fe00000000000; valaddr_reg:x3; val_offset:202494*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202494*0 + 3*682*FLEN/8, x4, x1, x2)

inst_67499:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ff00000000000; valaddr_reg:x3; val_offset:202497*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202497*0 + 3*683*FLEN/8, x4, x1, x2)

inst_67500:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ff80000000000; valaddr_reg:x3; val_offset:202500*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202500*0 + 3*684*FLEN/8, x4, x1, x2)

inst_67501:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffc0000000000; valaddr_reg:x3; val_offset:202503*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202503*0 + 3*685*FLEN/8, x4, x1, x2)

inst_67502:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffe0000000000; valaddr_reg:x3; val_offset:202506*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202506*0 + 3*686*FLEN/8, x4, x1, x2)

inst_67503:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fff0000000000; valaddr_reg:x3; val_offset:202509*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202509*0 + 3*687*FLEN/8, x4, x1, x2)

inst_67504:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fff8000000000; valaddr_reg:x3; val_offset:202512*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202512*0 + 3*688*FLEN/8, x4, x1, x2)

inst_67505:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffc000000000; valaddr_reg:x3; val_offset:202515*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202515*0 + 3*689*FLEN/8, x4, x1, x2)

inst_67506:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffe000000000; valaddr_reg:x3; val_offset:202518*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202518*0 + 3*690*FLEN/8, x4, x1, x2)

inst_67507:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffff000000000; valaddr_reg:x3; val_offset:202521*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202521*0 + 3*691*FLEN/8, x4, x1, x2)

inst_67508:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffff800000000; valaddr_reg:x3; val_offset:202524*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202524*0 + 3*692*FLEN/8, x4, x1, x2)

inst_67509:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffc00000000; valaddr_reg:x3; val_offset:202527*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202527*0 + 3*693*FLEN/8, x4, x1, x2)

inst_67510:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffe00000000; valaddr_reg:x3; val_offset:202530*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202530*0 + 3*694*FLEN/8, x4, x1, x2)

inst_67511:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffff00000000; valaddr_reg:x3; val_offset:202533*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202533*0 + 3*695*FLEN/8, x4, x1, x2)

inst_67512:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffff80000000; valaddr_reg:x3; val_offset:202536*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202536*0 + 3*696*FLEN/8, x4, x1, x2)

inst_67513:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffc0000000; valaddr_reg:x3; val_offset:202539*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202539*0 + 3*697*FLEN/8, x4, x1, x2)

inst_67514:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffe0000000; valaddr_reg:x3; val_offset:202542*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202542*0 + 3*698*FLEN/8, x4, x1, x2)

inst_67515:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffff0000000; valaddr_reg:x3; val_offset:202545*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202545*0 + 3*699*FLEN/8, x4, x1, x2)

inst_67516:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffff8000000; valaddr_reg:x3; val_offset:202548*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202548*0 + 3*700*FLEN/8, x4, x1, x2)

inst_67517:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffc000000; valaddr_reg:x3; val_offset:202551*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202551*0 + 3*701*FLEN/8, x4, x1, x2)

inst_67518:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffe000000; valaddr_reg:x3; val_offset:202554*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202554*0 + 3*702*FLEN/8, x4, x1, x2)

inst_67519:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffff000000; valaddr_reg:x3; val_offset:202557*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202557*0 + 3*703*FLEN/8, x4, x1, x2)

inst_67520:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffff800000; valaddr_reg:x3; val_offset:202560*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202560*0 + 3*704*FLEN/8, x4, x1, x2)

inst_67521:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffc00000; valaddr_reg:x3; val_offset:202563*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202563*0 + 3*705*FLEN/8, x4, x1, x2)

inst_67522:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffe00000; valaddr_reg:x3; val_offset:202566*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202566*0 + 3*706*FLEN/8, x4, x1, x2)

inst_67523:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffff00000; valaddr_reg:x3; val_offset:202569*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202569*0 + 3*707*FLEN/8, x4, x1, x2)

inst_67524:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffff80000; valaddr_reg:x3; val_offset:202572*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202572*0 + 3*708*FLEN/8, x4, x1, x2)

inst_67525:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffc0000; valaddr_reg:x3; val_offset:202575*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202575*0 + 3*709*FLEN/8, x4, x1, x2)

inst_67526:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffe0000; valaddr_reg:x3; val_offset:202578*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202578*0 + 3*710*FLEN/8, x4, x1, x2)

inst_67527:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffff0000; valaddr_reg:x3; val_offset:202581*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202581*0 + 3*711*FLEN/8, x4, x1, x2)

inst_67528:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffff8000; valaddr_reg:x3; val_offset:202584*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202584*0 + 3*712*FLEN/8, x4, x1, x2)

inst_67529:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffffc000; valaddr_reg:x3; val_offset:202587*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202587*0 + 3*713*FLEN/8, x4, x1, x2)

inst_67530:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffffe000; valaddr_reg:x3; val_offset:202590*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202590*0 + 3*714*FLEN/8, x4, x1, x2)

inst_67531:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffff000; valaddr_reg:x3; val_offset:202593*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202593*0 + 3*715*FLEN/8, x4, x1, x2)

inst_67532:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffff800; valaddr_reg:x3; val_offset:202596*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202596*0 + 3*716*FLEN/8, x4, x1, x2)

inst_67533:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffffc00; valaddr_reg:x3; val_offset:202599*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202599*0 + 3*717*FLEN/8, x4, x1, x2)

inst_67534:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffffe00; valaddr_reg:x3; val_offset:202602*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202602*0 + 3*718*FLEN/8, x4, x1, x2)

inst_67535:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffffff00; valaddr_reg:x3; val_offset:202605*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202605*0 + 3*719*FLEN/8, x4, x1, x2)

inst_67536:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffffff80; valaddr_reg:x3; val_offset:202608*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202608*0 + 3*720*FLEN/8, x4, x1, x2)

inst_67537:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffffffc0; valaddr_reg:x3; val_offset:202611*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202611*0 + 3*721*FLEN/8, x4, x1, x2)

inst_67538:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffffffe0; valaddr_reg:x3; val_offset:202614*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202614*0 + 3*722*FLEN/8, x4, x1, x2)

inst_67539:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffffff0; valaddr_reg:x3; val_offset:202617*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202617*0 + 3*723*FLEN/8, x4, x1, x2)

inst_67540:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffffff8; valaddr_reg:x3; val_offset:202620*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202620*0 + 3*724*FLEN/8, x4, x1, x2)

inst_67541:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffffffc; valaddr_reg:x3; val_offset:202623*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202623*0 + 3*725*FLEN/8, x4, x1, x2)

inst_67542:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6ffffffffffffe; valaddr_reg:x3; val_offset:202626*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202626*0 + 3*726*FLEN/8, x4, x1, x2)

inst_67543:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3a6 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3a6fffffffffffff; valaddr_reg:x3; val_offset:202629*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202629*0 + 3*727*FLEN/8, x4, x1, x2)

inst_67544:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:202632*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202632*0 + 3*728*FLEN/8, x4, x1, x2)

inst_67545:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:202635*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202635*0 + 3*729*FLEN/8, x4, x1, x2)

inst_67546:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:202638*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202638*0 + 3*730*FLEN/8, x4, x1, x2)

inst_67547:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:202641*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202641*0 + 3*731*FLEN/8, x4, x1, x2)

inst_67548:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:202644*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202644*0 + 3*732*FLEN/8, x4, x1, x2)

inst_67549:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:202647*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202647*0 + 3*733*FLEN/8, x4, x1, x2)

inst_67550:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:202650*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202650*0 + 3*734*FLEN/8, x4, x1, x2)

inst_67551:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:202653*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202653*0 + 3*735*FLEN/8, x4, x1, x2)

inst_67552:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:202656*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202656*0 + 3*736*FLEN/8, x4, x1, x2)

inst_67553:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:202659*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202659*0 + 3*737*FLEN/8, x4, x1, x2)

inst_67554:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:202662*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202662*0 + 3*738*FLEN/8, x4, x1, x2)

inst_67555:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:202665*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202665*0 + 3*739*FLEN/8, x4, x1, x2)

inst_67556:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:202668*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202668*0 + 3*740*FLEN/8, x4, x1, x2)

inst_67557:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:202671*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202671*0 + 3*741*FLEN/8, x4, x1, x2)

inst_67558:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:202674*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202674*0 + 3*742*FLEN/8, x4, x1, x2)

inst_67559:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:202677*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202677*0 + 3*743*FLEN/8, x4, x1, x2)

inst_67560:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:202680*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202680*0 + 3*744*FLEN/8, x4, x1, x2)

inst_67561:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:202683*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202683*0 + 3*745*FLEN/8, x4, x1, x2)

inst_67562:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:202686*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202686*0 + 3*746*FLEN/8, x4, x1, x2)

inst_67563:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:202689*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202689*0 + 3*747*FLEN/8, x4, x1, x2)

inst_67564:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:202692*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202692*0 + 3*748*FLEN/8, x4, x1, x2)

inst_67565:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58c85696fd26f and fs2 == 0 and fe2 == 0x203 and fm2 == 0x7c288eaea6a4f and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58c85696fd26f; op2val:0x2037c288eaea6a4f;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:202695*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202695*0 + 3*749*FLEN/8, x4, x1, x2)

inst_67566:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:202698*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202698*0 + 3*750*FLEN/8, x4, x1, x2)

inst_67567:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:202701*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202701*0 + 3*751*FLEN/8, x4, x1, x2)

inst_67568:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:202704*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202704*0 + 3*752*FLEN/8, x4, x1, x2)

inst_67569:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:202707*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202707*0 + 3*753*FLEN/8, x4, x1, x2)

inst_67570:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:202710*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202710*0 + 3*754*FLEN/8, x4, x1, x2)

inst_67571:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:202713*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202713*0 + 3*755*FLEN/8, x4, x1, x2)

inst_67572:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:202716*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202716*0 + 3*756*FLEN/8, x4, x1, x2)

inst_67573:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:202719*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202719*0 + 3*757*FLEN/8, x4, x1, x2)

inst_67574:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:202722*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202722*0 + 3*758*FLEN/8, x4, x1, x2)

inst_67575:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:202725*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202725*0 + 3*759*FLEN/8, x4, x1, x2)

inst_67576:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:202728*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202728*0 + 3*760*FLEN/8, x4, x1, x2)

inst_67577:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:202731*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202731*0 + 3*761*FLEN/8, x4, x1, x2)

inst_67578:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:202734*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202734*0 + 3*762*FLEN/8, x4, x1, x2)

inst_67579:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:202737*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202737*0 + 3*763*FLEN/8, x4, x1, x2)

inst_67580:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:202740*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202740*0 + 3*764*FLEN/8, x4, x1, x2)

inst_67581:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:202743*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202743*0 + 3*765*FLEN/8, x4, x1, x2)

inst_67582:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:202746*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202746*0 + 3*766*FLEN/8, x4, x1, x2)

inst_67583:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x58f6f56edac01 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fa58f6f56edac01; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:202749*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 202749*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890688,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890689,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890691,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890695,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890703,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890719,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890751,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890815,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675890943,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675891199,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675891711,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675892735,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675894783,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675898879,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675907071,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675923455,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025675956223,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025676021759,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025676152831,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025676414975,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025676939263,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025677987839,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025680084991,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025684279295,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025692667903,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025709445119,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025742999551,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025810108415,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480025944326143,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480026212761599,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480026749632511,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480027823374335,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480029970857983,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480034265825279,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480042855759871,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480060035629055,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480094395367423,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480163114844159,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480300553797631,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358480575431704575,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358481125187518463,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358482224699146239,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358484423722401791,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358488821768912895,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358497617861935103,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358515210047979519,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358550394420068351,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358620763164246015,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9358761500652601343,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9359042975629311999,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9359605925582733311,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9360731825489575935,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9360731825489575936,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9361857725396418560,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362420675349839872,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362702150326550528,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362842887814905856,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362913256559083520,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362948440931172352,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362966033117216768,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362974829210238976,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362979227256750080,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362981426280005632,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362982525791633408,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983075547447296,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983350425354240,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983487864307712,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983556583784448,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983590943522816,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983608123392000,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983616713326592,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983621008293888,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983623155777536,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983624229519360,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983624766390272,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625034825728,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625169043456,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625236152320,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625269706752,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625286483968,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625294872576,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625299066880,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625301164032,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625302212608,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625302736896,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625302999040,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303130112,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303195648,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303228416,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303244800,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303252992,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303257088,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303259136,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303260160,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303260672,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303260928,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261056,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261120,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261152,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261168,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261176,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261180,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261182,64,FLEN)
NAN_BOXED(6892022966686720742,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9362983625303261183,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859264,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859265,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859267,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859271,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859279,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859295,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859327,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859391,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859519,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014859775,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014860287,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014861311,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014863359,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014867455,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014875647,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014892031,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014924799,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378014990335,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378015121407,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378015383551,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378015907839,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378016956415,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378019053567,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378023247871,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378031636479,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378048413695,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378081968127,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378149076991,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378283294719,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712378551730175,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712379088601087,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712380162342911,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712382309826559,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712386604793855,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712395194728447,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712412374597631,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712446734335999,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712515453812735,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712652892766207,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265712927770673151,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265713477526487039,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265714577038114815,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265716776061370367,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265721174107881471,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265729970200903679,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265747562386948095,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265782746759036927,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265853115503214591,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(265993852991569919,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(266275327968280575,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(266838277921701887,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(267964177828544511,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(267964177828544512,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(269090077735387136,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(269653027688808448,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(269934502665519104,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270075240153874432,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270145608898052096,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270180793270140928,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270198385456185344,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270207181549207552,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270211579595718656,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270213778618974208,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270214878130601984,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215427886415872,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215702764322816,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215840203276288,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215908922753024,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215943282491392,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215960462360576,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215969052295168,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215973347262464,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215975494746112,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215976568487936,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977105358848,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977373794304,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977508012032,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977575120896,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977608675328,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977625452544,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977633841152,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977638035456,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977640132608,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977641181184,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977641705472,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977641967616,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642098688,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642164224,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642196992,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642213376,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642221568,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642225664,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642227712,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642228736,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229248,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229504,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229632,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229696,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229728,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229744,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229752,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229756,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229758,64,FLEN)
NAN_BOXED(6892025040870147374,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(270215977642229759,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041600,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041601,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041603,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041607,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041615,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041631,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041663,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041727,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478041855,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478042111,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478042623,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478043647,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478045695,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478049791,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478057983,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478074367,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478107135,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478172671,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478303743,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217478565887,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217479090175,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217480138751,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217482235903,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217486430207,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217494818815,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217511596031,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217545150463,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217612259327,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559217746477055,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559218014912511,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559218551783423,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559219625525247,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559221773008895,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559226067976191,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559234657910783,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559251837779967,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559286197518335,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559354916995071,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559492355948543,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457559767233855487,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457560316989669375,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457561416501297151,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457563615524552703,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457568013571063807,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457576809664086015,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457594401850130431,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457629586222219263,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457699954966396927,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9457840692454752255,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9458122167431462911,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9458685117384884223,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9459811017291726847,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9459811017291726848,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9460936917198569472,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9461499867151990784,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9461781342128701440,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9461922079617056768,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9461992448361234432,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462027632733323264,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462045224919367680,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462054021012389888,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462058419058900992,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462060618082156544,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462061717593784320,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062267349598208,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062542227505152,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062679666458624,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062748385935360,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062782745673728,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062799925542912,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062808515477504,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062812810444800,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062814957928448,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062816031670272,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062816568541184,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062816836976640,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062816971194368,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817038303232,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817071857664,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817088634880,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817097023488,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817101217792,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817103314944,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817104363520,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817104887808,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105149952,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105281024,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105346560,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105379328,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105395712,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105403904,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105408000,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105410048,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105411072,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105411584,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105411840,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105411968,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412032,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412064,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412080,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412088,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412092,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412094,64,FLEN)
NAN_BOXED(6892029714824993060,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9462062817105412095,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404156928,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404156929,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404156931,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404156935,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404156943,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404156959,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404156991,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404157055,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404157183,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404157439,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404157951,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404158975,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404161023,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404165119,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404173311,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404189695,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404222463,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404287999,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404419071,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675404681215,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675405205503,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675406254079,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675408351231,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675412545535,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675420934143,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675437711359,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675471265791,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675538374655,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675672592383,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863675941027839,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863676477898751,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863677551640575,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863679699124223,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863683994091519,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863692584026111,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863709763895295,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863744123633663,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863812843110399,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591863950282063871,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591864225159970815,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591864774915784703,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591865874427412479,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591868073450668031,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591872471497179135,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591881267590201343,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591898859776245759,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13591934044148334591,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13592004412892512255,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13592145150380867583,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13592426625357578239,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13592989575310999551,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13594115475217842175,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13594115475217842176,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13595241375124684800,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13595804325078106112,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596085800054816768,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596226537543172096,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596296906287349760,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596332090659438592,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596349682845483008,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596358478938505216,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596362876985016320,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596365076008271872,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596366175519899648,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596366725275713536,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367000153620480,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367137592573952,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367206312050688,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367240671789056,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367257851658240,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367266441592832,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367270736560128,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367272884043776,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367273957785600,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367274494656512,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367274763091968,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367274897309696,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367274964418560,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367274997972992,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275014750208,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275023138816,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275027333120,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275029430272,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275030478848,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031003136,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031265280,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031396352,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031461888,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031494656,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031511040,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031519232,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031523328,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031525376,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031526400,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031526912,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527168,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527296,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527360,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527392,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527408,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527416,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527420,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527422,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13596367275031527423,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6892039267602641175,64,FLEN)
NAN_BOXED(11513418154760124595,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775935,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854776063,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854776319,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854776831,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854777855,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854779903,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854783999,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854792191,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854808575,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854841343,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854906879,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036855037951,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036855300095,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036855824383,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036856872959,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036858970111,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036863164415,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036871553023,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036888330239,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036921884671,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036988993535,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372037123211263,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372037391646719,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372037928517631,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372039002259455,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372041149743103,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372045444710399,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372054034644991,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372071214514175,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372105574252543,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372174293729279,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372311732682751,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372586610589695,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223373136366403583,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223374235878031359,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223376434901286911,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223380832947798015,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223389629040820223,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223407221226864639,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223442405598953471,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223512774343131135,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223653511831486463,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223934986808197119,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224497936761618431,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225623836668461055,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225623836668461056,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226749736575303680,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227312686528724992,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227594161505435648,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227734898993790976,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227805267737968640,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227840452110057472,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227858044296101888,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227866840389124096,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227871238435635200,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227873437458890752,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227874536970518528,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875086726332416,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875361604239360,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875499043192832,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875567762669568,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875602122407936,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875619302277120,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875627892211712,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875632187179008,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875634334662656,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875635408404480,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875635945275392,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636213710848,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636347928576,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636415037440,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636448591872,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636465369088,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636473757696,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636477952000,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636480049152,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636481097728,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636481622016,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636481884160,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482015232,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482080768,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482113536,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482129920,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482138112,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482142208,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482144256,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482145280,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482145792,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146048,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146176,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146303,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6892062683888780745,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043264,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043265,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043267,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043271,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043279,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043295,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043327,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043391,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043519,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964043775,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964044287,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964045311,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964047359,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964051455,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964059647,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964076031,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964108799,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964174335,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964305407,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051964567551,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051965091839,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051966140415,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051968237567,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051972431871,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051980820479,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362051997597695,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362052031152127,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362052098260991,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362052232478719,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362052500914175,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362053037785087,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362054111526911,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362056259010559,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362060553977855,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362069143912447,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362086323781631,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362120683519999,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362189402996735,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362326841950207,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206362601719857151,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206363151475671039,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206364250987298815,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206366450010554367,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206370848057065471,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206379644150087679,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206397236336132095,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206432420708220927,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206502789452398591,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206643526940753919,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4206925001917464575,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4207487951870885887,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4208613851777728511,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4208613851777728512,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4209739751684571136,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210302701637992448,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210584176614703104,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210724914103058432,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210795282847236096,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210830467219324928,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210848059405369344,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210856855498391552,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210861253544902656,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210863452568158208,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210864552079785984,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865101835599872,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865376713506816,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865514152460288,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865582871937024,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865617231675392,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865634411544576,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865643001479168,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865647296446464,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865649443930112,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865650517671936,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651054542848,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651322978304,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651457196032,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651524304896,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651557859328,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651574636544,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651583025152,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651587219456,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651589316608,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651590365184,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651590889472,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591151616,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591282688,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591348224,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591380992,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591397376,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591405568,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591409664,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591411712,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591412736,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413248,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413504,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413632,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413696,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413728,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413744,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413752,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413756,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413758,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4210865651591413759,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6892069309387887215,64,FLEN)
NAN_BOXED(2321538026245352015,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6892072513122970625,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
