
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3840:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x8030003fffffffff; valaddr_reg:x3; val_offset:11520*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11520*0 + 3*0*FLEN/8, x4, x1, x2)

inst_3841:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x8030007fffffffff; valaddr_reg:x3; val_offset:11523*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11523*0 + 3*1*FLEN/8, x4, x1, x2)

inst_3842:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803000ffffffffff; valaddr_reg:x3; val_offset:11526*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11526*0 + 3*2*FLEN/8, x4, x1, x2)

inst_3843:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803001ffffffffff; valaddr_reg:x3; val_offset:11529*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11529*0 + 3*3*FLEN/8, x4, x1, x2)

inst_3844:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803003ffffffffff; valaddr_reg:x3; val_offset:11532*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11532*0 + 3*4*FLEN/8, x4, x1, x2)

inst_3845:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803007ffffffffff; valaddr_reg:x3; val_offset:11535*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11535*0 + 3*5*FLEN/8, x4, x1, x2)

inst_3846:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x80300fffffffffff; valaddr_reg:x3; val_offset:11538*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11538*0 + 3*6*FLEN/8, x4, x1, x2)

inst_3847:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x80301fffffffffff; valaddr_reg:x3; val_offset:11541*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11541*0 + 3*7*FLEN/8, x4, x1, x2)

inst_3848:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x80303fffffffffff; valaddr_reg:x3; val_offset:11544*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11544*0 + 3*8*FLEN/8, x4, x1, x2)

inst_3849:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x80307fffffffffff; valaddr_reg:x3; val_offset:11547*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11547*0 + 3*9*FLEN/8, x4, x1, x2)

inst_3850:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x8030ffffffffffff; valaddr_reg:x3; val_offset:11550*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11550*0 + 3*10*FLEN/8, x4, x1, x2)

inst_3851:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x8031ffffffffffff; valaddr_reg:x3; val_offset:11553*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11553*0 + 3*11*FLEN/8, x4, x1, x2)

inst_3852:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x8033ffffffffffff; valaddr_reg:x3; val_offset:11556*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11556*0 + 3*12*FLEN/8, x4, x1, x2)

inst_3853:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x8037ffffffffffff; valaddr_reg:x3; val_offset:11559*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11559*0 + 3*13*FLEN/8, x4, x1, x2)

inst_3854:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x8038000000000000; valaddr_reg:x3; val_offset:11562*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11562*0 + 3*14*FLEN/8, x4, x1, x2)

inst_3855:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803c000000000000; valaddr_reg:x3; val_offset:11565*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11565*0 + 3*15*FLEN/8, x4, x1, x2)

inst_3856:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803e000000000000; valaddr_reg:x3; val_offset:11568*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11568*0 + 3*16*FLEN/8, x4, x1, x2)

inst_3857:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803f000000000000; valaddr_reg:x3; val_offset:11571*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11571*0 + 3*17*FLEN/8, x4, x1, x2)

inst_3858:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803f800000000000; valaddr_reg:x3; val_offset:11574*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11574*0 + 3*18*FLEN/8, x4, x1, x2)

inst_3859:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fc00000000000; valaddr_reg:x3; val_offset:11577*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11577*0 + 3*19*FLEN/8, x4, x1, x2)

inst_3860:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fe00000000000; valaddr_reg:x3; val_offset:11580*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11580*0 + 3*20*FLEN/8, x4, x1, x2)

inst_3861:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ff00000000000; valaddr_reg:x3; val_offset:11583*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11583*0 + 3*21*FLEN/8, x4, x1, x2)

inst_3862:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ff80000000000; valaddr_reg:x3; val_offset:11586*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11586*0 + 3*22*FLEN/8, x4, x1, x2)

inst_3863:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffc0000000000; valaddr_reg:x3; val_offset:11589*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11589*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3864:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffe0000000000; valaddr_reg:x3; val_offset:11592*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11592*0 + 3*24*FLEN/8, x4, x1, x2)

inst_3865:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fff0000000000; valaddr_reg:x3; val_offset:11595*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11595*0 + 3*25*FLEN/8, x4, x1, x2)

inst_3866:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fff8000000000; valaddr_reg:x3; val_offset:11598*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11598*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3867:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffc000000000; valaddr_reg:x3; val_offset:11601*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11601*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3868:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffe000000000; valaddr_reg:x3; val_offset:11604*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11604*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3869:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffff000000000; valaddr_reg:x3; val_offset:11607*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11607*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3870:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffff800000000; valaddr_reg:x3; val_offset:11610*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11610*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3871:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffc00000000; valaddr_reg:x3; val_offset:11613*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11613*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3872:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffe00000000; valaddr_reg:x3; val_offset:11616*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11616*0 + 3*32*FLEN/8, x4, x1, x2)

inst_3873:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffff00000000; valaddr_reg:x3; val_offset:11619*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11619*0 + 3*33*FLEN/8, x4, x1, x2)

inst_3874:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffff80000000; valaddr_reg:x3; val_offset:11622*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11622*0 + 3*34*FLEN/8, x4, x1, x2)

inst_3875:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffc0000000; valaddr_reg:x3; val_offset:11625*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11625*0 + 3*35*FLEN/8, x4, x1, x2)

inst_3876:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffe0000000; valaddr_reg:x3; val_offset:11628*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11628*0 + 3*36*FLEN/8, x4, x1, x2)

inst_3877:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffff0000000; valaddr_reg:x3; val_offset:11631*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11631*0 + 3*37*FLEN/8, x4, x1, x2)

inst_3878:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffff8000000; valaddr_reg:x3; val_offset:11634*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11634*0 + 3*38*FLEN/8, x4, x1, x2)

inst_3879:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffc000000; valaddr_reg:x3; val_offset:11637*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11637*0 + 3*39*FLEN/8, x4, x1, x2)

inst_3880:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffe000000; valaddr_reg:x3; val_offset:11640*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11640*0 + 3*40*FLEN/8, x4, x1, x2)

inst_3881:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffff000000; valaddr_reg:x3; val_offset:11643*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11643*0 + 3*41*FLEN/8, x4, x1, x2)

inst_3882:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffff800000; valaddr_reg:x3; val_offset:11646*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11646*0 + 3*42*FLEN/8, x4, x1, x2)

inst_3883:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffc00000; valaddr_reg:x3; val_offset:11649*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11649*0 + 3*43*FLEN/8, x4, x1, x2)

inst_3884:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffe00000; valaddr_reg:x3; val_offset:11652*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11652*0 + 3*44*FLEN/8, x4, x1, x2)

inst_3885:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffff00000; valaddr_reg:x3; val_offset:11655*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11655*0 + 3*45*FLEN/8, x4, x1, x2)

inst_3886:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffff80000; valaddr_reg:x3; val_offset:11658*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11658*0 + 3*46*FLEN/8, x4, x1, x2)

inst_3887:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffc0000; valaddr_reg:x3; val_offset:11661*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11661*0 + 3*47*FLEN/8, x4, x1, x2)

inst_3888:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffe0000; valaddr_reg:x3; val_offset:11664*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11664*0 + 3*48*FLEN/8, x4, x1, x2)

inst_3889:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffff0000; valaddr_reg:x3; val_offset:11667*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11667*0 + 3*49*FLEN/8, x4, x1, x2)

inst_3890:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffff8000; valaddr_reg:x3; val_offset:11670*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11670*0 + 3*50*FLEN/8, x4, x1, x2)

inst_3891:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffffc000; valaddr_reg:x3; val_offset:11673*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11673*0 + 3*51*FLEN/8, x4, x1, x2)

inst_3892:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffffe000; valaddr_reg:x3; val_offset:11676*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11676*0 + 3*52*FLEN/8, x4, x1, x2)

inst_3893:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffff000; valaddr_reg:x3; val_offset:11679*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11679*0 + 3*53*FLEN/8, x4, x1, x2)

inst_3894:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffff800; valaddr_reg:x3; val_offset:11682*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11682*0 + 3*54*FLEN/8, x4, x1, x2)

inst_3895:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffffc00; valaddr_reg:x3; val_offset:11685*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11685*0 + 3*55*FLEN/8, x4, x1, x2)

inst_3896:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffffe00; valaddr_reg:x3; val_offset:11688*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11688*0 + 3*56*FLEN/8, x4, x1, x2)

inst_3897:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffffff00; valaddr_reg:x3; val_offset:11691*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11691*0 + 3*57*FLEN/8, x4, x1, x2)

inst_3898:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffffff80; valaddr_reg:x3; val_offset:11694*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11694*0 + 3*58*FLEN/8, x4, x1, x2)

inst_3899:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffffffc0; valaddr_reg:x3; val_offset:11697*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11697*0 + 3*59*FLEN/8, x4, x1, x2)

inst_3900:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffffffe0; valaddr_reg:x3; val_offset:11700*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11700*0 + 3*60*FLEN/8, x4, x1, x2)

inst_3901:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffffff0; valaddr_reg:x3; val_offset:11703*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11703*0 + 3*61*FLEN/8, x4, x1, x2)

inst_3902:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffffff8; valaddr_reg:x3; val_offset:11706*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11706*0 + 3*62*FLEN/8, x4, x1, x2)

inst_3903:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffffffc; valaddr_reg:x3; val_offset:11709*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11709*0 + 3*63*FLEN/8, x4, x1, x2)

inst_3904:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803ffffffffffffe; valaddr_reg:x3; val_offset:11712*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11712*0 + 3*64*FLEN/8, x4, x1, x2)

inst_3905:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x226a10482586f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x003 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6226a10482586f; op2val:0x8000;
op3val:0x803fffffffffffff; valaddr_reg:x3; val_offset:11715*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11715*0 + 3*65*FLEN/8, x4, x1, x2)

inst_3906:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000000000; valaddr_reg:x3; val_offset:11718*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11718*0 + 3*66*FLEN/8, x4, x1, x2)

inst_3907:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000000001; valaddr_reg:x3; val_offset:11721*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11721*0 + 3*67*FLEN/8, x4, x1, x2)

inst_3908:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000000003; valaddr_reg:x3; val_offset:11724*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11724*0 + 3*68*FLEN/8, x4, x1, x2)

inst_3909:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000000007; valaddr_reg:x3; val_offset:11727*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11727*0 + 3*69*FLEN/8, x4, x1, x2)

inst_3910:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000000000f; valaddr_reg:x3; val_offset:11730*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11730*0 + 3*70*FLEN/8, x4, x1, x2)

inst_3911:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000000001f; valaddr_reg:x3; val_offset:11733*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11733*0 + 3*71*FLEN/8, x4, x1, x2)

inst_3912:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000000003f; valaddr_reg:x3; val_offset:11736*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11736*0 + 3*72*FLEN/8, x4, x1, x2)

inst_3913:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000000007f; valaddr_reg:x3; val_offset:11739*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11739*0 + 3*73*FLEN/8, x4, x1, x2)

inst_3914:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000000000ff; valaddr_reg:x3; val_offset:11742*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11742*0 + 3*74*FLEN/8, x4, x1, x2)

inst_3915:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000000001ff; valaddr_reg:x3; val_offset:11745*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11745*0 + 3*75*FLEN/8, x4, x1, x2)

inst_3916:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000000003ff; valaddr_reg:x3; val_offset:11748*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11748*0 + 3*76*FLEN/8, x4, x1, x2)

inst_3917:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000000007ff; valaddr_reg:x3; val_offset:11751*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11751*0 + 3*77*FLEN/8, x4, x1, x2)

inst_3918:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000000fff; valaddr_reg:x3; val_offset:11754*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11754*0 + 3*78*FLEN/8, x4, x1, x2)

inst_3919:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000001fff; valaddr_reg:x3; val_offset:11757*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11757*0 + 3*79*FLEN/8, x4, x1, x2)

inst_3920:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000003fff; valaddr_reg:x3; val_offset:11760*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11760*0 + 3*80*FLEN/8, x4, x1, x2)

inst_3921:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000007fff; valaddr_reg:x3; val_offset:11763*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11763*0 + 3*81*FLEN/8, x4, x1, x2)

inst_3922:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000000ffff; valaddr_reg:x3; val_offset:11766*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11766*0 + 3*82*FLEN/8, x4, x1, x2)

inst_3923:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000001ffff; valaddr_reg:x3; val_offset:11769*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11769*0 + 3*83*FLEN/8, x4, x1, x2)

inst_3924:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000003ffff; valaddr_reg:x3; val_offset:11772*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11772*0 + 3*84*FLEN/8, x4, x1, x2)

inst_3925:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000007ffff; valaddr_reg:x3; val_offset:11775*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11775*0 + 3*85*FLEN/8, x4, x1, x2)

inst_3926:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000000fffff; valaddr_reg:x3; val_offset:11778*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11778*0 + 3*86*FLEN/8, x4, x1, x2)

inst_3927:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000001fffff; valaddr_reg:x3; val_offset:11781*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11781*0 + 3*87*FLEN/8, x4, x1, x2)

inst_3928:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000003fffff; valaddr_reg:x3; val_offset:11784*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11784*0 + 3*88*FLEN/8, x4, x1, x2)

inst_3929:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000007fffff; valaddr_reg:x3; val_offset:11787*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11787*0 + 3*89*FLEN/8, x4, x1, x2)

inst_3930:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000000ffffff; valaddr_reg:x3; val_offset:11790*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11790*0 + 3*90*FLEN/8, x4, x1, x2)

inst_3931:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000001ffffff; valaddr_reg:x3; val_offset:11793*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11793*0 + 3*91*FLEN/8, x4, x1, x2)

inst_3932:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000003ffffff; valaddr_reg:x3; val_offset:11796*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11796*0 + 3*92*FLEN/8, x4, x1, x2)

inst_3933:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000007ffffff; valaddr_reg:x3; val_offset:11799*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11799*0 + 3*93*FLEN/8, x4, x1, x2)

inst_3934:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000000fffffff; valaddr_reg:x3; val_offset:11802*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11802*0 + 3*94*FLEN/8, x4, x1, x2)

inst_3935:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000001fffffff; valaddr_reg:x3; val_offset:11805*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11805*0 + 3*95*FLEN/8, x4, x1, x2)

inst_3936:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000003fffffff; valaddr_reg:x3; val_offset:11808*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11808*0 + 3*96*FLEN/8, x4, x1, x2)

inst_3937:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000007fffffff; valaddr_reg:x3; val_offset:11811*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11811*0 + 3*97*FLEN/8, x4, x1, x2)

inst_3938:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200000ffffffff; valaddr_reg:x3; val_offset:11814*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11814*0 + 3*98*FLEN/8, x4, x1, x2)

inst_3939:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200001ffffffff; valaddr_reg:x3; val_offset:11817*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11817*0 + 3*99*FLEN/8, x4, x1, x2)

inst_3940:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200003ffffffff; valaddr_reg:x3; val_offset:11820*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11820*0 + 3*100*FLEN/8, x4, x1, x2)

inst_3941:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200007ffffffff; valaddr_reg:x3; val_offset:11823*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11823*0 + 3*101*FLEN/8, x4, x1, x2)

inst_3942:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20000fffffffff; valaddr_reg:x3; val_offset:11826*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11826*0 + 3*102*FLEN/8, x4, x1, x2)

inst_3943:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20001fffffffff; valaddr_reg:x3; val_offset:11829*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11829*0 + 3*103*FLEN/8, x4, x1, x2)

inst_3944:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20003fffffffff; valaddr_reg:x3; val_offset:11832*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11832*0 + 3*104*FLEN/8, x4, x1, x2)

inst_3945:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20007fffffffff; valaddr_reg:x3; val_offset:11835*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11835*0 + 3*105*FLEN/8, x4, x1, x2)

inst_3946:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2000ffffffffff; valaddr_reg:x3; val_offset:11838*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11838*0 + 3*106*FLEN/8, x4, x1, x2)

inst_3947:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2001ffffffffff; valaddr_reg:x3; val_offset:11841*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11841*0 + 3*107*FLEN/8, x4, x1, x2)

inst_3948:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2003ffffffffff; valaddr_reg:x3; val_offset:11844*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11844*0 + 3*108*FLEN/8, x4, x1, x2)

inst_3949:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2007ffffffffff; valaddr_reg:x3; val_offset:11847*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11847*0 + 3*109*FLEN/8, x4, x1, x2)

inst_3950:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd200fffffffffff; valaddr_reg:x3; val_offset:11850*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11850*0 + 3*110*FLEN/8, x4, x1, x2)

inst_3951:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd201fffffffffff; valaddr_reg:x3; val_offset:11853*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11853*0 + 3*111*FLEN/8, x4, x1, x2)

inst_3952:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd203fffffffffff; valaddr_reg:x3; val_offset:11856*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11856*0 + 3*112*FLEN/8, x4, x1, x2)

inst_3953:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd207fffffffffff; valaddr_reg:x3; val_offset:11859*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11859*0 + 3*113*FLEN/8, x4, x1, x2)

inst_3954:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd20ffffffffffff; valaddr_reg:x3; val_offset:11862*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11862*0 + 3*114*FLEN/8, x4, x1, x2)

inst_3955:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd21ffffffffffff; valaddr_reg:x3; val_offset:11865*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11865*0 + 3*115*FLEN/8, x4, x1, x2)

inst_3956:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd23ffffffffffff; valaddr_reg:x3; val_offset:11868*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11868*0 + 3*116*FLEN/8, x4, x1, x2)

inst_3957:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd27ffffffffffff; valaddr_reg:x3; val_offset:11871*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11871*0 + 3*117*FLEN/8, x4, x1, x2)

inst_3958:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd28000000000000; valaddr_reg:x3; val_offset:11874*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11874*0 + 3*118*FLEN/8, x4, x1, x2)

inst_3959:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2c000000000000; valaddr_reg:x3; val_offset:11877*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11877*0 + 3*119*FLEN/8, x4, x1, x2)

inst_3960:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2e000000000000; valaddr_reg:x3; val_offset:11880*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11880*0 + 3*120*FLEN/8, x4, x1, x2)

inst_3961:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2f000000000000; valaddr_reg:x3; val_offset:11883*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11883*0 + 3*121*FLEN/8, x4, x1, x2)

inst_3962:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2f800000000000; valaddr_reg:x3; val_offset:11886*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11886*0 + 3*122*FLEN/8, x4, x1, x2)

inst_3963:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fc00000000000; valaddr_reg:x3; val_offset:11889*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11889*0 + 3*123*FLEN/8, x4, x1, x2)

inst_3964:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fe00000000000; valaddr_reg:x3; val_offset:11892*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11892*0 + 3*124*FLEN/8, x4, x1, x2)

inst_3965:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ff00000000000; valaddr_reg:x3; val_offset:11895*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11895*0 + 3*125*FLEN/8, x4, x1, x2)

inst_3966:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ff80000000000; valaddr_reg:x3; val_offset:11898*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11898*0 + 3*126*FLEN/8, x4, x1, x2)

inst_3967:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffc0000000000; valaddr_reg:x3; val_offset:11901*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11901*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_3968:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffe0000000000; valaddr_reg:x3; val_offset:11904*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11904*0 + 3*128*FLEN/8, x4, x1, x2)

inst_3969:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fff0000000000; valaddr_reg:x3; val_offset:11907*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11907*0 + 3*129*FLEN/8, x4, x1, x2)

inst_3970:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fff8000000000; valaddr_reg:x3; val_offset:11910*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11910*0 + 3*130*FLEN/8, x4, x1, x2)

inst_3971:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffc000000000; valaddr_reg:x3; val_offset:11913*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11913*0 + 3*131*FLEN/8, x4, x1, x2)

inst_3972:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffe000000000; valaddr_reg:x3; val_offset:11916*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11916*0 + 3*132*FLEN/8, x4, x1, x2)

inst_3973:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffff000000000; valaddr_reg:x3; val_offset:11919*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11919*0 + 3*133*FLEN/8, x4, x1, x2)

inst_3974:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffff800000000; valaddr_reg:x3; val_offset:11922*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11922*0 + 3*134*FLEN/8, x4, x1, x2)

inst_3975:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffc00000000; valaddr_reg:x3; val_offset:11925*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11925*0 + 3*135*FLEN/8, x4, x1, x2)

inst_3976:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffe00000000; valaddr_reg:x3; val_offset:11928*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11928*0 + 3*136*FLEN/8, x4, x1, x2)

inst_3977:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffff00000000; valaddr_reg:x3; val_offset:11931*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11931*0 + 3*137*FLEN/8, x4, x1, x2)

inst_3978:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffff80000000; valaddr_reg:x3; val_offset:11934*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11934*0 + 3*138*FLEN/8, x4, x1, x2)

inst_3979:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffc0000000; valaddr_reg:x3; val_offset:11937*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11937*0 + 3*139*FLEN/8, x4, x1, x2)

inst_3980:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffe0000000; valaddr_reg:x3; val_offset:11940*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11940*0 + 3*140*FLEN/8, x4, x1, x2)

inst_3981:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffff0000000; valaddr_reg:x3; val_offset:11943*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11943*0 + 3*141*FLEN/8, x4, x1, x2)

inst_3982:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffff8000000; valaddr_reg:x3; val_offset:11946*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11946*0 + 3*142*FLEN/8, x4, x1, x2)

inst_3983:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffc000000; valaddr_reg:x3; val_offset:11949*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11949*0 + 3*143*FLEN/8, x4, x1, x2)

inst_3984:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffe000000; valaddr_reg:x3; val_offset:11952*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11952*0 + 3*144*FLEN/8, x4, x1, x2)

inst_3985:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffff000000; valaddr_reg:x3; val_offset:11955*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11955*0 + 3*145*FLEN/8, x4, x1, x2)

inst_3986:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffff800000; valaddr_reg:x3; val_offset:11958*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11958*0 + 3*146*FLEN/8, x4, x1, x2)

inst_3987:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffc00000; valaddr_reg:x3; val_offset:11961*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11961*0 + 3*147*FLEN/8, x4, x1, x2)

inst_3988:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffe00000; valaddr_reg:x3; val_offset:11964*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11964*0 + 3*148*FLEN/8, x4, x1, x2)

inst_3989:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffff00000; valaddr_reg:x3; val_offset:11967*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11967*0 + 3*149*FLEN/8, x4, x1, x2)

inst_3990:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffff80000; valaddr_reg:x3; val_offset:11970*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11970*0 + 3*150*FLEN/8, x4, x1, x2)

inst_3991:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffc0000; valaddr_reg:x3; val_offset:11973*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11973*0 + 3*151*FLEN/8, x4, x1, x2)

inst_3992:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffe0000; valaddr_reg:x3; val_offset:11976*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11976*0 + 3*152*FLEN/8, x4, x1, x2)

inst_3993:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffff0000; valaddr_reg:x3; val_offset:11979*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11979*0 + 3*153*FLEN/8, x4, x1, x2)

inst_3994:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffff8000; valaddr_reg:x3; val_offset:11982*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11982*0 + 3*154*FLEN/8, x4, x1, x2)

inst_3995:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffffc000; valaddr_reg:x3; val_offset:11985*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11985*0 + 3*155*FLEN/8, x4, x1, x2)

inst_3996:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffffe000; valaddr_reg:x3; val_offset:11988*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11988*0 + 3*156*FLEN/8, x4, x1, x2)

inst_3997:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffff000; valaddr_reg:x3; val_offset:11991*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11991*0 + 3*157*FLEN/8, x4, x1, x2)

inst_3998:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffff800; valaddr_reg:x3; val_offset:11994*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11994*0 + 3*158*FLEN/8, x4, x1, x2)

inst_3999:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffffc00; valaddr_reg:x3; val_offset:11997*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 11997*0 + 3*159*FLEN/8, x4, x1, x2)

inst_4000:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffffe00; valaddr_reg:x3; val_offset:12000*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12000*0 + 3*160*FLEN/8, x4, x1, x2)

inst_4001:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffffff00; valaddr_reg:x3; val_offset:12003*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12003*0 + 3*161*FLEN/8, x4, x1, x2)

inst_4002:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffffff80; valaddr_reg:x3; val_offset:12006*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12006*0 + 3*162*FLEN/8, x4, x1, x2)

inst_4003:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffffffc0; valaddr_reg:x3; val_offset:12009*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12009*0 + 3*163*FLEN/8, x4, x1, x2)

inst_4004:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffffffe0; valaddr_reg:x3; val_offset:12012*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12012*0 + 3*164*FLEN/8, x4, x1, x2)

inst_4005:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffffff0; valaddr_reg:x3; val_offset:12015*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12015*0 + 3*165*FLEN/8, x4, x1, x2)

inst_4006:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffffff8; valaddr_reg:x3; val_offset:12018*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12018*0 + 3*166*FLEN/8, x4, x1, x2)

inst_4007:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffffffc; valaddr_reg:x3; val_offset:12021*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12021*0 + 3*167*FLEN/8, x4, x1, x2)

inst_4008:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2ffffffffffffe; valaddr_reg:x3; val_offset:12024*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12024*0 + 3*168*FLEN/8, x4, x1, x2)

inst_4009:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3d2 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbd2fffffffffffff; valaddr_reg:x3; val_offset:12027*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12027*0 + 3*169*FLEN/8, x4, x1, x2)

inst_4010:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:12030*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12030*0 + 3*170*FLEN/8, x4, x1, x2)

inst_4011:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:12033*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12033*0 + 3*171*FLEN/8, x4, x1, x2)

inst_4012:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:12036*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12036*0 + 3*172*FLEN/8, x4, x1, x2)

inst_4013:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:12039*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12039*0 + 3*173*FLEN/8, x4, x1, x2)

inst_4014:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:12042*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12042*0 + 3*174*FLEN/8, x4, x1, x2)

inst_4015:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:12045*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12045*0 + 3*175*FLEN/8, x4, x1, x2)

inst_4016:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:12048*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12048*0 + 3*176*FLEN/8, x4, x1, x2)

inst_4017:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:12051*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12051*0 + 3*177*FLEN/8, x4, x1, x2)

inst_4018:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:12054*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12054*0 + 3*178*FLEN/8, x4, x1, x2)

inst_4019:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:12057*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12057*0 + 3*179*FLEN/8, x4, x1, x2)

inst_4020:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:12060*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12060*0 + 3*180*FLEN/8, x4, x1, x2)

inst_4021:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:12063*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12063*0 + 3*181*FLEN/8, x4, x1, x2)

inst_4022:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:12066*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12066*0 + 3*182*FLEN/8, x4, x1, x2)

inst_4023:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:12069*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12069*0 + 3*183*FLEN/8, x4, x1, x2)

inst_4024:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:12072*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12072*0 + 3*184*FLEN/8, x4, x1, x2)

inst_4025:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:12075*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12075*0 + 3*185*FLEN/8, x4, x1, x2)

inst_4026:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:12078*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12078*0 + 3*186*FLEN/8, x4, x1, x2)

inst_4027:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:12081*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12081*0 + 3*187*FLEN/8, x4, x1, x2)

inst_4028:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:12084*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12084*0 + 3*188*FLEN/8, x4, x1, x2)

inst_4029:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:12087*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12087*0 + 3*189*FLEN/8, x4, x1, x2)

inst_4030:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:12090*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12090*0 + 3*190*FLEN/8, x4, x1, x2)

inst_4031:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x228e5619b5bff and fs2 == 1 and fe2 == 0x200 and fm2 == 0xc31b87121e8f1 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6228e5619b5bff; op2val:0xa00c31b87121e8f1;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:12093*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12093*0 + 3*191*FLEN/8, x4, x1, x2)

inst_4032:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:12096*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12096*0 + 3*192*FLEN/8, x4, x1, x2)

inst_4033:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:12099*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12099*0 + 3*193*FLEN/8, x4, x1, x2)

inst_4034:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:12102*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12102*0 + 3*194*FLEN/8, x4, x1, x2)

inst_4035:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:12105*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12105*0 + 3*195*FLEN/8, x4, x1, x2)

inst_4036:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:12108*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12108*0 + 3*196*FLEN/8, x4, x1, x2)

inst_4037:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:12111*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12111*0 + 3*197*FLEN/8, x4, x1, x2)

inst_4038:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:12114*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12114*0 + 3*198*FLEN/8, x4, x1, x2)

inst_4039:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:12117*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12117*0 + 3*199*FLEN/8, x4, x1, x2)

inst_4040:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:12120*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12120*0 + 3*200*FLEN/8, x4, x1, x2)

inst_4041:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:12123*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12123*0 + 3*201*FLEN/8, x4, x1, x2)

inst_4042:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:12126*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12126*0 + 3*202*FLEN/8, x4, x1, x2)

inst_4043:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:12129*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12129*0 + 3*203*FLEN/8, x4, x1, x2)

inst_4044:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:12132*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12132*0 + 3*204*FLEN/8, x4, x1, x2)

inst_4045:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:12135*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12135*0 + 3*205*FLEN/8, x4, x1, x2)

inst_4046:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:12138*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12138*0 + 3*206*FLEN/8, x4, x1, x2)

inst_4047:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:12141*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12141*0 + 3*207*FLEN/8, x4, x1, x2)

inst_4048:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:12144*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12144*0 + 3*208*FLEN/8, x4, x1, x2)

inst_4049:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:12147*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12147*0 + 3*209*FLEN/8, x4, x1, x2)

inst_4050:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:12150*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12150*0 + 3*210*FLEN/8, x4, x1, x2)

inst_4051:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:12153*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12153*0 + 3*211*FLEN/8, x4, x1, x2)

inst_4052:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:12156*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12156*0 + 3*212*FLEN/8, x4, x1, x2)

inst_4053:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:12159*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12159*0 + 3*213*FLEN/8, x4, x1, x2)

inst_4054:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000000000; valaddr_reg:x3; val_offset:12162*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12162*0 + 3*214*FLEN/8, x4, x1, x2)

inst_4055:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000000001; valaddr_reg:x3; val_offset:12165*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12165*0 + 3*215*FLEN/8, x4, x1, x2)

inst_4056:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000000003; valaddr_reg:x3; val_offset:12168*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12168*0 + 3*216*FLEN/8, x4, x1, x2)

inst_4057:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000000007; valaddr_reg:x3; val_offset:12171*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12171*0 + 3*217*FLEN/8, x4, x1, x2)

inst_4058:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000000000f; valaddr_reg:x3; val_offset:12174*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12174*0 + 3*218*FLEN/8, x4, x1, x2)

inst_4059:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000000001f; valaddr_reg:x3; val_offset:12177*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12177*0 + 3*219*FLEN/8, x4, x1, x2)

inst_4060:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000000003f; valaddr_reg:x3; val_offset:12180*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12180*0 + 3*220*FLEN/8, x4, x1, x2)

inst_4061:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000000007f; valaddr_reg:x3; val_offset:12183*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12183*0 + 3*221*FLEN/8, x4, x1, x2)

inst_4062:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000000000ff; valaddr_reg:x3; val_offset:12186*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12186*0 + 3*222*FLEN/8, x4, x1, x2)

inst_4063:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000000001ff; valaddr_reg:x3; val_offset:12189*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12189*0 + 3*223*FLEN/8, x4, x1, x2)

inst_4064:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000000003ff; valaddr_reg:x3; val_offset:12192*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12192*0 + 3*224*FLEN/8, x4, x1, x2)

inst_4065:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000000007ff; valaddr_reg:x3; val_offset:12195*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12195*0 + 3*225*FLEN/8, x4, x1, x2)

inst_4066:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000000fff; valaddr_reg:x3; val_offset:12198*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12198*0 + 3*226*FLEN/8, x4, x1, x2)

inst_4067:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000001fff; valaddr_reg:x3; val_offset:12201*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12201*0 + 3*227*FLEN/8, x4, x1, x2)

inst_4068:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000003fff; valaddr_reg:x3; val_offset:12204*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12204*0 + 3*228*FLEN/8, x4, x1, x2)

inst_4069:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000007fff; valaddr_reg:x3; val_offset:12207*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12207*0 + 3*229*FLEN/8, x4, x1, x2)

inst_4070:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000000ffff; valaddr_reg:x3; val_offset:12210*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12210*0 + 3*230*FLEN/8, x4, x1, x2)

inst_4071:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000001ffff; valaddr_reg:x3; val_offset:12213*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12213*0 + 3*231*FLEN/8, x4, x1, x2)

inst_4072:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000003ffff; valaddr_reg:x3; val_offset:12216*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12216*0 + 3*232*FLEN/8, x4, x1, x2)

inst_4073:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000007ffff; valaddr_reg:x3; val_offset:12219*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12219*0 + 3*233*FLEN/8, x4, x1, x2)

inst_4074:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000000fffff; valaddr_reg:x3; val_offset:12222*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12222*0 + 3*234*FLEN/8, x4, x1, x2)

inst_4075:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000001fffff; valaddr_reg:x3; val_offset:12225*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12225*0 + 3*235*FLEN/8, x4, x1, x2)

inst_4076:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000003fffff; valaddr_reg:x3; val_offset:12228*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12228*0 + 3*236*FLEN/8, x4, x1, x2)

inst_4077:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000007fffff; valaddr_reg:x3; val_offset:12231*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12231*0 + 3*237*FLEN/8, x4, x1, x2)

inst_4078:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000000ffffff; valaddr_reg:x3; val_offset:12234*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12234*0 + 3*238*FLEN/8, x4, x1, x2)

inst_4079:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000001ffffff; valaddr_reg:x3; val_offset:12237*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12237*0 + 3*239*FLEN/8, x4, x1, x2)

inst_4080:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000003ffffff; valaddr_reg:x3; val_offset:12240*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12240*0 + 3*240*FLEN/8, x4, x1, x2)

inst_4081:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000007ffffff; valaddr_reg:x3; val_offset:12243*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12243*0 + 3*241*FLEN/8, x4, x1, x2)

inst_4082:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000000fffffff; valaddr_reg:x3; val_offset:12246*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12246*0 + 3*242*FLEN/8, x4, x1, x2)

inst_4083:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000001fffffff; valaddr_reg:x3; val_offset:12249*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12249*0 + 3*243*FLEN/8, x4, x1, x2)

inst_4084:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000003fffffff; valaddr_reg:x3; val_offset:12252*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12252*0 + 3*244*FLEN/8, x4, x1, x2)

inst_4085:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000007fffffff; valaddr_reg:x3; val_offset:12255*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12255*0 + 3*245*FLEN/8, x4, x1, x2)

inst_4086:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600000ffffffff; valaddr_reg:x3; val_offset:12258*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12258*0 + 3*246*FLEN/8, x4, x1, x2)

inst_4087:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600001ffffffff; valaddr_reg:x3; val_offset:12261*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12261*0 + 3*247*FLEN/8, x4, x1, x2)

inst_4088:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600003ffffffff; valaddr_reg:x3; val_offset:12264*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12264*0 + 3*248*FLEN/8, x4, x1, x2)

inst_4089:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600007ffffffff; valaddr_reg:x3; val_offset:12267*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12267*0 + 3*249*FLEN/8, x4, x1, x2)

inst_4090:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360000fffffffff; valaddr_reg:x3; val_offset:12270*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12270*0 + 3*250*FLEN/8, x4, x1, x2)

inst_4091:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360001fffffffff; valaddr_reg:x3; val_offset:12273*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12273*0 + 3*251*FLEN/8, x4, x1, x2)

inst_4092:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360003fffffffff; valaddr_reg:x3; val_offset:12276*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12276*0 + 3*252*FLEN/8, x4, x1, x2)

inst_4093:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360007fffffffff; valaddr_reg:x3; val_offset:12279*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12279*0 + 3*253*FLEN/8, x4, x1, x2)

inst_4094:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836000ffffffffff; valaddr_reg:x3; val_offset:12282*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12282*0 + 3*254*FLEN/8, x4, x1, x2)

inst_4095:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836001ffffffffff; valaddr_reg:x3; val_offset:12285*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12285*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_4096:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836003ffffffffff; valaddr_reg:x3; val_offset:12288*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12288*0 + 3*256*FLEN/8, x4, x1, x2)

inst_4097:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836007ffffffffff; valaddr_reg:x3; val_offset:12291*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12291*0 + 3*257*FLEN/8, x4, x1, x2)

inst_4098:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83600fffffffffff; valaddr_reg:x3; val_offset:12294*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12294*0 + 3*258*FLEN/8, x4, x1, x2)

inst_4099:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83601fffffffffff; valaddr_reg:x3; val_offset:12297*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12297*0 + 3*259*FLEN/8, x4, x1, x2)

inst_4100:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83603fffffffffff; valaddr_reg:x3; val_offset:12300*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12300*0 + 3*260*FLEN/8, x4, x1, x2)

inst_4101:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x83607fffffffffff; valaddr_reg:x3; val_offset:12303*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12303*0 + 3*261*FLEN/8, x4, x1, x2)

inst_4102:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8360ffffffffffff; valaddr_reg:x3; val_offset:12306*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12306*0 + 3*262*FLEN/8, x4, x1, x2)

inst_4103:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8361ffffffffffff; valaddr_reg:x3; val_offset:12309*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12309*0 + 3*263*FLEN/8, x4, x1, x2)

inst_4104:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8363ffffffffffff; valaddr_reg:x3; val_offset:12312*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12312*0 + 3*264*FLEN/8, x4, x1, x2)

inst_4105:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8367ffffffffffff; valaddr_reg:x3; val_offset:12315*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12315*0 + 3*265*FLEN/8, x4, x1, x2)

inst_4106:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x8368000000000000; valaddr_reg:x3; val_offset:12318*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12318*0 + 3*266*FLEN/8, x4, x1, x2)

inst_4107:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836c000000000000; valaddr_reg:x3; val_offset:12321*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12321*0 + 3*267*FLEN/8, x4, x1, x2)

inst_4108:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836e000000000000; valaddr_reg:x3; val_offset:12324*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12324*0 + 3*268*FLEN/8, x4, x1, x2)

inst_4109:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836f000000000000; valaddr_reg:x3; val_offset:12327*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12327*0 + 3*269*FLEN/8, x4, x1, x2)

inst_4110:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836f800000000000; valaddr_reg:x3; val_offset:12330*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12330*0 + 3*270*FLEN/8, x4, x1, x2)

inst_4111:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fc00000000000; valaddr_reg:x3; val_offset:12333*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12333*0 + 3*271*FLEN/8, x4, x1, x2)

inst_4112:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fe00000000000; valaddr_reg:x3; val_offset:12336*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12336*0 + 3*272*FLEN/8, x4, x1, x2)

inst_4113:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ff00000000000; valaddr_reg:x3; val_offset:12339*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12339*0 + 3*273*FLEN/8, x4, x1, x2)

inst_4114:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ff80000000000; valaddr_reg:x3; val_offset:12342*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12342*0 + 3*274*FLEN/8, x4, x1, x2)

inst_4115:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffc0000000000; valaddr_reg:x3; val_offset:12345*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12345*0 + 3*275*FLEN/8, x4, x1, x2)

inst_4116:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffe0000000000; valaddr_reg:x3; val_offset:12348*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12348*0 + 3*276*FLEN/8, x4, x1, x2)

inst_4117:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fff0000000000; valaddr_reg:x3; val_offset:12351*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12351*0 + 3*277*FLEN/8, x4, x1, x2)

inst_4118:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fff8000000000; valaddr_reg:x3; val_offset:12354*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12354*0 + 3*278*FLEN/8, x4, x1, x2)

inst_4119:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffc000000000; valaddr_reg:x3; val_offset:12357*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12357*0 + 3*279*FLEN/8, x4, x1, x2)

inst_4120:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffe000000000; valaddr_reg:x3; val_offset:12360*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12360*0 + 3*280*FLEN/8, x4, x1, x2)

inst_4121:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffff000000000; valaddr_reg:x3; val_offset:12363*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12363*0 + 3*281*FLEN/8, x4, x1, x2)

inst_4122:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffff800000000; valaddr_reg:x3; val_offset:12366*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12366*0 + 3*282*FLEN/8, x4, x1, x2)

inst_4123:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffc00000000; valaddr_reg:x3; val_offset:12369*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12369*0 + 3*283*FLEN/8, x4, x1, x2)

inst_4124:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffe00000000; valaddr_reg:x3; val_offset:12372*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12372*0 + 3*284*FLEN/8, x4, x1, x2)

inst_4125:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffff00000000; valaddr_reg:x3; val_offset:12375*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12375*0 + 3*285*FLEN/8, x4, x1, x2)

inst_4126:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffff80000000; valaddr_reg:x3; val_offset:12378*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12378*0 + 3*286*FLEN/8, x4, x1, x2)

inst_4127:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffc0000000; valaddr_reg:x3; val_offset:12381*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12381*0 + 3*287*FLEN/8, x4, x1, x2)

inst_4128:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffe0000000; valaddr_reg:x3; val_offset:12384*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12384*0 + 3*288*FLEN/8, x4, x1, x2)

inst_4129:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffff0000000; valaddr_reg:x3; val_offset:12387*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12387*0 + 3*289*FLEN/8, x4, x1, x2)

inst_4130:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffff8000000; valaddr_reg:x3; val_offset:12390*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12390*0 + 3*290*FLEN/8, x4, x1, x2)

inst_4131:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffc000000; valaddr_reg:x3; val_offset:12393*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12393*0 + 3*291*FLEN/8, x4, x1, x2)

inst_4132:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffe000000; valaddr_reg:x3; val_offset:12396*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12396*0 + 3*292*FLEN/8, x4, x1, x2)

inst_4133:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffff000000; valaddr_reg:x3; val_offset:12399*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12399*0 + 3*293*FLEN/8, x4, x1, x2)

inst_4134:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffff800000; valaddr_reg:x3; val_offset:12402*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12402*0 + 3*294*FLEN/8, x4, x1, x2)

inst_4135:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffc00000; valaddr_reg:x3; val_offset:12405*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12405*0 + 3*295*FLEN/8, x4, x1, x2)

inst_4136:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffe00000; valaddr_reg:x3; val_offset:12408*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12408*0 + 3*296*FLEN/8, x4, x1, x2)

inst_4137:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffff00000; valaddr_reg:x3; val_offset:12411*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12411*0 + 3*297*FLEN/8, x4, x1, x2)

inst_4138:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffff80000; valaddr_reg:x3; val_offset:12414*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12414*0 + 3*298*FLEN/8, x4, x1, x2)

inst_4139:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffc0000; valaddr_reg:x3; val_offset:12417*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12417*0 + 3*299*FLEN/8, x4, x1, x2)

inst_4140:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffe0000; valaddr_reg:x3; val_offset:12420*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12420*0 + 3*300*FLEN/8, x4, x1, x2)

inst_4141:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffff0000; valaddr_reg:x3; val_offset:12423*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12423*0 + 3*301*FLEN/8, x4, x1, x2)

inst_4142:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffff8000; valaddr_reg:x3; val_offset:12426*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12426*0 + 3*302*FLEN/8, x4, x1, x2)

inst_4143:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffffc000; valaddr_reg:x3; val_offset:12429*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12429*0 + 3*303*FLEN/8, x4, x1, x2)

inst_4144:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffffe000; valaddr_reg:x3; val_offset:12432*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12432*0 + 3*304*FLEN/8, x4, x1, x2)

inst_4145:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffff000; valaddr_reg:x3; val_offset:12435*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12435*0 + 3*305*FLEN/8, x4, x1, x2)

inst_4146:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffff800; valaddr_reg:x3; val_offset:12438*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12438*0 + 3*306*FLEN/8, x4, x1, x2)

inst_4147:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffffc00; valaddr_reg:x3; val_offset:12441*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12441*0 + 3*307*FLEN/8, x4, x1, x2)

inst_4148:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffffe00; valaddr_reg:x3; val_offset:12444*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12444*0 + 3*308*FLEN/8, x4, x1, x2)

inst_4149:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffffff00; valaddr_reg:x3; val_offset:12447*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12447*0 + 3*309*FLEN/8, x4, x1, x2)

inst_4150:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffffff80; valaddr_reg:x3; val_offset:12450*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12450*0 + 3*310*FLEN/8, x4, x1, x2)

inst_4151:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffffffc0; valaddr_reg:x3; val_offset:12453*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12453*0 + 3*311*FLEN/8, x4, x1, x2)

inst_4152:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffffffe0; valaddr_reg:x3; val_offset:12456*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12456*0 + 3*312*FLEN/8, x4, x1, x2)

inst_4153:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffffff0; valaddr_reg:x3; val_offset:12459*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12459*0 + 3*313*FLEN/8, x4, x1, x2)

inst_4154:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffffff8; valaddr_reg:x3; val_offset:12462*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12462*0 + 3*314*FLEN/8, x4, x1, x2)

inst_4155:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffffffc; valaddr_reg:x3; val_offset:12465*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12465*0 + 3*315*FLEN/8, x4, x1, x2)

inst_4156:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836ffffffffffffe; valaddr_reg:x3; val_offset:12468*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12468*0 + 3*316*FLEN/8, x4, x1, x2)

inst_4157:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x2a1fa26c0948f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x036 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f62a1fa26c0948f; op2val:0x8000;
op3val:0x836fffffffffffff; valaddr_reg:x3; val_offset:12471*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12471*0 + 3*317*FLEN/8, x4, x1, x2)

inst_4158:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:12474*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12474*0 + 3*318*FLEN/8, x4, x1, x2)

inst_4159:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:12477*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12477*0 + 3*319*FLEN/8, x4, x1, x2)

inst_4160:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:12480*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12480*0 + 3*320*FLEN/8, x4, x1, x2)

inst_4161:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:12483*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12483*0 + 3*321*FLEN/8, x4, x1, x2)

inst_4162:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:12486*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12486*0 + 3*322*FLEN/8, x4, x1, x2)

inst_4163:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:12489*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12489*0 + 3*323*FLEN/8, x4, x1, x2)

inst_4164:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:12492*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12492*0 + 3*324*FLEN/8, x4, x1, x2)

inst_4165:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:12495*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12495*0 + 3*325*FLEN/8, x4, x1, x2)

inst_4166:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:12498*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12498*0 + 3*326*FLEN/8, x4, x1, x2)

inst_4167:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:12501*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12501*0 + 3*327*FLEN/8, x4, x1, x2)

inst_4168:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:12504*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12504*0 + 3*328*FLEN/8, x4, x1, x2)

inst_4169:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:12507*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12507*0 + 3*329*FLEN/8, x4, x1, x2)

inst_4170:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:12510*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12510*0 + 3*330*FLEN/8, x4, x1, x2)

inst_4171:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:12513*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12513*0 + 3*331*FLEN/8, x4, x1, x2)

inst_4172:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:12516*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12516*0 + 3*332*FLEN/8, x4, x1, x2)

inst_4173:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:12519*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12519*0 + 3*333*FLEN/8, x4, x1, x2)

inst_4174:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:12522*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12522*0 + 3*334*FLEN/8, x4, x1, x2)

inst_4175:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:12525*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12525*0 + 3*335*FLEN/8, x4, x1, x2)

inst_4176:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:12528*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12528*0 + 3*336*FLEN/8, x4, x1, x2)

inst_4177:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:12531*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12531*0 + 3*337*FLEN/8, x4, x1, x2)

inst_4178:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:12534*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12534*0 + 3*338*FLEN/8, x4, x1, x2)

inst_4179:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:12537*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12537*0 + 3*339*FLEN/8, x4, x1, x2)

inst_4180:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000000000; valaddr_reg:x3; val_offset:12540*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12540*0 + 3*340*FLEN/8, x4, x1, x2)

inst_4181:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000000001; valaddr_reg:x3; val_offset:12543*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12543*0 + 3*341*FLEN/8, x4, x1, x2)

inst_4182:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000000003; valaddr_reg:x3; val_offset:12546*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12546*0 + 3*342*FLEN/8, x4, x1, x2)

inst_4183:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000000007; valaddr_reg:x3; val_offset:12549*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12549*0 + 3*343*FLEN/8, x4, x1, x2)

inst_4184:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000000000f; valaddr_reg:x3; val_offset:12552*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12552*0 + 3*344*FLEN/8, x4, x1, x2)

inst_4185:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000000001f; valaddr_reg:x3; val_offset:12555*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12555*0 + 3*345*FLEN/8, x4, x1, x2)

inst_4186:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000000003f; valaddr_reg:x3; val_offset:12558*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12558*0 + 3*346*FLEN/8, x4, x1, x2)

inst_4187:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000000007f; valaddr_reg:x3; val_offset:12561*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12561*0 + 3*347*FLEN/8, x4, x1, x2)

inst_4188:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000000000ff; valaddr_reg:x3; val_offset:12564*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12564*0 + 3*348*FLEN/8, x4, x1, x2)

inst_4189:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000000001ff; valaddr_reg:x3; val_offset:12567*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12567*0 + 3*349*FLEN/8, x4, x1, x2)

inst_4190:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000000003ff; valaddr_reg:x3; val_offset:12570*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12570*0 + 3*350*FLEN/8, x4, x1, x2)

inst_4191:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000000007ff; valaddr_reg:x3; val_offset:12573*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12573*0 + 3*351*FLEN/8, x4, x1, x2)

inst_4192:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000000fff; valaddr_reg:x3; val_offset:12576*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12576*0 + 3*352*FLEN/8, x4, x1, x2)

inst_4193:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000001fff; valaddr_reg:x3; val_offset:12579*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12579*0 + 3*353*FLEN/8, x4, x1, x2)

inst_4194:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000003fff; valaddr_reg:x3; val_offset:12582*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12582*0 + 3*354*FLEN/8, x4, x1, x2)

inst_4195:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000007fff; valaddr_reg:x3; val_offset:12585*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12585*0 + 3*355*FLEN/8, x4, x1, x2)

inst_4196:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000000ffff; valaddr_reg:x3; val_offset:12588*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12588*0 + 3*356*FLEN/8, x4, x1, x2)

inst_4197:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000001ffff; valaddr_reg:x3; val_offset:12591*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12591*0 + 3*357*FLEN/8, x4, x1, x2)

inst_4198:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000003ffff; valaddr_reg:x3; val_offset:12594*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12594*0 + 3*358*FLEN/8, x4, x1, x2)

inst_4199:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000007ffff; valaddr_reg:x3; val_offset:12597*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12597*0 + 3*359*FLEN/8, x4, x1, x2)

inst_4200:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000000fffff; valaddr_reg:x3; val_offset:12600*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12600*0 + 3*360*FLEN/8, x4, x1, x2)

inst_4201:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000001fffff; valaddr_reg:x3; val_offset:12603*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12603*0 + 3*361*FLEN/8, x4, x1, x2)

inst_4202:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000003fffff; valaddr_reg:x3; val_offset:12606*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12606*0 + 3*362*FLEN/8, x4, x1, x2)

inst_4203:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000007fffff; valaddr_reg:x3; val_offset:12609*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12609*0 + 3*363*FLEN/8, x4, x1, x2)

inst_4204:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000000ffffff; valaddr_reg:x3; val_offset:12612*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12612*0 + 3*364*FLEN/8, x4, x1, x2)

inst_4205:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000001ffffff; valaddr_reg:x3; val_offset:12615*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12615*0 + 3*365*FLEN/8, x4, x1, x2)

inst_4206:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000003ffffff; valaddr_reg:x3; val_offset:12618*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12618*0 + 3*366*FLEN/8, x4, x1, x2)

inst_4207:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000007ffffff; valaddr_reg:x3; val_offset:12621*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12621*0 + 3*367*FLEN/8, x4, x1, x2)

inst_4208:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000000fffffff; valaddr_reg:x3; val_offset:12624*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12624*0 + 3*368*FLEN/8, x4, x1, x2)

inst_4209:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000001fffffff; valaddr_reg:x3; val_offset:12627*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12627*0 + 3*369*FLEN/8, x4, x1, x2)

inst_4210:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000003fffffff; valaddr_reg:x3; val_offset:12630*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12630*0 + 3*370*FLEN/8, x4, x1, x2)

inst_4211:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000007fffffff; valaddr_reg:x3; val_offset:12633*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12633*0 + 3*371*FLEN/8, x4, x1, x2)

inst_4212:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400000ffffffff; valaddr_reg:x3; val_offset:12636*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12636*0 + 3*372*FLEN/8, x4, x1, x2)

inst_4213:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400001ffffffff; valaddr_reg:x3; val_offset:12639*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12639*0 + 3*373*FLEN/8, x4, x1, x2)

inst_4214:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400003ffffffff; valaddr_reg:x3; val_offset:12642*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12642*0 + 3*374*FLEN/8, x4, x1, x2)

inst_4215:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400007ffffffff; valaddr_reg:x3; val_offset:12645*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12645*0 + 3*375*FLEN/8, x4, x1, x2)

inst_4216:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340000fffffffff; valaddr_reg:x3; val_offset:12648*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12648*0 + 3*376*FLEN/8, x4, x1, x2)

inst_4217:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340001fffffffff; valaddr_reg:x3; val_offset:12651*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12651*0 + 3*377*FLEN/8, x4, x1, x2)

inst_4218:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340003fffffffff; valaddr_reg:x3; val_offset:12654*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12654*0 + 3*378*FLEN/8, x4, x1, x2)

inst_4219:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340007fffffffff; valaddr_reg:x3; val_offset:12657*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12657*0 + 3*379*FLEN/8, x4, x1, x2)

inst_4220:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34000ffffffffff; valaddr_reg:x3; val_offset:12660*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12660*0 + 3*380*FLEN/8, x4, x1, x2)

inst_4221:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34001ffffffffff; valaddr_reg:x3; val_offset:12663*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12663*0 + 3*381*FLEN/8, x4, x1, x2)

inst_4222:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34003ffffffffff; valaddr_reg:x3; val_offset:12666*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12666*0 + 3*382*FLEN/8, x4, x1, x2)

inst_4223:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34007ffffffffff; valaddr_reg:x3; val_offset:12669*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12669*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_4224:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3400fffffffffff; valaddr_reg:x3; val_offset:12672*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12672*0 + 3*384*FLEN/8, x4, x1, x2)

inst_4225:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3401fffffffffff; valaddr_reg:x3; val_offset:12675*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12675*0 + 3*385*FLEN/8, x4, x1, x2)

inst_4226:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3403fffffffffff; valaddr_reg:x3; val_offset:12678*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12678*0 + 3*386*FLEN/8, x4, x1, x2)

inst_4227:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x3407fffffffffff; valaddr_reg:x3; val_offset:12681*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12681*0 + 3*387*FLEN/8, x4, x1, x2)

inst_4228:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x340ffffffffffff; valaddr_reg:x3; val_offset:12684*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12684*0 + 3*388*FLEN/8, x4, x1, x2)

inst_4229:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x341ffffffffffff; valaddr_reg:x3; val_offset:12687*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12687*0 + 3*389*FLEN/8, x4, x1, x2)

inst_4230:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x343ffffffffffff; valaddr_reg:x3; val_offset:12690*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12690*0 + 3*390*FLEN/8, x4, x1, x2)

inst_4231:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x347ffffffffffff; valaddr_reg:x3; val_offset:12693*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12693*0 + 3*391*FLEN/8, x4, x1, x2)

inst_4232:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x348000000000000; valaddr_reg:x3; val_offset:12696*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12696*0 + 3*392*FLEN/8, x4, x1, x2)

inst_4233:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34c000000000000; valaddr_reg:x3; val_offset:12699*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12699*0 + 3*393*FLEN/8, x4, x1, x2)

inst_4234:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34e000000000000; valaddr_reg:x3; val_offset:12702*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12702*0 + 3*394*FLEN/8, x4, x1, x2)

inst_4235:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34f000000000000; valaddr_reg:x3; val_offset:12705*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12705*0 + 3*395*FLEN/8, x4, x1, x2)

inst_4236:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34f800000000000; valaddr_reg:x3; val_offset:12708*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12708*0 + 3*396*FLEN/8, x4, x1, x2)

inst_4237:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fc00000000000; valaddr_reg:x3; val_offset:12711*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12711*0 + 3*397*FLEN/8, x4, x1, x2)

inst_4238:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fe00000000000; valaddr_reg:x3; val_offset:12714*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12714*0 + 3*398*FLEN/8, x4, x1, x2)

inst_4239:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ff00000000000; valaddr_reg:x3; val_offset:12717*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12717*0 + 3*399*FLEN/8, x4, x1, x2)

inst_4240:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ff80000000000; valaddr_reg:x3; val_offset:12720*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12720*0 + 3*400*FLEN/8, x4, x1, x2)

inst_4241:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffc0000000000; valaddr_reg:x3; val_offset:12723*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12723*0 + 3*401*FLEN/8, x4, x1, x2)

inst_4242:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffe0000000000; valaddr_reg:x3; val_offset:12726*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12726*0 + 3*402*FLEN/8, x4, x1, x2)

inst_4243:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fff0000000000; valaddr_reg:x3; val_offset:12729*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12729*0 + 3*403*FLEN/8, x4, x1, x2)

inst_4244:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fff8000000000; valaddr_reg:x3; val_offset:12732*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12732*0 + 3*404*FLEN/8, x4, x1, x2)

inst_4245:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffc000000000; valaddr_reg:x3; val_offset:12735*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12735*0 + 3*405*FLEN/8, x4, x1, x2)

inst_4246:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffe000000000; valaddr_reg:x3; val_offset:12738*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12738*0 + 3*406*FLEN/8, x4, x1, x2)

inst_4247:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffff000000000; valaddr_reg:x3; val_offset:12741*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12741*0 + 3*407*FLEN/8, x4, x1, x2)

inst_4248:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffff800000000; valaddr_reg:x3; val_offset:12744*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12744*0 + 3*408*FLEN/8, x4, x1, x2)

inst_4249:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffc00000000; valaddr_reg:x3; val_offset:12747*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12747*0 + 3*409*FLEN/8, x4, x1, x2)

inst_4250:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffe00000000; valaddr_reg:x3; val_offset:12750*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12750*0 + 3*410*FLEN/8, x4, x1, x2)

inst_4251:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffff00000000; valaddr_reg:x3; val_offset:12753*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12753*0 + 3*411*FLEN/8, x4, x1, x2)

inst_4252:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffff80000000; valaddr_reg:x3; val_offset:12756*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12756*0 + 3*412*FLEN/8, x4, x1, x2)

inst_4253:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffc0000000; valaddr_reg:x3; val_offset:12759*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12759*0 + 3*413*FLEN/8, x4, x1, x2)

inst_4254:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffe0000000; valaddr_reg:x3; val_offset:12762*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12762*0 + 3*414*FLEN/8, x4, x1, x2)

inst_4255:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffff0000000; valaddr_reg:x3; val_offset:12765*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12765*0 + 3*415*FLEN/8, x4, x1, x2)

inst_4256:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffff8000000; valaddr_reg:x3; val_offset:12768*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12768*0 + 3*416*FLEN/8, x4, x1, x2)

inst_4257:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffc000000; valaddr_reg:x3; val_offset:12771*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12771*0 + 3*417*FLEN/8, x4, x1, x2)

inst_4258:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffe000000; valaddr_reg:x3; val_offset:12774*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12774*0 + 3*418*FLEN/8, x4, x1, x2)

inst_4259:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffff000000; valaddr_reg:x3; val_offset:12777*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12777*0 + 3*419*FLEN/8, x4, x1, x2)

inst_4260:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffff800000; valaddr_reg:x3; val_offset:12780*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12780*0 + 3*420*FLEN/8, x4, x1, x2)

inst_4261:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffc00000; valaddr_reg:x3; val_offset:12783*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12783*0 + 3*421*FLEN/8, x4, x1, x2)

inst_4262:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffe00000; valaddr_reg:x3; val_offset:12786*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12786*0 + 3*422*FLEN/8, x4, x1, x2)

inst_4263:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffff00000; valaddr_reg:x3; val_offset:12789*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12789*0 + 3*423*FLEN/8, x4, x1, x2)

inst_4264:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffff80000; valaddr_reg:x3; val_offset:12792*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12792*0 + 3*424*FLEN/8, x4, x1, x2)

inst_4265:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffc0000; valaddr_reg:x3; val_offset:12795*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12795*0 + 3*425*FLEN/8, x4, x1, x2)

inst_4266:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffe0000; valaddr_reg:x3; val_offset:12798*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12798*0 + 3*426*FLEN/8, x4, x1, x2)

inst_4267:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffff0000; valaddr_reg:x3; val_offset:12801*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12801*0 + 3*427*FLEN/8, x4, x1, x2)

inst_4268:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffff8000; valaddr_reg:x3; val_offset:12804*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12804*0 + 3*428*FLEN/8, x4, x1, x2)

inst_4269:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffffc000; valaddr_reg:x3; val_offset:12807*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12807*0 + 3*429*FLEN/8, x4, x1, x2)

inst_4270:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffffe000; valaddr_reg:x3; val_offset:12810*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12810*0 + 3*430*FLEN/8, x4, x1, x2)

inst_4271:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffff000; valaddr_reg:x3; val_offset:12813*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12813*0 + 3*431*FLEN/8, x4, x1, x2)

inst_4272:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffff800; valaddr_reg:x3; val_offset:12816*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12816*0 + 3*432*FLEN/8, x4, x1, x2)

inst_4273:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffffc00; valaddr_reg:x3; val_offset:12819*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12819*0 + 3*433*FLEN/8, x4, x1, x2)

inst_4274:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffffe00; valaddr_reg:x3; val_offset:12822*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12822*0 + 3*434*FLEN/8, x4, x1, x2)

inst_4275:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffffff00; valaddr_reg:x3; val_offset:12825*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12825*0 + 3*435*FLEN/8, x4, x1, x2)

inst_4276:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffffff80; valaddr_reg:x3; val_offset:12828*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12828*0 + 3*436*FLEN/8, x4, x1, x2)

inst_4277:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffffffc0; valaddr_reg:x3; val_offset:12831*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12831*0 + 3*437*FLEN/8, x4, x1, x2)

inst_4278:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffffffe0; valaddr_reg:x3; val_offset:12834*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12834*0 + 3*438*FLEN/8, x4, x1, x2)

inst_4279:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffffff0; valaddr_reg:x3; val_offset:12837*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12837*0 + 3*439*FLEN/8, x4, x1, x2)

inst_4280:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffffff8; valaddr_reg:x3; val_offset:12840*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12840*0 + 3*440*FLEN/8, x4, x1, x2)

inst_4281:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffffffc; valaddr_reg:x3; val_offset:12843*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12843*0 + 3*441*FLEN/8, x4, x1, x2)

inst_4282:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34ffffffffffffe; valaddr_reg:x3; val_offset:12846*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12846*0 + 3*442*FLEN/8, x4, x1, x2)

inst_4283:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x38ce8320e284f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x034 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f638ce8320e284f; op2val:0x0;
op3val:0x34fffffffffffff; valaddr_reg:x3; val_offset:12849*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12849*0 + 3*443*FLEN/8, x4, x1, x2)

inst_4284:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000000000; valaddr_reg:x3; val_offset:12852*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12852*0 + 3*444*FLEN/8, x4, x1, x2)

inst_4285:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000000001; valaddr_reg:x3; val_offset:12855*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12855*0 + 3*445*FLEN/8, x4, x1, x2)

inst_4286:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000000003; valaddr_reg:x3; val_offset:12858*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12858*0 + 3*446*FLEN/8, x4, x1, x2)

inst_4287:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000000007; valaddr_reg:x3; val_offset:12861*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12861*0 + 3*447*FLEN/8, x4, x1, x2)

inst_4288:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000000000f; valaddr_reg:x3; val_offset:12864*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12864*0 + 3*448*FLEN/8, x4, x1, x2)

inst_4289:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000000001f; valaddr_reg:x3; val_offset:12867*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12867*0 + 3*449*FLEN/8, x4, x1, x2)

inst_4290:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000000003f; valaddr_reg:x3; val_offset:12870*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12870*0 + 3*450*FLEN/8, x4, x1, x2)

inst_4291:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000000007f; valaddr_reg:x3; val_offset:12873*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12873*0 + 3*451*FLEN/8, x4, x1, x2)

inst_4292:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000000000ff; valaddr_reg:x3; val_offset:12876*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12876*0 + 3*452*FLEN/8, x4, x1, x2)

inst_4293:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000000001ff; valaddr_reg:x3; val_offset:12879*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12879*0 + 3*453*FLEN/8, x4, x1, x2)

inst_4294:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000000003ff; valaddr_reg:x3; val_offset:12882*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12882*0 + 3*454*FLEN/8, x4, x1, x2)

inst_4295:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000000007ff; valaddr_reg:x3; val_offset:12885*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12885*0 + 3*455*FLEN/8, x4, x1, x2)

inst_4296:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000000fff; valaddr_reg:x3; val_offset:12888*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12888*0 + 3*456*FLEN/8, x4, x1, x2)

inst_4297:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000001fff; valaddr_reg:x3; val_offset:12891*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12891*0 + 3*457*FLEN/8, x4, x1, x2)

inst_4298:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000003fff; valaddr_reg:x3; val_offset:12894*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12894*0 + 3*458*FLEN/8, x4, x1, x2)

inst_4299:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000007fff; valaddr_reg:x3; val_offset:12897*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12897*0 + 3*459*FLEN/8, x4, x1, x2)

inst_4300:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000000ffff; valaddr_reg:x3; val_offset:12900*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12900*0 + 3*460*FLEN/8, x4, x1, x2)

inst_4301:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000001ffff; valaddr_reg:x3; val_offset:12903*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12903*0 + 3*461*FLEN/8, x4, x1, x2)

inst_4302:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000003ffff; valaddr_reg:x3; val_offset:12906*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12906*0 + 3*462*FLEN/8, x4, x1, x2)

inst_4303:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000007ffff; valaddr_reg:x3; val_offset:12909*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12909*0 + 3*463*FLEN/8, x4, x1, x2)

inst_4304:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000000fffff; valaddr_reg:x3; val_offset:12912*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12912*0 + 3*464*FLEN/8, x4, x1, x2)

inst_4305:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000001fffff; valaddr_reg:x3; val_offset:12915*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12915*0 + 3*465*FLEN/8, x4, x1, x2)

inst_4306:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000003fffff; valaddr_reg:x3; val_offset:12918*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12918*0 + 3*466*FLEN/8, x4, x1, x2)

inst_4307:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000007fffff; valaddr_reg:x3; val_offset:12921*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12921*0 + 3*467*FLEN/8, x4, x1, x2)

inst_4308:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000000ffffff; valaddr_reg:x3; val_offset:12924*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12924*0 + 3*468*FLEN/8, x4, x1, x2)

inst_4309:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000001ffffff; valaddr_reg:x3; val_offset:12927*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12927*0 + 3*469*FLEN/8, x4, x1, x2)

inst_4310:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000003ffffff; valaddr_reg:x3; val_offset:12930*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12930*0 + 3*470*FLEN/8, x4, x1, x2)

inst_4311:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000007ffffff; valaddr_reg:x3; val_offset:12933*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12933*0 + 3*471*FLEN/8, x4, x1, x2)

inst_4312:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000000fffffff; valaddr_reg:x3; val_offset:12936*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12936*0 + 3*472*FLEN/8, x4, x1, x2)

inst_4313:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000001fffffff; valaddr_reg:x3; val_offset:12939*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12939*0 + 3*473*FLEN/8, x4, x1, x2)

inst_4314:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000003fffffff; valaddr_reg:x3; val_offset:12942*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12942*0 + 3*474*FLEN/8, x4, x1, x2)

inst_4315:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000007fffffff; valaddr_reg:x3; val_offset:12945*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12945*0 + 3*475*FLEN/8, x4, x1, x2)

inst_4316:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400000ffffffff; valaddr_reg:x3; val_offset:12948*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12948*0 + 3*476*FLEN/8, x4, x1, x2)

inst_4317:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400001ffffffff; valaddr_reg:x3; val_offset:12951*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12951*0 + 3*477*FLEN/8, x4, x1, x2)

inst_4318:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400003ffffffff; valaddr_reg:x3; val_offset:12954*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12954*0 + 3*478*FLEN/8, x4, x1, x2)

inst_4319:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400007ffffffff; valaddr_reg:x3; val_offset:12957*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12957*0 + 3*479*FLEN/8, x4, x1, x2)

inst_4320:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40000fffffffff; valaddr_reg:x3; val_offset:12960*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12960*0 + 3*480*FLEN/8, x4, x1, x2)

inst_4321:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40001fffffffff; valaddr_reg:x3; val_offset:12963*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12963*0 + 3*481*FLEN/8, x4, x1, x2)

inst_4322:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40003fffffffff; valaddr_reg:x3; val_offset:12966*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12966*0 + 3*482*FLEN/8, x4, x1, x2)

inst_4323:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40007fffffffff; valaddr_reg:x3; val_offset:12969*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12969*0 + 3*483*FLEN/8, x4, x1, x2)

inst_4324:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4000ffffffffff; valaddr_reg:x3; val_offset:12972*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12972*0 + 3*484*FLEN/8, x4, x1, x2)

inst_4325:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4001ffffffffff; valaddr_reg:x3; val_offset:12975*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12975*0 + 3*485*FLEN/8, x4, x1, x2)

inst_4326:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4003ffffffffff; valaddr_reg:x3; val_offset:12978*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12978*0 + 3*486*FLEN/8, x4, x1, x2)

inst_4327:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4007ffffffffff; valaddr_reg:x3; val_offset:12981*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12981*0 + 3*487*FLEN/8, x4, x1, x2)

inst_4328:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c400fffffffffff; valaddr_reg:x3; val_offset:12984*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12984*0 + 3*488*FLEN/8, x4, x1, x2)

inst_4329:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c401fffffffffff; valaddr_reg:x3; val_offset:12987*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12987*0 + 3*489*FLEN/8, x4, x1, x2)

inst_4330:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c403fffffffffff; valaddr_reg:x3; val_offset:12990*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12990*0 + 3*490*FLEN/8, x4, x1, x2)

inst_4331:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c407fffffffffff; valaddr_reg:x3; val_offset:12993*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12993*0 + 3*491*FLEN/8, x4, x1, x2)

inst_4332:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c40ffffffffffff; valaddr_reg:x3; val_offset:12996*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12996*0 + 3*492*FLEN/8, x4, x1, x2)

inst_4333:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c41ffffffffffff; valaddr_reg:x3; val_offset:12999*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 12999*0 + 3*493*FLEN/8, x4, x1, x2)

inst_4334:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c43ffffffffffff; valaddr_reg:x3; val_offset:13002*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13002*0 + 3*494*FLEN/8, x4, x1, x2)

inst_4335:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c47ffffffffffff; valaddr_reg:x3; val_offset:13005*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13005*0 + 3*495*FLEN/8, x4, x1, x2)

inst_4336:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c48000000000000; valaddr_reg:x3; val_offset:13008*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13008*0 + 3*496*FLEN/8, x4, x1, x2)

inst_4337:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4c000000000000; valaddr_reg:x3; val_offset:13011*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13011*0 + 3*497*FLEN/8, x4, x1, x2)

inst_4338:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4e000000000000; valaddr_reg:x3; val_offset:13014*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13014*0 + 3*498*FLEN/8, x4, x1, x2)

inst_4339:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4f000000000000; valaddr_reg:x3; val_offset:13017*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13017*0 + 3*499*FLEN/8, x4, x1, x2)

inst_4340:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4f800000000000; valaddr_reg:x3; val_offset:13020*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13020*0 + 3*500*FLEN/8, x4, x1, x2)

inst_4341:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fc00000000000; valaddr_reg:x3; val_offset:13023*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13023*0 + 3*501*FLEN/8, x4, x1, x2)

inst_4342:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fe00000000000; valaddr_reg:x3; val_offset:13026*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13026*0 + 3*502*FLEN/8, x4, x1, x2)

inst_4343:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ff00000000000; valaddr_reg:x3; val_offset:13029*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13029*0 + 3*503*FLEN/8, x4, x1, x2)

inst_4344:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ff80000000000; valaddr_reg:x3; val_offset:13032*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13032*0 + 3*504*FLEN/8, x4, x1, x2)

inst_4345:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffc0000000000; valaddr_reg:x3; val_offset:13035*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13035*0 + 3*505*FLEN/8, x4, x1, x2)

inst_4346:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffe0000000000; valaddr_reg:x3; val_offset:13038*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13038*0 + 3*506*FLEN/8, x4, x1, x2)

inst_4347:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fff0000000000; valaddr_reg:x3; val_offset:13041*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13041*0 + 3*507*FLEN/8, x4, x1, x2)

inst_4348:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fff8000000000; valaddr_reg:x3; val_offset:13044*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13044*0 + 3*508*FLEN/8, x4, x1, x2)

inst_4349:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffc000000000; valaddr_reg:x3; val_offset:13047*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13047*0 + 3*509*FLEN/8, x4, x1, x2)

inst_4350:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffe000000000; valaddr_reg:x3; val_offset:13050*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13050*0 + 3*510*FLEN/8, x4, x1, x2)

inst_4351:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffff000000000; valaddr_reg:x3; val_offset:13053*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13053*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_4352:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffff800000000; valaddr_reg:x3; val_offset:13056*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13056*0 + 3*512*FLEN/8, x4, x1, x2)

inst_4353:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffc00000000; valaddr_reg:x3; val_offset:13059*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13059*0 + 3*513*FLEN/8, x4, x1, x2)

inst_4354:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffe00000000; valaddr_reg:x3; val_offset:13062*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13062*0 + 3*514*FLEN/8, x4, x1, x2)

inst_4355:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffff00000000; valaddr_reg:x3; val_offset:13065*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13065*0 + 3*515*FLEN/8, x4, x1, x2)

inst_4356:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffff80000000; valaddr_reg:x3; val_offset:13068*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13068*0 + 3*516*FLEN/8, x4, x1, x2)

inst_4357:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffc0000000; valaddr_reg:x3; val_offset:13071*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13071*0 + 3*517*FLEN/8, x4, x1, x2)

inst_4358:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffe0000000; valaddr_reg:x3; val_offset:13074*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13074*0 + 3*518*FLEN/8, x4, x1, x2)

inst_4359:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffff0000000; valaddr_reg:x3; val_offset:13077*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13077*0 + 3*519*FLEN/8, x4, x1, x2)

inst_4360:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffff8000000; valaddr_reg:x3; val_offset:13080*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13080*0 + 3*520*FLEN/8, x4, x1, x2)

inst_4361:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffc000000; valaddr_reg:x3; val_offset:13083*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13083*0 + 3*521*FLEN/8, x4, x1, x2)

inst_4362:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffe000000; valaddr_reg:x3; val_offset:13086*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13086*0 + 3*522*FLEN/8, x4, x1, x2)

inst_4363:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffff000000; valaddr_reg:x3; val_offset:13089*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13089*0 + 3*523*FLEN/8, x4, x1, x2)

inst_4364:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffff800000; valaddr_reg:x3; val_offset:13092*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13092*0 + 3*524*FLEN/8, x4, x1, x2)

inst_4365:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffc00000; valaddr_reg:x3; val_offset:13095*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13095*0 + 3*525*FLEN/8, x4, x1, x2)

inst_4366:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffe00000; valaddr_reg:x3; val_offset:13098*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13098*0 + 3*526*FLEN/8, x4, x1, x2)

inst_4367:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffff00000; valaddr_reg:x3; val_offset:13101*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13101*0 + 3*527*FLEN/8, x4, x1, x2)

inst_4368:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffff80000; valaddr_reg:x3; val_offset:13104*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13104*0 + 3*528*FLEN/8, x4, x1, x2)

inst_4369:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffc0000; valaddr_reg:x3; val_offset:13107*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13107*0 + 3*529*FLEN/8, x4, x1, x2)

inst_4370:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffe0000; valaddr_reg:x3; val_offset:13110*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13110*0 + 3*530*FLEN/8, x4, x1, x2)

inst_4371:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffff0000; valaddr_reg:x3; val_offset:13113*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13113*0 + 3*531*FLEN/8, x4, x1, x2)

inst_4372:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffff8000; valaddr_reg:x3; val_offset:13116*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13116*0 + 3*532*FLEN/8, x4, x1, x2)

inst_4373:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffffc000; valaddr_reg:x3; val_offset:13119*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13119*0 + 3*533*FLEN/8, x4, x1, x2)

inst_4374:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffffe000; valaddr_reg:x3; val_offset:13122*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13122*0 + 3*534*FLEN/8, x4, x1, x2)

inst_4375:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffff000; valaddr_reg:x3; val_offset:13125*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13125*0 + 3*535*FLEN/8, x4, x1, x2)

inst_4376:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffff800; valaddr_reg:x3; val_offset:13128*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13128*0 + 3*536*FLEN/8, x4, x1, x2)

inst_4377:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffffc00; valaddr_reg:x3; val_offset:13131*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13131*0 + 3*537*FLEN/8, x4, x1, x2)

inst_4378:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffffe00; valaddr_reg:x3; val_offset:13134*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13134*0 + 3*538*FLEN/8, x4, x1, x2)

inst_4379:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffffff00; valaddr_reg:x3; val_offset:13137*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13137*0 + 3*539*FLEN/8, x4, x1, x2)

inst_4380:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffffff80; valaddr_reg:x3; val_offset:13140*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13140*0 + 3*540*FLEN/8, x4, x1, x2)

inst_4381:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffffffc0; valaddr_reg:x3; val_offset:13143*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13143*0 + 3*541*FLEN/8, x4, x1, x2)

inst_4382:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffffffe0; valaddr_reg:x3; val_offset:13146*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13146*0 + 3*542*FLEN/8, x4, x1, x2)

inst_4383:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffffff0; valaddr_reg:x3; val_offset:13149*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13149*0 + 3*543*FLEN/8, x4, x1, x2)

inst_4384:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffffff8; valaddr_reg:x3; val_offset:13152*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13152*0 + 3*544*FLEN/8, x4, x1, x2)

inst_4385:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffffffc; valaddr_reg:x3; val_offset:13155*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13155*0 + 3*545*FLEN/8, x4, x1, x2)

inst_4386:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4ffffffffffffe; valaddr_reg:x3; val_offset:13158*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13158*0 + 3*546*FLEN/8, x4, x1, x2)

inst_4387:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3c4 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3c4fffffffffffff; valaddr_reg:x3; val_offset:13161*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13161*0 + 3*547*FLEN/8, x4, x1, x2)

inst_4388:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:13164*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13164*0 + 3*548*FLEN/8, x4, x1, x2)

inst_4389:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:13167*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13167*0 + 3*549*FLEN/8, x4, x1, x2)

inst_4390:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:13170*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13170*0 + 3*550*FLEN/8, x4, x1, x2)

inst_4391:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:13173*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13173*0 + 3*551*FLEN/8, x4, x1, x2)

inst_4392:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:13176*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13176*0 + 3*552*FLEN/8, x4, x1, x2)

inst_4393:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:13179*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13179*0 + 3*553*FLEN/8, x4, x1, x2)

inst_4394:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:13182*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13182*0 + 3*554*FLEN/8, x4, x1, x2)

inst_4395:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:13185*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13185*0 + 3*555*FLEN/8, x4, x1, x2)

inst_4396:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:13188*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13188*0 + 3*556*FLEN/8, x4, x1, x2)

inst_4397:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:13191*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13191*0 + 3*557*FLEN/8, x4, x1, x2)

inst_4398:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:13194*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13194*0 + 3*558*FLEN/8, x4, x1, x2)

inst_4399:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:13197*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13197*0 + 3*559*FLEN/8, x4, x1, x2)

inst_4400:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:13200*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13200*0 + 3*560*FLEN/8, x4, x1, x2)

inst_4401:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:13203*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13203*0 + 3*561*FLEN/8, x4, x1, x2)

inst_4402:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:13206*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13206*0 + 3*562*FLEN/8, x4, x1, x2)

inst_4403:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:13209*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13209*0 + 3*563*FLEN/8, x4, x1, x2)

inst_4404:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:13212*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13212*0 + 3*564*FLEN/8, x4, x1, x2)

inst_4405:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:13215*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13215*0 + 3*565*FLEN/8, x4, x1, x2)

inst_4406:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:13218*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13218*0 + 3*566*FLEN/8, x4, x1, x2)

inst_4407:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:13221*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13221*0 + 3*567*FLEN/8, x4, x1, x2)

inst_4408:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:13224*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13224*0 + 3*568*FLEN/8, x4, x1, x2)

inst_4409:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x3ec091fa73e0f and fs2 == 0 and fe2 == 0x207 and fm2 == 0x9b3412164213b and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f63ec091fa73e0f; op2val:0x2079b3412164213b;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:13227*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13227*0 + 3*569*FLEN/8, x4, x1, x2)

inst_4410:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:13230*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13230*0 + 3*570*FLEN/8, x4, x1, x2)

inst_4411:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:13233*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13233*0 + 3*571*FLEN/8, x4, x1, x2)

inst_4412:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:13236*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13236*0 + 3*572*FLEN/8, x4, x1, x2)

inst_4413:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:13239*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13239*0 + 3*573*FLEN/8, x4, x1, x2)

inst_4414:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:13242*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13242*0 + 3*574*FLEN/8, x4, x1, x2)

inst_4415:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:13245*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13245*0 + 3*575*FLEN/8, x4, x1, x2)

inst_4416:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:13248*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13248*0 + 3*576*FLEN/8, x4, x1, x2)

inst_4417:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:13251*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13251*0 + 3*577*FLEN/8, x4, x1, x2)

inst_4418:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:13254*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13254*0 + 3*578*FLEN/8, x4, x1, x2)

inst_4419:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:13257*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13257*0 + 3*579*FLEN/8, x4, x1, x2)

inst_4420:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:13260*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13260*0 + 3*580*FLEN/8, x4, x1, x2)

inst_4421:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:13263*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13263*0 + 3*581*FLEN/8, x4, x1, x2)

inst_4422:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:13266*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13266*0 + 3*582*FLEN/8, x4, x1, x2)

inst_4423:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:13269*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13269*0 + 3*583*FLEN/8, x4, x1, x2)

inst_4424:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:13272*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13272*0 + 3*584*FLEN/8, x4, x1, x2)

inst_4425:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:13275*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13275*0 + 3*585*FLEN/8, x4, x1, x2)

inst_4426:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:13278*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13278*0 + 3*586*FLEN/8, x4, x1, x2)

inst_4427:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:13281*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13281*0 + 3*587*FLEN/8, x4, x1, x2)

inst_4428:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:13284*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13284*0 + 3*588*FLEN/8, x4, x1, x2)

inst_4429:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:13287*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13287*0 + 3*589*FLEN/8, x4, x1, x2)

inst_4430:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:13290*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13290*0 + 3*590*FLEN/8, x4, x1, x2)

inst_4431:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:13293*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13293*0 + 3*591*FLEN/8, x4, x1, x2)

inst_4432:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000000000; valaddr_reg:x3; val_offset:13296*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13296*0 + 3*592*FLEN/8, x4, x1, x2)

inst_4433:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000000001; valaddr_reg:x3; val_offset:13299*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13299*0 + 3*593*FLEN/8, x4, x1, x2)

inst_4434:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000000003; valaddr_reg:x3; val_offset:13302*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13302*0 + 3*594*FLEN/8, x4, x1, x2)

inst_4435:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000000007; valaddr_reg:x3; val_offset:13305*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13305*0 + 3*595*FLEN/8, x4, x1, x2)

inst_4436:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000000000f; valaddr_reg:x3; val_offset:13308*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13308*0 + 3*596*FLEN/8, x4, x1, x2)

inst_4437:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000000001f; valaddr_reg:x3; val_offset:13311*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13311*0 + 3*597*FLEN/8, x4, x1, x2)

inst_4438:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000000003f; valaddr_reg:x3; val_offset:13314*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13314*0 + 3*598*FLEN/8, x4, x1, x2)

inst_4439:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000000007f; valaddr_reg:x3; val_offset:13317*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13317*0 + 3*599*FLEN/8, x4, x1, x2)

inst_4440:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000000000ff; valaddr_reg:x3; val_offset:13320*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13320*0 + 3*600*FLEN/8, x4, x1, x2)

inst_4441:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000000001ff; valaddr_reg:x3; val_offset:13323*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13323*0 + 3*601*FLEN/8, x4, x1, x2)

inst_4442:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000000003ff; valaddr_reg:x3; val_offset:13326*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13326*0 + 3*602*FLEN/8, x4, x1, x2)

inst_4443:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000000007ff; valaddr_reg:x3; val_offset:13329*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13329*0 + 3*603*FLEN/8, x4, x1, x2)

inst_4444:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000000fff; valaddr_reg:x3; val_offset:13332*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13332*0 + 3*604*FLEN/8, x4, x1, x2)

inst_4445:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000001fff; valaddr_reg:x3; val_offset:13335*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13335*0 + 3*605*FLEN/8, x4, x1, x2)

inst_4446:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000003fff; valaddr_reg:x3; val_offset:13338*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13338*0 + 3*606*FLEN/8, x4, x1, x2)

inst_4447:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000007fff; valaddr_reg:x3; val_offset:13341*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13341*0 + 3*607*FLEN/8, x4, x1, x2)

inst_4448:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000000ffff; valaddr_reg:x3; val_offset:13344*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13344*0 + 3*608*FLEN/8, x4, x1, x2)

inst_4449:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000001ffff; valaddr_reg:x3; val_offset:13347*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13347*0 + 3*609*FLEN/8, x4, x1, x2)

inst_4450:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000003ffff; valaddr_reg:x3; val_offset:13350*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13350*0 + 3*610*FLEN/8, x4, x1, x2)

inst_4451:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000007ffff; valaddr_reg:x3; val_offset:13353*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13353*0 + 3*611*FLEN/8, x4, x1, x2)

inst_4452:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000000fffff; valaddr_reg:x3; val_offset:13356*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13356*0 + 3*612*FLEN/8, x4, x1, x2)

inst_4453:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000001fffff; valaddr_reg:x3; val_offset:13359*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13359*0 + 3*613*FLEN/8, x4, x1, x2)

inst_4454:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000003fffff; valaddr_reg:x3; val_offset:13362*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13362*0 + 3*614*FLEN/8, x4, x1, x2)

inst_4455:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000007fffff; valaddr_reg:x3; val_offset:13365*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13365*0 + 3*615*FLEN/8, x4, x1, x2)

inst_4456:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000000ffffff; valaddr_reg:x3; val_offset:13368*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13368*0 + 3*616*FLEN/8, x4, x1, x2)

inst_4457:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000001ffffff; valaddr_reg:x3; val_offset:13371*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13371*0 + 3*617*FLEN/8, x4, x1, x2)

inst_4458:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000003ffffff; valaddr_reg:x3; val_offset:13374*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13374*0 + 3*618*FLEN/8, x4, x1, x2)

inst_4459:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000007ffffff; valaddr_reg:x3; val_offset:13377*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13377*0 + 3*619*FLEN/8, x4, x1, x2)

inst_4460:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000000fffffff; valaddr_reg:x3; val_offset:13380*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13380*0 + 3*620*FLEN/8, x4, x1, x2)

inst_4461:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000001fffffff; valaddr_reg:x3; val_offset:13383*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13383*0 + 3*621*FLEN/8, x4, x1, x2)

inst_4462:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000003fffffff; valaddr_reg:x3; val_offset:13386*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13386*0 + 3*622*FLEN/8, x4, x1, x2)

inst_4463:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000007fffffff; valaddr_reg:x3; val_offset:13389*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13389*0 + 3*623*FLEN/8, x4, x1, x2)

inst_4464:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00000ffffffff; valaddr_reg:x3; val_offset:13392*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13392*0 + 3*624*FLEN/8, x4, x1, x2)

inst_4465:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00001ffffffff; valaddr_reg:x3; val_offset:13395*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13395*0 + 3*625*FLEN/8, x4, x1, x2)

inst_4466:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00003ffffffff; valaddr_reg:x3; val_offset:13398*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13398*0 + 3*626*FLEN/8, x4, x1, x2)

inst_4467:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00007ffffffff; valaddr_reg:x3; val_offset:13401*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13401*0 + 3*627*FLEN/8, x4, x1, x2)

inst_4468:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0000fffffffff; valaddr_reg:x3; val_offset:13404*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13404*0 + 3*628*FLEN/8, x4, x1, x2)

inst_4469:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0001fffffffff; valaddr_reg:x3; val_offset:13407*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13407*0 + 3*629*FLEN/8, x4, x1, x2)

inst_4470:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0003fffffffff; valaddr_reg:x3; val_offset:13410*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13410*0 + 3*630*FLEN/8, x4, x1, x2)

inst_4471:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0007fffffffff; valaddr_reg:x3; val_offset:13413*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13413*0 + 3*631*FLEN/8, x4, x1, x2)

inst_4472:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b000ffffffffff; valaddr_reg:x3; val_offset:13416*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13416*0 + 3*632*FLEN/8, x4, x1, x2)

inst_4473:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b001ffffffffff; valaddr_reg:x3; val_offset:13419*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13419*0 + 3*633*FLEN/8, x4, x1, x2)

inst_4474:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b003ffffffffff; valaddr_reg:x3; val_offset:13422*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13422*0 + 3*634*FLEN/8, x4, x1, x2)

inst_4475:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b007ffffffffff; valaddr_reg:x3; val_offset:13425*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13425*0 + 3*635*FLEN/8, x4, x1, x2)

inst_4476:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b00fffffffffff; valaddr_reg:x3; val_offset:13428*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13428*0 + 3*636*FLEN/8, x4, x1, x2)

inst_4477:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b01fffffffffff; valaddr_reg:x3; val_offset:13431*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13431*0 + 3*637*FLEN/8, x4, x1, x2)

inst_4478:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b03fffffffffff; valaddr_reg:x3; val_offset:13434*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13434*0 + 3*638*FLEN/8, x4, x1, x2)

inst_4479:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b07fffffffffff; valaddr_reg:x3; val_offset:13437*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13437*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_4480:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b0ffffffffffff; valaddr_reg:x3; val_offset:13440*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13440*0 + 3*640*FLEN/8, x4, x1, x2)

inst_4481:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b1ffffffffffff; valaddr_reg:x3; val_offset:13443*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13443*0 + 3*641*FLEN/8, x4, x1, x2)

inst_4482:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b3ffffffffffff; valaddr_reg:x3; val_offset:13446*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13446*0 + 3*642*FLEN/8, x4, x1, x2)

inst_4483:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b7ffffffffffff; valaddr_reg:x3; val_offset:13449*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13449*0 + 3*643*FLEN/8, x4, x1, x2)

inst_4484:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81b8000000000000; valaddr_reg:x3; val_offset:13452*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13452*0 + 3*644*FLEN/8, x4, x1, x2)

inst_4485:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bc000000000000; valaddr_reg:x3; val_offset:13455*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13455*0 + 3*645*FLEN/8, x4, x1, x2)

inst_4486:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81be000000000000; valaddr_reg:x3; val_offset:13458*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13458*0 + 3*646*FLEN/8, x4, x1, x2)

inst_4487:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bf000000000000; valaddr_reg:x3; val_offset:13461*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13461*0 + 3*647*FLEN/8, x4, x1, x2)

inst_4488:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bf800000000000; valaddr_reg:x3; val_offset:13464*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13464*0 + 3*648*FLEN/8, x4, x1, x2)

inst_4489:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfc00000000000; valaddr_reg:x3; val_offset:13467*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13467*0 + 3*649*FLEN/8, x4, x1, x2)

inst_4490:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfe00000000000; valaddr_reg:x3; val_offset:13470*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13470*0 + 3*650*FLEN/8, x4, x1, x2)

inst_4491:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bff00000000000; valaddr_reg:x3; val_offset:13473*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13473*0 + 3*651*FLEN/8, x4, x1, x2)

inst_4492:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bff80000000000; valaddr_reg:x3; val_offset:13476*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13476*0 + 3*652*FLEN/8, x4, x1, x2)

inst_4493:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffc0000000000; valaddr_reg:x3; val_offset:13479*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13479*0 + 3*653*FLEN/8, x4, x1, x2)

inst_4494:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffe0000000000; valaddr_reg:x3; val_offset:13482*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13482*0 + 3*654*FLEN/8, x4, x1, x2)

inst_4495:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfff0000000000; valaddr_reg:x3; val_offset:13485*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13485*0 + 3*655*FLEN/8, x4, x1, x2)

inst_4496:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfff8000000000; valaddr_reg:x3; val_offset:13488*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13488*0 + 3*656*FLEN/8, x4, x1, x2)

inst_4497:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffc000000000; valaddr_reg:x3; val_offset:13491*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13491*0 + 3*657*FLEN/8, x4, x1, x2)

inst_4498:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffe000000000; valaddr_reg:x3; val_offset:13494*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13494*0 + 3*658*FLEN/8, x4, x1, x2)

inst_4499:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffff000000000; valaddr_reg:x3; val_offset:13497*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13497*0 + 3*659*FLEN/8, x4, x1, x2)

inst_4500:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffff800000000; valaddr_reg:x3; val_offset:13500*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13500*0 + 3*660*FLEN/8, x4, x1, x2)

inst_4501:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffc00000000; valaddr_reg:x3; val_offset:13503*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13503*0 + 3*661*FLEN/8, x4, x1, x2)

inst_4502:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffe00000000; valaddr_reg:x3; val_offset:13506*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13506*0 + 3*662*FLEN/8, x4, x1, x2)

inst_4503:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffff00000000; valaddr_reg:x3; val_offset:13509*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13509*0 + 3*663*FLEN/8, x4, x1, x2)

inst_4504:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffff80000000; valaddr_reg:x3; val_offset:13512*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13512*0 + 3*664*FLEN/8, x4, x1, x2)

inst_4505:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffc0000000; valaddr_reg:x3; val_offset:13515*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13515*0 + 3*665*FLEN/8, x4, x1, x2)

inst_4506:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffe0000000; valaddr_reg:x3; val_offset:13518*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13518*0 + 3*666*FLEN/8, x4, x1, x2)

inst_4507:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffff0000000; valaddr_reg:x3; val_offset:13521*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13521*0 + 3*667*FLEN/8, x4, x1, x2)

inst_4508:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffff8000000; valaddr_reg:x3; val_offset:13524*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13524*0 + 3*668*FLEN/8, x4, x1, x2)

inst_4509:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffc000000; valaddr_reg:x3; val_offset:13527*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13527*0 + 3*669*FLEN/8, x4, x1, x2)

inst_4510:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffe000000; valaddr_reg:x3; val_offset:13530*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13530*0 + 3*670*FLEN/8, x4, x1, x2)

inst_4511:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffff000000; valaddr_reg:x3; val_offset:13533*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13533*0 + 3*671*FLEN/8, x4, x1, x2)

inst_4512:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffff800000; valaddr_reg:x3; val_offset:13536*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13536*0 + 3*672*FLEN/8, x4, x1, x2)

inst_4513:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffc00000; valaddr_reg:x3; val_offset:13539*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13539*0 + 3*673*FLEN/8, x4, x1, x2)

inst_4514:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffe00000; valaddr_reg:x3; val_offset:13542*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13542*0 + 3*674*FLEN/8, x4, x1, x2)

inst_4515:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffff00000; valaddr_reg:x3; val_offset:13545*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13545*0 + 3*675*FLEN/8, x4, x1, x2)

inst_4516:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffff80000; valaddr_reg:x3; val_offset:13548*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13548*0 + 3*676*FLEN/8, x4, x1, x2)

inst_4517:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffc0000; valaddr_reg:x3; val_offset:13551*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13551*0 + 3*677*FLEN/8, x4, x1, x2)

inst_4518:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffe0000; valaddr_reg:x3; val_offset:13554*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13554*0 + 3*678*FLEN/8, x4, x1, x2)

inst_4519:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffff0000; valaddr_reg:x3; val_offset:13557*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13557*0 + 3*679*FLEN/8, x4, x1, x2)

inst_4520:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffff8000; valaddr_reg:x3; val_offset:13560*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13560*0 + 3*680*FLEN/8, x4, x1, x2)

inst_4521:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffffc000; valaddr_reg:x3; val_offset:13563*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13563*0 + 3*681*FLEN/8, x4, x1, x2)

inst_4522:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffffe000; valaddr_reg:x3; val_offset:13566*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13566*0 + 3*682*FLEN/8, x4, x1, x2)

inst_4523:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffff000; valaddr_reg:x3; val_offset:13569*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13569*0 + 3*683*FLEN/8, x4, x1, x2)

inst_4524:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffff800; valaddr_reg:x3; val_offset:13572*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13572*0 + 3*684*FLEN/8, x4, x1, x2)

inst_4525:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffffc00; valaddr_reg:x3; val_offset:13575*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13575*0 + 3*685*FLEN/8, x4, x1, x2)

inst_4526:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffffe00; valaddr_reg:x3; val_offset:13578*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13578*0 + 3*686*FLEN/8, x4, x1, x2)

inst_4527:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffffff00; valaddr_reg:x3; val_offset:13581*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13581*0 + 3*687*FLEN/8, x4, x1, x2)

inst_4528:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffffff80; valaddr_reg:x3; val_offset:13584*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13584*0 + 3*688*FLEN/8, x4, x1, x2)

inst_4529:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffffffc0; valaddr_reg:x3; val_offset:13587*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13587*0 + 3*689*FLEN/8, x4, x1, x2)

inst_4530:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffffffe0; valaddr_reg:x3; val_offset:13590*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13590*0 + 3*690*FLEN/8, x4, x1, x2)

inst_4531:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffffff0; valaddr_reg:x3; val_offset:13593*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13593*0 + 3*691*FLEN/8, x4, x1, x2)

inst_4532:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffffff8; valaddr_reg:x3; val_offset:13596*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13596*0 + 3*692*FLEN/8, x4, x1, x2)

inst_4533:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffffffc; valaddr_reg:x3; val_offset:13599*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13599*0 + 3*693*FLEN/8, x4, x1, x2)

inst_4534:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bffffffffffffe; valaddr_reg:x3; val_offset:13602*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13602*0 + 3*694*FLEN/8, x4, x1, x2)

inst_4535:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x425e77d5ee29f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x01b and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f6425e77d5ee29f; op2val:0x8000;
op3val:0x81bfffffffffffff; valaddr_reg:x3; val_offset:13605*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13605*0 + 3*695*FLEN/8, x4, x1, x2)

inst_4536:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000000000; valaddr_reg:x3; val_offset:13608*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13608*0 + 3*696*FLEN/8, x4, x1, x2)

inst_4537:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000000001; valaddr_reg:x3; val_offset:13611*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13611*0 + 3*697*FLEN/8, x4, x1, x2)

inst_4538:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000000003; valaddr_reg:x3; val_offset:13614*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13614*0 + 3*698*FLEN/8, x4, x1, x2)

inst_4539:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000000007; valaddr_reg:x3; val_offset:13617*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13617*0 + 3*699*FLEN/8, x4, x1, x2)

inst_4540:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000000000f; valaddr_reg:x3; val_offset:13620*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13620*0 + 3*700*FLEN/8, x4, x1, x2)

inst_4541:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000000001f; valaddr_reg:x3; val_offset:13623*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13623*0 + 3*701*FLEN/8, x4, x1, x2)

inst_4542:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000000003f; valaddr_reg:x3; val_offset:13626*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13626*0 + 3*702*FLEN/8, x4, x1, x2)

inst_4543:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000000007f; valaddr_reg:x3; val_offset:13629*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13629*0 + 3*703*FLEN/8, x4, x1, x2)

inst_4544:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000000000ff; valaddr_reg:x3; val_offset:13632*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13632*0 + 3*704*FLEN/8, x4, x1, x2)

inst_4545:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000000001ff; valaddr_reg:x3; val_offset:13635*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13635*0 + 3*705*FLEN/8, x4, x1, x2)

inst_4546:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000000003ff; valaddr_reg:x3; val_offset:13638*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13638*0 + 3*706*FLEN/8, x4, x1, x2)

inst_4547:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000000007ff; valaddr_reg:x3; val_offset:13641*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13641*0 + 3*707*FLEN/8, x4, x1, x2)

inst_4548:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000000fff; valaddr_reg:x3; val_offset:13644*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13644*0 + 3*708*FLEN/8, x4, x1, x2)

inst_4549:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000001fff; valaddr_reg:x3; val_offset:13647*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13647*0 + 3*709*FLEN/8, x4, x1, x2)

inst_4550:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000003fff; valaddr_reg:x3; val_offset:13650*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13650*0 + 3*710*FLEN/8, x4, x1, x2)

inst_4551:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000007fff; valaddr_reg:x3; val_offset:13653*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13653*0 + 3*711*FLEN/8, x4, x1, x2)

inst_4552:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000000ffff; valaddr_reg:x3; val_offset:13656*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13656*0 + 3*712*FLEN/8, x4, x1, x2)

inst_4553:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000001ffff; valaddr_reg:x3; val_offset:13659*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13659*0 + 3*713*FLEN/8, x4, x1, x2)

inst_4554:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000003ffff; valaddr_reg:x3; val_offset:13662*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13662*0 + 3*714*FLEN/8, x4, x1, x2)

inst_4555:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000007ffff; valaddr_reg:x3; val_offset:13665*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13665*0 + 3*715*FLEN/8, x4, x1, x2)

inst_4556:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000000fffff; valaddr_reg:x3; val_offset:13668*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13668*0 + 3*716*FLEN/8, x4, x1, x2)

inst_4557:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000001fffff; valaddr_reg:x3; val_offset:13671*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13671*0 + 3*717*FLEN/8, x4, x1, x2)

inst_4558:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000003fffff; valaddr_reg:x3; val_offset:13674*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13674*0 + 3*718*FLEN/8, x4, x1, x2)

inst_4559:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000007fffff; valaddr_reg:x3; val_offset:13677*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13677*0 + 3*719*FLEN/8, x4, x1, x2)

inst_4560:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000000ffffff; valaddr_reg:x3; val_offset:13680*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13680*0 + 3*720*FLEN/8, x4, x1, x2)

inst_4561:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000001ffffff; valaddr_reg:x3; val_offset:13683*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13683*0 + 3*721*FLEN/8, x4, x1, x2)

inst_4562:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000003ffffff; valaddr_reg:x3; val_offset:13686*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13686*0 + 3*722*FLEN/8, x4, x1, x2)

inst_4563:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000007ffffff; valaddr_reg:x3; val_offset:13689*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13689*0 + 3*723*FLEN/8, x4, x1, x2)

inst_4564:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000000fffffff; valaddr_reg:x3; val_offset:13692*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13692*0 + 3*724*FLEN/8, x4, x1, x2)

inst_4565:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000001fffffff; valaddr_reg:x3; val_offset:13695*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13695*0 + 3*725*FLEN/8, x4, x1, x2)

inst_4566:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000003fffffff; valaddr_reg:x3; val_offset:13698*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13698*0 + 3*726*FLEN/8, x4, x1, x2)

inst_4567:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000007fffffff; valaddr_reg:x3; val_offset:13701*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13701*0 + 3*727*FLEN/8, x4, x1, x2)

inst_4568:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00000ffffffff; valaddr_reg:x3; val_offset:13704*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13704*0 + 3*728*FLEN/8, x4, x1, x2)

inst_4569:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00001ffffffff; valaddr_reg:x3; val_offset:13707*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13707*0 + 3*729*FLEN/8, x4, x1, x2)

inst_4570:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00003ffffffff; valaddr_reg:x3; val_offset:13710*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13710*0 + 3*730*FLEN/8, x4, x1, x2)

inst_4571:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00007ffffffff; valaddr_reg:x3; val_offset:13713*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13713*0 + 3*731*FLEN/8, x4, x1, x2)

inst_4572:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0000fffffffff; valaddr_reg:x3; val_offset:13716*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13716*0 + 3*732*FLEN/8, x4, x1, x2)

inst_4573:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0001fffffffff; valaddr_reg:x3; val_offset:13719*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13719*0 + 3*733*FLEN/8, x4, x1, x2)

inst_4574:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0003fffffffff; valaddr_reg:x3; val_offset:13722*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13722*0 + 3*734*FLEN/8, x4, x1, x2)

inst_4575:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0007fffffffff; valaddr_reg:x3; val_offset:13725*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13725*0 + 3*735*FLEN/8, x4, x1, x2)

inst_4576:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd000ffffffffff; valaddr_reg:x3; val_offset:13728*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13728*0 + 3*736*FLEN/8, x4, x1, x2)

inst_4577:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd001ffffffffff; valaddr_reg:x3; val_offset:13731*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13731*0 + 3*737*FLEN/8, x4, x1, x2)

inst_4578:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd003ffffffffff; valaddr_reg:x3; val_offset:13734*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13734*0 + 3*738*FLEN/8, x4, x1, x2)

inst_4579:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd007ffffffffff; valaddr_reg:x3; val_offset:13737*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13737*0 + 3*739*FLEN/8, x4, x1, x2)

inst_4580:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd00fffffffffff; valaddr_reg:x3; val_offset:13740*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13740*0 + 3*740*FLEN/8, x4, x1, x2)

inst_4581:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd01fffffffffff; valaddr_reg:x3; val_offset:13743*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13743*0 + 3*741*FLEN/8, x4, x1, x2)

inst_4582:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd03fffffffffff; valaddr_reg:x3; val_offset:13746*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13746*0 + 3*742*FLEN/8, x4, x1, x2)

inst_4583:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd07fffffffffff; valaddr_reg:x3; val_offset:13749*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13749*0 + 3*743*FLEN/8, x4, x1, x2)

inst_4584:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd0ffffffffffff; valaddr_reg:x3; val_offset:13752*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13752*0 + 3*744*FLEN/8, x4, x1, x2)

inst_4585:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd1ffffffffffff; valaddr_reg:x3; val_offset:13755*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13755*0 + 3*745*FLEN/8, x4, x1, x2)

inst_4586:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd3ffffffffffff; valaddr_reg:x3; val_offset:13758*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13758*0 + 3*746*FLEN/8, x4, x1, x2)

inst_4587:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd7ffffffffffff; valaddr_reg:x3; val_offset:13761*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13761*0 + 3*747*FLEN/8, x4, x1, x2)

inst_4588:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdd8000000000000; valaddr_reg:x3; val_offset:13764*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13764*0 + 3*748*FLEN/8, x4, x1, x2)

inst_4589:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddc000000000000; valaddr_reg:x3; val_offset:13767*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13767*0 + 3*749*FLEN/8, x4, x1, x2)

inst_4590:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbdde000000000000; valaddr_reg:x3; val_offset:13770*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13770*0 + 3*750*FLEN/8, x4, x1, x2)

inst_4591:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddf000000000000; valaddr_reg:x3; val_offset:13773*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13773*0 + 3*751*FLEN/8, x4, x1, x2)

inst_4592:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddf800000000000; valaddr_reg:x3; val_offset:13776*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13776*0 + 3*752*FLEN/8, x4, x1, x2)

inst_4593:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddfc00000000000; valaddr_reg:x3; val_offset:13779*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13779*0 + 3*753*FLEN/8, x4, x1, x2)

inst_4594:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddfe00000000000; valaddr_reg:x3; val_offset:13782*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13782*0 + 3*754*FLEN/8, x4, x1, x2)

inst_4595:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddff00000000000; valaddr_reg:x3; val_offset:13785*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13785*0 + 3*755*FLEN/8, x4, x1, x2)

inst_4596:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddff80000000000; valaddr_reg:x3; val_offset:13788*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13788*0 + 3*756*FLEN/8, x4, x1, x2)

inst_4597:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddffc0000000000; valaddr_reg:x3; val_offset:13791*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13791*0 + 3*757*FLEN/8, x4, x1, x2)

inst_4598:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddffe0000000000; valaddr_reg:x3; val_offset:13794*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13794*0 + 3*758*FLEN/8, x4, x1, x2)

inst_4599:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddfff0000000000; valaddr_reg:x3; val_offset:13797*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13797*0 + 3*759*FLEN/8, x4, x1, x2)

inst_4600:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddfff8000000000; valaddr_reg:x3; val_offset:13800*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13800*0 + 3*760*FLEN/8, x4, x1, x2)

inst_4601:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddfffc000000000; valaddr_reg:x3; val_offset:13803*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13803*0 + 3*761*FLEN/8, x4, x1, x2)

inst_4602:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddfffe000000000; valaddr_reg:x3; val_offset:13806*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13806*0 + 3*762*FLEN/8, x4, x1, x2)

inst_4603:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddffff000000000; valaddr_reg:x3; val_offset:13809*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13809*0 + 3*763*FLEN/8, x4, x1, x2)

inst_4604:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddffff800000000; valaddr_reg:x3; val_offset:13812*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13812*0 + 3*764*FLEN/8, x4, x1, x2)

inst_4605:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddffffc00000000; valaddr_reg:x3; val_offset:13815*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13815*0 + 3*765*FLEN/8, x4, x1, x2)

inst_4606:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddffffe00000000; valaddr_reg:x3; val_offset:13818*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13818*0 + 3*766*FLEN/8, x4, x1, x2)

inst_4607:
// fs1 == 0 and fe1 == 0x5f6 and fm1 == 0x42e4fc43f27af and fs2 == 1 and fe2 == 0x200 and fm2 == 0x95eda40ce608b and fs3 == 1 and fe3 == 0x3dd and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f642e4fc43f27af; op2val:0xa0095eda40ce608b;
op3val:0xbddfffff00000000; valaddr_reg:x3; val_offset:13821*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 13821*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236883110614794239,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236883385492701183,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236883935248515071,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236885034760142847,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236887233783398399,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236891631829909503,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236900427922931711,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236918020108976127,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9236953204481064959,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9237023573225242623,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9237164310713597951,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9237445785690308607,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9238008735643729919,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9239134635550572543,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9239134635550572544,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9240260535457415168,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9240823485410836480,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241104960387547136,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241245697875902464,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241316066620080128,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241351250992168960,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241368843178213376,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241377639271235584,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241382037317746688,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241384236341002240,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241385335852630016,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241385885608443904,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386160486350848,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386297925304320,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386366644781056,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386401004519424,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386418184388608,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386426774323200,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386431069290496,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386433216774144,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386434290515968,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386434827386880,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435095822336,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435230040064,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435297148928,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435330703360,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435347480576,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435355869184,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435360063488,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435362160640,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435363209216,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435363733504,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435363995648,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364126720,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364192256,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364225024,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364241408,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364249600,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364253696,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364255744,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364256768,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257280,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257536,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257664,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257728,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257760,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257776,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257784,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257788,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257790,64,FLEN)
NAN_BOXED(6873098454328039535,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257791,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423120896,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423120897,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423120899,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423120903,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423120911,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423120927,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423120959,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423121023,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423121151,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423121407,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423121919,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423122943,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423124991,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423129087,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423137279,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423153663,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423186431,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423251967,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423383039,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472423645183,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472424169471,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472425218047,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472427315199,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472431509503,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472439898111,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472456675327,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472490229759,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472557338623,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472691556351,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892472959991807,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892473496862719,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892474570604543,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892476718088191,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892481013055487,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892489602990079,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892506782859263,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892541142597631,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892609862074367,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627892747301027839,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627893022178934783,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627893571934748671,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627894671446376447,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627896870469631999,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627901268516143103,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627910064609165311,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627927656795209727,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13627962841167298559,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13628033209911476223,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13628173947399831551,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13628455422376542207,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13629018372329963519,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13630144272236806143,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13630144272236806144,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13631270172143648768,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13631833122097070080,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632114597073780736,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632255334562136064,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632325703306313728,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632360887678402560,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632378479864446976,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632387275957469184,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632391674003980288,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632393873027235840,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632394972538863616,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632395522294677504,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632395797172584448,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632395934611537920,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396003331014656,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396037690753024,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396054870622208,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396063460556800,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396067755524096,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396069903007744,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396070976749568,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396071513620480,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396071782055936,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396071916273664,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396071983382528,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072016936960,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072033714176,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072042102784,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072046297088,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072048394240,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072049442816,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072049967104,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050229248,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050360320,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050425856,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050458624,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050475008,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050483200,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050487296,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050489344,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050490368,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050490880,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491136,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491264,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491328,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491360,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491376,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491384,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491388,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491390,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13632396072050491391,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6873100946970991615,64,FLEN)
NAN_BOXED(11532647414030788849,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782592,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782593,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782595,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782599,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782607,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782623,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782655,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782719,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732782847,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732783103,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732783615,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732784639,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732786687,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732790783,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732798975,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732815359,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732848127,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416732913663,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416733044735,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416733306879,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416733831167,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416734879743,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416736976895,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416741171199,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416749559807,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416766337023,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416799891455,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566416867000319,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566417001218047,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566417269653503,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566417806524415,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566418880266239,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566421027749887,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566425322717183,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566433912651775,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566451092520959,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566485452259327,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566554171736063,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566691610689535,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466566966488596479,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466567516244410367,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466568615756038143,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466570814779293695,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466575212825804799,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466584008918827007,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466601601104871423,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466636785476960255,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466707154221137919,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9466847891709493247,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9467129366686203903,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9467692316639625215,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9468818216546467839,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9468818216546467840,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9469944116453310464,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9470507066406731776,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9470788541383442432,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9470929278871797760,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9470999647615975424,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471034831988064256,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471052424174108672,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471061220267130880,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471065618313641984,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471067817336897536,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471068916848525312,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471069466604339200,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471069741482246144,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471069878921199616,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471069947640676352,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471069982000414720,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471069999180283904,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070007770218496,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070012065185792,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070014212669440,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070015286411264,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070015823282176,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016091717632,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016225935360,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016293044224,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016326598656,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016343375872,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016351764480,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016355958784,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016358055936,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016359104512,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016359628800,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016359890944,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360022016,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360087552,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360120320,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360136704,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360144896,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360148992,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360151040,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360152064,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360152576,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360152832,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360152960,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153024,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153056,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153072,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153080,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153084,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153086,64,FLEN)
NAN_BOXED(6873234077084849295,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153087,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623265792,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623265793,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623265795,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623265799,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623265807,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623265823,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623265855,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623265919,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623266047,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623266303,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623266815,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623267839,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623269887,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623273983,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623282175,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623298559,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623331327,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623396863,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623527935,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180623790079,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180624314367,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180625362943,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180627460095,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180631654399,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180640043007,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180656820223,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180690374655,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180757483519,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187180891701247,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187181160136703,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187181697007615,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187182770749439,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187184918233087,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187189213200383,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187197803134975,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187214983004159,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187249342742527,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187318062219263,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187455501172735,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234187730379079679,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234188280134893567,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234189379646521343,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234191578669776895,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234195976716287999,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234204772809310207,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234222364995354623,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234257549367443455,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234327918111621119,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234468655599976447,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(234750130576687103,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(235313080530108415,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(236438980436951039,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(236438980436951040,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(237564880343793664,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238127830297214976,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238409305273925632,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238550042762280960,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238620411506458624,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238655595878547456,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238673188064591872,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238681984157614080,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238686382204125184,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238688581227380736,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238689680739008512,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690230494822400,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690505372729344,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690642811682816,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690711531159552,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690745890897920,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690763070767104,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690771660701696,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690775955668992,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690778103152640,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690779176894464,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690779713765376,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690779982200832,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780116418560,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780183527424,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780217081856,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780233859072,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780242247680,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780246441984,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780248539136,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780249587712,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250112000,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250374144,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250505216,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250570752,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250603520,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250619904,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250628096,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250632192,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250634240,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250635264,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250635776,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636032,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636160,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636224,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636256,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636272,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636280,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636284,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636286,64,FLEN)
NAN_BOXED(6873492385197598799,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(238690780250636287,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158144,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158145,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158147,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158151,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158159,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158175,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158207,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158271,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158399,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785158655,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785159167,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785160191,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785162239,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785166335,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785174527,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785190911,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785223679,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785289215,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785420287,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040785682431,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040786206719,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040787255295,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040789352447,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040793546751,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040801935359,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040818712575,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040852267007,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470040919375871,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470041053593599,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470041322029055,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470041858899967,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470042932641791,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470045080125439,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470049375092735,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470057965027327,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470075144896511,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470109504634879,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470178224111615,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470315663065087,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341470590540972031,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341471140296785919,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341472239808413695,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341474438831669247,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341478836878180351,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341487632971202559,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341505225157246975,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341540409529335807,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341610778273513471,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4341751515761868799,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4342032990738579455,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4342595940692000767,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4343721840598843391,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4343721840598843392,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4344847740505686016,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345410690459107328,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345692165435817984,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345832902924173312,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345903271668350976,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345938456040439808,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345956048226484224,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345964844319506432,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345969242366017536,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345971441389273088,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345972540900900864,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973090656714752,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973365534621696,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973502973575168,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973571693051904,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973606052790272,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973623232659456,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973631822594048,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973636117561344,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973638265044992,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973639338786816,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973639875657728,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640144093184,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640278310912,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640345419776,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640378974208,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640395751424,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640404140032,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640408334336,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640410431488,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640411480064,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412004352,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412266496,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412397568,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412463104,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412495872,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412512256,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412520448,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412524544,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412526592,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412527616,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528128,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528384,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528512,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528576,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528608,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528624,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528632,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528636,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528638,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4345973640412528639,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6873596980227423759,64,FLEN)
NAN_BOXED(2340098573710139707,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779200,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779201,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779203,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779207,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779215,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779231,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779263,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779327,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779455,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793779711,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793780223,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793781247,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793783295,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793787391,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793795583,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793811967,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793844735,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226793910271,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226794041343,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226794303487,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226794827775,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226795876351,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226797973503,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226802167807,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226810556415,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226827333631,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226860888063,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969226927996927,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969227062214655,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969227330650111,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969227867521023,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969228941262847,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969231088746495,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969235383713791,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969243973648383,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969261153517567,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969295513255935,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969364232732671,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969501671686143,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344969776549593087,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344970326305406975,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344971425817034751,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344973624840290303,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344978022886801407,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9344986818979823615,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9345004411165868031,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9345039595537956863,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9345109964282134527,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9345250701770489855,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9345532176747200511,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9346095126700621823,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9347221026607464447,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9347221026607464448,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9348346926514307072,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9348909876467728384,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349191351444439040,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349332088932794368,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349402457676972032,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349437642049060864,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349455234235105280,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349464030328127488,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349468428374638592,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349470627397894144,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349471726909521920,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472276665335808,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472551543242752,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472688982196224,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472757701672960,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472792061411328,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472809241280512,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472817831215104,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472822126182400,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472824273666048,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472825347407872,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472825884278784,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826152714240,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826286931968,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826354040832,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826387595264,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826404372480,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826412761088,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826416955392,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826419052544,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826420101120,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826420625408,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826420887552,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421018624,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421084160,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421116928,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421133312,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421141504,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421145600,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421147648,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421148672,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149184,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149440,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149568,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149632,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149664,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149680,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149688,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149692,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149694,64,FLEN)
NAN_BOXED(6873660607445263007,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9349472826421149695,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196352,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196353,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196355,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196359,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196367,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196383,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196415,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196479,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196607,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324196863,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324197375,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324198399,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324200447,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324204543,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324212735,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324229119,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324261887,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324327423,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324458495,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068324720639,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068325244927,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068326293503,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068328390655,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068332584959,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068340973567,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068357750783,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068391305215,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068458414079,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068592631807,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432068861067263,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432069397938175,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432070471679999,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432072619163647,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432076914130943,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432085504065535,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432102683934719,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432137043673087,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432205763149823,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432343202103295,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677432618080010239,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677433167835824127,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677434267347451903,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677436466370707455,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677440864417218559,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677449660510240767,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677467252696285183,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677502437068374015,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677572805812551679,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677713543300907007,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13677995018277617663,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13678557968231038975,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13679683868137881599,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13679683868137881600,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13680809768044724224,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681372717998145536,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681654192974856192,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681794930463211520,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681865299207389184,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681900483579478016,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681918075765522432,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681926871858544640,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681931269905055744,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681933468928311296,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681934568439939072,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681935118195752960,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681935393073659904,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681935530512613376,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681935599232090112,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681935633591828480,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681935650771697664,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681935659361632256,64,FLEN)
NAN_BOXED(6873669851403986863,64,FLEN)
NAN_BOXED(11531852612342014091,64,FLEN)
NAN_BOXED(13681935663656599552,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
