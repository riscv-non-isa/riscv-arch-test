
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_39168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x3600fffffffffff; valaddr_reg:x3; val_offset:117504*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117504*0 + 3*0*FLEN/8, x4, x1, x2)

inst_39169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x3601fffffffffff; valaddr_reg:x3; val_offset:117507*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117507*0 + 3*1*FLEN/8, x4, x1, x2)

inst_39170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x3603fffffffffff; valaddr_reg:x3; val_offset:117510*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117510*0 + 3*2*FLEN/8, x4, x1, x2)

inst_39171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x3607fffffffffff; valaddr_reg:x3; val_offset:117513*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117513*0 + 3*3*FLEN/8, x4, x1, x2)

inst_39172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x360ffffffffffff; valaddr_reg:x3; val_offset:117516*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117516*0 + 3*4*FLEN/8, x4, x1, x2)

inst_39173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x361ffffffffffff; valaddr_reg:x3; val_offset:117519*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117519*0 + 3*5*FLEN/8, x4, x1, x2)

inst_39174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x363ffffffffffff; valaddr_reg:x3; val_offset:117522*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117522*0 + 3*6*FLEN/8, x4, x1, x2)

inst_39175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x367ffffffffffff; valaddr_reg:x3; val_offset:117525*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117525*0 + 3*7*FLEN/8, x4, x1, x2)

inst_39176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x368000000000000; valaddr_reg:x3; val_offset:117528*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117528*0 + 3*8*FLEN/8, x4, x1, x2)

inst_39177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36c000000000000; valaddr_reg:x3; val_offset:117531*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117531*0 + 3*9*FLEN/8, x4, x1, x2)

inst_39178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36e000000000000; valaddr_reg:x3; val_offset:117534*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117534*0 + 3*10*FLEN/8, x4, x1, x2)

inst_39179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36f000000000000; valaddr_reg:x3; val_offset:117537*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117537*0 + 3*11*FLEN/8, x4, x1, x2)

inst_39180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36f800000000000; valaddr_reg:x3; val_offset:117540*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117540*0 + 3*12*FLEN/8, x4, x1, x2)

inst_39181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fc00000000000; valaddr_reg:x3; val_offset:117543*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117543*0 + 3*13*FLEN/8, x4, x1, x2)

inst_39182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fe00000000000; valaddr_reg:x3; val_offset:117546*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117546*0 + 3*14*FLEN/8, x4, x1, x2)

inst_39183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ff00000000000; valaddr_reg:x3; val_offset:117549*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117549*0 + 3*15*FLEN/8, x4, x1, x2)

inst_39184:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ff80000000000; valaddr_reg:x3; val_offset:117552*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117552*0 + 3*16*FLEN/8, x4, x1, x2)

inst_39185:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffc0000000000; valaddr_reg:x3; val_offset:117555*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117555*0 + 3*17*FLEN/8, x4, x1, x2)

inst_39186:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffe0000000000; valaddr_reg:x3; val_offset:117558*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117558*0 + 3*18*FLEN/8, x4, x1, x2)

inst_39187:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fff0000000000; valaddr_reg:x3; val_offset:117561*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117561*0 + 3*19*FLEN/8, x4, x1, x2)

inst_39188:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fff8000000000; valaddr_reg:x3; val_offset:117564*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117564*0 + 3*20*FLEN/8, x4, x1, x2)

inst_39189:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffc000000000; valaddr_reg:x3; val_offset:117567*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117567*0 + 3*21*FLEN/8, x4, x1, x2)

inst_39190:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffe000000000; valaddr_reg:x3; val_offset:117570*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117570*0 + 3*22*FLEN/8, x4, x1, x2)

inst_39191:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffff000000000; valaddr_reg:x3; val_offset:117573*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117573*0 + 3*23*FLEN/8, x4, x1, x2)

inst_39192:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffff800000000; valaddr_reg:x3; val_offset:117576*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117576*0 + 3*24*FLEN/8, x4, x1, x2)

inst_39193:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffc00000000; valaddr_reg:x3; val_offset:117579*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117579*0 + 3*25*FLEN/8, x4, x1, x2)

inst_39194:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffe00000000; valaddr_reg:x3; val_offset:117582*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117582*0 + 3*26*FLEN/8, x4, x1, x2)

inst_39195:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffff00000000; valaddr_reg:x3; val_offset:117585*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117585*0 + 3*27*FLEN/8, x4, x1, x2)

inst_39196:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffff80000000; valaddr_reg:x3; val_offset:117588*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117588*0 + 3*28*FLEN/8, x4, x1, x2)

inst_39197:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffc0000000; valaddr_reg:x3; val_offset:117591*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117591*0 + 3*29*FLEN/8, x4, x1, x2)

inst_39198:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffe0000000; valaddr_reg:x3; val_offset:117594*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117594*0 + 3*30*FLEN/8, x4, x1, x2)

inst_39199:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffff0000000; valaddr_reg:x3; val_offset:117597*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117597*0 + 3*31*FLEN/8, x4, x1, x2)

inst_39200:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffff8000000; valaddr_reg:x3; val_offset:117600*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117600*0 + 3*32*FLEN/8, x4, x1, x2)

inst_39201:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffc000000; valaddr_reg:x3; val_offset:117603*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117603*0 + 3*33*FLEN/8, x4, x1, x2)

inst_39202:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffe000000; valaddr_reg:x3; val_offset:117606*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117606*0 + 3*34*FLEN/8, x4, x1, x2)

inst_39203:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffff000000; valaddr_reg:x3; val_offset:117609*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117609*0 + 3*35*FLEN/8, x4, x1, x2)

inst_39204:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffff800000; valaddr_reg:x3; val_offset:117612*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117612*0 + 3*36*FLEN/8, x4, x1, x2)

inst_39205:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffc00000; valaddr_reg:x3; val_offset:117615*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117615*0 + 3*37*FLEN/8, x4, x1, x2)

inst_39206:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffe00000; valaddr_reg:x3; val_offset:117618*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117618*0 + 3*38*FLEN/8, x4, x1, x2)

inst_39207:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffff00000; valaddr_reg:x3; val_offset:117621*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117621*0 + 3*39*FLEN/8, x4, x1, x2)

inst_39208:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffff80000; valaddr_reg:x3; val_offset:117624*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117624*0 + 3*40*FLEN/8, x4, x1, x2)

inst_39209:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffc0000; valaddr_reg:x3; val_offset:117627*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117627*0 + 3*41*FLEN/8, x4, x1, x2)

inst_39210:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffe0000; valaddr_reg:x3; val_offset:117630*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117630*0 + 3*42*FLEN/8, x4, x1, x2)

inst_39211:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffff0000; valaddr_reg:x3; val_offset:117633*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117633*0 + 3*43*FLEN/8, x4, x1, x2)

inst_39212:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffff8000; valaddr_reg:x3; val_offset:117636*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117636*0 + 3*44*FLEN/8, x4, x1, x2)

inst_39213:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffffc000; valaddr_reg:x3; val_offset:117639*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117639*0 + 3*45*FLEN/8, x4, x1, x2)

inst_39214:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffffe000; valaddr_reg:x3; val_offset:117642*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117642*0 + 3*46*FLEN/8, x4, x1, x2)

inst_39215:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffff000; valaddr_reg:x3; val_offset:117645*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117645*0 + 3*47*FLEN/8, x4, x1, x2)

inst_39216:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffff800; valaddr_reg:x3; val_offset:117648*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117648*0 + 3*48*FLEN/8, x4, x1, x2)

inst_39217:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffffc00; valaddr_reg:x3; val_offset:117651*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117651*0 + 3*49*FLEN/8, x4, x1, x2)

inst_39218:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffffe00; valaddr_reg:x3; val_offset:117654*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117654*0 + 3*50*FLEN/8, x4, x1, x2)

inst_39219:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffffff00; valaddr_reg:x3; val_offset:117657*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117657*0 + 3*51*FLEN/8, x4, x1, x2)

inst_39220:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffffff80; valaddr_reg:x3; val_offset:117660*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117660*0 + 3*52*FLEN/8, x4, x1, x2)

inst_39221:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffffffc0; valaddr_reg:x3; val_offset:117663*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117663*0 + 3*53*FLEN/8, x4, x1, x2)

inst_39222:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffffffe0; valaddr_reg:x3; val_offset:117666*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117666*0 + 3*54*FLEN/8, x4, x1, x2)

inst_39223:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffffff0; valaddr_reg:x3; val_offset:117669*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117669*0 + 3*55*FLEN/8, x4, x1, x2)

inst_39224:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffffff8; valaddr_reg:x3; val_offset:117672*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117672*0 + 3*56*FLEN/8, x4, x1, x2)

inst_39225:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffffffc; valaddr_reg:x3; val_offset:117675*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117675*0 + 3*57*FLEN/8, x4, x1, x2)

inst_39226:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36ffffffffffffe; valaddr_reg:x3; val_offset:117678*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117678*0 + 3*58*FLEN/8, x4, x1, x2)

inst_39227:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c7fe5e0d8ccd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x036 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c7fe5e0d8ccd; op2val:0x0;
op3val:0x36fffffffffffff; valaddr_reg:x3; val_offset:117681*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117681*0 + 3*59*FLEN/8, x4, x1, x2)

inst_39228:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:117684*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117684*0 + 3*60*FLEN/8, x4, x1, x2)

inst_39229:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:117687*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117687*0 + 3*61*FLEN/8, x4, x1, x2)

inst_39230:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:117690*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117690*0 + 3*62*FLEN/8, x4, x1, x2)

inst_39231:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:117693*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117693*0 + 3*63*FLEN/8, x4, x1, x2)

inst_39232:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:117696*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117696*0 + 3*64*FLEN/8, x4, x1, x2)

inst_39233:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:117699*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117699*0 + 3*65*FLEN/8, x4, x1, x2)

inst_39234:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:117702*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117702*0 + 3*66*FLEN/8, x4, x1, x2)

inst_39235:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:117705*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117705*0 + 3*67*FLEN/8, x4, x1, x2)

inst_39236:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:117708*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117708*0 + 3*68*FLEN/8, x4, x1, x2)

inst_39237:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:117711*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117711*0 + 3*69*FLEN/8, x4, x1, x2)

inst_39238:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:117714*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117714*0 + 3*70*FLEN/8, x4, x1, x2)

inst_39239:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:117717*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117717*0 + 3*71*FLEN/8, x4, x1, x2)

inst_39240:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:117720*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117720*0 + 3*72*FLEN/8, x4, x1, x2)

inst_39241:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:117723*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117723*0 + 3*73*FLEN/8, x4, x1, x2)

inst_39242:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:117726*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117726*0 + 3*74*FLEN/8, x4, x1, x2)

inst_39243:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:117729*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117729*0 + 3*75*FLEN/8, x4, x1, x2)

inst_39244:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:117732*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117732*0 + 3*76*FLEN/8, x4, x1, x2)

inst_39245:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:117735*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117735*0 + 3*77*FLEN/8, x4, x1, x2)

inst_39246:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:117738*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117738*0 + 3*78*FLEN/8, x4, x1, x2)

inst_39247:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:117741*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117741*0 + 3*79*FLEN/8, x4, x1, x2)

inst_39248:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:117744*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117744*0 + 3*80*FLEN/8, x4, x1, x2)

inst_39249:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:117747*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117747*0 + 3*81*FLEN/8, x4, x1, x2)

inst_39250:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000000000; valaddr_reg:x3; val_offset:117750*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117750*0 + 3*82*FLEN/8, x4, x1, x2)

inst_39251:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000000001; valaddr_reg:x3; val_offset:117753*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117753*0 + 3*83*FLEN/8, x4, x1, x2)

inst_39252:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000000003; valaddr_reg:x3; val_offset:117756*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117756*0 + 3*84*FLEN/8, x4, x1, x2)

inst_39253:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000000007; valaddr_reg:x3; val_offset:117759*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117759*0 + 3*85*FLEN/8, x4, x1, x2)

inst_39254:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000000000f; valaddr_reg:x3; val_offset:117762*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117762*0 + 3*86*FLEN/8, x4, x1, x2)

inst_39255:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000000001f; valaddr_reg:x3; val_offset:117765*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117765*0 + 3*87*FLEN/8, x4, x1, x2)

inst_39256:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000000003f; valaddr_reg:x3; val_offset:117768*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117768*0 + 3*88*FLEN/8, x4, x1, x2)

inst_39257:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000000007f; valaddr_reg:x3; val_offset:117771*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117771*0 + 3*89*FLEN/8, x4, x1, x2)

inst_39258:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000000000ff; valaddr_reg:x3; val_offset:117774*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117774*0 + 3*90*FLEN/8, x4, x1, x2)

inst_39259:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000000001ff; valaddr_reg:x3; val_offset:117777*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117777*0 + 3*91*FLEN/8, x4, x1, x2)

inst_39260:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000000003ff; valaddr_reg:x3; val_offset:117780*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117780*0 + 3*92*FLEN/8, x4, x1, x2)

inst_39261:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000000007ff; valaddr_reg:x3; val_offset:117783*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117783*0 + 3*93*FLEN/8, x4, x1, x2)

inst_39262:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000000fff; valaddr_reg:x3; val_offset:117786*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117786*0 + 3*94*FLEN/8, x4, x1, x2)

inst_39263:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000001fff; valaddr_reg:x3; val_offset:117789*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117789*0 + 3*95*FLEN/8, x4, x1, x2)

inst_39264:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000003fff; valaddr_reg:x3; val_offset:117792*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117792*0 + 3*96*FLEN/8, x4, x1, x2)

inst_39265:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000007fff; valaddr_reg:x3; val_offset:117795*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117795*0 + 3*97*FLEN/8, x4, x1, x2)

inst_39266:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000000ffff; valaddr_reg:x3; val_offset:117798*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117798*0 + 3*98*FLEN/8, x4, x1, x2)

inst_39267:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000001ffff; valaddr_reg:x3; val_offset:117801*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117801*0 + 3*99*FLEN/8, x4, x1, x2)

inst_39268:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000003ffff; valaddr_reg:x3; val_offset:117804*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117804*0 + 3*100*FLEN/8, x4, x1, x2)

inst_39269:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000007ffff; valaddr_reg:x3; val_offset:117807*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117807*0 + 3*101*FLEN/8, x4, x1, x2)

inst_39270:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000000fffff; valaddr_reg:x3; val_offset:117810*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117810*0 + 3*102*FLEN/8, x4, x1, x2)

inst_39271:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000001fffff; valaddr_reg:x3; val_offset:117813*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117813*0 + 3*103*FLEN/8, x4, x1, x2)

inst_39272:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000003fffff; valaddr_reg:x3; val_offset:117816*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117816*0 + 3*104*FLEN/8, x4, x1, x2)

inst_39273:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000007fffff; valaddr_reg:x3; val_offset:117819*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117819*0 + 3*105*FLEN/8, x4, x1, x2)

inst_39274:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000000ffffff; valaddr_reg:x3; val_offset:117822*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117822*0 + 3*106*FLEN/8, x4, x1, x2)

inst_39275:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000001ffffff; valaddr_reg:x3; val_offset:117825*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117825*0 + 3*107*FLEN/8, x4, x1, x2)

inst_39276:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000003ffffff; valaddr_reg:x3; val_offset:117828*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117828*0 + 3*108*FLEN/8, x4, x1, x2)

inst_39277:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000007ffffff; valaddr_reg:x3; val_offset:117831*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117831*0 + 3*109*FLEN/8, x4, x1, x2)

inst_39278:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000000fffffff; valaddr_reg:x3; val_offset:117834*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117834*0 + 3*110*FLEN/8, x4, x1, x2)

inst_39279:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000001fffffff; valaddr_reg:x3; val_offset:117837*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117837*0 + 3*111*FLEN/8, x4, x1, x2)

inst_39280:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000003fffffff; valaddr_reg:x3; val_offset:117840*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117840*0 + 3*112*FLEN/8, x4, x1, x2)

inst_39281:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000007fffffff; valaddr_reg:x3; val_offset:117843*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117843*0 + 3*113*FLEN/8, x4, x1, x2)

inst_39282:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400000ffffffff; valaddr_reg:x3; val_offset:117846*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117846*0 + 3*114*FLEN/8, x4, x1, x2)

inst_39283:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400001ffffffff; valaddr_reg:x3; val_offset:117849*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117849*0 + 3*115*FLEN/8, x4, x1, x2)

inst_39284:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400003ffffffff; valaddr_reg:x3; val_offset:117852*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117852*0 + 3*116*FLEN/8, x4, x1, x2)

inst_39285:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400007ffffffff; valaddr_reg:x3; val_offset:117855*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117855*0 + 3*117*FLEN/8, x4, x1, x2)

inst_39286:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140000fffffffff; valaddr_reg:x3; val_offset:117858*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117858*0 + 3*118*FLEN/8, x4, x1, x2)

inst_39287:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140001fffffffff; valaddr_reg:x3; val_offset:117861*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117861*0 + 3*119*FLEN/8, x4, x1, x2)

inst_39288:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140003fffffffff; valaddr_reg:x3; val_offset:117864*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117864*0 + 3*120*FLEN/8, x4, x1, x2)

inst_39289:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140007fffffffff; valaddr_reg:x3; val_offset:117867*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117867*0 + 3*121*FLEN/8, x4, x1, x2)

inst_39290:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14000ffffffffff; valaddr_reg:x3; val_offset:117870*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117870*0 + 3*122*FLEN/8, x4, x1, x2)

inst_39291:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14001ffffffffff; valaddr_reg:x3; val_offset:117873*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117873*0 + 3*123*FLEN/8, x4, x1, x2)

inst_39292:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14003ffffffffff; valaddr_reg:x3; val_offset:117876*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117876*0 + 3*124*FLEN/8, x4, x1, x2)

inst_39293:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14007ffffffffff; valaddr_reg:x3; val_offset:117879*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117879*0 + 3*125*FLEN/8, x4, x1, x2)

inst_39294:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1400fffffffffff; valaddr_reg:x3; val_offset:117882*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117882*0 + 3*126*FLEN/8, x4, x1, x2)

inst_39295:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1401fffffffffff; valaddr_reg:x3; val_offset:117885*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117885*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_39296:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1403fffffffffff; valaddr_reg:x3; val_offset:117888*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117888*0 + 3*128*FLEN/8, x4, x1, x2)

inst_39297:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x1407fffffffffff; valaddr_reg:x3; val_offset:117891*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117891*0 + 3*129*FLEN/8, x4, x1, x2)

inst_39298:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x140ffffffffffff; valaddr_reg:x3; val_offset:117894*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117894*0 + 3*130*FLEN/8, x4, x1, x2)

inst_39299:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x141ffffffffffff; valaddr_reg:x3; val_offset:117897*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117897*0 + 3*131*FLEN/8, x4, x1, x2)

inst_39300:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x143ffffffffffff; valaddr_reg:x3; val_offset:117900*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117900*0 + 3*132*FLEN/8, x4, x1, x2)

inst_39301:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x147ffffffffffff; valaddr_reg:x3; val_offset:117903*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117903*0 + 3*133*FLEN/8, x4, x1, x2)

inst_39302:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x148000000000000; valaddr_reg:x3; val_offset:117906*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117906*0 + 3*134*FLEN/8, x4, x1, x2)

inst_39303:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14c000000000000; valaddr_reg:x3; val_offset:117909*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117909*0 + 3*135*FLEN/8, x4, x1, x2)

inst_39304:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14e000000000000; valaddr_reg:x3; val_offset:117912*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117912*0 + 3*136*FLEN/8, x4, x1, x2)

inst_39305:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14f000000000000; valaddr_reg:x3; val_offset:117915*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117915*0 + 3*137*FLEN/8, x4, x1, x2)

inst_39306:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14f800000000000; valaddr_reg:x3; val_offset:117918*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117918*0 + 3*138*FLEN/8, x4, x1, x2)

inst_39307:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fc00000000000; valaddr_reg:x3; val_offset:117921*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117921*0 + 3*139*FLEN/8, x4, x1, x2)

inst_39308:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fe00000000000; valaddr_reg:x3; val_offset:117924*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117924*0 + 3*140*FLEN/8, x4, x1, x2)

inst_39309:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ff00000000000; valaddr_reg:x3; val_offset:117927*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117927*0 + 3*141*FLEN/8, x4, x1, x2)

inst_39310:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ff80000000000; valaddr_reg:x3; val_offset:117930*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117930*0 + 3*142*FLEN/8, x4, x1, x2)

inst_39311:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffc0000000000; valaddr_reg:x3; val_offset:117933*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117933*0 + 3*143*FLEN/8, x4, x1, x2)

inst_39312:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffe0000000000; valaddr_reg:x3; val_offset:117936*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117936*0 + 3*144*FLEN/8, x4, x1, x2)

inst_39313:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fff0000000000; valaddr_reg:x3; val_offset:117939*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117939*0 + 3*145*FLEN/8, x4, x1, x2)

inst_39314:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fff8000000000; valaddr_reg:x3; val_offset:117942*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117942*0 + 3*146*FLEN/8, x4, x1, x2)

inst_39315:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffc000000000; valaddr_reg:x3; val_offset:117945*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117945*0 + 3*147*FLEN/8, x4, x1, x2)

inst_39316:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffe000000000; valaddr_reg:x3; val_offset:117948*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117948*0 + 3*148*FLEN/8, x4, x1, x2)

inst_39317:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffff000000000; valaddr_reg:x3; val_offset:117951*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117951*0 + 3*149*FLEN/8, x4, x1, x2)

inst_39318:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffff800000000; valaddr_reg:x3; val_offset:117954*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117954*0 + 3*150*FLEN/8, x4, x1, x2)

inst_39319:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffc00000000; valaddr_reg:x3; val_offset:117957*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117957*0 + 3*151*FLEN/8, x4, x1, x2)

inst_39320:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffe00000000; valaddr_reg:x3; val_offset:117960*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117960*0 + 3*152*FLEN/8, x4, x1, x2)

inst_39321:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffff00000000; valaddr_reg:x3; val_offset:117963*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117963*0 + 3*153*FLEN/8, x4, x1, x2)

inst_39322:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffff80000000; valaddr_reg:x3; val_offset:117966*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117966*0 + 3*154*FLEN/8, x4, x1, x2)

inst_39323:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffc0000000; valaddr_reg:x3; val_offset:117969*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117969*0 + 3*155*FLEN/8, x4, x1, x2)

inst_39324:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffe0000000; valaddr_reg:x3; val_offset:117972*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117972*0 + 3*156*FLEN/8, x4, x1, x2)

inst_39325:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffff0000000; valaddr_reg:x3; val_offset:117975*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117975*0 + 3*157*FLEN/8, x4, x1, x2)

inst_39326:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffff8000000; valaddr_reg:x3; val_offset:117978*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117978*0 + 3*158*FLEN/8, x4, x1, x2)

inst_39327:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffc000000; valaddr_reg:x3; val_offset:117981*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117981*0 + 3*159*FLEN/8, x4, x1, x2)

inst_39328:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffe000000; valaddr_reg:x3; val_offset:117984*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117984*0 + 3*160*FLEN/8, x4, x1, x2)

inst_39329:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffff000000; valaddr_reg:x3; val_offset:117987*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117987*0 + 3*161*FLEN/8, x4, x1, x2)

inst_39330:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffff800000; valaddr_reg:x3; val_offset:117990*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117990*0 + 3*162*FLEN/8, x4, x1, x2)

inst_39331:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffc00000; valaddr_reg:x3; val_offset:117993*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117993*0 + 3*163*FLEN/8, x4, x1, x2)

inst_39332:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffe00000; valaddr_reg:x3; val_offset:117996*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117996*0 + 3*164*FLEN/8, x4, x1, x2)

inst_39333:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffff00000; valaddr_reg:x3; val_offset:117999*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 117999*0 + 3*165*FLEN/8, x4, x1, x2)

inst_39334:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffff80000; valaddr_reg:x3; val_offset:118002*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118002*0 + 3*166*FLEN/8, x4, x1, x2)

inst_39335:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffc0000; valaddr_reg:x3; val_offset:118005*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118005*0 + 3*167*FLEN/8, x4, x1, x2)

inst_39336:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffe0000; valaddr_reg:x3; val_offset:118008*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118008*0 + 3*168*FLEN/8, x4, x1, x2)

inst_39337:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffff0000; valaddr_reg:x3; val_offset:118011*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118011*0 + 3*169*FLEN/8, x4, x1, x2)

inst_39338:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffff8000; valaddr_reg:x3; val_offset:118014*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118014*0 + 3*170*FLEN/8, x4, x1, x2)

inst_39339:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffffc000; valaddr_reg:x3; val_offset:118017*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118017*0 + 3*171*FLEN/8, x4, x1, x2)

inst_39340:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffffe000; valaddr_reg:x3; val_offset:118020*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118020*0 + 3*172*FLEN/8, x4, x1, x2)

inst_39341:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffff000; valaddr_reg:x3; val_offset:118023*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118023*0 + 3*173*FLEN/8, x4, x1, x2)

inst_39342:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffff800; valaddr_reg:x3; val_offset:118026*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118026*0 + 3*174*FLEN/8, x4, x1, x2)

inst_39343:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffffc00; valaddr_reg:x3; val_offset:118029*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118029*0 + 3*175*FLEN/8, x4, x1, x2)

inst_39344:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffffe00; valaddr_reg:x3; val_offset:118032*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118032*0 + 3*176*FLEN/8, x4, x1, x2)

inst_39345:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffffff00; valaddr_reg:x3; val_offset:118035*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118035*0 + 3*177*FLEN/8, x4, x1, x2)

inst_39346:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffffff80; valaddr_reg:x3; val_offset:118038*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118038*0 + 3*178*FLEN/8, x4, x1, x2)

inst_39347:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffffffc0; valaddr_reg:x3; val_offset:118041*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118041*0 + 3*179*FLEN/8, x4, x1, x2)

inst_39348:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffffffe0; valaddr_reg:x3; val_offset:118044*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118044*0 + 3*180*FLEN/8, x4, x1, x2)

inst_39349:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffffff0; valaddr_reg:x3; val_offset:118047*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118047*0 + 3*181*FLEN/8, x4, x1, x2)

inst_39350:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffffff8; valaddr_reg:x3; val_offset:118050*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118050*0 + 3*182*FLEN/8, x4, x1, x2)

inst_39351:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffffffc; valaddr_reg:x3; val_offset:118053*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118053*0 + 3*183*FLEN/8, x4, x1, x2)

inst_39352:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14ffffffffffffe; valaddr_reg:x3; val_offset:118056*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118056*0 + 3*184*FLEN/8, x4, x1, x2)

inst_39353:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7c83d0258b3c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x014 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97c83d0258b3c5; op2val:0x0;
op3val:0x14fffffffffffff; valaddr_reg:x3; val_offset:118059*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118059*0 + 3*185*FLEN/8, x4, x1, x2)

inst_39354:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:118062*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118062*0 + 3*186*FLEN/8, x4, x1, x2)

inst_39355:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:118065*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118065*0 + 3*187*FLEN/8, x4, x1, x2)

inst_39356:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:118068*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118068*0 + 3*188*FLEN/8, x4, x1, x2)

inst_39357:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:118071*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118071*0 + 3*189*FLEN/8, x4, x1, x2)

inst_39358:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:118074*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118074*0 + 3*190*FLEN/8, x4, x1, x2)

inst_39359:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:118077*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118077*0 + 3*191*FLEN/8, x4, x1, x2)

inst_39360:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:118080*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118080*0 + 3*192*FLEN/8, x4, x1, x2)

inst_39361:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:118083*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118083*0 + 3*193*FLEN/8, x4, x1, x2)

inst_39362:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:118086*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118086*0 + 3*194*FLEN/8, x4, x1, x2)

inst_39363:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:118089*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118089*0 + 3*195*FLEN/8, x4, x1, x2)

inst_39364:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:118092*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118092*0 + 3*196*FLEN/8, x4, x1, x2)

inst_39365:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:118095*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118095*0 + 3*197*FLEN/8, x4, x1, x2)

inst_39366:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:118098*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118098*0 + 3*198*FLEN/8, x4, x1, x2)

inst_39367:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:118101*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118101*0 + 3*199*FLEN/8, x4, x1, x2)

inst_39368:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:118104*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118104*0 + 3*200*FLEN/8, x4, x1, x2)

inst_39369:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:118107*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118107*0 + 3*201*FLEN/8, x4, x1, x2)

inst_39370:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:118110*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118110*0 + 3*202*FLEN/8, x4, x1, x2)

inst_39371:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:118113*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118113*0 + 3*203*FLEN/8, x4, x1, x2)

inst_39372:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:118116*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118116*0 + 3*204*FLEN/8, x4, x1, x2)

inst_39373:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:118119*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118119*0 + 3*205*FLEN/8, x4, x1, x2)

inst_39374:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:118122*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118122*0 + 3*206*FLEN/8, x4, x1, x2)

inst_39375:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:118125*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118125*0 + 3*207*FLEN/8, x4, x1, x2)

inst_39376:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000000000; valaddr_reg:x3; val_offset:118128*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118128*0 + 3*208*FLEN/8, x4, x1, x2)

inst_39377:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000000001; valaddr_reg:x3; val_offset:118131*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118131*0 + 3*209*FLEN/8, x4, x1, x2)

inst_39378:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000000003; valaddr_reg:x3; val_offset:118134*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118134*0 + 3*210*FLEN/8, x4, x1, x2)

inst_39379:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000000007; valaddr_reg:x3; val_offset:118137*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118137*0 + 3*211*FLEN/8, x4, x1, x2)

inst_39380:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000000000f; valaddr_reg:x3; val_offset:118140*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118140*0 + 3*212*FLEN/8, x4, x1, x2)

inst_39381:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000000001f; valaddr_reg:x3; val_offset:118143*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118143*0 + 3*213*FLEN/8, x4, x1, x2)

inst_39382:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000000003f; valaddr_reg:x3; val_offset:118146*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118146*0 + 3*214*FLEN/8, x4, x1, x2)

inst_39383:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000000007f; valaddr_reg:x3; val_offset:118149*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118149*0 + 3*215*FLEN/8, x4, x1, x2)

inst_39384:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000000000ff; valaddr_reg:x3; val_offset:118152*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118152*0 + 3*216*FLEN/8, x4, x1, x2)

inst_39385:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000000001ff; valaddr_reg:x3; val_offset:118155*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118155*0 + 3*217*FLEN/8, x4, x1, x2)

inst_39386:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000000003ff; valaddr_reg:x3; val_offset:118158*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118158*0 + 3*218*FLEN/8, x4, x1, x2)

inst_39387:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000000007ff; valaddr_reg:x3; val_offset:118161*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118161*0 + 3*219*FLEN/8, x4, x1, x2)

inst_39388:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000000fff; valaddr_reg:x3; val_offset:118164*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118164*0 + 3*220*FLEN/8, x4, x1, x2)

inst_39389:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000001fff; valaddr_reg:x3; val_offset:118167*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118167*0 + 3*221*FLEN/8, x4, x1, x2)

inst_39390:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000003fff; valaddr_reg:x3; val_offset:118170*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118170*0 + 3*222*FLEN/8, x4, x1, x2)

inst_39391:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000007fff; valaddr_reg:x3; val_offset:118173*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118173*0 + 3*223*FLEN/8, x4, x1, x2)

inst_39392:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000000ffff; valaddr_reg:x3; val_offset:118176*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118176*0 + 3*224*FLEN/8, x4, x1, x2)

inst_39393:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000001ffff; valaddr_reg:x3; val_offset:118179*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118179*0 + 3*225*FLEN/8, x4, x1, x2)

inst_39394:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000003ffff; valaddr_reg:x3; val_offset:118182*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118182*0 + 3*226*FLEN/8, x4, x1, x2)

inst_39395:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000007ffff; valaddr_reg:x3; val_offset:118185*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118185*0 + 3*227*FLEN/8, x4, x1, x2)

inst_39396:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000000fffff; valaddr_reg:x3; val_offset:118188*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118188*0 + 3*228*FLEN/8, x4, x1, x2)

inst_39397:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000001fffff; valaddr_reg:x3; val_offset:118191*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118191*0 + 3*229*FLEN/8, x4, x1, x2)

inst_39398:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000003fffff; valaddr_reg:x3; val_offset:118194*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118194*0 + 3*230*FLEN/8, x4, x1, x2)

inst_39399:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000007fffff; valaddr_reg:x3; val_offset:118197*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118197*0 + 3*231*FLEN/8, x4, x1, x2)

inst_39400:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000000ffffff; valaddr_reg:x3; val_offset:118200*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118200*0 + 3*232*FLEN/8, x4, x1, x2)

inst_39401:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000001ffffff; valaddr_reg:x3; val_offset:118203*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118203*0 + 3*233*FLEN/8, x4, x1, x2)

inst_39402:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000003ffffff; valaddr_reg:x3; val_offset:118206*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118206*0 + 3*234*FLEN/8, x4, x1, x2)

inst_39403:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000007ffffff; valaddr_reg:x3; val_offset:118209*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118209*0 + 3*235*FLEN/8, x4, x1, x2)

inst_39404:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000000fffffff; valaddr_reg:x3; val_offset:118212*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118212*0 + 3*236*FLEN/8, x4, x1, x2)

inst_39405:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000001fffffff; valaddr_reg:x3; val_offset:118215*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118215*0 + 3*237*FLEN/8, x4, x1, x2)

inst_39406:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000003fffffff; valaddr_reg:x3; val_offset:118218*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118218*0 + 3*238*FLEN/8, x4, x1, x2)

inst_39407:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000007fffffff; valaddr_reg:x3; val_offset:118221*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118221*0 + 3*239*FLEN/8, x4, x1, x2)

inst_39408:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700000ffffffff; valaddr_reg:x3; val_offset:118224*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118224*0 + 3*240*FLEN/8, x4, x1, x2)

inst_39409:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700001ffffffff; valaddr_reg:x3; val_offset:118227*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118227*0 + 3*241*FLEN/8, x4, x1, x2)

inst_39410:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700003ffffffff; valaddr_reg:x3; val_offset:118230*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118230*0 + 3*242*FLEN/8, x4, x1, x2)

inst_39411:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700007ffffffff; valaddr_reg:x3; val_offset:118233*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118233*0 + 3*243*FLEN/8, x4, x1, x2)

inst_39412:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170000fffffffff; valaddr_reg:x3; val_offset:118236*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118236*0 + 3*244*FLEN/8, x4, x1, x2)

inst_39413:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170001fffffffff; valaddr_reg:x3; val_offset:118239*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118239*0 + 3*245*FLEN/8, x4, x1, x2)

inst_39414:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170003fffffffff; valaddr_reg:x3; val_offset:118242*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118242*0 + 3*246*FLEN/8, x4, x1, x2)

inst_39415:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170007fffffffff; valaddr_reg:x3; val_offset:118245*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118245*0 + 3*247*FLEN/8, x4, x1, x2)

inst_39416:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817000ffffffffff; valaddr_reg:x3; val_offset:118248*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118248*0 + 3*248*FLEN/8, x4, x1, x2)

inst_39417:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817001ffffffffff; valaddr_reg:x3; val_offset:118251*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118251*0 + 3*249*FLEN/8, x4, x1, x2)

inst_39418:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817003ffffffffff; valaddr_reg:x3; val_offset:118254*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118254*0 + 3*250*FLEN/8, x4, x1, x2)

inst_39419:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817007ffffffffff; valaddr_reg:x3; val_offset:118257*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118257*0 + 3*251*FLEN/8, x4, x1, x2)

inst_39420:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81700fffffffffff; valaddr_reg:x3; val_offset:118260*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118260*0 + 3*252*FLEN/8, x4, x1, x2)

inst_39421:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81701fffffffffff; valaddr_reg:x3; val_offset:118263*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118263*0 + 3*253*FLEN/8, x4, x1, x2)

inst_39422:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81703fffffffffff; valaddr_reg:x3; val_offset:118266*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118266*0 + 3*254*FLEN/8, x4, x1, x2)

inst_39423:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x81707fffffffffff; valaddr_reg:x3; val_offset:118269*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118269*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_39424:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8170ffffffffffff; valaddr_reg:x3; val_offset:118272*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118272*0 + 3*256*FLEN/8, x4, x1, x2)

inst_39425:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8171ffffffffffff; valaddr_reg:x3; val_offset:118275*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118275*0 + 3*257*FLEN/8, x4, x1, x2)

inst_39426:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8173ffffffffffff; valaddr_reg:x3; val_offset:118278*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118278*0 + 3*258*FLEN/8, x4, x1, x2)

inst_39427:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8177ffffffffffff; valaddr_reg:x3; val_offset:118281*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118281*0 + 3*259*FLEN/8, x4, x1, x2)

inst_39428:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x8178000000000000; valaddr_reg:x3; val_offset:118284*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118284*0 + 3*260*FLEN/8, x4, x1, x2)

inst_39429:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817c000000000000; valaddr_reg:x3; val_offset:118287*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118287*0 + 3*261*FLEN/8, x4, x1, x2)

inst_39430:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817e000000000000; valaddr_reg:x3; val_offset:118290*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118290*0 + 3*262*FLEN/8, x4, x1, x2)

inst_39431:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817f000000000000; valaddr_reg:x3; val_offset:118293*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118293*0 + 3*263*FLEN/8, x4, x1, x2)

inst_39432:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817f800000000000; valaddr_reg:x3; val_offset:118296*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118296*0 + 3*264*FLEN/8, x4, x1, x2)

inst_39433:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fc00000000000; valaddr_reg:x3; val_offset:118299*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118299*0 + 3*265*FLEN/8, x4, x1, x2)

inst_39434:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fe00000000000; valaddr_reg:x3; val_offset:118302*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118302*0 + 3*266*FLEN/8, x4, x1, x2)

inst_39435:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ff00000000000; valaddr_reg:x3; val_offset:118305*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118305*0 + 3*267*FLEN/8, x4, x1, x2)

inst_39436:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ff80000000000; valaddr_reg:x3; val_offset:118308*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118308*0 + 3*268*FLEN/8, x4, x1, x2)

inst_39437:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffc0000000000; valaddr_reg:x3; val_offset:118311*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118311*0 + 3*269*FLEN/8, x4, x1, x2)

inst_39438:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffe0000000000; valaddr_reg:x3; val_offset:118314*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118314*0 + 3*270*FLEN/8, x4, x1, x2)

inst_39439:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fff0000000000; valaddr_reg:x3; val_offset:118317*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118317*0 + 3*271*FLEN/8, x4, x1, x2)

inst_39440:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fff8000000000; valaddr_reg:x3; val_offset:118320*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118320*0 + 3*272*FLEN/8, x4, x1, x2)

inst_39441:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffc000000000; valaddr_reg:x3; val_offset:118323*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118323*0 + 3*273*FLEN/8, x4, x1, x2)

inst_39442:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffe000000000; valaddr_reg:x3; val_offset:118326*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118326*0 + 3*274*FLEN/8, x4, x1, x2)

inst_39443:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffff000000000; valaddr_reg:x3; val_offset:118329*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118329*0 + 3*275*FLEN/8, x4, x1, x2)

inst_39444:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffff800000000; valaddr_reg:x3; val_offset:118332*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118332*0 + 3*276*FLEN/8, x4, x1, x2)

inst_39445:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffc00000000; valaddr_reg:x3; val_offset:118335*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118335*0 + 3*277*FLEN/8, x4, x1, x2)

inst_39446:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffe00000000; valaddr_reg:x3; val_offset:118338*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118338*0 + 3*278*FLEN/8, x4, x1, x2)

inst_39447:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffff00000000; valaddr_reg:x3; val_offset:118341*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118341*0 + 3*279*FLEN/8, x4, x1, x2)

inst_39448:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffff80000000; valaddr_reg:x3; val_offset:118344*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118344*0 + 3*280*FLEN/8, x4, x1, x2)

inst_39449:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffc0000000; valaddr_reg:x3; val_offset:118347*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118347*0 + 3*281*FLEN/8, x4, x1, x2)

inst_39450:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffe0000000; valaddr_reg:x3; val_offset:118350*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118350*0 + 3*282*FLEN/8, x4, x1, x2)

inst_39451:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffff0000000; valaddr_reg:x3; val_offset:118353*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118353*0 + 3*283*FLEN/8, x4, x1, x2)

inst_39452:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffff8000000; valaddr_reg:x3; val_offset:118356*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118356*0 + 3*284*FLEN/8, x4, x1, x2)

inst_39453:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffc000000; valaddr_reg:x3; val_offset:118359*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118359*0 + 3*285*FLEN/8, x4, x1, x2)

inst_39454:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffe000000; valaddr_reg:x3; val_offset:118362*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118362*0 + 3*286*FLEN/8, x4, x1, x2)

inst_39455:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffff000000; valaddr_reg:x3; val_offset:118365*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118365*0 + 3*287*FLEN/8, x4, x1, x2)

inst_39456:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffff800000; valaddr_reg:x3; val_offset:118368*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118368*0 + 3*288*FLEN/8, x4, x1, x2)

inst_39457:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffc00000; valaddr_reg:x3; val_offset:118371*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118371*0 + 3*289*FLEN/8, x4, x1, x2)

inst_39458:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffe00000; valaddr_reg:x3; val_offset:118374*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118374*0 + 3*290*FLEN/8, x4, x1, x2)

inst_39459:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffff00000; valaddr_reg:x3; val_offset:118377*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118377*0 + 3*291*FLEN/8, x4, x1, x2)

inst_39460:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffff80000; valaddr_reg:x3; val_offset:118380*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118380*0 + 3*292*FLEN/8, x4, x1, x2)

inst_39461:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffc0000; valaddr_reg:x3; val_offset:118383*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118383*0 + 3*293*FLEN/8, x4, x1, x2)

inst_39462:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffe0000; valaddr_reg:x3; val_offset:118386*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118386*0 + 3*294*FLEN/8, x4, x1, x2)

inst_39463:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffff0000; valaddr_reg:x3; val_offset:118389*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118389*0 + 3*295*FLEN/8, x4, x1, x2)

inst_39464:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffff8000; valaddr_reg:x3; val_offset:118392*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118392*0 + 3*296*FLEN/8, x4, x1, x2)

inst_39465:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffffc000; valaddr_reg:x3; val_offset:118395*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118395*0 + 3*297*FLEN/8, x4, x1, x2)

inst_39466:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffffe000; valaddr_reg:x3; val_offset:118398*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118398*0 + 3*298*FLEN/8, x4, x1, x2)

inst_39467:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffff000; valaddr_reg:x3; val_offset:118401*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118401*0 + 3*299*FLEN/8, x4, x1, x2)

inst_39468:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffff800; valaddr_reg:x3; val_offset:118404*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118404*0 + 3*300*FLEN/8, x4, x1, x2)

inst_39469:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffffc00; valaddr_reg:x3; val_offset:118407*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118407*0 + 3*301*FLEN/8, x4, x1, x2)

inst_39470:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffffe00; valaddr_reg:x3; val_offset:118410*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118410*0 + 3*302*FLEN/8, x4, x1, x2)

inst_39471:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffffff00; valaddr_reg:x3; val_offset:118413*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118413*0 + 3*303*FLEN/8, x4, x1, x2)

inst_39472:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffffff80; valaddr_reg:x3; val_offset:118416*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118416*0 + 3*304*FLEN/8, x4, x1, x2)

inst_39473:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffffffc0; valaddr_reg:x3; val_offset:118419*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118419*0 + 3*305*FLEN/8, x4, x1, x2)

inst_39474:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffffffe0; valaddr_reg:x3; val_offset:118422*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118422*0 + 3*306*FLEN/8, x4, x1, x2)

inst_39475:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffffff0; valaddr_reg:x3; val_offset:118425*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118425*0 + 3*307*FLEN/8, x4, x1, x2)

inst_39476:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffffff8; valaddr_reg:x3; val_offset:118428*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118428*0 + 3*308*FLEN/8, x4, x1, x2)

inst_39477:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffffffc; valaddr_reg:x3; val_offset:118431*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118431*0 + 3*309*FLEN/8, x4, x1, x2)

inst_39478:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817ffffffffffffe; valaddr_reg:x3; val_offset:118434*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118434*0 + 3*310*FLEN/8, x4, x1, x2)

inst_39479:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x7cba45c8bbdb5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f97cba45c8bbdb5; op2val:0x8000;
op3val:0x817fffffffffffff; valaddr_reg:x3; val_offset:118437*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118437*0 + 3*311*FLEN/8, x4, x1, x2)

inst_39480:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000000000; valaddr_reg:x3; val_offset:118440*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118440*0 + 3*312*FLEN/8, x4, x1, x2)

inst_39481:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000000001; valaddr_reg:x3; val_offset:118443*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118443*0 + 3*313*FLEN/8, x4, x1, x2)

inst_39482:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000000003; valaddr_reg:x3; val_offset:118446*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118446*0 + 3*314*FLEN/8, x4, x1, x2)

inst_39483:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000000007; valaddr_reg:x3; val_offset:118449*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118449*0 + 3*315*FLEN/8, x4, x1, x2)

inst_39484:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000000000f; valaddr_reg:x3; val_offset:118452*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118452*0 + 3*316*FLEN/8, x4, x1, x2)

inst_39485:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000000001f; valaddr_reg:x3; val_offset:118455*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118455*0 + 3*317*FLEN/8, x4, x1, x2)

inst_39486:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000000003f; valaddr_reg:x3; val_offset:118458*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118458*0 + 3*318*FLEN/8, x4, x1, x2)

inst_39487:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000000007f; valaddr_reg:x3; val_offset:118461*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118461*0 + 3*319*FLEN/8, x4, x1, x2)

inst_39488:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000000000ff; valaddr_reg:x3; val_offset:118464*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118464*0 + 3*320*FLEN/8, x4, x1, x2)

inst_39489:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000000001ff; valaddr_reg:x3; val_offset:118467*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118467*0 + 3*321*FLEN/8, x4, x1, x2)

inst_39490:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000000003ff; valaddr_reg:x3; val_offset:118470*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118470*0 + 3*322*FLEN/8, x4, x1, x2)

inst_39491:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000000007ff; valaddr_reg:x3; val_offset:118473*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118473*0 + 3*323*FLEN/8, x4, x1, x2)

inst_39492:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000000fff; valaddr_reg:x3; val_offset:118476*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118476*0 + 3*324*FLEN/8, x4, x1, x2)

inst_39493:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000001fff; valaddr_reg:x3; val_offset:118479*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118479*0 + 3*325*FLEN/8, x4, x1, x2)

inst_39494:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000003fff; valaddr_reg:x3; val_offset:118482*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118482*0 + 3*326*FLEN/8, x4, x1, x2)

inst_39495:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000007fff; valaddr_reg:x3; val_offset:118485*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118485*0 + 3*327*FLEN/8, x4, x1, x2)

inst_39496:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000000ffff; valaddr_reg:x3; val_offset:118488*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118488*0 + 3*328*FLEN/8, x4, x1, x2)

inst_39497:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000001ffff; valaddr_reg:x3; val_offset:118491*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118491*0 + 3*329*FLEN/8, x4, x1, x2)

inst_39498:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000003ffff; valaddr_reg:x3; val_offset:118494*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118494*0 + 3*330*FLEN/8, x4, x1, x2)

inst_39499:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000007ffff; valaddr_reg:x3; val_offset:118497*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118497*0 + 3*331*FLEN/8, x4, x1, x2)

inst_39500:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000000fffff; valaddr_reg:x3; val_offset:118500*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118500*0 + 3*332*FLEN/8, x4, x1, x2)

inst_39501:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000001fffff; valaddr_reg:x3; val_offset:118503*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118503*0 + 3*333*FLEN/8, x4, x1, x2)

inst_39502:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000003fffff; valaddr_reg:x3; val_offset:118506*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118506*0 + 3*334*FLEN/8, x4, x1, x2)

inst_39503:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000007fffff; valaddr_reg:x3; val_offset:118509*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118509*0 + 3*335*FLEN/8, x4, x1, x2)

inst_39504:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000000ffffff; valaddr_reg:x3; val_offset:118512*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118512*0 + 3*336*FLEN/8, x4, x1, x2)

inst_39505:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000001ffffff; valaddr_reg:x3; val_offset:118515*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118515*0 + 3*337*FLEN/8, x4, x1, x2)

inst_39506:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000003ffffff; valaddr_reg:x3; val_offset:118518*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118518*0 + 3*338*FLEN/8, x4, x1, x2)

inst_39507:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000007ffffff; valaddr_reg:x3; val_offset:118521*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118521*0 + 3*339*FLEN/8, x4, x1, x2)

inst_39508:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000000fffffff; valaddr_reg:x3; val_offset:118524*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118524*0 + 3*340*FLEN/8, x4, x1, x2)

inst_39509:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000001fffffff; valaddr_reg:x3; val_offset:118527*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118527*0 + 3*341*FLEN/8, x4, x1, x2)

inst_39510:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000003fffffff; valaddr_reg:x3; val_offset:118530*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118530*0 + 3*342*FLEN/8, x4, x1, x2)

inst_39511:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000007fffffff; valaddr_reg:x3; val_offset:118533*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118533*0 + 3*343*FLEN/8, x4, x1, x2)

inst_39512:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900000ffffffff; valaddr_reg:x3; val_offset:118536*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118536*0 + 3*344*FLEN/8, x4, x1, x2)

inst_39513:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900001ffffffff; valaddr_reg:x3; val_offset:118539*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118539*0 + 3*345*FLEN/8, x4, x1, x2)

inst_39514:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900003ffffffff; valaddr_reg:x3; val_offset:118542*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118542*0 + 3*346*FLEN/8, x4, x1, x2)

inst_39515:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900007ffffffff; valaddr_reg:x3; val_offset:118545*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118545*0 + 3*347*FLEN/8, x4, x1, x2)

inst_39516:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990000fffffffff; valaddr_reg:x3; val_offset:118548*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118548*0 + 3*348*FLEN/8, x4, x1, x2)

inst_39517:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990001fffffffff; valaddr_reg:x3; val_offset:118551*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118551*0 + 3*349*FLEN/8, x4, x1, x2)

inst_39518:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990003fffffffff; valaddr_reg:x3; val_offset:118554*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118554*0 + 3*350*FLEN/8, x4, x1, x2)

inst_39519:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990007fffffffff; valaddr_reg:x3; val_offset:118557*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118557*0 + 3*351*FLEN/8, x4, x1, x2)

inst_39520:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99000ffffffffff; valaddr_reg:x3; val_offset:118560*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118560*0 + 3*352*FLEN/8, x4, x1, x2)

inst_39521:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99001ffffffffff; valaddr_reg:x3; val_offset:118563*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118563*0 + 3*353*FLEN/8, x4, x1, x2)

inst_39522:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99003ffffffffff; valaddr_reg:x3; val_offset:118566*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118566*0 + 3*354*FLEN/8, x4, x1, x2)

inst_39523:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99007ffffffffff; valaddr_reg:x3; val_offset:118569*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118569*0 + 3*355*FLEN/8, x4, x1, x2)

inst_39524:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9900fffffffffff; valaddr_reg:x3; val_offset:118572*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118572*0 + 3*356*FLEN/8, x4, x1, x2)

inst_39525:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9901fffffffffff; valaddr_reg:x3; val_offset:118575*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118575*0 + 3*357*FLEN/8, x4, x1, x2)

inst_39526:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9903fffffffffff; valaddr_reg:x3; val_offset:118578*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118578*0 + 3*358*FLEN/8, x4, x1, x2)

inst_39527:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb9907fffffffffff; valaddr_reg:x3; val_offset:118581*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118581*0 + 3*359*FLEN/8, x4, x1, x2)

inst_39528:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb990ffffffffffff; valaddr_reg:x3; val_offset:118584*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118584*0 + 3*360*FLEN/8, x4, x1, x2)

inst_39529:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb991ffffffffffff; valaddr_reg:x3; val_offset:118587*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118587*0 + 3*361*FLEN/8, x4, x1, x2)

inst_39530:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb993ffffffffffff; valaddr_reg:x3; val_offset:118590*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118590*0 + 3*362*FLEN/8, x4, x1, x2)

inst_39531:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb997ffffffffffff; valaddr_reg:x3; val_offset:118593*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118593*0 + 3*363*FLEN/8, x4, x1, x2)

inst_39532:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb998000000000000; valaddr_reg:x3; val_offset:118596*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118596*0 + 3*364*FLEN/8, x4, x1, x2)

inst_39533:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99c000000000000; valaddr_reg:x3; val_offset:118599*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118599*0 + 3*365*FLEN/8, x4, x1, x2)

inst_39534:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99e000000000000; valaddr_reg:x3; val_offset:118602*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118602*0 + 3*366*FLEN/8, x4, x1, x2)

inst_39535:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99f000000000000; valaddr_reg:x3; val_offset:118605*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118605*0 + 3*367*FLEN/8, x4, x1, x2)

inst_39536:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99f800000000000; valaddr_reg:x3; val_offset:118608*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118608*0 + 3*368*FLEN/8, x4, x1, x2)

inst_39537:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fc00000000000; valaddr_reg:x3; val_offset:118611*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118611*0 + 3*369*FLEN/8, x4, x1, x2)

inst_39538:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fe00000000000; valaddr_reg:x3; val_offset:118614*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118614*0 + 3*370*FLEN/8, x4, x1, x2)

inst_39539:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ff00000000000; valaddr_reg:x3; val_offset:118617*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118617*0 + 3*371*FLEN/8, x4, x1, x2)

inst_39540:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ff80000000000; valaddr_reg:x3; val_offset:118620*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118620*0 + 3*372*FLEN/8, x4, x1, x2)

inst_39541:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffc0000000000; valaddr_reg:x3; val_offset:118623*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118623*0 + 3*373*FLEN/8, x4, x1, x2)

inst_39542:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffe0000000000; valaddr_reg:x3; val_offset:118626*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118626*0 + 3*374*FLEN/8, x4, x1, x2)

inst_39543:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fff0000000000; valaddr_reg:x3; val_offset:118629*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118629*0 + 3*375*FLEN/8, x4, x1, x2)

inst_39544:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fff8000000000; valaddr_reg:x3; val_offset:118632*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118632*0 + 3*376*FLEN/8, x4, x1, x2)

inst_39545:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffc000000000; valaddr_reg:x3; val_offset:118635*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118635*0 + 3*377*FLEN/8, x4, x1, x2)

inst_39546:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffe000000000; valaddr_reg:x3; val_offset:118638*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118638*0 + 3*378*FLEN/8, x4, x1, x2)

inst_39547:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffff000000000; valaddr_reg:x3; val_offset:118641*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118641*0 + 3*379*FLEN/8, x4, x1, x2)

inst_39548:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffff800000000; valaddr_reg:x3; val_offset:118644*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118644*0 + 3*380*FLEN/8, x4, x1, x2)

inst_39549:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffc00000000; valaddr_reg:x3; val_offset:118647*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118647*0 + 3*381*FLEN/8, x4, x1, x2)

inst_39550:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffe00000000; valaddr_reg:x3; val_offset:118650*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118650*0 + 3*382*FLEN/8, x4, x1, x2)

inst_39551:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffff00000000; valaddr_reg:x3; val_offset:118653*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118653*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_39552:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffff80000000; valaddr_reg:x3; val_offset:118656*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118656*0 + 3*384*FLEN/8, x4, x1, x2)

inst_39553:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffc0000000; valaddr_reg:x3; val_offset:118659*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118659*0 + 3*385*FLEN/8, x4, x1, x2)

inst_39554:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffe0000000; valaddr_reg:x3; val_offset:118662*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118662*0 + 3*386*FLEN/8, x4, x1, x2)

inst_39555:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffff0000000; valaddr_reg:x3; val_offset:118665*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118665*0 + 3*387*FLEN/8, x4, x1, x2)

inst_39556:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffff8000000; valaddr_reg:x3; val_offset:118668*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118668*0 + 3*388*FLEN/8, x4, x1, x2)

inst_39557:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffc000000; valaddr_reg:x3; val_offset:118671*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118671*0 + 3*389*FLEN/8, x4, x1, x2)

inst_39558:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffe000000; valaddr_reg:x3; val_offset:118674*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118674*0 + 3*390*FLEN/8, x4, x1, x2)

inst_39559:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffff000000; valaddr_reg:x3; val_offset:118677*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118677*0 + 3*391*FLEN/8, x4, x1, x2)

inst_39560:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffff800000; valaddr_reg:x3; val_offset:118680*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118680*0 + 3*392*FLEN/8, x4, x1, x2)

inst_39561:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffc00000; valaddr_reg:x3; val_offset:118683*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118683*0 + 3*393*FLEN/8, x4, x1, x2)

inst_39562:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffe00000; valaddr_reg:x3; val_offset:118686*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118686*0 + 3*394*FLEN/8, x4, x1, x2)

inst_39563:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffff00000; valaddr_reg:x3; val_offset:118689*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118689*0 + 3*395*FLEN/8, x4, x1, x2)

inst_39564:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffff80000; valaddr_reg:x3; val_offset:118692*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118692*0 + 3*396*FLEN/8, x4, x1, x2)

inst_39565:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffc0000; valaddr_reg:x3; val_offset:118695*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118695*0 + 3*397*FLEN/8, x4, x1, x2)

inst_39566:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffe0000; valaddr_reg:x3; val_offset:118698*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118698*0 + 3*398*FLEN/8, x4, x1, x2)

inst_39567:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffff0000; valaddr_reg:x3; val_offset:118701*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118701*0 + 3*399*FLEN/8, x4, x1, x2)

inst_39568:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffff8000; valaddr_reg:x3; val_offset:118704*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118704*0 + 3*400*FLEN/8, x4, x1, x2)

inst_39569:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffffc000; valaddr_reg:x3; val_offset:118707*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118707*0 + 3*401*FLEN/8, x4, x1, x2)

inst_39570:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffffe000; valaddr_reg:x3; val_offset:118710*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118710*0 + 3*402*FLEN/8, x4, x1, x2)

inst_39571:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffff000; valaddr_reg:x3; val_offset:118713*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118713*0 + 3*403*FLEN/8, x4, x1, x2)

inst_39572:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffff800; valaddr_reg:x3; val_offset:118716*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118716*0 + 3*404*FLEN/8, x4, x1, x2)

inst_39573:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffffc00; valaddr_reg:x3; val_offset:118719*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118719*0 + 3*405*FLEN/8, x4, x1, x2)

inst_39574:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffffe00; valaddr_reg:x3; val_offset:118722*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118722*0 + 3*406*FLEN/8, x4, x1, x2)

inst_39575:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffffff00; valaddr_reg:x3; val_offset:118725*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118725*0 + 3*407*FLEN/8, x4, x1, x2)

inst_39576:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffffff80; valaddr_reg:x3; val_offset:118728*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118728*0 + 3*408*FLEN/8, x4, x1, x2)

inst_39577:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffffffc0; valaddr_reg:x3; val_offset:118731*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118731*0 + 3*409*FLEN/8, x4, x1, x2)

inst_39578:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffffffe0; valaddr_reg:x3; val_offset:118734*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118734*0 + 3*410*FLEN/8, x4, x1, x2)

inst_39579:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffffff0; valaddr_reg:x3; val_offset:118737*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118737*0 + 3*411*FLEN/8, x4, x1, x2)

inst_39580:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffffff8; valaddr_reg:x3; val_offset:118740*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118740*0 + 3*412*FLEN/8, x4, x1, x2)

inst_39581:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffffffc; valaddr_reg:x3; val_offset:118743*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118743*0 + 3*413*FLEN/8, x4, x1, x2)

inst_39582:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99ffffffffffffe; valaddr_reg:x3; val_offset:118746*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118746*0 + 3*414*FLEN/8, x4, x1, x2)

inst_39583:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x399 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xb99fffffffffffff; valaddr_reg:x3; val_offset:118749*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118749*0 + 3*415*FLEN/8, x4, x1, x2)

inst_39584:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:118752*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118752*0 + 3*416*FLEN/8, x4, x1, x2)

inst_39585:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:118755*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118755*0 + 3*417*FLEN/8, x4, x1, x2)

inst_39586:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:118758*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118758*0 + 3*418*FLEN/8, x4, x1, x2)

inst_39587:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:118761*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118761*0 + 3*419*FLEN/8, x4, x1, x2)

inst_39588:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:118764*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118764*0 + 3*420*FLEN/8, x4, x1, x2)

inst_39589:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:118767*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118767*0 + 3*421*FLEN/8, x4, x1, x2)

inst_39590:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:118770*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118770*0 + 3*422*FLEN/8, x4, x1, x2)

inst_39591:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:118773*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118773*0 + 3*423*FLEN/8, x4, x1, x2)

inst_39592:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:118776*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118776*0 + 3*424*FLEN/8, x4, x1, x2)

inst_39593:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:118779*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118779*0 + 3*425*FLEN/8, x4, x1, x2)

inst_39594:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:118782*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118782*0 + 3*426*FLEN/8, x4, x1, x2)

inst_39595:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:118785*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118785*0 + 3*427*FLEN/8, x4, x1, x2)

inst_39596:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:118788*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118788*0 + 3*428*FLEN/8, x4, x1, x2)

inst_39597:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:118791*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118791*0 + 3*429*FLEN/8, x4, x1, x2)

inst_39598:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:118794*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118794*0 + 3*430*FLEN/8, x4, x1, x2)

inst_39599:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:118797*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118797*0 + 3*431*FLEN/8, x4, x1, x2)

inst_39600:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:118800*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118800*0 + 3*432*FLEN/8, x4, x1, x2)

inst_39601:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:118803*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118803*0 + 3*433*FLEN/8, x4, x1, x2)

inst_39602:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:118806*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118806*0 + 3*434*FLEN/8, x4, x1, x2)

inst_39603:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:118809*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118809*0 + 3*435*FLEN/8, x4, x1, x2)

inst_39604:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:118812*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118812*0 + 3*436*FLEN/8, x4, x1, x2)

inst_39605:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8095c6672ee3f and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x54d0670ba57f9 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98095c6672ee3f; op2val:0x9fd54d0670ba57f9;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:118815*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118815*0 + 3*437*FLEN/8, x4, x1, x2)

inst_39606:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000000000; valaddr_reg:x3; val_offset:118818*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118818*0 + 3*438*FLEN/8, x4, x1, x2)

inst_39607:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000000001; valaddr_reg:x3; val_offset:118821*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118821*0 + 3*439*FLEN/8, x4, x1, x2)

inst_39608:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000000003; valaddr_reg:x3; val_offset:118824*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118824*0 + 3*440*FLEN/8, x4, x1, x2)

inst_39609:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000000007; valaddr_reg:x3; val_offset:118827*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118827*0 + 3*441*FLEN/8, x4, x1, x2)

inst_39610:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000000000f; valaddr_reg:x3; val_offset:118830*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118830*0 + 3*442*FLEN/8, x4, x1, x2)

inst_39611:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000000001f; valaddr_reg:x3; val_offset:118833*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118833*0 + 3*443*FLEN/8, x4, x1, x2)

inst_39612:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000000003f; valaddr_reg:x3; val_offset:118836*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118836*0 + 3*444*FLEN/8, x4, x1, x2)

inst_39613:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000000007f; valaddr_reg:x3; val_offset:118839*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118839*0 + 3*445*FLEN/8, x4, x1, x2)

inst_39614:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000000000ff; valaddr_reg:x3; val_offset:118842*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118842*0 + 3*446*FLEN/8, x4, x1, x2)

inst_39615:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000000001ff; valaddr_reg:x3; val_offset:118845*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118845*0 + 3*447*FLEN/8, x4, x1, x2)

inst_39616:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000000003ff; valaddr_reg:x3; val_offset:118848*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118848*0 + 3*448*FLEN/8, x4, x1, x2)

inst_39617:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000000007ff; valaddr_reg:x3; val_offset:118851*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118851*0 + 3*449*FLEN/8, x4, x1, x2)

inst_39618:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000000fff; valaddr_reg:x3; val_offset:118854*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118854*0 + 3*450*FLEN/8, x4, x1, x2)

inst_39619:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000001fff; valaddr_reg:x3; val_offset:118857*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118857*0 + 3*451*FLEN/8, x4, x1, x2)

inst_39620:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000003fff; valaddr_reg:x3; val_offset:118860*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118860*0 + 3*452*FLEN/8, x4, x1, x2)

inst_39621:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000007fff; valaddr_reg:x3; val_offset:118863*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118863*0 + 3*453*FLEN/8, x4, x1, x2)

inst_39622:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000000ffff; valaddr_reg:x3; val_offset:118866*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118866*0 + 3*454*FLEN/8, x4, x1, x2)

inst_39623:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000001ffff; valaddr_reg:x3; val_offset:118869*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118869*0 + 3*455*FLEN/8, x4, x1, x2)

inst_39624:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000003ffff; valaddr_reg:x3; val_offset:118872*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118872*0 + 3*456*FLEN/8, x4, x1, x2)

inst_39625:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000007ffff; valaddr_reg:x3; val_offset:118875*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118875*0 + 3*457*FLEN/8, x4, x1, x2)

inst_39626:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000000fffff; valaddr_reg:x3; val_offset:118878*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118878*0 + 3*458*FLEN/8, x4, x1, x2)

inst_39627:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000001fffff; valaddr_reg:x3; val_offset:118881*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118881*0 + 3*459*FLEN/8, x4, x1, x2)

inst_39628:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000003fffff; valaddr_reg:x3; val_offset:118884*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118884*0 + 3*460*FLEN/8, x4, x1, x2)

inst_39629:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000007fffff; valaddr_reg:x3; val_offset:118887*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118887*0 + 3*461*FLEN/8, x4, x1, x2)

inst_39630:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000000ffffff; valaddr_reg:x3; val_offset:118890*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118890*0 + 3*462*FLEN/8, x4, x1, x2)

inst_39631:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000001ffffff; valaddr_reg:x3; val_offset:118893*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118893*0 + 3*463*FLEN/8, x4, x1, x2)

inst_39632:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000003ffffff; valaddr_reg:x3; val_offset:118896*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118896*0 + 3*464*FLEN/8, x4, x1, x2)

inst_39633:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000007ffffff; valaddr_reg:x3; val_offset:118899*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118899*0 + 3*465*FLEN/8, x4, x1, x2)

inst_39634:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000000fffffff; valaddr_reg:x3; val_offset:118902*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118902*0 + 3*466*FLEN/8, x4, x1, x2)

inst_39635:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000001fffffff; valaddr_reg:x3; val_offset:118905*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118905*0 + 3*467*FLEN/8, x4, x1, x2)

inst_39636:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000003fffffff; valaddr_reg:x3; val_offset:118908*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118908*0 + 3*468*FLEN/8, x4, x1, x2)

inst_39637:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000007fffffff; valaddr_reg:x3; val_offset:118911*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118911*0 + 3*469*FLEN/8, x4, x1, x2)

inst_39638:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00000ffffffff; valaddr_reg:x3; val_offset:118914*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118914*0 + 3*470*FLEN/8, x4, x1, x2)

inst_39639:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00001ffffffff; valaddr_reg:x3; val_offset:118917*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118917*0 + 3*471*FLEN/8, x4, x1, x2)

inst_39640:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00003ffffffff; valaddr_reg:x3; val_offset:118920*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118920*0 + 3*472*FLEN/8, x4, x1, x2)

inst_39641:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00007ffffffff; valaddr_reg:x3; val_offset:118923*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118923*0 + 3*473*FLEN/8, x4, x1, x2)

inst_39642:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0000fffffffff; valaddr_reg:x3; val_offset:118926*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118926*0 + 3*474*FLEN/8, x4, x1, x2)

inst_39643:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0001fffffffff; valaddr_reg:x3; val_offset:118929*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118929*0 + 3*475*FLEN/8, x4, x1, x2)

inst_39644:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0003fffffffff; valaddr_reg:x3; val_offset:118932*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118932*0 + 3*476*FLEN/8, x4, x1, x2)

inst_39645:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0007fffffffff; valaddr_reg:x3; val_offset:118935*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118935*0 + 3*477*FLEN/8, x4, x1, x2)

inst_39646:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd000ffffffffff; valaddr_reg:x3; val_offset:118938*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118938*0 + 3*478*FLEN/8, x4, x1, x2)

inst_39647:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd001ffffffffff; valaddr_reg:x3; val_offset:118941*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118941*0 + 3*479*FLEN/8, x4, x1, x2)

inst_39648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd003ffffffffff; valaddr_reg:x3; val_offset:118944*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118944*0 + 3*480*FLEN/8, x4, x1, x2)

inst_39649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd007ffffffffff; valaddr_reg:x3; val_offset:118947*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118947*0 + 3*481*FLEN/8, x4, x1, x2)

inst_39650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd00fffffffffff; valaddr_reg:x3; val_offset:118950*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118950*0 + 3*482*FLEN/8, x4, x1, x2)

inst_39651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd01fffffffffff; valaddr_reg:x3; val_offset:118953*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118953*0 + 3*483*FLEN/8, x4, x1, x2)

inst_39652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd03fffffffffff; valaddr_reg:x3; val_offset:118956*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118956*0 + 3*484*FLEN/8, x4, x1, x2)

inst_39653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd07fffffffffff; valaddr_reg:x3; val_offset:118959*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118959*0 + 3*485*FLEN/8, x4, x1, x2)

inst_39654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd0ffffffffffff; valaddr_reg:x3; val_offset:118962*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118962*0 + 3*486*FLEN/8, x4, x1, x2)

inst_39655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd1ffffffffffff; valaddr_reg:x3; val_offset:118965*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118965*0 + 3*487*FLEN/8, x4, x1, x2)

inst_39656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd3ffffffffffff; valaddr_reg:x3; val_offset:118968*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118968*0 + 3*488*FLEN/8, x4, x1, x2)

inst_39657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd7ffffffffffff; valaddr_reg:x3; val_offset:118971*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118971*0 + 3*489*FLEN/8, x4, x1, x2)

inst_39658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fd8000000000000; valaddr_reg:x3; val_offset:118974*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118974*0 + 3*490*FLEN/8, x4, x1, x2)

inst_39659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdc000000000000; valaddr_reg:x3; val_offset:118977*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118977*0 + 3*491*FLEN/8, x4, x1, x2)

inst_39660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fde000000000000; valaddr_reg:x3; val_offset:118980*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118980*0 + 3*492*FLEN/8, x4, x1, x2)

inst_39661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdf000000000000; valaddr_reg:x3; val_offset:118983*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118983*0 + 3*493*FLEN/8, x4, x1, x2)

inst_39662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdf800000000000; valaddr_reg:x3; val_offset:118986*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118986*0 + 3*494*FLEN/8, x4, x1, x2)

inst_39663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfc00000000000; valaddr_reg:x3; val_offset:118989*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118989*0 + 3*495*FLEN/8, x4, x1, x2)

inst_39664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfe00000000000; valaddr_reg:x3; val_offset:118992*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118992*0 + 3*496*FLEN/8, x4, x1, x2)

inst_39665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdff00000000000; valaddr_reg:x3; val_offset:118995*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118995*0 + 3*497*FLEN/8, x4, x1, x2)

inst_39666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdff80000000000; valaddr_reg:x3; val_offset:118998*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 118998*0 + 3*498*FLEN/8, x4, x1, x2)

inst_39667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffc0000000000; valaddr_reg:x3; val_offset:119001*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119001*0 + 3*499*FLEN/8, x4, x1, x2)

inst_39668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffe0000000000; valaddr_reg:x3; val_offset:119004*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119004*0 + 3*500*FLEN/8, x4, x1, x2)

inst_39669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfff0000000000; valaddr_reg:x3; val_offset:119007*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119007*0 + 3*501*FLEN/8, x4, x1, x2)

inst_39670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfff8000000000; valaddr_reg:x3; val_offset:119010*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119010*0 + 3*502*FLEN/8, x4, x1, x2)

inst_39671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffc000000000; valaddr_reg:x3; val_offset:119013*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119013*0 + 3*503*FLEN/8, x4, x1, x2)

inst_39672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffe000000000; valaddr_reg:x3; val_offset:119016*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119016*0 + 3*504*FLEN/8, x4, x1, x2)

inst_39673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffff000000000; valaddr_reg:x3; val_offset:119019*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119019*0 + 3*505*FLEN/8, x4, x1, x2)

inst_39674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffff800000000; valaddr_reg:x3; val_offset:119022*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119022*0 + 3*506*FLEN/8, x4, x1, x2)

inst_39675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffc00000000; valaddr_reg:x3; val_offset:119025*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119025*0 + 3*507*FLEN/8, x4, x1, x2)

inst_39676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffe00000000; valaddr_reg:x3; val_offset:119028*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119028*0 + 3*508*FLEN/8, x4, x1, x2)

inst_39677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffff00000000; valaddr_reg:x3; val_offset:119031*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119031*0 + 3*509*FLEN/8, x4, x1, x2)

inst_39678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffff80000000; valaddr_reg:x3; val_offset:119034*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119034*0 + 3*510*FLEN/8, x4, x1, x2)

inst_39679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffc0000000; valaddr_reg:x3; val_offset:119037*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119037*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_39680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffe0000000; valaddr_reg:x3; val_offset:119040*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119040*0 + 3*512*FLEN/8, x4, x1, x2)

inst_39681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffff0000000; valaddr_reg:x3; val_offset:119043*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119043*0 + 3*513*FLEN/8, x4, x1, x2)

inst_39682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffff8000000; valaddr_reg:x3; val_offset:119046*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119046*0 + 3*514*FLEN/8, x4, x1, x2)

inst_39683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffc000000; valaddr_reg:x3; val_offset:119049*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119049*0 + 3*515*FLEN/8, x4, x1, x2)

inst_39684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffe000000; valaddr_reg:x3; val_offset:119052*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119052*0 + 3*516*FLEN/8, x4, x1, x2)

inst_39685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffff000000; valaddr_reg:x3; val_offset:119055*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119055*0 + 3*517*FLEN/8, x4, x1, x2)

inst_39686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffff800000; valaddr_reg:x3; val_offset:119058*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119058*0 + 3*518*FLEN/8, x4, x1, x2)

inst_39687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffc00000; valaddr_reg:x3; val_offset:119061*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119061*0 + 3*519*FLEN/8, x4, x1, x2)

inst_39688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffe00000; valaddr_reg:x3; val_offset:119064*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119064*0 + 3*520*FLEN/8, x4, x1, x2)

inst_39689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffff00000; valaddr_reg:x3; val_offset:119067*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119067*0 + 3*521*FLEN/8, x4, x1, x2)

inst_39690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffff80000; valaddr_reg:x3; val_offset:119070*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119070*0 + 3*522*FLEN/8, x4, x1, x2)

inst_39691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffc0000; valaddr_reg:x3; val_offset:119073*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119073*0 + 3*523*FLEN/8, x4, x1, x2)

inst_39692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffe0000; valaddr_reg:x3; val_offset:119076*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119076*0 + 3*524*FLEN/8, x4, x1, x2)

inst_39693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffff0000; valaddr_reg:x3; val_offset:119079*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119079*0 + 3*525*FLEN/8, x4, x1, x2)

inst_39694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffff8000; valaddr_reg:x3; val_offset:119082*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119082*0 + 3*526*FLEN/8, x4, x1, x2)

inst_39695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffffc000; valaddr_reg:x3; val_offset:119085*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119085*0 + 3*527*FLEN/8, x4, x1, x2)

inst_39696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffffe000; valaddr_reg:x3; val_offset:119088*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119088*0 + 3*528*FLEN/8, x4, x1, x2)

inst_39697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffff000; valaddr_reg:x3; val_offset:119091*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119091*0 + 3*529*FLEN/8, x4, x1, x2)

inst_39698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffff800; valaddr_reg:x3; val_offset:119094*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119094*0 + 3*530*FLEN/8, x4, x1, x2)

inst_39699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffffc00; valaddr_reg:x3; val_offset:119097*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119097*0 + 3*531*FLEN/8, x4, x1, x2)

inst_39700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffffe00; valaddr_reg:x3; val_offset:119100*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119100*0 + 3*532*FLEN/8, x4, x1, x2)

inst_39701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffffff00; valaddr_reg:x3; val_offset:119103*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119103*0 + 3*533*FLEN/8, x4, x1, x2)

inst_39702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffffff80; valaddr_reg:x3; val_offset:119106*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119106*0 + 3*534*FLEN/8, x4, x1, x2)

inst_39703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffffffc0; valaddr_reg:x3; val_offset:119109*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119109*0 + 3*535*FLEN/8, x4, x1, x2)

inst_39704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffffffe0; valaddr_reg:x3; val_offset:119112*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119112*0 + 3*536*FLEN/8, x4, x1, x2)

inst_39705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffffff0; valaddr_reg:x3; val_offset:119115*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119115*0 + 3*537*FLEN/8, x4, x1, x2)

inst_39706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffffff8; valaddr_reg:x3; val_offset:119118*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119118*0 + 3*538*FLEN/8, x4, x1, x2)

inst_39707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffffffc; valaddr_reg:x3; val_offset:119121*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119121*0 + 3*539*FLEN/8, x4, x1, x2)

inst_39708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdffffffffffffe; valaddr_reg:x3; val_offset:119124*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119124*0 + 3*540*FLEN/8, x4, x1, x2)

inst_39709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3fd and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fdfffffffffffff; valaddr_reg:x3; val_offset:119127*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119127*0 + 3*541*FLEN/8, x4, x1, x2)

inst_39710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:119130*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119130*0 + 3*542*FLEN/8, x4, x1, x2)

inst_39711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:119133*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119133*0 + 3*543*FLEN/8, x4, x1, x2)

inst_39712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:119136*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119136*0 + 3*544*FLEN/8, x4, x1, x2)

inst_39713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:119139*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119139*0 + 3*545*FLEN/8, x4, x1, x2)

inst_39714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:119142*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119142*0 + 3*546*FLEN/8, x4, x1, x2)

inst_39715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:119145*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119145*0 + 3*547*FLEN/8, x4, x1, x2)

inst_39716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:119148*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119148*0 + 3*548*FLEN/8, x4, x1, x2)

inst_39717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:119151*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119151*0 + 3*549*FLEN/8, x4, x1, x2)

inst_39718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:119154*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119154*0 + 3*550*FLEN/8, x4, x1, x2)

inst_39719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:119157*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119157*0 + 3*551*FLEN/8, x4, x1, x2)

inst_39720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:119160*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119160*0 + 3*552*FLEN/8, x4, x1, x2)

inst_39721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:119163*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119163*0 + 3*553*FLEN/8, x4, x1, x2)

inst_39722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:119166*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119166*0 + 3*554*FLEN/8, x4, x1, x2)

inst_39723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:119169*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119169*0 + 3*555*FLEN/8, x4, x1, x2)

inst_39724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:119172*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119172*0 + 3*556*FLEN/8, x4, x1, x2)

inst_39725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:119175*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119175*0 + 3*557*FLEN/8, x4, x1, x2)

inst_39726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:119178*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119178*0 + 3*558*FLEN/8, x4, x1, x2)

inst_39727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:119181*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119181*0 + 3*559*FLEN/8, x4, x1, x2)

inst_39728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:119184*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119184*0 + 3*560*FLEN/8, x4, x1, x2)

inst_39729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:119187*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119187*0 + 3*561*FLEN/8, x4, x1, x2)

inst_39730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:119190*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119190*0 + 3*562*FLEN/8, x4, x1, x2)

inst_39731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x8097c2cb26ed9 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x54cea4869ad38 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f98097c2cb26ed9; op2val:0x20454cea4869ad38;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:119193*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119193*0 + 3*563*FLEN/8, x4, x1, x2)

inst_39732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:119196*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119196*0 + 3*564*FLEN/8, x4, x1, x2)

inst_39733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:119199*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119199*0 + 3*565*FLEN/8, x4, x1, x2)

inst_39734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:119202*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119202*0 + 3*566*FLEN/8, x4, x1, x2)

inst_39735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:119205*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119205*0 + 3*567*FLEN/8, x4, x1, x2)

inst_39736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:119208*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119208*0 + 3*568*FLEN/8, x4, x1, x2)

inst_39737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:119211*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119211*0 + 3*569*FLEN/8, x4, x1, x2)

inst_39738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:119214*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119214*0 + 3*570*FLEN/8, x4, x1, x2)

inst_39739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:119217*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119217*0 + 3*571*FLEN/8, x4, x1, x2)

inst_39740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:119220*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119220*0 + 3*572*FLEN/8, x4, x1, x2)

inst_39741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:119223*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119223*0 + 3*573*FLEN/8, x4, x1, x2)

inst_39742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:119226*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119226*0 + 3*574*FLEN/8, x4, x1, x2)

inst_39743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:119229*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119229*0 + 3*575*FLEN/8, x4, x1, x2)

inst_39744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:119232*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119232*0 + 3*576*FLEN/8, x4, x1, x2)

inst_39745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:119235*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119235*0 + 3*577*FLEN/8, x4, x1, x2)

inst_39746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:119238*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119238*0 + 3*578*FLEN/8, x4, x1, x2)

inst_39747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:119241*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119241*0 + 3*579*FLEN/8, x4, x1, x2)

inst_39748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:119244*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119244*0 + 3*580*FLEN/8, x4, x1, x2)

inst_39749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:119247*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119247*0 + 3*581*FLEN/8, x4, x1, x2)

inst_39750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:119250*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119250*0 + 3*582*FLEN/8, x4, x1, x2)

inst_39751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:119253*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119253*0 + 3*583*FLEN/8, x4, x1, x2)

inst_39752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:119256*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119256*0 + 3*584*FLEN/8, x4, x1, x2)

inst_39753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:119259*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119259*0 + 3*585*FLEN/8, x4, x1, x2)

inst_39754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000000000; valaddr_reg:x3; val_offset:119262*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119262*0 + 3*586*FLEN/8, x4, x1, x2)

inst_39755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000000001; valaddr_reg:x3; val_offset:119265*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119265*0 + 3*587*FLEN/8, x4, x1, x2)

inst_39756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000000003; valaddr_reg:x3; val_offset:119268*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119268*0 + 3*588*FLEN/8, x4, x1, x2)

inst_39757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000000007; valaddr_reg:x3; val_offset:119271*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119271*0 + 3*589*FLEN/8, x4, x1, x2)

inst_39758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000000000f; valaddr_reg:x3; val_offset:119274*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119274*0 + 3*590*FLEN/8, x4, x1, x2)

inst_39759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000000001f; valaddr_reg:x3; val_offset:119277*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119277*0 + 3*591*FLEN/8, x4, x1, x2)

inst_39760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000000003f; valaddr_reg:x3; val_offset:119280*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119280*0 + 3*592*FLEN/8, x4, x1, x2)

inst_39761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000000007f; valaddr_reg:x3; val_offset:119283*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119283*0 + 3*593*FLEN/8, x4, x1, x2)

inst_39762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000000000ff; valaddr_reg:x3; val_offset:119286*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119286*0 + 3*594*FLEN/8, x4, x1, x2)

inst_39763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000000001ff; valaddr_reg:x3; val_offset:119289*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119289*0 + 3*595*FLEN/8, x4, x1, x2)

inst_39764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000000003ff; valaddr_reg:x3; val_offset:119292*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119292*0 + 3*596*FLEN/8, x4, x1, x2)

inst_39765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000000007ff; valaddr_reg:x3; val_offset:119295*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119295*0 + 3*597*FLEN/8, x4, x1, x2)

inst_39766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000000fff; valaddr_reg:x3; val_offset:119298*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119298*0 + 3*598*FLEN/8, x4, x1, x2)

inst_39767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000001fff; valaddr_reg:x3; val_offset:119301*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119301*0 + 3*599*FLEN/8, x4, x1, x2)

inst_39768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000003fff; valaddr_reg:x3; val_offset:119304*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119304*0 + 3*600*FLEN/8, x4, x1, x2)

inst_39769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000007fff; valaddr_reg:x3; val_offset:119307*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119307*0 + 3*601*FLEN/8, x4, x1, x2)

inst_39770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000000ffff; valaddr_reg:x3; val_offset:119310*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119310*0 + 3*602*FLEN/8, x4, x1, x2)

inst_39771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000001ffff; valaddr_reg:x3; val_offset:119313*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119313*0 + 3*603*FLEN/8, x4, x1, x2)

inst_39772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000003ffff; valaddr_reg:x3; val_offset:119316*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119316*0 + 3*604*FLEN/8, x4, x1, x2)

inst_39773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000007ffff; valaddr_reg:x3; val_offset:119319*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119319*0 + 3*605*FLEN/8, x4, x1, x2)

inst_39774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000000fffff; valaddr_reg:x3; val_offset:119322*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119322*0 + 3*606*FLEN/8, x4, x1, x2)

inst_39775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000001fffff; valaddr_reg:x3; val_offset:119325*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119325*0 + 3*607*FLEN/8, x4, x1, x2)

inst_39776:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000003fffff; valaddr_reg:x3; val_offset:119328*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119328*0 + 3*608*FLEN/8, x4, x1, x2)

inst_39777:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000007fffff; valaddr_reg:x3; val_offset:119331*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119331*0 + 3*609*FLEN/8, x4, x1, x2)

inst_39778:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000000ffffff; valaddr_reg:x3; val_offset:119334*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119334*0 + 3*610*FLEN/8, x4, x1, x2)

inst_39779:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000001ffffff; valaddr_reg:x3; val_offset:119337*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119337*0 + 3*611*FLEN/8, x4, x1, x2)

inst_39780:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000003ffffff; valaddr_reg:x3; val_offset:119340*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119340*0 + 3*612*FLEN/8, x4, x1, x2)

inst_39781:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000007ffffff; valaddr_reg:x3; val_offset:119343*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119343*0 + 3*613*FLEN/8, x4, x1, x2)

inst_39782:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000000fffffff; valaddr_reg:x3; val_offset:119346*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119346*0 + 3*614*FLEN/8, x4, x1, x2)

inst_39783:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000001fffffff; valaddr_reg:x3; val_offset:119349*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119349*0 + 3*615*FLEN/8, x4, x1, x2)

inst_39784:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000003fffffff; valaddr_reg:x3; val_offset:119352*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119352*0 + 3*616*FLEN/8, x4, x1, x2)

inst_39785:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000007fffffff; valaddr_reg:x3; val_offset:119355*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119355*0 + 3*617*FLEN/8, x4, x1, x2)

inst_39786:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00000ffffffff; valaddr_reg:x3; val_offset:119358*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119358*0 + 3*618*FLEN/8, x4, x1, x2)

inst_39787:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00001ffffffff; valaddr_reg:x3; val_offset:119361*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119361*0 + 3*619*FLEN/8, x4, x1, x2)

inst_39788:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00003ffffffff; valaddr_reg:x3; val_offset:119364*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119364*0 + 3*620*FLEN/8, x4, x1, x2)

inst_39789:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00007ffffffff; valaddr_reg:x3; val_offset:119367*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119367*0 + 3*621*FLEN/8, x4, x1, x2)

inst_39790:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0000fffffffff; valaddr_reg:x3; val_offset:119370*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119370*0 + 3*622*FLEN/8, x4, x1, x2)

inst_39791:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0001fffffffff; valaddr_reg:x3; val_offset:119373*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119373*0 + 3*623*FLEN/8, x4, x1, x2)

inst_39792:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0003fffffffff; valaddr_reg:x3; val_offset:119376*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119376*0 + 3*624*FLEN/8, x4, x1, x2)

inst_39793:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0007fffffffff; valaddr_reg:x3; val_offset:119379*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119379*0 + 3*625*FLEN/8, x4, x1, x2)

inst_39794:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf000ffffffffff; valaddr_reg:x3; val_offset:119382*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119382*0 + 3*626*FLEN/8, x4, x1, x2)

inst_39795:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf001ffffffffff; valaddr_reg:x3; val_offset:119385*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119385*0 + 3*627*FLEN/8, x4, x1, x2)

inst_39796:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf003ffffffffff; valaddr_reg:x3; val_offset:119388*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119388*0 + 3*628*FLEN/8, x4, x1, x2)

inst_39797:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf007ffffffffff; valaddr_reg:x3; val_offset:119391*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119391*0 + 3*629*FLEN/8, x4, x1, x2)

inst_39798:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf00fffffffffff; valaddr_reg:x3; val_offset:119394*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119394*0 + 3*630*FLEN/8, x4, x1, x2)

inst_39799:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf01fffffffffff; valaddr_reg:x3; val_offset:119397*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119397*0 + 3*631*FLEN/8, x4, x1, x2)

inst_39800:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf03fffffffffff; valaddr_reg:x3; val_offset:119400*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119400*0 + 3*632*FLEN/8, x4, x1, x2)

inst_39801:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf07fffffffffff; valaddr_reg:x3; val_offset:119403*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119403*0 + 3*633*FLEN/8, x4, x1, x2)

inst_39802:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf0ffffffffffff; valaddr_reg:x3; val_offset:119406*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119406*0 + 3*634*FLEN/8, x4, x1, x2)

inst_39803:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf1ffffffffffff; valaddr_reg:x3; val_offset:119409*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119409*0 + 3*635*FLEN/8, x4, x1, x2)

inst_39804:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf3ffffffffffff; valaddr_reg:x3; val_offset:119412*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119412*0 + 3*636*FLEN/8, x4, x1, x2)

inst_39805:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf7ffffffffffff; valaddr_reg:x3; val_offset:119415*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119415*0 + 3*637*FLEN/8, x4, x1, x2)

inst_39806:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xf8000000000000; valaddr_reg:x3; val_offset:119418*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119418*0 + 3*638*FLEN/8, x4, x1, x2)

inst_39807:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfc000000000000; valaddr_reg:x3; val_offset:119421*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119421*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_39808:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfe000000000000; valaddr_reg:x3; val_offset:119424*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119424*0 + 3*640*FLEN/8, x4, x1, x2)

inst_39809:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xff000000000000; valaddr_reg:x3; val_offset:119427*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119427*0 + 3*641*FLEN/8, x4, x1, x2)

inst_39810:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xff800000000000; valaddr_reg:x3; val_offset:119430*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119430*0 + 3*642*FLEN/8, x4, x1, x2)

inst_39811:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffc00000000000; valaddr_reg:x3; val_offset:119433*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119433*0 + 3*643*FLEN/8, x4, x1, x2)

inst_39812:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffe00000000000; valaddr_reg:x3; val_offset:119436*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119436*0 + 3*644*FLEN/8, x4, x1, x2)

inst_39813:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfff00000000000; valaddr_reg:x3; val_offset:119439*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119439*0 + 3*645*FLEN/8, x4, x1, x2)

inst_39814:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfff80000000000; valaddr_reg:x3; val_offset:119442*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119442*0 + 3*646*FLEN/8, x4, x1, x2)

inst_39815:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffc0000000000; valaddr_reg:x3; val_offset:119445*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119445*0 + 3*647*FLEN/8, x4, x1, x2)

inst_39816:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffe0000000000; valaddr_reg:x3; val_offset:119448*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119448*0 + 3*648*FLEN/8, x4, x1, x2)

inst_39817:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffff0000000000; valaddr_reg:x3; val_offset:119451*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119451*0 + 3*649*FLEN/8, x4, x1, x2)

inst_39818:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffff8000000000; valaddr_reg:x3; val_offset:119454*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119454*0 + 3*650*FLEN/8, x4, x1, x2)

inst_39819:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffc000000000; valaddr_reg:x3; val_offset:119457*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119457*0 + 3*651*FLEN/8, x4, x1, x2)

inst_39820:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffe000000000; valaddr_reg:x3; val_offset:119460*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119460*0 + 3*652*FLEN/8, x4, x1, x2)

inst_39821:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffff000000000; valaddr_reg:x3; val_offset:119463*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119463*0 + 3*653*FLEN/8, x4, x1, x2)

inst_39822:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffff800000000; valaddr_reg:x3; val_offset:119466*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119466*0 + 3*654*FLEN/8, x4, x1, x2)

inst_39823:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffc00000000; valaddr_reg:x3; val_offset:119469*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119469*0 + 3*655*FLEN/8, x4, x1, x2)

inst_39824:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffe00000000; valaddr_reg:x3; val_offset:119472*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119472*0 + 3*656*FLEN/8, x4, x1, x2)

inst_39825:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffff00000000; valaddr_reg:x3; val_offset:119475*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119475*0 + 3*657*FLEN/8, x4, x1, x2)

inst_39826:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffff80000000; valaddr_reg:x3; val_offset:119478*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119478*0 + 3*658*FLEN/8, x4, x1, x2)

inst_39827:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffc0000000; valaddr_reg:x3; val_offset:119481*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119481*0 + 3*659*FLEN/8, x4, x1, x2)

inst_39828:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffe0000000; valaddr_reg:x3; val_offset:119484*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119484*0 + 3*660*FLEN/8, x4, x1, x2)

inst_39829:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffff0000000; valaddr_reg:x3; val_offset:119487*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119487*0 + 3*661*FLEN/8, x4, x1, x2)

inst_39830:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffff8000000; valaddr_reg:x3; val_offset:119490*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119490*0 + 3*662*FLEN/8, x4, x1, x2)

inst_39831:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffc000000; valaddr_reg:x3; val_offset:119493*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119493*0 + 3*663*FLEN/8, x4, x1, x2)

inst_39832:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffe000000; valaddr_reg:x3; val_offset:119496*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119496*0 + 3*664*FLEN/8, x4, x1, x2)

inst_39833:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffff000000; valaddr_reg:x3; val_offset:119499*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119499*0 + 3*665*FLEN/8, x4, x1, x2)

inst_39834:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffff800000; valaddr_reg:x3; val_offset:119502*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119502*0 + 3*666*FLEN/8, x4, x1, x2)

inst_39835:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffc00000; valaddr_reg:x3; val_offset:119505*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119505*0 + 3*667*FLEN/8, x4, x1, x2)

inst_39836:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffe00000; valaddr_reg:x3; val_offset:119508*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119508*0 + 3*668*FLEN/8, x4, x1, x2)

inst_39837:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffff00000; valaddr_reg:x3; val_offset:119511*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119511*0 + 3*669*FLEN/8, x4, x1, x2)

inst_39838:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffff80000; valaddr_reg:x3; val_offset:119514*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119514*0 + 3*670*FLEN/8, x4, x1, x2)

inst_39839:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffc0000; valaddr_reg:x3; val_offset:119517*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119517*0 + 3*671*FLEN/8, x4, x1, x2)

inst_39840:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffe0000; valaddr_reg:x3; val_offset:119520*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119520*0 + 3*672*FLEN/8, x4, x1, x2)

inst_39841:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffff0000; valaddr_reg:x3; val_offset:119523*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119523*0 + 3*673*FLEN/8, x4, x1, x2)

inst_39842:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffff8000; valaddr_reg:x3; val_offset:119526*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119526*0 + 3*674*FLEN/8, x4, x1, x2)

inst_39843:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffc000; valaddr_reg:x3; val_offset:119529*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119529*0 + 3*675*FLEN/8, x4, x1, x2)

inst_39844:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffe000; valaddr_reg:x3; val_offset:119532*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119532*0 + 3*676*FLEN/8, x4, x1, x2)

inst_39845:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffff000; valaddr_reg:x3; val_offset:119535*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119535*0 + 3*677*FLEN/8, x4, x1, x2)

inst_39846:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffff800; valaddr_reg:x3; val_offset:119538*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119538*0 + 3*678*FLEN/8, x4, x1, x2)

inst_39847:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffffc00; valaddr_reg:x3; val_offset:119541*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119541*0 + 3*679*FLEN/8, x4, x1, x2)

inst_39848:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffffe00; valaddr_reg:x3; val_offset:119544*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119544*0 + 3*680*FLEN/8, x4, x1, x2)

inst_39849:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffff00; valaddr_reg:x3; val_offset:119547*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119547*0 + 3*681*FLEN/8, x4, x1, x2)

inst_39850:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffff80; valaddr_reg:x3; val_offset:119550*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119550*0 + 3*682*FLEN/8, x4, x1, x2)

inst_39851:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffffc0; valaddr_reg:x3; val_offset:119553*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119553*0 + 3*683*FLEN/8, x4, x1, x2)

inst_39852:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffffe0; valaddr_reg:x3; val_offset:119556*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119556*0 + 3*684*FLEN/8, x4, x1, x2)

inst_39853:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffffff0; valaddr_reg:x3; val_offset:119559*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119559*0 + 3*685*FLEN/8, x4, x1, x2)

inst_39854:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffffff8; valaddr_reg:x3; val_offset:119562*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119562*0 + 3*686*FLEN/8, x4, x1, x2)

inst_39855:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffffffc; valaddr_reg:x3; val_offset:119565*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119565*0 + 3*687*FLEN/8, x4, x1, x2)

inst_39856:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xfffffffffffffe; valaddr_reg:x3; val_offset:119568*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119568*0 + 3*688*FLEN/8, x4, x1, x2)

inst_39857:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x817753344ddd1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9817753344ddd1; op2val:0x0;
op3val:0xffffffffffffff; valaddr_reg:x3; val_offset:119571*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119571*0 + 3*689*FLEN/8, x4, x1, x2)

inst_39858:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000000000; valaddr_reg:x3; val_offset:119574*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119574*0 + 3*690*FLEN/8, x4, x1, x2)

inst_39859:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000000001; valaddr_reg:x3; val_offset:119577*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119577*0 + 3*691*FLEN/8, x4, x1, x2)

inst_39860:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000000003; valaddr_reg:x3; val_offset:119580*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119580*0 + 3*692*FLEN/8, x4, x1, x2)

inst_39861:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000000007; valaddr_reg:x3; val_offset:119583*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119583*0 + 3*693*FLEN/8, x4, x1, x2)

inst_39862:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000000000f; valaddr_reg:x3; val_offset:119586*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119586*0 + 3*694*FLEN/8, x4, x1, x2)

inst_39863:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000000001f; valaddr_reg:x3; val_offset:119589*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119589*0 + 3*695*FLEN/8, x4, x1, x2)

inst_39864:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000000003f; valaddr_reg:x3; val_offset:119592*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119592*0 + 3*696*FLEN/8, x4, x1, x2)

inst_39865:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000000007f; valaddr_reg:x3; val_offset:119595*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119595*0 + 3*697*FLEN/8, x4, x1, x2)

inst_39866:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000000000ff; valaddr_reg:x3; val_offset:119598*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119598*0 + 3*698*FLEN/8, x4, x1, x2)

inst_39867:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000000001ff; valaddr_reg:x3; val_offset:119601*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119601*0 + 3*699*FLEN/8, x4, x1, x2)

inst_39868:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000000003ff; valaddr_reg:x3; val_offset:119604*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119604*0 + 3*700*FLEN/8, x4, x1, x2)

inst_39869:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000000007ff; valaddr_reg:x3; val_offset:119607*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119607*0 + 3*701*FLEN/8, x4, x1, x2)

inst_39870:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000000fff; valaddr_reg:x3; val_offset:119610*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119610*0 + 3*702*FLEN/8, x4, x1, x2)

inst_39871:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000001fff; valaddr_reg:x3; val_offset:119613*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119613*0 + 3*703*FLEN/8, x4, x1, x2)

inst_39872:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000003fff; valaddr_reg:x3; val_offset:119616*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119616*0 + 3*704*FLEN/8, x4, x1, x2)

inst_39873:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000007fff; valaddr_reg:x3; val_offset:119619*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119619*0 + 3*705*FLEN/8, x4, x1, x2)

inst_39874:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000000ffff; valaddr_reg:x3; val_offset:119622*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119622*0 + 3*706*FLEN/8, x4, x1, x2)

inst_39875:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000001ffff; valaddr_reg:x3; val_offset:119625*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119625*0 + 3*707*FLEN/8, x4, x1, x2)

inst_39876:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000003ffff; valaddr_reg:x3; val_offset:119628*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119628*0 + 3*708*FLEN/8, x4, x1, x2)

inst_39877:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000007ffff; valaddr_reg:x3; val_offset:119631*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119631*0 + 3*709*FLEN/8, x4, x1, x2)

inst_39878:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000000fffff; valaddr_reg:x3; val_offset:119634*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119634*0 + 3*710*FLEN/8, x4, x1, x2)

inst_39879:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000001fffff; valaddr_reg:x3; val_offset:119637*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119637*0 + 3*711*FLEN/8, x4, x1, x2)

inst_39880:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000003fffff; valaddr_reg:x3; val_offset:119640*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119640*0 + 3*712*FLEN/8, x4, x1, x2)

inst_39881:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000007fffff; valaddr_reg:x3; val_offset:119643*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119643*0 + 3*713*FLEN/8, x4, x1, x2)

inst_39882:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000000ffffff; valaddr_reg:x3; val_offset:119646*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119646*0 + 3*714*FLEN/8, x4, x1, x2)

inst_39883:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000001ffffff; valaddr_reg:x3; val_offset:119649*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119649*0 + 3*715*FLEN/8, x4, x1, x2)

inst_39884:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000003ffffff; valaddr_reg:x3; val_offset:119652*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119652*0 + 3*716*FLEN/8, x4, x1, x2)

inst_39885:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000007ffffff; valaddr_reg:x3; val_offset:119655*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119655*0 + 3*717*FLEN/8, x4, x1, x2)

inst_39886:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000000fffffff; valaddr_reg:x3; val_offset:119658*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119658*0 + 3*718*FLEN/8, x4, x1, x2)

inst_39887:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000001fffffff; valaddr_reg:x3; val_offset:119661*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119661*0 + 3*719*FLEN/8, x4, x1, x2)

inst_39888:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000003fffffff; valaddr_reg:x3; val_offset:119664*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119664*0 + 3*720*FLEN/8, x4, x1, x2)

inst_39889:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000007fffffff; valaddr_reg:x3; val_offset:119667*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119667*0 + 3*721*FLEN/8, x4, x1, x2)

inst_39890:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00000ffffffff; valaddr_reg:x3; val_offset:119670*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119670*0 + 3*722*FLEN/8, x4, x1, x2)

inst_39891:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00001ffffffff; valaddr_reg:x3; val_offset:119673*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119673*0 + 3*723*FLEN/8, x4, x1, x2)

inst_39892:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00003ffffffff; valaddr_reg:x3; val_offset:119676*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119676*0 + 3*724*FLEN/8, x4, x1, x2)

inst_39893:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00007ffffffff; valaddr_reg:x3; val_offset:119679*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119679*0 + 3*725*FLEN/8, x4, x1, x2)

inst_39894:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0000fffffffff; valaddr_reg:x3; val_offset:119682*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119682*0 + 3*726*FLEN/8, x4, x1, x2)

inst_39895:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0001fffffffff; valaddr_reg:x3; val_offset:119685*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119685*0 + 3*727*FLEN/8, x4, x1, x2)

inst_39896:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0003fffffffff; valaddr_reg:x3; val_offset:119688*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119688*0 + 3*728*FLEN/8, x4, x1, x2)

inst_39897:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0007fffffffff; valaddr_reg:x3; val_offset:119691*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119691*0 + 3*729*FLEN/8, x4, x1, x2)

inst_39898:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc000ffffffffff; valaddr_reg:x3; val_offset:119694*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119694*0 + 3*730*FLEN/8, x4, x1, x2)

inst_39899:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc001ffffffffff; valaddr_reg:x3; val_offset:119697*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119697*0 + 3*731*FLEN/8, x4, x1, x2)

inst_39900:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc003ffffffffff; valaddr_reg:x3; val_offset:119700*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119700*0 + 3*732*FLEN/8, x4, x1, x2)

inst_39901:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc007ffffffffff; valaddr_reg:x3; val_offset:119703*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119703*0 + 3*733*FLEN/8, x4, x1, x2)

inst_39902:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc00fffffffffff; valaddr_reg:x3; val_offset:119706*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119706*0 + 3*734*FLEN/8, x4, x1, x2)

inst_39903:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc01fffffffffff; valaddr_reg:x3; val_offset:119709*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119709*0 + 3*735*FLEN/8, x4, x1, x2)

inst_39904:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc03fffffffffff; valaddr_reg:x3; val_offset:119712*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119712*0 + 3*736*FLEN/8, x4, x1, x2)

inst_39905:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc07fffffffffff; valaddr_reg:x3; val_offset:119715*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119715*0 + 3*737*FLEN/8, x4, x1, x2)

inst_39906:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc0ffffffffffff; valaddr_reg:x3; val_offset:119718*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119718*0 + 3*738*FLEN/8, x4, x1, x2)

inst_39907:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc1ffffffffffff; valaddr_reg:x3; val_offset:119721*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119721*0 + 3*739*FLEN/8, x4, x1, x2)

inst_39908:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc3ffffffffffff; valaddr_reg:x3; val_offset:119724*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119724*0 + 3*740*FLEN/8, x4, x1, x2)

inst_39909:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc7ffffffffffff; valaddr_reg:x3; val_offset:119727*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119727*0 + 3*741*FLEN/8, x4, x1, x2)

inst_39910:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbc8000000000000; valaddr_reg:x3; val_offset:119730*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119730*0 + 3*742*FLEN/8, x4, x1, x2)

inst_39911:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcc000000000000; valaddr_reg:x3; val_offset:119733*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119733*0 + 3*743*FLEN/8, x4, x1, x2)

inst_39912:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbce000000000000; valaddr_reg:x3; val_offset:119736*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119736*0 + 3*744*FLEN/8, x4, x1, x2)

inst_39913:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcf000000000000; valaddr_reg:x3; val_offset:119739*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119739*0 + 3*745*FLEN/8, x4, x1, x2)

inst_39914:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcf800000000000; valaddr_reg:x3; val_offset:119742*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119742*0 + 3*746*FLEN/8, x4, x1, x2)

inst_39915:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfc00000000000; valaddr_reg:x3; val_offset:119745*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119745*0 + 3*747*FLEN/8, x4, x1, x2)

inst_39916:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfe00000000000; valaddr_reg:x3; val_offset:119748*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119748*0 + 3*748*FLEN/8, x4, x1, x2)

inst_39917:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcff00000000000; valaddr_reg:x3; val_offset:119751*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119751*0 + 3*749*FLEN/8, x4, x1, x2)

inst_39918:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcff80000000000; valaddr_reg:x3; val_offset:119754*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119754*0 + 3*750*FLEN/8, x4, x1, x2)

inst_39919:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffc0000000000; valaddr_reg:x3; val_offset:119757*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119757*0 + 3*751*FLEN/8, x4, x1, x2)

inst_39920:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffe0000000000; valaddr_reg:x3; val_offset:119760*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119760*0 + 3*752*FLEN/8, x4, x1, x2)

inst_39921:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfff0000000000; valaddr_reg:x3; val_offset:119763*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119763*0 + 3*753*FLEN/8, x4, x1, x2)

inst_39922:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfff8000000000; valaddr_reg:x3; val_offset:119766*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119766*0 + 3*754*FLEN/8, x4, x1, x2)

inst_39923:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfffc000000000; valaddr_reg:x3; val_offset:119769*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119769*0 + 3*755*FLEN/8, x4, x1, x2)

inst_39924:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfffe000000000; valaddr_reg:x3; val_offset:119772*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119772*0 + 3*756*FLEN/8, x4, x1, x2)

inst_39925:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffff000000000; valaddr_reg:x3; val_offset:119775*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119775*0 + 3*757*FLEN/8, x4, x1, x2)

inst_39926:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffff800000000; valaddr_reg:x3; val_offset:119778*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119778*0 + 3*758*FLEN/8, x4, x1, x2)

inst_39927:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffffc00000000; valaddr_reg:x3; val_offset:119781*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119781*0 + 3*759*FLEN/8, x4, x1, x2)

inst_39928:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffffe00000000; valaddr_reg:x3; val_offset:119784*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119784*0 + 3*760*FLEN/8, x4, x1, x2)

inst_39929:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfffff00000000; valaddr_reg:x3; val_offset:119787*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119787*0 + 3*761*FLEN/8, x4, x1, x2)

inst_39930:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfffff80000000; valaddr_reg:x3; val_offset:119790*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119790*0 + 3*762*FLEN/8, x4, x1, x2)

inst_39931:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfffffc0000000; valaddr_reg:x3; val_offset:119793*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119793*0 + 3*763*FLEN/8, x4, x1, x2)

inst_39932:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcfffffe0000000; valaddr_reg:x3; val_offset:119796*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119796*0 + 3*764*FLEN/8, x4, x1, x2)

inst_39933:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffffff0000000; valaddr_reg:x3; val_offset:119799*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119799*0 + 3*765*FLEN/8, x4, x1, x2)

inst_39934:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffffff8000000; valaddr_reg:x3; val_offset:119802*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119802*0 + 3*766*FLEN/8, x4, x1, x2)

inst_39935:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0x831acfae4a49b and fs2 == 1 and fe2 == 0x1fd and fm2 == 0x52988036ffe37 and fs3 == 1 and fe3 == 0x3bc and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9831acfae4a49b; op2val:0x9fd52988036ffe37;
op3val:0xbbcffffffc000000; valaddr_reg:x3; val_offset:119805*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 119805*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(243211972064051199,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(243229564250095615,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(243264748622184447,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(243335117366362111,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(243475854854717439,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(243757329831428095,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(244320279784849407,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(245446179691692031,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(245446179691692032,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(246572079598534656,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247135029551955968,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247416504528666624,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247557242017021952,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247627610761199616,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247662795133288448,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247680387319332864,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247689183412355072,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247693581458866176,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247695780482121728,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247696879993749504,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697429749563392,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697704627470336,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697842066423808,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697910785900544,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697945145638912,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697962325508096,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697970915442688,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697975210409984,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697977357893632,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697978431635456,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697978968506368,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979236941824,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979371159552,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979438268416,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979471822848,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979488600064,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979496988672,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979501182976,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979503280128,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979504328704,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979504852992,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505115136,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505246208,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505311744,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505344512,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505360896,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505369088,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505373184,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505375232,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505376256,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505376768,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377024,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377152,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377216,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377248,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377264,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377272,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377276,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377278,64,FLEN)
NAN_BOXED(6888194050400029901,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(247697979505377279,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409920,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409921,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409923,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409927,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409935,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409951,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547409983,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547410047,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547410175,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547410431,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547410943,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547411967,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547414015,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547418111,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547426303,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547442687,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547475455,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547540991,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547672063,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992547934207,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992548458495,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992549507071,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992551604223,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992555798527,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992564187135,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992580964351,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992614518783,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992681627647,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071992815845375,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071993084280831,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071993621151743,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071994694893567,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90071996842377215,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072001137344511,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072009727279103,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072026907148287,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072061266886655,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072129986363391,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072267425316863,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90072542303223807,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90073092059037695,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90074191570665471,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90076390593921023,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90080788640432127,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90089584733454335,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90107176919498751,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90142361291587583,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90212730035765247,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90353467524120575,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(90634942500831231,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(91197892454252543,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(92323792361095167,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(92323792361095168,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(93449692267937792,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94012642221359104,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94294117198069760,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94434854686425088,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94505223430602752,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94540407802691584,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94557999988736000,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94566796081758208,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94571194128269312,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94573393151524864,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94574492663152640,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575042418966528,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575317296873472,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575454735826944,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575523455303680,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575557815042048,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575574994911232,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575583584845824,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575587879813120,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575590027296768,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575591101038592,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575591637909504,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575591906344960,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592040562688,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592107671552,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592141225984,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592158003200,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592166391808,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592170586112,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592172683264,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592173731840,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174256128,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174518272,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174649344,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174714880,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174747648,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174764032,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174772224,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174776320,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174778368,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174779392,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174779904,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780160,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780288,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780352,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780384,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780400,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780408,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780412,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780414,64,FLEN)
NAN_BOXED(6888194319444390853,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(94575592174780415,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297216,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297217,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297219,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297223,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297231,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297247,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297279,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297343,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297471,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297727,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284298239,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284299263,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284301311,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284305407,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284313599,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284329983,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284362751,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284428287,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284559359,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284821503,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828285345791,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828286394367,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828288491519,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828292685823,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828301074431,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828317851647,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828351406079,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828418514943,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828552732671,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828821168127,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954829358039039,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954830431780863,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954832579264511,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954836874231807,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954845464166399,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954862644035583,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954897003773951,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954965723250687,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326955103162204159,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326955378040111103,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326955927795924991,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326957027307552767,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326959226330808319,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326963624377319423,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326972420470341631,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326990012656386047,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9327025197028474879,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9327095565772652543,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9327236303261007871,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9327517778237718527,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9328080728191139839,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9329206628097982463,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9329206628097982464,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9330332528004825088,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9330895477958246400,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331176952934957056,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331317690423312384,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331388059167490048,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331423243539578880,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331440835725623296,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331449631818645504,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331454029865156608,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331456228888412160,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331457328400039936,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331457878155853824,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458153033760768,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458290472714240,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458359192190976,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458393551929344,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458410731798528,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458419321733120,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458423616700416,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458425764184064,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458426837925888,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427374796800,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427643232256,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427777449984,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427844558848,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427878113280,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427894890496,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427903279104,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427907473408,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427909570560,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427910619136,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911143424,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911405568,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911536640,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911602176,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911634944,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911651328,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911659520,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911663616,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911665664,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911666688,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667200,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667456,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667584,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667648,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667680,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667696,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667704,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667708,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667710,64,FLEN)
NAN_BOXED(6888198061874199989,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667711,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002624,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002625,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002627,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002631,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002639,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002655,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002687,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002751,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663002879,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663003135,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663003647,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663004671,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663006719,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663010815,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663019007,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663035391,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663068159,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663133695,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663264767,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293663526911,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293664051199,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293665099775,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293667196927,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293671391231,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293679779839,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293696557055,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293730111487,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293797220351,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187293931438079,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187294199873535,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187294736744447,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187295810486271,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187297957969919,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187302252937215,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187310842871807,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187328022740991,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187362382479359,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187431101956095,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187568540909567,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371187843418816511,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371188393174630399,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371189492686258175,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371191691709513727,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371196089756024831,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371204885849047039,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371222478035091455,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371257662407180287,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371328031151357951,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371468768639713279,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13371750243616423935,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13372313193569845247,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13373439093476687871,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13373439093476687872,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13374564993383530496,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375127943336951808,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375409418313662464,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375550155802017792,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375620524546195456,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375655708918284288,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375673301104328704,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375682097197350912,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375686495243862016,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375688694267117568,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375689793778745344,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690343534559232,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690618412466176,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690755851419648,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690824570896384,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690858930634752,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690876110503936,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690884700438528,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690888995405824,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690891142889472,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690892216631296,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690892753502208,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893021937664,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893156155392,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893223264256,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893256818688,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893273595904,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893281984512,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893286178816,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893288275968,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893289324544,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893289848832,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290110976,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290242048,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290307584,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290340352,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290356736,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290364928,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290369024,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290371072,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290372096,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290372608,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290372864,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290372992,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290373056,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290373088,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290373104,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290373112,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290373116,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290373118,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13375690893290373119,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6888265922523622975,64,FLEN)
NAN_BOXED(11517196312126314489,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276416,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276417,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276419,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276423,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276431,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276447,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276479,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276543,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276671,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545276927,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545277439,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545278463,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545280511,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545284607,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545292799,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545309183,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545341951,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545407487,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545538559,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219545800703,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219546324991,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219547373567,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219549470719,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219553665023,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219562053631,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219578830847,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219612385279,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219679494143,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175219813711871,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175220082147327,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175220619018239,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175221692760063,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175223840243711,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175228135211007,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175236725145599,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175253905014783,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175288264753151,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175356984229887,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175494423183359,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598175769301090303,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598176319056904191,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598177418568531967,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598179617591787519,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598184015638298623,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598192811731320831,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598210403917365247,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598245588289454079,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598315957033631743,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598456694521987071,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4598738169498697727,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4599301119452119039,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4600427019358961663,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4600427019358961664,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4601552919265804288,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602115869219225600,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602397344195936256,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602538081684291584,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602608450428469248,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602643634800558080,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602661226986602496,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602670023079624704,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602674421126135808,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602676620149391360,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602677719661019136,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678269416833024,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678544294739968,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678681733693440,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678750453170176,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678784812908544,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678801992777728,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678810582712320,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678814877679616,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678817025163264,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678818098905088,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678818635776000,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678818904211456,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819038429184,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819105538048,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819139092480,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819155869696,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819164258304,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819168452608,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819170549760,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819171598336,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172122624,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172384768,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172515840,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172581376,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172614144,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172630528,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172638720,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172642816,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172644864,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172645888,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646400,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646656,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646784,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646848,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646880,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646896,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646904,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646908,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646910,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4602678819172646911,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6888266058993659609,64,FLEN)
NAN_BOXED(2325349351727672632,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557440,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557441,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557443,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557447,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557455,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557471,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557503,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557567,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557695,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557951,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410558463,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410559487,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410561535,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410565631,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410573823,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410590207,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410622975,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410688511,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410819583,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994411081727,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994411606015,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994412654591,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994414751743,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994418946047,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994427334655,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994444111871,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994477666303,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994544775167,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994678992895,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994947428351,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553995484299263,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553996558041087,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553998705524735,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67554003000492031,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67554011590426623,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67554028770295807,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67554063130034175,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67554131849510911,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67554269288464383,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67554544166371327,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67555093922185215,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67556193433812991,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67558392457068543,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67562790503579647,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67571586596601855,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67589178782646271,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67624363154735103,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67694731898912767,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67835469387268095,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(68116944363978751,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(68679894317400063,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(69805794224242687,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(69805794224242688,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(70931694131085312,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(71494644084506624,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(71776119061217280,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(71916856549572608,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(71987225293750272,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72022409665839104,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72040001851883520,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72048797944905728,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72053195991416832,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72055395014672384,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72056494526300160,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057044282114048,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057319160020992,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057456598974464,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057525318451200,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057559678189568,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057576858058752,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057585447993344,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057589742960640,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057591890444288,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057592964186112,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057593501057024,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057593769492480,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057593903710208,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057593970819072,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594004373504,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594021150720,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594029539328,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594033733632,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594035830784,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594036879360,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037403648,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037665792,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037796864,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037862400,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037895168,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037911552,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037919744,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037923840,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037925888,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037926912,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927424,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927680,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927808,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927872,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927904,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927920,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927928,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927932,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927934,64,FLEN)
NAN_BOXED(6888281422201937361,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(72057594037927935,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620969984,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620969985,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620969987,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620969991,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620969999,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620970015,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620970047,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620970111,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620970239,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620970495,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620971007,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620972031,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620974079,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620978175,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280620986367,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280621002751,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280621035519,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280621101055,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280621232127,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280621494271,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280622018559,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280623067135,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280625164287,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280629358591,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280637747199,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280654524415,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280688078847,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280755187711,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813280889405439,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813281157840895,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813281694711807,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813282768453631,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813284915937279,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813289210904575,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813297800839167,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813314980708351,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813349340446719,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813418059923455,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813555498876927,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528813830376783871,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528814380132597759,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528815479644225535,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528817678667481087,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528822076713992191,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528830872807014399,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528848464993058815,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528883649365147647,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13528954018109325311,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13529094755597680639,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13529376230574391295,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13529939180527812607,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13531065080434655231,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13531065080434655232,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13532190980341497856,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13532753930294919168,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533035405271629824,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533176142759985152,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533246511504162816,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533281695876251648,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533299288062296064,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533308084155318272,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533312482201829376,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533314681225084928,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533315780736712704,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316330492526592,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316605370433536,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316742809387008,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316811528863744,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316845888602112,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316863068471296,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316871658405888,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316875953373184,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316878100856832,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316879174598656,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316879711469568,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316879979905024,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316880114122752,64,FLEN)
NAN_BOXED(6888310249076597915,64,FLEN)
NAN_BOXED(11517157286219873847,64,FLEN)
NAN_BOXED(13533316880181231616,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
