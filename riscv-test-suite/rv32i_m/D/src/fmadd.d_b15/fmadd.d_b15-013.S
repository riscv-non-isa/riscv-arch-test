
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9216:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700000000fffff; valaddr_reg:x3; val_offset:27648*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27648*0 + 3*0*FLEN/8, x4, x1, x2)

inst_9217:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700000001fffff; valaddr_reg:x3; val_offset:27651*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27651*0 + 3*1*FLEN/8, x4, x1, x2)

inst_9218:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700000003fffff; valaddr_reg:x3; val_offset:27654*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27654*0 + 3*2*FLEN/8, x4, x1, x2)

inst_9219:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700000007fffff; valaddr_reg:x3; val_offset:27657*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27657*0 + 3*3*FLEN/8, x4, x1, x2)

inst_9220:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170000000ffffff; valaddr_reg:x3; val_offset:27660*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27660*0 + 3*4*FLEN/8, x4, x1, x2)

inst_9221:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170000001ffffff; valaddr_reg:x3; val_offset:27663*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27663*0 + 3*5*FLEN/8, x4, x1, x2)

inst_9222:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170000003ffffff; valaddr_reg:x3; val_offset:27666*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27666*0 + 3*6*FLEN/8, x4, x1, x2)

inst_9223:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170000007ffffff; valaddr_reg:x3; val_offset:27669*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27669*0 + 3*7*FLEN/8, x4, x1, x2)

inst_9224:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817000000fffffff; valaddr_reg:x3; val_offset:27672*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27672*0 + 3*8*FLEN/8, x4, x1, x2)

inst_9225:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817000001fffffff; valaddr_reg:x3; val_offset:27675*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27675*0 + 3*9*FLEN/8, x4, x1, x2)

inst_9226:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817000003fffffff; valaddr_reg:x3; val_offset:27678*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27678*0 + 3*10*FLEN/8, x4, x1, x2)

inst_9227:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817000007fffffff; valaddr_reg:x3; val_offset:27681*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27681*0 + 3*11*FLEN/8, x4, x1, x2)

inst_9228:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700000ffffffff; valaddr_reg:x3; val_offset:27684*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27684*0 + 3*12*FLEN/8, x4, x1, x2)

inst_9229:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700001ffffffff; valaddr_reg:x3; val_offset:27687*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27687*0 + 3*13*FLEN/8, x4, x1, x2)

inst_9230:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700003ffffffff; valaddr_reg:x3; val_offset:27690*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27690*0 + 3*14*FLEN/8, x4, x1, x2)

inst_9231:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700007ffffffff; valaddr_reg:x3; val_offset:27693*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27693*0 + 3*15*FLEN/8, x4, x1, x2)

inst_9232:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170000fffffffff; valaddr_reg:x3; val_offset:27696*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27696*0 + 3*16*FLEN/8, x4, x1, x2)

inst_9233:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170001fffffffff; valaddr_reg:x3; val_offset:27699*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27699*0 + 3*17*FLEN/8, x4, x1, x2)

inst_9234:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170003fffffffff; valaddr_reg:x3; val_offset:27702*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27702*0 + 3*18*FLEN/8, x4, x1, x2)

inst_9235:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170007fffffffff; valaddr_reg:x3; val_offset:27705*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27705*0 + 3*19*FLEN/8, x4, x1, x2)

inst_9236:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817000ffffffffff; valaddr_reg:x3; val_offset:27708*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27708*0 + 3*20*FLEN/8, x4, x1, x2)

inst_9237:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817001ffffffffff; valaddr_reg:x3; val_offset:27711*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27711*0 + 3*21*FLEN/8, x4, x1, x2)

inst_9238:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817003ffffffffff; valaddr_reg:x3; val_offset:27714*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27714*0 + 3*22*FLEN/8, x4, x1, x2)

inst_9239:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817007ffffffffff; valaddr_reg:x3; val_offset:27717*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27717*0 + 3*23*FLEN/8, x4, x1, x2)

inst_9240:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81700fffffffffff; valaddr_reg:x3; val_offset:27720*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27720*0 + 3*24*FLEN/8, x4, x1, x2)

inst_9241:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81701fffffffffff; valaddr_reg:x3; val_offset:27723*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27723*0 + 3*25*FLEN/8, x4, x1, x2)

inst_9242:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81703fffffffffff; valaddr_reg:x3; val_offset:27726*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27726*0 + 3*26*FLEN/8, x4, x1, x2)

inst_9243:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x81707fffffffffff; valaddr_reg:x3; val_offset:27729*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27729*0 + 3*27*FLEN/8, x4, x1, x2)

inst_9244:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8170ffffffffffff; valaddr_reg:x3; val_offset:27732*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27732*0 + 3*28*FLEN/8, x4, x1, x2)

inst_9245:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8171ffffffffffff; valaddr_reg:x3; val_offset:27735*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27735*0 + 3*29*FLEN/8, x4, x1, x2)

inst_9246:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8173ffffffffffff; valaddr_reg:x3; val_offset:27738*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27738*0 + 3*30*FLEN/8, x4, x1, x2)

inst_9247:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8177ffffffffffff; valaddr_reg:x3; val_offset:27741*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27741*0 + 3*31*FLEN/8, x4, x1, x2)

inst_9248:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x8178000000000000; valaddr_reg:x3; val_offset:27744*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27744*0 + 3*32*FLEN/8, x4, x1, x2)

inst_9249:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817c000000000000; valaddr_reg:x3; val_offset:27747*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27747*0 + 3*33*FLEN/8, x4, x1, x2)

inst_9250:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817e000000000000; valaddr_reg:x3; val_offset:27750*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27750*0 + 3*34*FLEN/8, x4, x1, x2)

inst_9251:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817f000000000000; valaddr_reg:x3; val_offset:27753*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27753*0 + 3*35*FLEN/8, x4, x1, x2)

inst_9252:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817f800000000000; valaddr_reg:x3; val_offset:27756*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27756*0 + 3*36*FLEN/8, x4, x1, x2)

inst_9253:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fc00000000000; valaddr_reg:x3; val_offset:27759*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27759*0 + 3*37*FLEN/8, x4, x1, x2)

inst_9254:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fe00000000000; valaddr_reg:x3; val_offset:27762*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27762*0 + 3*38*FLEN/8, x4, x1, x2)

inst_9255:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ff00000000000; valaddr_reg:x3; val_offset:27765*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27765*0 + 3*39*FLEN/8, x4, x1, x2)

inst_9256:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ff80000000000; valaddr_reg:x3; val_offset:27768*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27768*0 + 3*40*FLEN/8, x4, x1, x2)

inst_9257:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffc0000000000; valaddr_reg:x3; val_offset:27771*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27771*0 + 3*41*FLEN/8, x4, x1, x2)

inst_9258:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffe0000000000; valaddr_reg:x3; val_offset:27774*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27774*0 + 3*42*FLEN/8, x4, x1, x2)

inst_9259:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fff0000000000; valaddr_reg:x3; val_offset:27777*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27777*0 + 3*43*FLEN/8, x4, x1, x2)

inst_9260:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fff8000000000; valaddr_reg:x3; val_offset:27780*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27780*0 + 3*44*FLEN/8, x4, x1, x2)

inst_9261:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffc000000000; valaddr_reg:x3; val_offset:27783*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27783*0 + 3*45*FLEN/8, x4, x1, x2)

inst_9262:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffe000000000; valaddr_reg:x3; val_offset:27786*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27786*0 + 3*46*FLEN/8, x4, x1, x2)

inst_9263:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffff000000000; valaddr_reg:x3; val_offset:27789*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27789*0 + 3*47*FLEN/8, x4, x1, x2)

inst_9264:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffff800000000; valaddr_reg:x3; val_offset:27792*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27792*0 + 3*48*FLEN/8, x4, x1, x2)

inst_9265:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffc00000000; valaddr_reg:x3; val_offset:27795*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27795*0 + 3*49*FLEN/8, x4, x1, x2)

inst_9266:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffe00000000; valaddr_reg:x3; val_offset:27798*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27798*0 + 3*50*FLEN/8, x4, x1, x2)

inst_9267:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffff00000000; valaddr_reg:x3; val_offset:27801*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27801*0 + 3*51*FLEN/8, x4, x1, x2)

inst_9268:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffff80000000; valaddr_reg:x3; val_offset:27804*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27804*0 + 3*52*FLEN/8, x4, x1, x2)

inst_9269:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffc0000000; valaddr_reg:x3; val_offset:27807*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27807*0 + 3*53*FLEN/8, x4, x1, x2)

inst_9270:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffe0000000; valaddr_reg:x3; val_offset:27810*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27810*0 + 3*54*FLEN/8, x4, x1, x2)

inst_9271:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffff0000000; valaddr_reg:x3; val_offset:27813*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27813*0 + 3*55*FLEN/8, x4, x1, x2)

inst_9272:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffff8000000; valaddr_reg:x3; val_offset:27816*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27816*0 + 3*56*FLEN/8, x4, x1, x2)

inst_9273:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffc000000; valaddr_reg:x3; val_offset:27819*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27819*0 + 3*57*FLEN/8, x4, x1, x2)

inst_9274:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffe000000; valaddr_reg:x3; val_offset:27822*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27822*0 + 3*58*FLEN/8, x4, x1, x2)

inst_9275:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffff000000; valaddr_reg:x3; val_offset:27825*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27825*0 + 3*59*FLEN/8, x4, x1, x2)

inst_9276:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffff800000; valaddr_reg:x3; val_offset:27828*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27828*0 + 3*60*FLEN/8, x4, x1, x2)

inst_9277:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffc00000; valaddr_reg:x3; val_offset:27831*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27831*0 + 3*61*FLEN/8, x4, x1, x2)

inst_9278:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffe00000; valaddr_reg:x3; val_offset:27834*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27834*0 + 3*62*FLEN/8, x4, x1, x2)

inst_9279:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffff00000; valaddr_reg:x3; val_offset:27837*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27837*0 + 3*63*FLEN/8, x4, x1, x2)

inst_9280:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffff80000; valaddr_reg:x3; val_offset:27840*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27840*0 + 3*64*FLEN/8, x4, x1, x2)

inst_9281:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffc0000; valaddr_reg:x3; val_offset:27843*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27843*0 + 3*65*FLEN/8, x4, x1, x2)

inst_9282:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffe0000; valaddr_reg:x3; val_offset:27846*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27846*0 + 3*66*FLEN/8, x4, x1, x2)

inst_9283:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffff0000; valaddr_reg:x3; val_offset:27849*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27849*0 + 3*67*FLEN/8, x4, x1, x2)

inst_9284:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffff8000; valaddr_reg:x3; val_offset:27852*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27852*0 + 3*68*FLEN/8, x4, x1, x2)

inst_9285:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffffc000; valaddr_reg:x3; val_offset:27855*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27855*0 + 3*69*FLEN/8, x4, x1, x2)

inst_9286:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffffe000; valaddr_reg:x3; val_offset:27858*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27858*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9287:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffff000; valaddr_reg:x3; val_offset:27861*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27861*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9288:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffff800; valaddr_reg:x3; val_offset:27864*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27864*0 + 3*72*FLEN/8, x4, x1, x2)

inst_9289:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffffc00; valaddr_reg:x3; val_offset:27867*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27867*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9290:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffffe00; valaddr_reg:x3; val_offset:27870*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27870*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9291:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffffff00; valaddr_reg:x3; val_offset:27873*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27873*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9292:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffffff80; valaddr_reg:x3; val_offset:27876*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27876*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9293:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffffffc0; valaddr_reg:x3; val_offset:27879*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27879*0 + 3*77*FLEN/8, x4, x1, x2)

inst_9294:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffffffe0; valaddr_reg:x3; val_offset:27882*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27882*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9295:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffffff0; valaddr_reg:x3; val_offset:27885*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27885*0 + 3*79*FLEN/8, x4, x1, x2)

inst_9296:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffffff8; valaddr_reg:x3; val_offset:27888*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27888*0 + 3*80*FLEN/8, x4, x1, x2)

inst_9297:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffffffc; valaddr_reg:x3; val_offset:27891*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27891*0 + 3*81*FLEN/8, x4, x1, x2)

inst_9298:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817ffffffffffffe; valaddr_reg:x3; val_offset:27894*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27894*0 + 3*82*FLEN/8, x4, x1, x2)

inst_9299:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x3bfa9fa2d2077 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x017 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f73bfa9fa2d2077; op2val:0x8000;
op3val:0x817fffffffffffff; valaddr_reg:x3; val_offset:27897*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27897*0 + 3*83*FLEN/8, x4, x1, x2)

inst_9300:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:27900*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27900*0 + 3*84*FLEN/8, x4, x1, x2)

inst_9301:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:27903*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27903*0 + 3*85*FLEN/8, x4, x1, x2)

inst_9302:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:27906*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27906*0 + 3*86*FLEN/8, x4, x1, x2)

inst_9303:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:27909*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27909*0 + 3*87*FLEN/8, x4, x1, x2)

inst_9304:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:27912*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27912*0 + 3*88*FLEN/8, x4, x1, x2)

inst_9305:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:27915*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27915*0 + 3*89*FLEN/8, x4, x1, x2)

inst_9306:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:27918*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27918*0 + 3*90*FLEN/8, x4, x1, x2)

inst_9307:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:27921*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27921*0 + 3*91*FLEN/8, x4, x1, x2)

inst_9308:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:27924*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27924*0 + 3*92*FLEN/8, x4, x1, x2)

inst_9309:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:27927*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27927*0 + 3*93*FLEN/8, x4, x1, x2)

inst_9310:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:27930*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27930*0 + 3*94*FLEN/8, x4, x1, x2)

inst_9311:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:27933*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27933*0 + 3*95*FLEN/8, x4, x1, x2)

inst_9312:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:27936*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27936*0 + 3*96*FLEN/8, x4, x1, x2)

inst_9313:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:27939*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27939*0 + 3*97*FLEN/8, x4, x1, x2)

inst_9314:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:27942*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27942*0 + 3*98*FLEN/8, x4, x1, x2)

inst_9315:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:27945*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27945*0 + 3*99*FLEN/8, x4, x1, x2)

inst_9316:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:27948*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27948*0 + 3*100*FLEN/8, x4, x1, x2)

inst_9317:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:27951*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27951*0 + 3*101*FLEN/8, x4, x1, x2)

inst_9318:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:27954*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27954*0 + 3*102*FLEN/8, x4, x1, x2)

inst_9319:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:27957*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27957*0 + 3*103*FLEN/8, x4, x1, x2)

inst_9320:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:27960*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27960*0 + 3*104*FLEN/8, x4, x1, x2)

inst_9321:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:27963*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27963*0 + 3*105*FLEN/8, x4, x1, x2)

inst_9322:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000000000; valaddr_reg:x3; val_offset:27966*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27966*0 + 3*106*FLEN/8, x4, x1, x2)

inst_9323:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000000001; valaddr_reg:x3; val_offset:27969*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27969*0 + 3*107*FLEN/8, x4, x1, x2)

inst_9324:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000000003; valaddr_reg:x3; val_offset:27972*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27972*0 + 3*108*FLEN/8, x4, x1, x2)

inst_9325:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000000007; valaddr_reg:x3; val_offset:27975*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27975*0 + 3*109*FLEN/8, x4, x1, x2)

inst_9326:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000000000f; valaddr_reg:x3; val_offset:27978*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27978*0 + 3*110*FLEN/8, x4, x1, x2)

inst_9327:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000000001f; valaddr_reg:x3; val_offset:27981*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27981*0 + 3*111*FLEN/8, x4, x1, x2)

inst_9328:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000000003f; valaddr_reg:x3; val_offset:27984*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27984*0 + 3*112*FLEN/8, x4, x1, x2)

inst_9329:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000000007f; valaddr_reg:x3; val_offset:27987*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27987*0 + 3*113*FLEN/8, x4, x1, x2)

inst_9330:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000000000ff; valaddr_reg:x3; val_offset:27990*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27990*0 + 3*114*FLEN/8, x4, x1, x2)

inst_9331:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000000001ff; valaddr_reg:x3; val_offset:27993*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27993*0 + 3*115*FLEN/8, x4, x1, x2)

inst_9332:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000000003ff; valaddr_reg:x3; val_offset:27996*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27996*0 + 3*116*FLEN/8, x4, x1, x2)

inst_9333:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000000007ff; valaddr_reg:x3; val_offset:27999*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 27999*0 + 3*117*FLEN/8, x4, x1, x2)

inst_9334:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000000fff; valaddr_reg:x3; val_offset:28002*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28002*0 + 3*118*FLEN/8, x4, x1, x2)

inst_9335:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000001fff; valaddr_reg:x3; val_offset:28005*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28005*0 + 3*119*FLEN/8, x4, x1, x2)

inst_9336:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000003fff; valaddr_reg:x3; val_offset:28008*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28008*0 + 3*120*FLEN/8, x4, x1, x2)

inst_9337:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000007fff; valaddr_reg:x3; val_offset:28011*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28011*0 + 3*121*FLEN/8, x4, x1, x2)

inst_9338:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000000ffff; valaddr_reg:x3; val_offset:28014*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28014*0 + 3*122*FLEN/8, x4, x1, x2)

inst_9339:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000001ffff; valaddr_reg:x3; val_offset:28017*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28017*0 + 3*123*FLEN/8, x4, x1, x2)

inst_9340:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000003ffff; valaddr_reg:x3; val_offset:28020*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28020*0 + 3*124*FLEN/8, x4, x1, x2)

inst_9341:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000007ffff; valaddr_reg:x3; val_offset:28023*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28023*0 + 3*125*FLEN/8, x4, x1, x2)

inst_9342:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000000fffff; valaddr_reg:x3; val_offset:28026*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28026*0 + 3*126*FLEN/8, x4, x1, x2)

inst_9343:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000001fffff; valaddr_reg:x3; val_offset:28029*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28029*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_9344:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000003fffff; valaddr_reg:x3; val_offset:28032*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28032*0 + 3*128*FLEN/8, x4, x1, x2)

inst_9345:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000007fffff; valaddr_reg:x3; val_offset:28035*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28035*0 + 3*129*FLEN/8, x4, x1, x2)

inst_9346:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000000ffffff; valaddr_reg:x3; val_offset:28038*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28038*0 + 3*130*FLEN/8, x4, x1, x2)

inst_9347:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000001ffffff; valaddr_reg:x3; val_offset:28041*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28041*0 + 3*131*FLEN/8, x4, x1, x2)

inst_9348:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000003ffffff; valaddr_reg:x3; val_offset:28044*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28044*0 + 3*132*FLEN/8, x4, x1, x2)

inst_9349:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000007ffffff; valaddr_reg:x3; val_offset:28047*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28047*0 + 3*133*FLEN/8, x4, x1, x2)

inst_9350:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000000fffffff; valaddr_reg:x3; val_offset:28050*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28050*0 + 3*134*FLEN/8, x4, x1, x2)

inst_9351:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000001fffffff; valaddr_reg:x3; val_offset:28053*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28053*0 + 3*135*FLEN/8, x4, x1, x2)

inst_9352:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000003fffffff; valaddr_reg:x3; val_offset:28056*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28056*0 + 3*136*FLEN/8, x4, x1, x2)

inst_9353:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000007fffffff; valaddr_reg:x3; val_offset:28059*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28059*0 + 3*137*FLEN/8, x4, x1, x2)

inst_9354:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600000ffffffff; valaddr_reg:x3; val_offset:28062*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28062*0 + 3*138*FLEN/8, x4, x1, x2)

inst_9355:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600001ffffffff; valaddr_reg:x3; val_offset:28065*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28065*0 + 3*139*FLEN/8, x4, x1, x2)

inst_9356:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600003ffffffff; valaddr_reg:x3; val_offset:28068*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28068*0 + 3*140*FLEN/8, x4, x1, x2)

inst_9357:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600007ffffffff; valaddr_reg:x3; val_offset:28071*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28071*0 + 3*141*FLEN/8, x4, x1, x2)

inst_9358:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160000fffffffff; valaddr_reg:x3; val_offset:28074*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28074*0 + 3*142*FLEN/8, x4, x1, x2)

inst_9359:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160001fffffffff; valaddr_reg:x3; val_offset:28077*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28077*0 + 3*143*FLEN/8, x4, x1, x2)

inst_9360:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160003fffffffff; valaddr_reg:x3; val_offset:28080*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28080*0 + 3*144*FLEN/8, x4, x1, x2)

inst_9361:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160007fffffffff; valaddr_reg:x3; val_offset:28083*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28083*0 + 3*145*FLEN/8, x4, x1, x2)

inst_9362:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816000ffffffffff; valaddr_reg:x3; val_offset:28086*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28086*0 + 3*146*FLEN/8, x4, x1, x2)

inst_9363:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816001ffffffffff; valaddr_reg:x3; val_offset:28089*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28089*0 + 3*147*FLEN/8, x4, x1, x2)

inst_9364:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816003ffffffffff; valaddr_reg:x3; val_offset:28092*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28092*0 + 3*148*FLEN/8, x4, x1, x2)

inst_9365:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816007ffffffffff; valaddr_reg:x3; val_offset:28095*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28095*0 + 3*149*FLEN/8, x4, x1, x2)

inst_9366:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81600fffffffffff; valaddr_reg:x3; val_offset:28098*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28098*0 + 3*150*FLEN/8, x4, x1, x2)

inst_9367:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81601fffffffffff; valaddr_reg:x3; val_offset:28101*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28101*0 + 3*151*FLEN/8, x4, x1, x2)

inst_9368:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81603fffffffffff; valaddr_reg:x3; val_offset:28104*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28104*0 + 3*152*FLEN/8, x4, x1, x2)

inst_9369:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x81607fffffffffff; valaddr_reg:x3; val_offset:28107*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28107*0 + 3*153*FLEN/8, x4, x1, x2)

inst_9370:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8160ffffffffffff; valaddr_reg:x3; val_offset:28110*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28110*0 + 3*154*FLEN/8, x4, x1, x2)

inst_9371:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8161ffffffffffff; valaddr_reg:x3; val_offset:28113*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28113*0 + 3*155*FLEN/8, x4, x1, x2)

inst_9372:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8163ffffffffffff; valaddr_reg:x3; val_offset:28116*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28116*0 + 3*156*FLEN/8, x4, x1, x2)

inst_9373:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8167ffffffffffff; valaddr_reg:x3; val_offset:28119*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28119*0 + 3*157*FLEN/8, x4, x1, x2)

inst_9374:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x8168000000000000; valaddr_reg:x3; val_offset:28122*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28122*0 + 3*158*FLEN/8, x4, x1, x2)

inst_9375:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816c000000000000; valaddr_reg:x3; val_offset:28125*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28125*0 + 3*159*FLEN/8, x4, x1, x2)

inst_9376:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816e000000000000; valaddr_reg:x3; val_offset:28128*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28128*0 + 3*160*FLEN/8, x4, x1, x2)

inst_9377:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816f000000000000; valaddr_reg:x3; val_offset:28131*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28131*0 + 3*161*FLEN/8, x4, x1, x2)

inst_9378:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816f800000000000; valaddr_reg:x3; val_offset:28134*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28134*0 + 3*162*FLEN/8, x4, x1, x2)

inst_9379:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fc00000000000; valaddr_reg:x3; val_offset:28137*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28137*0 + 3*163*FLEN/8, x4, x1, x2)

inst_9380:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fe00000000000; valaddr_reg:x3; val_offset:28140*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28140*0 + 3*164*FLEN/8, x4, x1, x2)

inst_9381:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ff00000000000; valaddr_reg:x3; val_offset:28143*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28143*0 + 3*165*FLEN/8, x4, x1, x2)

inst_9382:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ff80000000000; valaddr_reg:x3; val_offset:28146*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28146*0 + 3*166*FLEN/8, x4, x1, x2)

inst_9383:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffc0000000000; valaddr_reg:x3; val_offset:28149*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28149*0 + 3*167*FLEN/8, x4, x1, x2)

inst_9384:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffe0000000000; valaddr_reg:x3; val_offset:28152*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28152*0 + 3*168*FLEN/8, x4, x1, x2)

inst_9385:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fff0000000000; valaddr_reg:x3; val_offset:28155*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28155*0 + 3*169*FLEN/8, x4, x1, x2)

inst_9386:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fff8000000000; valaddr_reg:x3; val_offset:28158*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28158*0 + 3*170*FLEN/8, x4, x1, x2)

inst_9387:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffc000000000; valaddr_reg:x3; val_offset:28161*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28161*0 + 3*171*FLEN/8, x4, x1, x2)

inst_9388:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffe000000000; valaddr_reg:x3; val_offset:28164*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28164*0 + 3*172*FLEN/8, x4, x1, x2)

inst_9389:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffff000000000; valaddr_reg:x3; val_offset:28167*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28167*0 + 3*173*FLEN/8, x4, x1, x2)

inst_9390:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffff800000000; valaddr_reg:x3; val_offset:28170*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28170*0 + 3*174*FLEN/8, x4, x1, x2)

inst_9391:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffc00000000; valaddr_reg:x3; val_offset:28173*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28173*0 + 3*175*FLEN/8, x4, x1, x2)

inst_9392:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffe00000000; valaddr_reg:x3; val_offset:28176*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28176*0 + 3*176*FLEN/8, x4, x1, x2)

inst_9393:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffff00000000; valaddr_reg:x3; val_offset:28179*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28179*0 + 3*177*FLEN/8, x4, x1, x2)

inst_9394:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffff80000000; valaddr_reg:x3; val_offset:28182*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28182*0 + 3*178*FLEN/8, x4, x1, x2)

inst_9395:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffc0000000; valaddr_reg:x3; val_offset:28185*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28185*0 + 3*179*FLEN/8, x4, x1, x2)

inst_9396:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffe0000000; valaddr_reg:x3; val_offset:28188*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28188*0 + 3*180*FLEN/8, x4, x1, x2)

inst_9397:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffff0000000; valaddr_reg:x3; val_offset:28191*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28191*0 + 3*181*FLEN/8, x4, x1, x2)

inst_9398:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffff8000000; valaddr_reg:x3; val_offset:28194*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28194*0 + 3*182*FLEN/8, x4, x1, x2)

inst_9399:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffc000000; valaddr_reg:x3; val_offset:28197*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28197*0 + 3*183*FLEN/8, x4, x1, x2)

inst_9400:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffe000000; valaddr_reg:x3; val_offset:28200*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28200*0 + 3*184*FLEN/8, x4, x1, x2)

inst_9401:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffff000000; valaddr_reg:x3; val_offset:28203*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28203*0 + 3*185*FLEN/8, x4, x1, x2)

inst_9402:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffff800000; valaddr_reg:x3; val_offset:28206*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28206*0 + 3*186*FLEN/8, x4, x1, x2)

inst_9403:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffc00000; valaddr_reg:x3; val_offset:28209*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28209*0 + 3*187*FLEN/8, x4, x1, x2)

inst_9404:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffe00000; valaddr_reg:x3; val_offset:28212*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28212*0 + 3*188*FLEN/8, x4, x1, x2)

inst_9405:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffff00000; valaddr_reg:x3; val_offset:28215*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28215*0 + 3*189*FLEN/8, x4, x1, x2)

inst_9406:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffff80000; valaddr_reg:x3; val_offset:28218*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28218*0 + 3*190*FLEN/8, x4, x1, x2)

inst_9407:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffc0000; valaddr_reg:x3; val_offset:28221*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28221*0 + 3*191*FLEN/8, x4, x1, x2)

inst_9408:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffe0000; valaddr_reg:x3; val_offset:28224*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28224*0 + 3*192*FLEN/8, x4, x1, x2)

inst_9409:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffff0000; valaddr_reg:x3; val_offset:28227*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28227*0 + 3*193*FLEN/8, x4, x1, x2)

inst_9410:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffff8000; valaddr_reg:x3; val_offset:28230*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28230*0 + 3*194*FLEN/8, x4, x1, x2)

inst_9411:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffffc000; valaddr_reg:x3; val_offset:28233*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28233*0 + 3*195*FLEN/8, x4, x1, x2)

inst_9412:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffffe000; valaddr_reg:x3; val_offset:28236*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28236*0 + 3*196*FLEN/8, x4, x1, x2)

inst_9413:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffff000; valaddr_reg:x3; val_offset:28239*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28239*0 + 3*197*FLEN/8, x4, x1, x2)

inst_9414:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffff800; valaddr_reg:x3; val_offset:28242*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28242*0 + 3*198*FLEN/8, x4, x1, x2)

inst_9415:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffffc00; valaddr_reg:x3; val_offset:28245*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28245*0 + 3*199*FLEN/8, x4, x1, x2)

inst_9416:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffffe00; valaddr_reg:x3; val_offset:28248*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28248*0 + 3*200*FLEN/8, x4, x1, x2)

inst_9417:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffffff00; valaddr_reg:x3; val_offset:28251*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28251*0 + 3*201*FLEN/8, x4, x1, x2)

inst_9418:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffffff80; valaddr_reg:x3; val_offset:28254*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28254*0 + 3*202*FLEN/8, x4, x1, x2)

inst_9419:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffffffc0; valaddr_reg:x3; val_offset:28257*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28257*0 + 3*203*FLEN/8, x4, x1, x2)

inst_9420:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffffffe0; valaddr_reg:x3; val_offset:28260*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28260*0 + 3*204*FLEN/8, x4, x1, x2)

inst_9421:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffffff0; valaddr_reg:x3; val_offset:28263*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28263*0 + 3*205*FLEN/8, x4, x1, x2)

inst_9422:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffffff8; valaddr_reg:x3; val_offset:28266*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28266*0 + 3*206*FLEN/8, x4, x1, x2)

inst_9423:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffffffc; valaddr_reg:x3; val_offset:28269*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28269*0 + 3*207*FLEN/8, x4, x1, x2)

inst_9424:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816ffffffffffffe; valaddr_reg:x3; val_offset:28272*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28272*0 + 3*208*FLEN/8, x4, x1, x2)

inst_9425:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x41b1a0b47b467 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x016 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f741b1a0b47b467; op2val:0x8000;
op3val:0x816fffffffffffff; valaddr_reg:x3; val_offset:28275*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28275*0 + 3*209*FLEN/8, x4, x1, x2)

inst_9426:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000000000; valaddr_reg:x3; val_offset:28278*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28278*0 + 3*210*FLEN/8, x4, x1, x2)

inst_9427:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000000001; valaddr_reg:x3; val_offset:28281*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28281*0 + 3*211*FLEN/8, x4, x1, x2)

inst_9428:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000000003; valaddr_reg:x3; val_offset:28284*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28284*0 + 3*212*FLEN/8, x4, x1, x2)

inst_9429:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000000007; valaddr_reg:x3; val_offset:28287*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28287*0 + 3*213*FLEN/8, x4, x1, x2)

inst_9430:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000000000f; valaddr_reg:x3; val_offset:28290*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28290*0 + 3*214*FLEN/8, x4, x1, x2)

inst_9431:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000000001f; valaddr_reg:x3; val_offset:28293*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28293*0 + 3*215*FLEN/8, x4, x1, x2)

inst_9432:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000000003f; valaddr_reg:x3; val_offset:28296*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28296*0 + 3*216*FLEN/8, x4, x1, x2)

inst_9433:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000000007f; valaddr_reg:x3; val_offset:28299*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28299*0 + 3*217*FLEN/8, x4, x1, x2)

inst_9434:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000000000ff; valaddr_reg:x3; val_offset:28302*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28302*0 + 3*218*FLEN/8, x4, x1, x2)

inst_9435:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000000001ff; valaddr_reg:x3; val_offset:28305*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28305*0 + 3*219*FLEN/8, x4, x1, x2)

inst_9436:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000000003ff; valaddr_reg:x3; val_offset:28308*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28308*0 + 3*220*FLEN/8, x4, x1, x2)

inst_9437:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000000007ff; valaddr_reg:x3; val_offset:28311*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28311*0 + 3*221*FLEN/8, x4, x1, x2)

inst_9438:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000000fff; valaddr_reg:x3; val_offset:28314*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28314*0 + 3*222*FLEN/8, x4, x1, x2)

inst_9439:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000001fff; valaddr_reg:x3; val_offset:28317*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28317*0 + 3*223*FLEN/8, x4, x1, x2)

inst_9440:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000003fff; valaddr_reg:x3; val_offset:28320*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28320*0 + 3*224*FLEN/8, x4, x1, x2)

inst_9441:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000007fff; valaddr_reg:x3; val_offset:28323*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28323*0 + 3*225*FLEN/8, x4, x1, x2)

inst_9442:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000000ffff; valaddr_reg:x3; val_offset:28326*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28326*0 + 3*226*FLEN/8, x4, x1, x2)

inst_9443:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000001ffff; valaddr_reg:x3; val_offset:28329*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28329*0 + 3*227*FLEN/8, x4, x1, x2)

inst_9444:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000003ffff; valaddr_reg:x3; val_offset:28332*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28332*0 + 3*228*FLEN/8, x4, x1, x2)

inst_9445:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000007ffff; valaddr_reg:x3; val_offset:28335*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28335*0 + 3*229*FLEN/8, x4, x1, x2)

inst_9446:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000000fffff; valaddr_reg:x3; val_offset:28338*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28338*0 + 3*230*FLEN/8, x4, x1, x2)

inst_9447:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000001fffff; valaddr_reg:x3; val_offset:28341*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28341*0 + 3*231*FLEN/8, x4, x1, x2)

inst_9448:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000003fffff; valaddr_reg:x3; val_offset:28344*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28344*0 + 3*232*FLEN/8, x4, x1, x2)

inst_9449:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000007fffff; valaddr_reg:x3; val_offset:28347*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28347*0 + 3*233*FLEN/8, x4, x1, x2)

inst_9450:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000000ffffff; valaddr_reg:x3; val_offset:28350*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28350*0 + 3*234*FLEN/8, x4, x1, x2)

inst_9451:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000001ffffff; valaddr_reg:x3; val_offset:28353*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28353*0 + 3*235*FLEN/8, x4, x1, x2)

inst_9452:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000003ffffff; valaddr_reg:x3; val_offset:28356*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28356*0 + 3*236*FLEN/8, x4, x1, x2)

inst_9453:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000007ffffff; valaddr_reg:x3; val_offset:28359*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28359*0 + 3*237*FLEN/8, x4, x1, x2)

inst_9454:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000000fffffff; valaddr_reg:x3; val_offset:28362*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28362*0 + 3*238*FLEN/8, x4, x1, x2)

inst_9455:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000001fffffff; valaddr_reg:x3; val_offset:28365*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28365*0 + 3*239*FLEN/8, x4, x1, x2)

inst_9456:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000003fffffff; valaddr_reg:x3; val_offset:28368*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28368*0 + 3*240*FLEN/8, x4, x1, x2)

inst_9457:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000007fffffff; valaddr_reg:x3; val_offset:28371*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28371*0 + 3*241*FLEN/8, x4, x1, x2)

inst_9458:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00000ffffffff; valaddr_reg:x3; val_offset:28374*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28374*0 + 3*242*FLEN/8, x4, x1, x2)

inst_9459:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00001ffffffff; valaddr_reg:x3; val_offset:28377*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28377*0 + 3*243*FLEN/8, x4, x1, x2)

inst_9460:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00003ffffffff; valaddr_reg:x3; val_offset:28380*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28380*0 + 3*244*FLEN/8, x4, x1, x2)

inst_9461:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00007ffffffff; valaddr_reg:x3; val_offset:28383*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28383*0 + 3*245*FLEN/8, x4, x1, x2)

inst_9462:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0000fffffffff; valaddr_reg:x3; val_offset:28386*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28386*0 + 3*246*FLEN/8, x4, x1, x2)

inst_9463:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0001fffffffff; valaddr_reg:x3; val_offset:28389*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28389*0 + 3*247*FLEN/8, x4, x1, x2)

inst_9464:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0003fffffffff; valaddr_reg:x3; val_offset:28392*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28392*0 + 3*248*FLEN/8, x4, x1, x2)

inst_9465:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0007fffffffff; valaddr_reg:x3; val_offset:28395*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28395*0 + 3*249*FLEN/8, x4, x1, x2)

inst_9466:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f000ffffffffff; valaddr_reg:x3; val_offset:28398*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28398*0 + 3*250*FLEN/8, x4, x1, x2)

inst_9467:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f001ffffffffff; valaddr_reg:x3; val_offset:28401*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28401*0 + 3*251*FLEN/8, x4, x1, x2)

inst_9468:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f003ffffffffff; valaddr_reg:x3; val_offset:28404*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28404*0 + 3*252*FLEN/8, x4, x1, x2)

inst_9469:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f007ffffffffff; valaddr_reg:x3; val_offset:28407*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28407*0 + 3*253*FLEN/8, x4, x1, x2)

inst_9470:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f00fffffffffff; valaddr_reg:x3; val_offset:28410*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28410*0 + 3*254*FLEN/8, x4, x1, x2)

inst_9471:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f01fffffffffff; valaddr_reg:x3; val_offset:28413*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28413*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_9472:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f03fffffffffff; valaddr_reg:x3; val_offset:28416*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28416*0 + 3*256*FLEN/8, x4, x1, x2)

inst_9473:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f07fffffffffff; valaddr_reg:x3; val_offset:28419*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28419*0 + 3*257*FLEN/8, x4, x1, x2)

inst_9474:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f0ffffffffffff; valaddr_reg:x3; val_offset:28422*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28422*0 + 3*258*FLEN/8, x4, x1, x2)

inst_9475:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f1ffffffffffff; valaddr_reg:x3; val_offset:28425*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28425*0 + 3*259*FLEN/8, x4, x1, x2)

inst_9476:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f3ffffffffffff; valaddr_reg:x3; val_offset:28428*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28428*0 + 3*260*FLEN/8, x4, x1, x2)

inst_9477:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f7ffffffffffff; valaddr_reg:x3; val_offset:28431*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28431*0 + 3*261*FLEN/8, x4, x1, x2)

inst_9478:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39f8000000000000; valaddr_reg:x3; val_offset:28434*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28434*0 + 3*262*FLEN/8, x4, x1, x2)

inst_9479:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fc000000000000; valaddr_reg:x3; val_offset:28437*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28437*0 + 3*263*FLEN/8, x4, x1, x2)

inst_9480:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fe000000000000; valaddr_reg:x3; val_offset:28440*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28440*0 + 3*264*FLEN/8, x4, x1, x2)

inst_9481:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ff000000000000; valaddr_reg:x3; val_offset:28443*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28443*0 + 3*265*FLEN/8, x4, x1, x2)

inst_9482:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ff800000000000; valaddr_reg:x3; val_offset:28446*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28446*0 + 3*266*FLEN/8, x4, x1, x2)

inst_9483:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffc00000000000; valaddr_reg:x3; val_offset:28449*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28449*0 + 3*267*FLEN/8, x4, x1, x2)

inst_9484:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffe00000000000; valaddr_reg:x3; val_offset:28452*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28452*0 + 3*268*FLEN/8, x4, x1, x2)

inst_9485:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fff00000000000; valaddr_reg:x3; val_offset:28455*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28455*0 + 3*269*FLEN/8, x4, x1, x2)

inst_9486:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fff80000000000; valaddr_reg:x3; val_offset:28458*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28458*0 + 3*270*FLEN/8, x4, x1, x2)

inst_9487:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffc0000000000; valaddr_reg:x3; val_offset:28461*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28461*0 + 3*271*FLEN/8, x4, x1, x2)

inst_9488:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffe0000000000; valaddr_reg:x3; val_offset:28464*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28464*0 + 3*272*FLEN/8, x4, x1, x2)

inst_9489:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffff0000000000; valaddr_reg:x3; val_offset:28467*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28467*0 + 3*273*FLEN/8, x4, x1, x2)

inst_9490:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffff8000000000; valaddr_reg:x3; val_offset:28470*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28470*0 + 3*274*FLEN/8, x4, x1, x2)

inst_9491:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffc000000000; valaddr_reg:x3; val_offset:28473*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28473*0 + 3*275*FLEN/8, x4, x1, x2)

inst_9492:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffe000000000; valaddr_reg:x3; val_offset:28476*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28476*0 + 3*276*FLEN/8, x4, x1, x2)

inst_9493:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffff000000000; valaddr_reg:x3; val_offset:28479*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28479*0 + 3*277*FLEN/8, x4, x1, x2)

inst_9494:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffff800000000; valaddr_reg:x3; val_offset:28482*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28482*0 + 3*278*FLEN/8, x4, x1, x2)

inst_9495:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffc00000000; valaddr_reg:x3; val_offset:28485*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28485*0 + 3*279*FLEN/8, x4, x1, x2)

inst_9496:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffe00000000; valaddr_reg:x3; val_offset:28488*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28488*0 + 3*280*FLEN/8, x4, x1, x2)

inst_9497:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffff00000000; valaddr_reg:x3; val_offset:28491*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28491*0 + 3*281*FLEN/8, x4, x1, x2)

inst_9498:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffff80000000; valaddr_reg:x3; val_offset:28494*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28494*0 + 3*282*FLEN/8, x4, x1, x2)

inst_9499:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffc0000000; valaddr_reg:x3; val_offset:28497*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28497*0 + 3*283*FLEN/8, x4, x1, x2)

inst_9500:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffe0000000; valaddr_reg:x3; val_offset:28500*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28500*0 + 3*284*FLEN/8, x4, x1, x2)

inst_9501:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffff0000000; valaddr_reg:x3; val_offset:28503*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28503*0 + 3*285*FLEN/8, x4, x1, x2)

inst_9502:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffff8000000; valaddr_reg:x3; val_offset:28506*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28506*0 + 3*286*FLEN/8, x4, x1, x2)

inst_9503:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffc000000; valaddr_reg:x3; val_offset:28509*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28509*0 + 3*287*FLEN/8, x4, x1, x2)

inst_9504:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffe000000; valaddr_reg:x3; val_offset:28512*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28512*0 + 3*288*FLEN/8, x4, x1, x2)

inst_9505:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffff000000; valaddr_reg:x3; val_offset:28515*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28515*0 + 3*289*FLEN/8, x4, x1, x2)

inst_9506:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffff800000; valaddr_reg:x3; val_offset:28518*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28518*0 + 3*290*FLEN/8, x4, x1, x2)

inst_9507:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffc00000; valaddr_reg:x3; val_offset:28521*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28521*0 + 3*291*FLEN/8, x4, x1, x2)

inst_9508:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffe00000; valaddr_reg:x3; val_offset:28524*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28524*0 + 3*292*FLEN/8, x4, x1, x2)

inst_9509:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffff00000; valaddr_reg:x3; val_offset:28527*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28527*0 + 3*293*FLEN/8, x4, x1, x2)

inst_9510:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffff80000; valaddr_reg:x3; val_offset:28530*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28530*0 + 3*294*FLEN/8, x4, x1, x2)

inst_9511:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffc0000; valaddr_reg:x3; val_offset:28533*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28533*0 + 3*295*FLEN/8, x4, x1, x2)

inst_9512:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffe0000; valaddr_reg:x3; val_offset:28536*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28536*0 + 3*296*FLEN/8, x4, x1, x2)

inst_9513:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffff0000; valaddr_reg:x3; val_offset:28539*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28539*0 + 3*297*FLEN/8, x4, x1, x2)

inst_9514:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffff8000; valaddr_reg:x3; val_offset:28542*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28542*0 + 3*298*FLEN/8, x4, x1, x2)

inst_9515:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffffc000; valaddr_reg:x3; val_offset:28545*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28545*0 + 3*299*FLEN/8, x4, x1, x2)

inst_9516:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffffe000; valaddr_reg:x3; val_offset:28548*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28548*0 + 3*300*FLEN/8, x4, x1, x2)

inst_9517:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffff000; valaddr_reg:x3; val_offset:28551*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28551*0 + 3*301*FLEN/8, x4, x1, x2)

inst_9518:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffff800; valaddr_reg:x3; val_offset:28554*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28554*0 + 3*302*FLEN/8, x4, x1, x2)

inst_9519:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffffc00; valaddr_reg:x3; val_offset:28557*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28557*0 + 3*303*FLEN/8, x4, x1, x2)

inst_9520:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffffe00; valaddr_reg:x3; val_offset:28560*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28560*0 + 3*304*FLEN/8, x4, x1, x2)

inst_9521:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffffff00; valaddr_reg:x3; val_offset:28563*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28563*0 + 3*305*FLEN/8, x4, x1, x2)

inst_9522:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffffff80; valaddr_reg:x3; val_offset:28566*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28566*0 + 3*306*FLEN/8, x4, x1, x2)

inst_9523:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffffffc0; valaddr_reg:x3; val_offset:28569*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28569*0 + 3*307*FLEN/8, x4, x1, x2)

inst_9524:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffffffe0; valaddr_reg:x3; val_offset:28572*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28572*0 + 3*308*FLEN/8, x4, x1, x2)

inst_9525:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffffff0; valaddr_reg:x3; val_offset:28575*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28575*0 + 3*309*FLEN/8, x4, x1, x2)

inst_9526:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffffff8; valaddr_reg:x3; val_offset:28578*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28578*0 + 3*310*FLEN/8, x4, x1, x2)

inst_9527:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffffffc; valaddr_reg:x3; val_offset:28581*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28581*0 + 3*311*FLEN/8, x4, x1, x2)

inst_9528:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39fffffffffffffe; valaddr_reg:x3; val_offset:28584*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28584*0 + 3*312*FLEN/8, x4, x1, x2)

inst_9529:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x39f and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x39ffffffffffffff; valaddr_reg:x3; val_offset:28587*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28587*0 + 3*313*FLEN/8, x4, x1, x2)

inst_9530:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:28590*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28590*0 + 3*314*FLEN/8, x4, x1, x2)

inst_9531:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:28593*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28593*0 + 3*315*FLEN/8, x4, x1, x2)

inst_9532:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:28596*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28596*0 + 3*316*FLEN/8, x4, x1, x2)

inst_9533:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:28599*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28599*0 + 3*317*FLEN/8, x4, x1, x2)

inst_9534:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:28602*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28602*0 + 3*318*FLEN/8, x4, x1, x2)

inst_9535:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:28605*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28605*0 + 3*319*FLEN/8, x4, x1, x2)

inst_9536:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:28608*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28608*0 + 3*320*FLEN/8, x4, x1, x2)

inst_9537:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:28611*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28611*0 + 3*321*FLEN/8, x4, x1, x2)

inst_9538:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:28614*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28614*0 + 3*322*FLEN/8, x4, x1, x2)

inst_9539:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:28617*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28617*0 + 3*323*FLEN/8, x4, x1, x2)

inst_9540:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:28620*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28620*0 + 3*324*FLEN/8, x4, x1, x2)

inst_9541:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:28623*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28623*0 + 3*325*FLEN/8, x4, x1, x2)

inst_9542:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:28626*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28626*0 + 3*326*FLEN/8, x4, x1, x2)

inst_9543:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:28629*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28629*0 + 3*327*FLEN/8, x4, x1, x2)

inst_9544:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:28632*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28632*0 + 3*328*FLEN/8, x4, x1, x2)

inst_9545:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:28635*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28635*0 + 3*329*FLEN/8, x4, x1, x2)

inst_9546:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:28638*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28638*0 + 3*330*FLEN/8, x4, x1, x2)

inst_9547:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:28641*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28641*0 + 3*331*FLEN/8, x4, x1, x2)

inst_9548:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:28644*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28644*0 + 3*332*FLEN/8, x4, x1, x2)

inst_9549:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:28647*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28647*0 + 3*333*FLEN/8, x4, x1, x2)

inst_9550:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:28650*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28650*0 + 3*334*FLEN/8, x4, x1, x2)

inst_9551:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x43e2e0abfd40f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x94af6fb8a7c90 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f743e2e0abfd40f; op2val:0x20694af6fb8a7c90;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:28653*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28653*0 + 3*335*FLEN/8, x4, x1, x2)

inst_9552:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:28656*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28656*0 + 3*336*FLEN/8, x4, x1, x2)

inst_9553:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:28659*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28659*0 + 3*337*FLEN/8, x4, x1, x2)

inst_9554:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:28662*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28662*0 + 3*338*FLEN/8, x4, x1, x2)

inst_9555:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:28665*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28665*0 + 3*339*FLEN/8, x4, x1, x2)

inst_9556:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:28668*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28668*0 + 3*340*FLEN/8, x4, x1, x2)

inst_9557:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:28671*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28671*0 + 3*341*FLEN/8, x4, x1, x2)

inst_9558:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x13333333333333; valaddr_reg:x3; val_offset:28674*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28674*0 + 3*342*FLEN/8, x4, x1, x2)

inst_9559:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x14924924924924; valaddr_reg:x3; val_offset:28677*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28677*0 + 3*343*FLEN/8, x4, x1, x2)

inst_9560:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x16666666666666; valaddr_reg:x3; val_offset:28680*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28680*0 + 3*344*FLEN/8, x4, x1, x2)

inst_9561:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x16db6db6db6db6; valaddr_reg:x3; val_offset:28683*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28683*0 + 3*345*FLEN/8, x4, x1, x2)

inst_9562:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x17777777777777; valaddr_reg:x3; val_offset:28686*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28686*0 + 3*346*FLEN/8, x4, x1, x2)

inst_9563:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x18888888888888; valaddr_reg:x3; val_offset:28689*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28689*0 + 3*347*FLEN/8, x4, x1, x2)

inst_9564:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:28692*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28692*0 + 3*348*FLEN/8, x4, x1, x2)

inst_9565:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:28695*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28695*0 + 3*349*FLEN/8, x4, x1, x2)

inst_9566:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:28698*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28698*0 + 3*350*FLEN/8, x4, x1, x2)

inst_9567:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:28701*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28701*0 + 3*351*FLEN/8, x4, x1, x2)

inst_9568:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:28704*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28704*0 + 3*352*FLEN/8, x4, x1, x2)

inst_9569:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:28707*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28707*0 + 3*353*FLEN/8, x4, x1, x2)

inst_9570:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:28710*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28710*0 + 3*354*FLEN/8, x4, x1, x2)

inst_9571:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:28713*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28713*0 + 3*355*FLEN/8, x4, x1, x2)

inst_9572:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:28716*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28716*0 + 3*356*FLEN/8, x4, x1, x2)

inst_9573:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:28719*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28719*0 + 3*357*FLEN/8, x4, x1, x2)

inst_9574:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000000000; valaddr_reg:x3; val_offset:28722*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28722*0 + 3*358*FLEN/8, x4, x1, x2)

inst_9575:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000000001; valaddr_reg:x3; val_offset:28725*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28725*0 + 3*359*FLEN/8, x4, x1, x2)

inst_9576:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000000003; valaddr_reg:x3; val_offset:28728*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28728*0 + 3*360*FLEN/8, x4, x1, x2)

inst_9577:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000000007; valaddr_reg:x3; val_offset:28731*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28731*0 + 3*361*FLEN/8, x4, x1, x2)

inst_9578:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000000000f; valaddr_reg:x3; val_offset:28734*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28734*0 + 3*362*FLEN/8, x4, x1, x2)

inst_9579:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000000001f; valaddr_reg:x3; val_offset:28737*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28737*0 + 3*363*FLEN/8, x4, x1, x2)

inst_9580:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000000003f; valaddr_reg:x3; val_offset:28740*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28740*0 + 3*364*FLEN/8, x4, x1, x2)

inst_9581:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000000007f; valaddr_reg:x3; val_offset:28743*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28743*0 + 3*365*FLEN/8, x4, x1, x2)

inst_9582:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000000000ff; valaddr_reg:x3; val_offset:28746*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28746*0 + 3*366*FLEN/8, x4, x1, x2)

inst_9583:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000000001ff; valaddr_reg:x3; val_offset:28749*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28749*0 + 3*367*FLEN/8, x4, x1, x2)

inst_9584:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000000003ff; valaddr_reg:x3; val_offset:28752*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28752*0 + 3*368*FLEN/8, x4, x1, x2)

inst_9585:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000000007ff; valaddr_reg:x3; val_offset:28755*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28755*0 + 3*369*FLEN/8, x4, x1, x2)

inst_9586:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000000fff; valaddr_reg:x3; val_offset:28758*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28758*0 + 3*370*FLEN/8, x4, x1, x2)

inst_9587:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000001fff; valaddr_reg:x3; val_offset:28761*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28761*0 + 3*371*FLEN/8, x4, x1, x2)

inst_9588:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000003fff; valaddr_reg:x3; val_offset:28764*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28764*0 + 3*372*FLEN/8, x4, x1, x2)

inst_9589:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000007fff; valaddr_reg:x3; val_offset:28767*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28767*0 + 3*373*FLEN/8, x4, x1, x2)

inst_9590:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000000ffff; valaddr_reg:x3; val_offset:28770*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28770*0 + 3*374*FLEN/8, x4, x1, x2)

inst_9591:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000001ffff; valaddr_reg:x3; val_offset:28773*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28773*0 + 3*375*FLEN/8, x4, x1, x2)

inst_9592:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000003ffff; valaddr_reg:x3; val_offset:28776*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28776*0 + 3*376*FLEN/8, x4, x1, x2)

inst_9593:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000007ffff; valaddr_reg:x3; val_offset:28779*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28779*0 + 3*377*FLEN/8, x4, x1, x2)

inst_9594:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000000fffff; valaddr_reg:x3; val_offset:28782*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28782*0 + 3*378*FLEN/8, x4, x1, x2)

inst_9595:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000001fffff; valaddr_reg:x3; val_offset:28785*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28785*0 + 3*379*FLEN/8, x4, x1, x2)

inst_9596:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000003fffff; valaddr_reg:x3; val_offset:28788*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28788*0 + 3*380*FLEN/8, x4, x1, x2)

inst_9597:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000007fffff; valaddr_reg:x3; val_offset:28791*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28791*0 + 3*381*FLEN/8, x4, x1, x2)

inst_9598:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000000ffffff; valaddr_reg:x3; val_offset:28794*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28794*0 + 3*382*FLEN/8, x4, x1, x2)

inst_9599:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000001ffffff; valaddr_reg:x3; val_offset:28797*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28797*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_9600:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000003ffffff; valaddr_reg:x3; val_offset:28800*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28800*0 + 3*384*FLEN/8, x4, x1, x2)

inst_9601:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000007ffffff; valaddr_reg:x3; val_offset:28803*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28803*0 + 3*385*FLEN/8, x4, x1, x2)

inst_9602:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000000fffffff; valaddr_reg:x3; val_offset:28806*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28806*0 + 3*386*FLEN/8, x4, x1, x2)

inst_9603:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000001fffffff; valaddr_reg:x3; val_offset:28809*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28809*0 + 3*387*FLEN/8, x4, x1, x2)

inst_9604:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000003fffffff; valaddr_reg:x3; val_offset:28812*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28812*0 + 3*388*FLEN/8, x4, x1, x2)

inst_9605:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000007fffffff; valaddr_reg:x3; val_offset:28815*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28815*0 + 3*389*FLEN/8, x4, x1, x2)

inst_9606:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000000ffffffff; valaddr_reg:x3; val_offset:28818*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28818*0 + 3*390*FLEN/8, x4, x1, x2)

inst_9607:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000001ffffffff; valaddr_reg:x3; val_offset:28821*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28821*0 + 3*391*FLEN/8, x4, x1, x2)

inst_9608:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000003ffffffff; valaddr_reg:x3; val_offset:28824*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28824*0 + 3*392*FLEN/8, x4, x1, x2)

inst_9609:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000007ffffffff; valaddr_reg:x3; val_offset:28827*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28827*0 + 3*393*FLEN/8, x4, x1, x2)

inst_9610:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400000fffffffff; valaddr_reg:x3; val_offset:28830*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28830*0 + 3*394*FLEN/8, x4, x1, x2)

inst_9611:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400001fffffffff; valaddr_reg:x3; val_offset:28833*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28833*0 + 3*395*FLEN/8, x4, x1, x2)

inst_9612:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400003fffffffff; valaddr_reg:x3; val_offset:28836*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28836*0 + 3*396*FLEN/8, x4, x1, x2)

inst_9613:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400007fffffffff; valaddr_reg:x3; val_offset:28839*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28839*0 + 3*397*FLEN/8, x4, x1, x2)

inst_9614:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40000ffffffffff; valaddr_reg:x3; val_offset:28842*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28842*0 + 3*398*FLEN/8, x4, x1, x2)

inst_9615:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40001ffffffffff; valaddr_reg:x3; val_offset:28845*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28845*0 + 3*399*FLEN/8, x4, x1, x2)

inst_9616:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40003ffffffffff; valaddr_reg:x3; val_offset:28848*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28848*0 + 3*400*FLEN/8, x4, x1, x2)

inst_9617:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40007ffffffffff; valaddr_reg:x3; val_offset:28851*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28851*0 + 3*401*FLEN/8, x4, x1, x2)

inst_9618:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4000fffffffffff; valaddr_reg:x3; val_offset:28854*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28854*0 + 3*402*FLEN/8, x4, x1, x2)

inst_9619:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4001fffffffffff; valaddr_reg:x3; val_offset:28857*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28857*0 + 3*403*FLEN/8, x4, x1, x2)

inst_9620:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4003fffffffffff; valaddr_reg:x3; val_offset:28860*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28860*0 + 3*404*FLEN/8, x4, x1, x2)

inst_9621:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x4007fffffffffff; valaddr_reg:x3; val_offset:28863*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28863*0 + 3*405*FLEN/8, x4, x1, x2)

inst_9622:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x400ffffffffffff; valaddr_reg:x3; val_offset:28866*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28866*0 + 3*406*FLEN/8, x4, x1, x2)

inst_9623:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x401ffffffffffff; valaddr_reg:x3; val_offset:28869*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28869*0 + 3*407*FLEN/8, x4, x1, x2)

inst_9624:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x403ffffffffffff; valaddr_reg:x3; val_offset:28872*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28872*0 + 3*408*FLEN/8, x4, x1, x2)

inst_9625:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x407ffffffffffff; valaddr_reg:x3; val_offset:28875*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28875*0 + 3*409*FLEN/8, x4, x1, x2)

inst_9626:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x408000000000000; valaddr_reg:x3; val_offset:28878*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28878*0 + 3*410*FLEN/8, x4, x1, x2)

inst_9627:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40c000000000000; valaddr_reg:x3; val_offset:28881*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28881*0 + 3*411*FLEN/8, x4, x1, x2)

inst_9628:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40e000000000000; valaddr_reg:x3; val_offset:28884*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28884*0 + 3*412*FLEN/8, x4, x1, x2)

inst_9629:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40f000000000000; valaddr_reg:x3; val_offset:28887*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28887*0 + 3*413*FLEN/8, x4, x1, x2)

inst_9630:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40f800000000000; valaddr_reg:x3; val_offset:28890*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28890*0 + 3*414*FLEN/8, x4, x1, x2)

inst_9631:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fc00000000000; valaddr_reg:x3; val_offset:28893*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28893*0 + 3*415*FLEN/8, x4, x1, x2)

inst_9632:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fe00000000000; valaddr_reg:x3; val_offset:28896*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28896*0 + 3*416*FLEN/8, x4, x1, x2)

inst_9633:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ff00000000000; valaddr_reg:x3; val_offset:28899*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28899*0 + 3*417*FLEN/8, x4, x1, x2)

inst_9634:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ff80000000000; valaddr_reg:x3; val_offset:28902*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28902*0 + 3*418*FLEN/8, x4, x1, x2)

inst_9635:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffc0000000000; valaddr_reg:x3; val_offset:28905*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28905*0 + 3*419*FLEN/8, x4, x1, x2)

inst_9636:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffe0000000000; valaddr_reg:x3; val_offset:28908*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28908*0 + 3*420*FLEN/8, x4, x1, x2)

inst_9637:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fff0000000000; valaddr_reg:x3; val_offset:28911*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28911*0 + 3*421*FLEN/8, x4, x1, x2)

inst_9638:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fff8000000000; valaddr_reg:x3; val_offset:28914*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28914*0 + 3*422*FLEN/8, x4, x1, x2)

inst_9639:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffc000000000; valaddr_reg:x3; val_offset:28917*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28917*0 + 3*423*FLEN/8, x4, x1, x2)

inst_9640:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffe000000000; valaddr_reg:x3; val_offset:28920*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28920*0 + 3*424*FLEN/8, x4, x1, x2)

inst_9641:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffff000000000; valaddr_reg:x3; val_offset:28923*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28923*0 + 3*425*FLEN/8, x4, x1, x2)

inst_9642:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffff800000000; valaddr_reg:x3; val_offset:28926*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28926*0 + 3*426*FLEN/8, x4, x1, x2)

inst_9643:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffc00000000; valaddr_reg:x3; val_offset:28929*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28929*0 + 3*427*FLEN/8, x4, x1, x2)

inst_9644:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffe00000000; valaddr_reg:x3; val_offset:28932*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28932*0 + 3*428*FLEN/8, x4, x1, x2)

inst_9645:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffff00000000; valaddr_reg:x3; val_offset:28935*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28935*0 + 3*429*FLEN/8, x4, x1, x2)

inst_9646:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffff80000000; valaddr_reg:x3; val_offset:28938*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28938*0 + 3*430*FLEN/8, x4, x1, x2)

inst_9647:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffc0000000; valaddr_reg:x3; val_offset:28941*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28941*0 + 3*431*FLEN/8, x4, x1, x2)

inst_9648:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffe0000000; valaddr_reg:x3; val_offset:28944*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28944*0 + 3*432*FLEN/8, x4, x1, x2)

inst_9649:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffff0000000; valaddr_reg:x3; val_offset:28947*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28947*0 + 3*433*FLEN/8, x4, x1, x2)

inst_9650:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffff8000000; valaddr_reg:x3; val_offset:28950*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28950*0 + 3*434*FLEN/8, x4, x1, x2)

inst_9651:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffc000000; valaddr_reg:x3; val_offset:28953*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28953*0 + 3*435*FLEN/8, x4, x1, x2)

inst_9652:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffe000000; valaddr_reg:x3; val_offset:28956*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28956*0 + 3*436*FLEN/8, x4, x1, x2)

inst_9653:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffff000000; valaddr_reg:x3; val_offset:28959*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28959*0 + 3*437*FLEN/8, x4, x1, x2)

inst_9654:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffff800000; valaddr_reg:x3; val_offset:28962*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28962*0 + 3*438*FLEN/8, x4, x1, x2)

inst_9655:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffc00000; valaddr_reg:x3; val_offset:28965*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28965*0 + 3*439*FLEN/8, x4, x1, x2)

inst_9656:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffe00000; valaddr_reg:x3; val_offset:28968*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28968*0 + 3*440*FLEN/8, x4, x1, x2)

inst_9657:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffff00000; valaddr_reg:x3; val_offset:28971*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28971*0 + 3*441*FLEN/8, x4, x1, x2)

inst_9658:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffff80000; valaddr_reg:x3; val_offset:28974*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28974*0 + 3*442*FLEN/8, x4, x1, x2)

inst_9659:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffc0000; valaddr_reg:x3; val_offset:28977*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28977*0 + 3*443*FLEN/8, x4, x1, x2)

inst_9660:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffe0000; valaddr_reg:x3; val_offset:28980*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28980*0 + 3*444*FLEN/8, x4, x1, x2)

inst_9661:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffff0000; valaddr_reg:x3; val_offset:28983*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28983*0 + 3*445*FLEN/8, x4, x1, x2)

inst_9662:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffff8000; valaddr_reg:x3; val_offset:28986*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28986*0 + 3*446*FLEN/8, x4, x1, x2)

inst_9663:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffffc000; valaddr_reg:x3; val_offset:28989*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28989*0 + 3*447*FLEN/8, x4, x1, x2)

inst_9664:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffffe000; valaddr_reg:x3; val_offset:28992*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28992*0 + 3*448*FLEN/8, x4, x1, x2)

inst_9665:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffff000; valaddr_reg:x3; val_offset:28995*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28995*0 + 3*449*FLEN/8, x4, x1, x2)

inst_9666:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffff800; valaddr_reg:x3; val_offset:28998*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 28998*0 + 3*450*FLEN/8, x4, x1, x2)

inst_9667:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffffc00; valaddr_reg:x3; val_offset:29001*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29001*0 + 3*451*FLEN/8, x4, x1, x2)

inst_9668:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffffe00; valaddr_reg:x3; val_offset:29004*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29004*0 + 3*452*FLEN/8, x4, x1, x2)

inst_9669:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffffff00; valaddr_reg:x3; val_offset:29007*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29007*0 + 3*453*FLEN/8, x4, x1, x2)

inst_9670:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffffff80; valaddr_reg:x3; val_offset:29010*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29010*0 + 3*454*FLEN/8, x4, x1, x2)

inst_9671:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffffffc0; valaddr_reg:x3; val_offset:29013*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29013*0 + 3*455*FLEN/8, x4, x1, x2)

inst_9672:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffffffe0; valaddr_reg:x3; val_offset:29016*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29016*0 + 3*456*FLEN/8, x4, x1, x2)

inst_9673:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffffff0; valaddr_reg:x3; val_offset:29019*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29019*0 + 3*457*FLEN/8, x4, x1, x2)

inst_9674:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffffff8; valaddr_reg:x3; val_offset:29022*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29022*0 + 3*458*FLEN/8, x4, x1, x2)

inst_9675:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffffffc; valaddr_reg:x3; val_offset:29025*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29025*0 + 3*459*FLEN/8, x4, x1, x2)

inst_9676:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40ffffffffffffe; valaddr_reg:x3; val_offset:29028*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29028*0 + 3*460*FLEN/8, x4, x1, x2)

inst_9677:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4827a86b4f8d7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x040 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74827a86b4f8d7; op2val:0x0;
op3val:0x40fffffffffffff; valaddr_reg:x3; val_offset:29031*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29031*0 + 3*461*FLEN/8, x4, x1, x2)

inst_9678:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000000000; valaddr_reg:x3; val_offset:29034*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29034*0 + 3*462*FLEN/8, x4, x1, x2)

inst_9679:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000000001; valaddr_reg:x3; val_offset:29037*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29037*0 + 3*463*FLEN/8, x4, x1, x2)

inst_9680:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000000003; valaddr_reg:x3; val_offset:29040*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29040*0 + 3*464*FLEN/8, x4, x1, x2)

inst_9681:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000000007; valaddr_reg:x3; val_offset:29043*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29043*0 + 3*465*FLEN/8, x4, x1, x2)

inst_9682:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000000000f; valaddr_reg:x3; val_offset:29046*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29046*0 + 3*466*FLEN/8, x4, x1, x2)

inst_9683:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000000001f; valaddr_reg:x3; val_offset:29049*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29049*0 + 3*467*FLEN/8, x4, x1, x2)

inst_9684:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000000003f; valaddr_reg:x3; val_offset:29052*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29052*0 + 3*468*FLEN/8, x4, x1, x2)

inst_9685:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000000007f; valaddr_reg:x3; val_offset:29055*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29055*0 + 3*469*FLEN/8, x4, x1, x2)

inst_9686:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000000000ff; valaddr_reg:x3; val_offset:29058*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29058*0 + 3*470*FLEN/8, x4, x1, x2)

inst_9687:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000000001ff; valaddr_reg:x3; val_offset:29061*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29061*0 + 3*471*FLEN/8, x4, x1, x2)

inst_9688:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000000003ff; valaddr_reg:x3; val_offset:29064*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29064*0 + 3*472*FLEN/8, x4, x1, x2)

inst_9689:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000000007ff; valaddr_reg:x3; val_offset:29067*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29067*0 + 3*473*FLEN/8, x4, x1, x2)

inst_9690:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000000fff; valaddr_reg:x3; val_offset:29070*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29070*0 + 3*474*FLEN/8, x4, x1, x2)

inst_9691:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000001fff; valaddr_reg:x3; val_offset:29073*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29073*0 + 3*475*FLEN/8, x4, x1, x2)

inst_9692:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000003fff; valaddr_reg:x3; val_offset:29076*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29076*0 + 3*476*FLEN/8, x4, x1, x2)

inst_9693:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000007fff; valaddr_reg:x3; val_offset:29079*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29079*0 + 3*477*FLEN/8, x4, x1, x2)

inst_9694:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000000ffff; valaddr_reg:x3; val_offset:29082*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29082*0 + 3*478*FLEN/8, x4, x1, x2)

inst_9695:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000001ffff; valaddr_reg:x3; val_offset:29085*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29085*0 + 3*479*FLEN/8, x4, x1, x2)

inst_9696:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000003ffff; valaddr_reg:x3; val_offset:29088*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29088*0 + 3*480*FLEN/8, x4, x1, x2)

inst_9697:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000007ffff; valaddr_reg:x3; val_offset:29091*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29091*0 + 3*481*FLEN/8, x4, x1, x2)

inst_9698:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000000fffff; valaddr_reg:x3; val_offset:29094*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29094*0 + 3*482*FLEN/8, x4, x1, x2)

inst_9699:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000001fffff; valaddr_reg:x3; val_offset:29097*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29097*0 + 3*483*FLEN/8, x4, x1, x2)

inst_9700:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000003fffff; valaddr_reg:x3; val_offset:29100*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29100*0 + 3*484*FLEN/8, x4, x1, x2)

inst_9701:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000007fffff; valaddr_reg:x3; val_offset:29103*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29103*0 + 3*485*FLEN/8, x4, x1, x2)

inst_9702:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000000ffffff; valaddr_reg:x3; val_offset:29106*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29106*0 + 3*486*FLEN/8, x4, x1, x2)

inst_9703:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000001ffffff; valaddr_reg:x3; val_offset:29109*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29109*0 + 3*487*FLEN/8, x4, x1, x2)

inst_9704:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000003ffffff; valaddr_reg:x3; val_offset:29112*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29112*0 + 3*488*FLEN/8, x4, x1, x2)

inst_9705:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000007ffffff; valaddr_reg:x3; val_offset:29115*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29115*0 + 3*489*FLEN/8, x4, x1, x2)

inst_9706:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000000fffffff; valaddr_reg:x3; val_offset:29118*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29118*0 + 3*490*FLEN/8, x4, x1, x2)

inst_9707:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000001fffffff; valaddr_reg:x3; val_offset:29121*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29121*0 + 3*491*FLEN/8, x4, x1, x2)

inst_9708:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000003fffffff; valaddr_reg:x3; val_offset:29124*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29124*0 + 3*492*FLEN/8, x4, x1, x2)

inst_9709:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000007fffffff; valaddr_reg:x3; val_offset:29127*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29127*0 + 3*493*FLEN/8, x4, x1, x2)

inst_9710:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00000ffffffff; valaddr_reg:x3; val_offset:29130*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29130*0 + 3*494*FLEN/8, x4, x1, x2)

inst_9711:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00001ffffffff; valaddr_reg:x3; val_offset:29133*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29133*0 + 3*495*FLEN/8, x4, x1, x2)

inst_9712:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00003ffffffff; valaddr_reg:x3; val_offset:29136*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29136*0 + 3*496*FLEN/8, x4, x1, x2)

inst_9713:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00007ffffffff; valaddr_reg:x3; val_offset:29139*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29139*0 + 3*497*FLEN/8, x4, x1, x2)

inst_9714:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0000fffffffff; valaddr_reg:x3; val_offset:29142*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29142*0 + 3*498*FLEN/8, x4, x1, x2)

inst_9715:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0001fffffffff; valaddr_reg:x3; val_offset:29145*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29145*0 + 3*499*FLEN/8, x4, x1, x2)

inst_9716:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0003fffffffff; valaddr_reg:x3; val_offset:29148*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29148*0 + 3*500*FLEN/8, x4, x1, x2)

inst_9717:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0007fffffffff; valaddr_reg:x3; val_offset:29151*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29151*0 + 3*501*FLEN/8, x4, x1, x2)

inst_9718:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae000ffffffffff; valaddr_reg:x3; val_offset:29154*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29154*0 + 3*502*FLEN/8, x4, x1, x2)

inst_9719:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae001ffffffffff; valaddr_reg:x3; val_offset:29157*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29157*0 + 3*503*FLEN/8, x4, x1, x2)

inst_9720:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae003ffffffffff; valaddr_reg:x3; val_offset:29160*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29160*0 + 3*504*FLEN/8, x4, x1, x2)

inst_9721:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae007ffffffffff; valaddr_reg:x3; val_offset:29163*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29163*0 + 3*505*FLEN/8, x4, x1, x2)

inst_9722:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae00fffffffffff; valaddr_reg:x3; val_offset:29166*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29166*0 + 3*506*FLEN/8, x4, x1, x2)

inst_9723:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae01fffffffffff; valaddr_reg:x3; val_offset:29169*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29169*0 + 3*507*FLEN/8, x4, x1, x2)

inst_9724:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae03fffffffffff; valaddr_reg:x3; val_offset:29172*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29172*0 + 3*508*FLEN/8, x4, x1, x2)

inst_9725:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae07fffffffffff; valaddr_reg:x3; val_offset:29175*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29175*0 + 3*509*FLEN/8, x4, x1, x2)

inst_9726:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae0ffffffffffff; valaddr_reg:x3; val_offset:29178*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29178*0 + 3*510*FLEN/8, x4, x1, x2)

inst_9727:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae1ffffffffffff; valaddr_reg:x3; val_offset:29181*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29181*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_9728:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae3ffffffffffff; valaddr_reg:x3; val_offset:29184*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29184*0 + 3*512*FLEN/8, x4, x1, x2)

inst_9729:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae7ffffffffffff; valaddr_reg:x3; val_offset:29187*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29187*0 + 3*513*FLEN/8, x4, x1, x2)

inst_9730:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ae8000000000000; valaddr_reg:x3; val_offset:29190*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29190*0 + 3*514*FLEN/8, x4, x1, x2)

inst_9731:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aec000000000000; valaddr_reg:x3; val_offset:29193*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29193*0 + 3*515*FLEN/8, x4, x1, x2)

inst_9732:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aee000000000000; valaddr_reg:x3; val_offset:29196*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29196*0 + 3*516*FLEN/8, x4, x1, x2)

inst_9733:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aef000000000000; valaddr_reg:x3; val_offset:29199*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29199*0 + 3*517*FLEN/8, x4, x1, x2)

inst_9734:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aef800000000000; valaddr_reg:x3; val_offset:29202*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29202*0 + 3*518*FLEN/8, x4, x1, x2)

inst_9735:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefc00000000000; valaddr_reg:x3; val_offset:29205*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29205*0 + 3*519*FLEN/8, x4, x1, x2)

inst_9736:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefe00000000000; valaddr_reg:x3; val_offset:29208*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29208*0 + 3*520*FLEN/8, x4, x1, x2)

inst_9737:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeff00000000000; valaddr_reg:x3; val_offset:29211*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29211*0 + 3*521*FLEN/8, x4, x1, x2)

inst_9738:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeff80000000000; valaddr_reg:x3; val_offset:29214*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29214*0 + 3*522*FLEN/8, x4, x1, x2)

inst_9739:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffc0000000000; valaddr_reg:x3; val_offset:29217*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29217*0 + 3*523*FLEN/8, x4, x1, x2)

inst_9740:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffe0000000000; valaddr_reg:x3; val_offset:29220*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29220*0 + 3*524*FLEN/8, x4, x1, x2)

inst_9741:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefff0000000000; valaddr_reg:x3; val_offset:29223*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29223*0 + 3*525*FLEN/8, x4, x1, x2)

inst_9742:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefff8000000000; valaddr_reg:x3; val_offset:29226*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29226*0 + 3*526*FLEN/8, x4, x1, x2)

inst_9743:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffc000000000; valaddr_reg:x3; val_offset:29229*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29229*0 + 3*527*FLEN/8, x4, x1, x2)

inst_9744:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffe000000000; valaddr_reg:x3; val_offset:29232*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29232*0 + 3*528*FLEN/8, x4, x1, x2)

inst_9745:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffff000000000; valaddr_reg:x3; val_offset:29235*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29235*0 + 3*529*FLEN/8, x4, x1, x2)

inst_9746:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffff800000000; valaddr_reg:x3; val_offset:29238*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29238*0 + 3*530*FLEN/8, x4, x1, x2)

inst_9747:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffc00000000; valaddr_reg:x3; val_offset:29241*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29241*0 + 3*531*FLEN/8, x4, x1, x2)

inst_9748:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffe00000000; valaddr_reg:x3; val_offset:29244*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29244*0 + 3*532*FLEN/8, x4, x1, x2)

inst_9749:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffff00000000; valaddr_reg:x3; val_offset:29247*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29247*0 + 3*533*FLEN/8, x4, x1, x2)

inst_9750:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffff80000000; valaddr_reg:x3; val_offset:29250*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29250*0 + 3*534*FLEN/8, x4, x1, x2)

inst_9751:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffc0000000; valaddr_reg:x3; val_offset:29253*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29253*0 + 3*535*FLEN/8, x4, x1, x2)

inst_9752:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffe0000000; valaddr_reg:x3; val_offset:29256*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29256*0 + 3*536*FLEN/8, x4, x1, x2)

inst_9753:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffff0000000; valaddr_reg:x3; val_offset:29259*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29259*0 + 3*537*FLEN/8, x4, x1, x2)

inst_9754:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffff8000000; valaddr_reg:x3; val_offset:29262*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29262*0 + 3*538*FLEN/8, x4, x1, x2)

inst_9755:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffc000000; valaddr_reg:x3; val_offset:29265*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29265*0 + 3*539*FLEN/8, x4, x1, x2)

inst_9756:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffe000000; valaddr_reg:x3; val_offset:29268*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29268*0 + 3*540*FLEN/8, x4, x1, x2)

inst_9757:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffff000000; valaddr_reg:x3; val_offset:29271*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29271*0 + 3*541*FLEN/8, x4, x1, x2)

inst_9758:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffff800000; valaddr_reg:x3; val_offset:29274*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29274*0 + 3*542*FLEN/8, x4, x1, x2)

inst_9759:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffc00000; valaddr_reg:x3; val_offset:29277*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29277*0 + 3*543*FLEN/8, x4, x1, x2)

inst_9760:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffe00000; valaddr_reg:x3; val_offset:29280*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29280*0 + 3*544*FLEN/8, x4, x1, x2)

inst_9761:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffff00000; valaddr_reg:x3; val_offset:29283*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29283*0 + 3*545*FLEN/8, x4, x1, x2)

inst_9762:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffff80000; valaddr_reg:x3; val_offset:29286*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29286*0 + 3*546*FLEN/8, x4, x1, x2)

inst_9763:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffc0000; valaddr_reg:x3; val_offset:29289*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29289*0 + 3*547*FLEN/8, x4, x1, x2)

inst_9764:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffe0000; valaddr_reg:x3; val_offset:29292*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29292*0 + 3*548*FLEN/8, x4, x1, x2)

inst_9765:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffff0000; valaddr_reg:x3; val_offset:29295*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29295*0 + 3*549*FLEN/8, x4, x1, x2)

inst_9766:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffff8000; valaddr_reg:x3; val_offset:29298*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29298*0 + 3*550*FLEN/8, x4, x1, x2)

inst_9767:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffffc000; valaddr_reg:x3; val_offset:29301*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29301*0 + 3*551*FLEN/8, x4, x1, x2)

inst_9768:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffffe000; valaddr_reg:x3; val_offset:29304*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29304*0 + 3*552*FLEN/8, x4, x1, x2)

inst_9769:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffff000; valaddr_reg:x3; val_offset:29307*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29307*0 + 3*553*FLEN/8, x4, x1, x2)

inst_9770:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffff800; valaddr_reg:x3; val_offset:29310*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29310*0 + 3*554*FLEN/8, x4, x1, x2)

inst_9771:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffffc00; valaddr_reg:x3; val_offset:29313*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29313*0 + 3*555*FLEN/8, x4, x1, x2)

inst_9772:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffffe00; valaddr_reg:x3; val_offset:29316*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29316*0 + 3*556*FLEN/8, x4, x1, x2)

inst_9773:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffffff00; valaddr_reg:x3; val_offset:29319*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29319*0 + 3*557*FLEN/8, x4, x1, x2)

inst_9774:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffffff80; valaddr_reg:x3; val_offset:29322*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29322*0 + 3*558*FLEN/8, x4, x1, x2)

inst_9775:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffffffc0; valaddr_reg:x3; val_offset:29325*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29325*0 + 3*559*FLEN/8, x4, x1, x2)

inst_9776:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffffffe0; valaddr_reg:x3; val_offset:29328*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29328*0 + 3*560*FLEN/8, x4, x1, x2)

inst_9777:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffffff0; valaddr_reg:x3; val_offset:29331*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29331*0 + 3*561*FLEN/8, x4, x1, x2)

inst_9778:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffffff8; valaddr_reg:x3; val_offset:29334*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29334*0 + 3*562*FLEN/8, x4, x1, x2)

inst_9779:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffffffc; valaddr_reg:x3; val_offset:29337*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29337*0 + 3*563*FLEN/8, x4, x1, x2)

inst_9780:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aeffffffffffffe; valaddr_reg:x3; val_offset:29340*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29340*0 + 3*564*FLEN/8, x4, x1, x2)

inst_9781:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ae and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3aefffffffffffff; valaddr_reg:x3; val_offset:29343*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29343*0 + 3*565*FLEN/8, x4, x1, x2)

inst_9782:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:29346*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29346*0 + 3*566*FLEN/8, x4, x1, x2)

inst_9783:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:29349*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29349*0 + 3*567*FLEN/8, x4, x1, x2)

inst_9784:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:29352*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29352*0 + 3*568*FLEN/8, x4, x1, x2)

inst_9785:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:29355*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29355*0 + 3*569*FLEN/8, x4, x1, x2)

inst_9786:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:29358*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29358*0 + 3*570*FLEN/8, x4, x1, x2)

inst_9787:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:29361*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29361*0 + 3*571*FLEN/8, x4, x1, x2)

inst_9788:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:29364*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29364*0 + 3*572*FLEN/8, x4, x1, x2)

inst_9789:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:29367*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29367*0 + 3*573*FLEN/8, x4, x1, x2)

inst_9790:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:29370*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29370*0 + 3*574*FLEN/8, x4, x1, x2)

inst_9791:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:29373*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29373*0 + 3*575*FLEN/8, x4, x1, x2)

inst_9792:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:29376*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29376*0 + 3*576*FLEN/8, x4, x1, x2)

inst_9793:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:29379*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29379*0 + 3*577*FLEN/8, x4, x1, x2)

inst_9794:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:29382*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29382*0 + 3*578*FLEN/8, x4, x1, x2)

inst_9795:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:29385*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29385*0 + 3*579*FLEN/8, x4, x1, x2)

inst_9796:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:29388*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29388*0 + 3*580*FLEN/8, x4, x1, x2)

inst_9797:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:29391*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29391*0 + 3*581*FLEN/8, x4, x1, x2)

inst_9798:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:29394*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29394*0 + 3*582*FLEN/8, x4, x1, x2)

inst_9799:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:29397*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29397*0 + 3*583*FLEN/8, x4, x1, x2)

inst_9800:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:29400*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29400*0 + 3*584*FLEN/8, x4, x1, x2)

inst_9801:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:29403*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29403*0 + 3*585*FLEN/8, x4, x1, x2)

inst_9802:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:29406*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29406*0 + 3*586*FLEN/8, x4, x1, x2)

inst_9803:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4aa45000c7c7f and fs2 == 0 and fe2 == 0x206 and fm2 == 0x8c6ab6e2bd76e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74aa45000c7c7f; op2val:0x2068c6ab6e2bd76e;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:29409*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29409*0 + 3*587*FLEN/8, x4, x1, x2)

inst_9804:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8010000000000001; valaddr_reg:x3; val_offset:29412*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29412*0 + 3*588*FLEN/8, x4, x1, x2)

inst_9805:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8010000000000003; valaddr_reg:x3; val_offset:29415*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29415*0 + 3*589*FLEN/8, x4, x1, x2)

inst_9806:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8010000000000007; valaddr_reg:x3; val_offset:29418*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29418*0 + 3*590*FLEN/8, x4, x1, x2)

inst_9807:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801000000000000f; valaddr_reg:x3; val_offset:29421*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29421*0 + 3*591*FLEN/8, x4, x1, x2)

inst_9808:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801000000000001f; valaddr_reg:x3; val_offset:29424*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29424*0 + 3*592*FLEN/8, x4, x1, x2)

inst_9809:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801000000000003f; valaddr_reg:x3; val_offset:29427*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29427*0 + 3*593*FLEN/8, x4, x1, x2)

inst_9810:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8013333333333333; valaddr_reg:x3; val_offset:29430*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29430*0 + 3*594*FLEN/8, x4, x1, x2)

inst_9811:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8014924924924924; valaddr_reg:x3; val_offset:29433*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29433*0 + 3*595*FLEN/8, x4, x1, x2)

inst_9812:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8016666666666666; valaddr_reg:x3; val_offset:29436*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29436*0 + 3*596*FLEN/8, x4, x1, x2)

inst_9813:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8016db6db6db6db6; valaddr_reg:x3; val_offset:29439*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29439*0 + 3*597*FLEN/8, x4, x1, x2)

inst_9814:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8017777777777777; valaddr_reg:x3; val_offset:29442*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29442*0 + 3*598*FLEN/8, x4, x1, x2)

inst_9815:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8018888888888888; valaddr_reg:x3; val_offset:29445*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29445*0 + 3*599*FLEN/8, x4, x1, x2)

inst_9816:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8019999999999999; valaddr_reg:x3; val_offset:29448*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29448*0 + 3*600*FLEN/8, x4, x1, x2)

inst_9817:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801b6db6db6db6db; valaddr_reg:x3; val_offset:29451*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29451*0 + 3*601*FLEN/8, x4, x1, x2)

inst_9818:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801ccccccccccccc; valaddr_reg:x3; val_offset:29454*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29454*0 + 3*602*FLEN/8, x4, x1, x2)

inst_9819:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801db6db6db6db6d; valaddr_reg:x3; val_offset:29457*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29457*0 + 3*603*FLEN/8, x4, x1, x2)

inst_9820:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801fffffffffffc0; valaddr_reg:x3; val_offset:29460*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29460*0 + 3*604*FLEN/8, x4, x1, x2)

inst_9821:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801fffffffffffe0; valaddr_reg:x3; val_offset:29463*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29463*0 + 3*605*FLEN/8, x4, x1, x2)

inst_9822:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801ffffffffffff0; valaddr_reg:x3; val_offset:29466*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29466*0 + 3*606*FLEN/8, x4, x1, x2)

inst_9823:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801ffffffffffff8; valaddr_reg:x3; val_offset:29469*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29469*0 + 3*607*FLEN/8, x4, x1, x2)

inst_9824:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801ffffffffffffc; valaddr_reg:x3; val_offset:29472*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29472*0 + 3*608*FLEN/8, x4, x1, x2)

inst_9825:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x801ffffffffffffe; valaddr_reg:x3; val_offset:29475*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29475*0 + 3*609*FLEN/8, x4, x1, x2)

inst_9826:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000000000; valaddr_reg:x3; val_offset:29478*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29478*0 + 3*610*FLEN/8, x4, x1, x2)

inst_9827:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000000001; valaddr_reg:x3; val_offset:29481*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29481*0 + 3*611*FLEN/8, x4, x1, x2)

inst_9828:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000000003; valaddr_reg:x3; val_offset:29484*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29484*0 + 3*612*FLEN/8, x4, x1, x2)

inst_9829:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000000007; valaddr_reg:x3; val_offset:29487*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29487*0 + 3*613*FLEN/8, x4, x1, x2)

inst_9830:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000000000f; valaddr_reg:x3; val_offset:29490*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29490*0 + 3*614*FLEN/8, x4, x1, x2)

inst_9831:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000000001f; valaddr_reg:x3; val_offset:29493*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29493*0 + 3*615*FLEN/8, x4, x1, x2)

inst_9832:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000000003f; valaddr_reg:x3; val_offset:29496*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29496*0 + 3*616*FLEN/8, x4, x1, x2)

inst_9833:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000000007f; valaddr_reg:x3; val_offset:29499*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29499*0 + 3*617*FLEN/8, x4, x1, x2)

inst_9834:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000000000ff; valaddr_reg:x3; val_offset:29502*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29502*0 + 3*618*FLEN/8, x4, x1, x2)

inst_9835:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000000001ff; valaddr_reg:x3; val_offset:29505*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29505*0 + 3*619*FLEN/8, x4, x1, x2)

inst_9836:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000000003ff; valaddr_reg:x3; val_offset:29508*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29508*0 + 3*620*FLEN/8, x4, x1, x2)

inst_9837:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000000007ff; valaddr_reg:x3; val_offset:29511*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29511*0 + 3*621*FLEN/8, x4, x1, x2)

inst_9838:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000000fff; valaddr_reg:x3; val_offset:29514*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29514*0 + 3*622*FLEN/8, x4, x1, x2)

inst_9839:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000001fff; valaddr_reg:x3; val_offset:29517*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29517*0 + 3*623*FLEN/8, x4, x1, x2)

inst_9840:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000003fff; valaddr_reg:x3; val_offset:29520*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29520*0 + 3*624*FLEN/8, x4, x1, x2)

inst_9841:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000007fff; valaddr_reg:x3; val_offset:29523*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29523*0 + 3*625*FLEN/8, x4, x1, x2)

inst_9842:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000000ffff; valaddr_reg:x3; val_offset:29526*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29526*0 + 3*626*FLEN/8, x4, x1, x2)

inst_9843:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000001ffff; valaddr_reg:x3; val_offset:29529*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29529*0 + 3*627*FLEN/8, x4, x1, x2)

inst_9844:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000003ffff; valaddr_reg:x3; val_offset:29532*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29532*0 + 3*628*FLEN/8, x4, x1, x2)

inst_9845:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000007ffff; valaddr_reg:x3; val_offset:29535*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29535*0 + 3*629*FLEN/8, x4, x1, x2)

inst_9846:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000000fffff; valaddr_reg:x3; val_offset:29538*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29538*0 + 3*630*FLEN/8, x4, x1, x2)

inst_9847:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000001fffff; valaddr_reg:x3; val_offset:29541*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29541*0 + 3*631*FLEN/8, x4, x1, x2)

inst_9848:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000003fffff; valaddr_reg:x3; val_offset:29544*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29544*0 + 3*632*FLEN/8, x4, x1, x2)

inst_9849:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000007fffff; valaddr_reg:x3; val_offset:29547*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29547*0 + 3*633*FLEN/8, x4, x1, x2)

inst_9850:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000000ffffff; valaddr_reg:x3; val_offset:29550*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29550*0 + 3*634*FLEN/8, x4, x1, x2)

inst_9851:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000001ffffff; valaddr_reg:x3; val_offset:29553*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29553*0 + 3*635*FLEN/8, x4, x1, x2)

inst_9852:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000003ffffff; valaddr_reg:x3; val_offset:29556*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29556*0 + 3*636*FLEN/8, x4, x1, x2)

inst_9853:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000007ffffff; valaddr_reg:x3; val_offset:29559*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29559*0 + 3*637*FLEN/8, x4, x1, x2)

inst_9854:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000000fffffff; valaddr_reg:x3; val_offset:29562*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29562*0 + 3*638*FLEN/8, x4, x1, x2)

inst_9855:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000001fffffff; valaddr_reg:x3; val_offset:29565*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29565*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_9856:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000003fffffff; valaddr_reg:x3; val_offset:29568*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29568*0 + 3*640*FLEN/8, x4, x1, x2)

inst_9857:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000007fffffff; valaddr_reg:x3; val_offset:29571*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29571*0 + 3*641*FLEN/8, x4, x1, x2)

inst_9858:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100000ffffffff; valaddr_reg:x3; val_offset:29574*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29574*0 + 3*642*FLEN/8, x4, x1, x2)

inst_9859:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100001ffffffff; valaddr_reg:x3; val_offset:29577*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29577*0 + 3*643*FLEN/8, x4, x1, x2)

inst_9860:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100003ffffffff; valaddr_reg:x3; val_offset:29580*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29580*0 + 3*644*FLEN/8, x4, x1, x2)

inst_9861:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100007ffffffff; valaddr_reg:x3; val_offset:29583*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29583*0 + 3*645*FLEN/8, x4, x1, x2)

inst_9862:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110000fffffffff; valaddr_reg:x3; val_offset:29586*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29586*0 + 3*646*FLEN/8, x4, x1, x2)

inst_9863:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110001fffffffff; valaddr_reg:x3; val_offset:29589*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29589*0 + 3*647*FLEN/8, x4, x1, x2)

inst_9864:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110003fffffffff; valaddr_reg:x3; val_offset:29592*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29592*0 + 3*648*FLEN/8, x4, x1, x2)

inst_9865:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110007fffffffff; valaddr_reg:x3; val_offset:29595*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29595*0 + 3*649*FLEN/8, x4, x1, x2)

inst_9866:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811000ffffffffff; valaddr_reg:x3; val_offset:29598*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29598*0 + 3*650*FLEN/8, x4, x1, x2)

inst_9867:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811001ffffffffff; valaddr_reg:x3; val_offset:29601*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29601*0 + 3*651*FLEN/8, x4, x1, x2)

inst_9868:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811003ffffffffff; valaddr_reg:x3; val_offset:29604*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29604*0 + 3*652*FLEN/8, x4, x1, x2)

inst_9869:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811007ffffffffff; valaddr_reg:x3; val_offset:29607*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29607*0 + 3*653*FLEN/8, x4, x1, x2)

inst_9870:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81100fffffffffff; valaddr_reg:x3; val_offset:29610*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29610*0 + 3*654*FLEN/8, x4, x1, x2)

inst_9871:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81101fffffffffff; valaddr_reg:x3; val_offset:29613*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29613*0 + 3*655*FLEN/8, x4, x1, x2)

inst_9872:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81103fffffffffff; valaddr_reg:x3; val_offset:29616*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29616*0 + 3*656*FLEN/8, x4, x1, x2)

inst_9873:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x81107fffffffffff; valaddr_reg:x3; val_offset:29619*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29619*0 + 3*657*FLEN/8, x4, x1, x2)

inst_9874:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8110ffffffffffff; valaddr_reg:x3; val_offset:29622*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29622*0 + 3*658*FLEN/8, x4, x1, x2)

inst_9875:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8111ffffffffffff; valaddr_reg:x3; val_offset:29625*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29625*0 + 3*659*FLEN/8, x4, x1, x2)

inst_9876:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8113ffffffffffff; valaddr_reg:x3; val_offset:29628*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29628*0 + 3*660*FLEN/8, x4, x1, x2)

inst_9877:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8117ffffffffffff; valaddr_reg:x3; val_offset:29631*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29631*0 + 3*661*FLEN/8, x4, x1, x2)

inst_9878:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x8118000000000000; valaddr_reg:x3; val_offset:29634*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29634*0 + 3*662*FLEN/8, x4, x1, x2)

inst_9879:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811c000000000000; valaddr_reg:x3; val_offset:29637*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29637*0 + 3*663*FLEN/8, x4, x1, x2)

inst_9880:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811e000000000000; valaddr_reg:x3; val_offset:29640*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29640*0 + 3*664*FLEN/8, x4, x1, x2)

inst_9881:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811f000000000000; valaddr_reg:x3; val_offset:29643*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29643*0 + 3*665*FLEN/8, x4, x1, x2)

inst_9882:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811f800000000000; valaddr_reg:x3; val_offset:29646*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29646*0 + 3*666*FLEN/8, x4, x1, x2)

inst_9883:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fc00000000000; valaddr_reg:x3; val_offset:29649*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29649*0 + 3*667*FLEN/8, x4, x1, x2)

inst_9884:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fe00000000000; valaddr_reg:x3; val_offset:29652*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29652*0 + 3*668*FLEN/8, x4, x1, x2)

inst_9885:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ff00000000000; valaddr_reg:x3; val_offset:29655*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29655*0 + 3*669*FLEN/8, x4, x1, x2)

inst_9886:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ff80000000000; valaddr_reg:x3; val_offset:29658*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29658*0 + 3*670*FLEN/8, x4, x1, x2)

inst_9887:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffc0000000000; valaddr_reg:x3; val_offset:29661*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29661*0 + 3*671*FLEN/8, x4, x1, x2)

inst_9888:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffe0000000000; valaddr_reg:x3; val_offset:29664*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29664*0 + 3*672*FLEN/8, x4, x1, x2)

inst_9889:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fff0000000000; valaddr_reg:x3; val_offset:29667*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29667*0 + 3*673*FLEN/8, x4, x1, x2)

inst_9890:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fff8000000000; valaddr_reg:x3; val_offset:29670*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29670*0 + 3*674*FLEN/8, x4, x1, x2)

inst_9891:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffc000000000; valaddr_reg:x3; val_offset:29673*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29673*0 + 3*675*FLEN/8, x4, x1, x2)

inst_9892:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffe000000000; valaddr_reg:x3; val_offset:29676*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29676*0 + 3*676*FLEN/8, x4, x1, x2)

inst_9893:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffff000000000; valaddr_reg:x3; val_offset:29679*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29679*0 + 3*677*FLEN/8, x4, x1, x2)

inst_9894:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffff800000000; valaddr_reg:x3; val_offset:29682*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29682*0 + 3*678*FLEN/8, x4, x1, x2)

inst_9895:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffc00000000; valaddr_reg:x3; val_offset:29685*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29685*0 + 3*679*FLEN/8, x4, x1, x2)

inst_9896:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffe00000000; valaddr_reg:x3; val_offset:29688*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29688*0 + 3*680*FLEN/8, x4, x1, x2)

inst_9897:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffff00000000; valaddr_reg:x3; val_offset:29691*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29691*0 + 3*681*FLEN/8, x4, x1, x2)

inst_9898:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffff80000000; valaddr_reg:x3; val_offset:29694*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29694*0 + 3*682*FLEN/8, x4, x1, x2)

inst_9899:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffc0000000; valaddr_reg:x3; val_offset:29697*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29697*0 + 3*683*FLEN/8, x4, x1, x2)

inst_9900:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffe0000000; valaddr_reg:x3; val_offset:29700*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29700*0 + 3*684*FLEN/8, x4, x1, x2)

inst_9901:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffff0000000; valaddr_reg:x3; val_offset:29703*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29703*0 + 3*685*FLEN/8, x4, x1, x2)

inst_9902:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffff8000000; valaddr_reg:x3; val_offset:29706*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29706*0 + 3*686*FLEN/8, x4, x1, x2)

inst_9903:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffc000000; valaddr_reg:x3; val_offset:29709*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29709*0 + 3*687*FLEN/8, x4, x1, x2)

inst_9904:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffe000000; valaddr_reg:x3; val_offset:29712*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29712*0 + 3*688*FLEN/8, x4, x1, x2)

inst_9905:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffff000000; valaddr_reg:x3; val_offset:29715*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29715*0 + 3*689*FLEN/8, x4, x1, x2)

inst_9906:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffff800000; valaddr_reg:x3; val_offset:29718*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29718*0 + 3*690*FLEN/8, x4, x1, x2)

inst_9907:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffc00000; valaddr_reg:x3; val_offset:29721*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29721*0 + 3*691*FLEN/8, x4, x1, x2)

inst_9908:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffe00000; valaddr_reg:x3; val_offset:29724*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29724*0 + 3*692*FLEN/8, x4, x1, x2)

inst_9909:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffff00000; valaddr_reg:x3; val_offset:29727*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29727*0 + 3*693*FLEN/8, x4, x1, x2)

inst_9910:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffff80000; valaddr_reg:x3; val_offset:29730*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29730*0 + 3*694*FLEN/8, x4, x1, x2)

inst_9911:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffc0000; valaddr_reg:x3; val_offset:29733*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29733*0 + 3*695*FLEN/8, x4, x1, x2)

inst_9912:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffe0000; valaddr_reg:x3; val_offset:29736*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29736*0 + 3*696*FLEN/8, x4, x1, x2)

inst_9913:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffff0000; valaddr_reg:x3; val_offset:29739*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29739*0 + 3*697*FLEN/8, x4, x1, x2)

inst_9914:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffff8000; valaddr_reg:x3; val_offset:29742*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29742*0 + 3*698*FLEN/8, x4, x1, x2)

inst_9915:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffffc000; valaddr_reg:x3; val_offset:29745*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29745*0 + 3*699*FLEN/8, x4, x1, x2)

inst_9916:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffffe000; valaddr_reg:x3; val_offset:29748*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29748*0 + 3*700*FLEN/8, x4, x1, x2)

inst_9917:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffff000; valaddr_reg:x3; val_offset:29751*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29751*0 + 3*701*FLEN/8, x4, x1, x2)

inst_9918:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffff800; valaddr_reg:x3; val_offset:29754*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29754*0 + 3*702*FLEN/8, x4, x1, x2)

inst_9919:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffffc00; valaddr_reg:x3; val_offset:29757*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29757*0 + 3*703*FLEN/8, x4, x1, x2)

inst_9920:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffffe00; valaddr_reg:x3; val_offset:29760*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29760*0 + 3*704*FLEN/8, x4, x1, x2)

inst_9921:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffffff00; valaddr_reg:x3; val_offset:29763*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29763*0 + 3*705*FLEN/8, x4, x1, x2)

inst_9922:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffffff80; valaddr_reg:x3; val_offset:29766*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29766*0 + 3*706*FLEN/8, x4, x1, x2)

inst_9923:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffffffc0; valaddr_reg:x3; val_offset:29769*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29769*0 + 3*707*FLEN/8, x4, x1, x2)

inst_9924:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffffffe0; valaddr_reg:x3; val_offset:29772*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29772*0 + 3*708*FLEN/8, x4, x1, x2)

inst_9925:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffffff0; valaddr_reg:x3; val_offset:29775*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29775*0 + 3*709*FLEN/8, x4, x1, x2)

inst_9926:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffffff8; valaddr_reg:x3; val_offset:29778*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29778*0 + 3*710*FLEN/8, x4, x1, x2)

inst_9927:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffffffc; valaddr_reg:x3; val_offset:29781*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29781*0 + 3*711*FLEN/8, x4, x1, x2)

inst_9928:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811ffffffffffffe; valaddr_reg:x3; val_offset:29784*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29784*0 + 3*712*FLEN/8, x4, x1, x2)

inst_9929:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4dbad27b7746f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x011 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74dbad27b7746f; op2val:0x8000;
op3val:0x811fffffffffffff; valaddr_reg:x3; val_offset:29787*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29787*0 + 3*713*FLEN/8, x4, x1, x2)

inst_9930:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:29790*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29790*0 + 3*714*FLEN/8, x4, x1, x2)

inst_9931:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:29793*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29793*0 + 3*715*FLEN/8, x4, x1, x2)

inst_9932:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:29796*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29796*0 + 3*716*FLEN/8, x4, x1, x2)

inst_9933:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:29799*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29799*0 + 3*717*FLEN/8, x4, x1, x2)

inst_9934:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:29802*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29802*0 + 3*718*FLEN/8, x4, x1, x2)

inst_9935:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:29805*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29805*0 + 3*719*FLEN/8, x4, x1, x2)

inst_9936:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:29808*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29808*0 + 3*720*FLEN/8, x4, x1, x2)

inst_9937:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:29811*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29811*0 + 3*721*FLEN/8, x4, x1, x2)

inst_9938:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:29814*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29814*0 + 3*722*FLEN/8, x4, x1, x2)

inst_9939:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:29817*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29817*0 + 3*723*FLEN/8, x4, x1, x2)

inst_9940:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:29820*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29820*0 + 3*724*FLEN/8, x4, x1, x2)

inst_9941:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:29823*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29823*0 + 3*725*FLEN/8, x4, x1, x2)

inst_9942:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:29826*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29826*0 + 3*726*FLEN/8, x4, x1, x2)

inst_9943:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:29829*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29829*0 + 3*727*FLEN/8, x4, x1, x2)

inst_9944:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:29832*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29832*0 + 3*728*FLEN/8, x4, x1, x2)

inst_9945:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:29835*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29835*0 + 3*729*FLEN/8, x4, x1, x2)

inst_9946:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:29838*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29838*0 + 3*730*FLEN/8, x4, x1, x2)

inst_9947:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:29841*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29841*0 + 3*731*FLEN/8, x4, x1, x2)

inst_9948:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:29844*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29844*0 + 3*732*FLEN/8, x4, x1, x2)

inst_9949:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:29847*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29847*0 + 3*733*FLEN/8, x4, x1, x2)

inst_9950:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:29850*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29850*0 + 3*734*FLEN/8, x4, x1, x2)

inst_9951:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:29853*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29853*0 + 3*735*FLEN/8, x4, x1, x2)

inst_9952:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000000000; valaddr_reg:x3; val_offset:29856*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29856*0 + 3*736*FLEN/8, x4, x1, x2)

inst_9953:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000000001; valaddr_reg:x3; val_offset:29859*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29859*0 + 3*737*FLEN/8, x4, x1, x2)

inst_9954:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000000003; valaddr_reg:x3; val_offset:29862*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29862*0 + 3*738*FLEN/8, x4, x1, x2)

inst_9955:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000000007; valaddr_reg:x3; val_offset:29865*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29865*0 + 3*739*FLEN/8, x4, x1, x2)

inst_9956:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000000000f; valaddr_reg:x3; val_offset:29868*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29868*0 + 3*740*FLEN/8, x4, x1, x2)

inst_9957:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000000001f; valaddr_reg:x3; val_offset:29871*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29871*0 + 3*741*FLEN/8, x4, x1, x2)

inst_9958:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000000003f; valaddr_reg:x3; val_offset:29874*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29874*0 + 3*742*FLEN/8, x4, x1, x2)

inst_9959:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000000007f; valaddr_reg:x3; val_offset:29877*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29877*0 + 3*743*FLEN/8, x4, x1, x2)

inst_9960:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf00000000000ff; valaddr_reg:x3; val_offset:29880*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29880*0 + 3*744*FLEN/8, x4, x1, x2)

inst_9961:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf00000000001ff; valaddr_reg:x3; val_offset:29883*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29883*0 + 3*745*FLEN/8, x4, x1, x2)

inst_9962:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf00000000003ff; valaddr_reg:x3; val_offset:29886*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29886*0 + 3*746*FLEN/8, x4, x1, x2)

inst_9963:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf00000000007ff; valaddr_reg:x3; val_offset:29889*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29889*0 + 3*747*FLEN/8, x4, x1, x2)

inst_9964:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000000fff; valaddr_reg:x3; val_offset:29892*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29892*0 + 3*748*FLEN/8, x4, x1, x2)

inst_9965:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000001fff; valaddr_reg:x3; val_offset:29895*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29895*0 + 3*749*FLEN/8, x4, x1, x2)

inst_9966:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000003fff; valaddr_reg:x3; val_offset:29898*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29898*0 + 3*750*FLEN/8, x4, x1, x2)

inst_9967:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000007fff; valaddr_reg:x3; val_offset:29901*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29901*0 + 3*751*FLEN/8, x4, x1, x2)

inst_9968:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000000ffff; valaddr_reg:x3; val_offset:29904*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29904*0 + 3*752*FLEN/8, x4, x1, x2)

inst_9969:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000001ffff; valaddr_reg:x3; val_offset:29907*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29907*0 + 3*753*FLEN/8, x4, x1, x2)

inst_9970:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000003ffff; valaddr_reg:x3; val_offset:29910*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29910*0 + 3*754*FLEN/8, x4, x1, x2)

inst_9971:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000007ffff; valaddr_reg:x3; val_offset:29913*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29913*0 + 3*755*FLEN/8, x4, x1, x2)

inst_9972:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf00000000fffff; valaddr_reg:x3; val_offset:29916*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29916*0 + 3*756*FLEN/8, x4, x1, x2)

inst_9973:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf00000001fffff; valaddr_reg:x3; val_offset:29919*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29919*0 + 3*757*FLEN/8, x4, x1, x2)

inst_9974:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf00000003fffff; valaddr_reg:x3; val_offset:29922*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29922*0 + 3*758*FLEN/8, x4, x1, x2)

inst_9975:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf00000007fffff; valaddr_reg:x3; val_offset:29925*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29925*0 + 3*759*FLEN/8, x4, x1, x2)

inst_9976:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000000ffffff; valaddr_reg:x3; val_offset:29928*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29928*0 + 3*760*FLEN/8, x4, x1, x2)

inst_9977:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000001ffffff; valaddr_reg:x3; val_offset:29931*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29931*0 + 3*761*FLEN/8, x4, x1, x2)

inst_9978:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000003ffffff; valaddr_reg:x3; val_offset:29934*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29934*0 + 3*762*FLEN/8, x4, x1, x2)

inst_9979:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf0000007ffffff; valaddr_reg:x3; val_offset:29937*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29937*0 + 3*763*FLEN/8, x4, x1, x2)

inst_9980:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000000fffffff; valaddr_reg:x3; val_offset:29940*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29940*0 + 3*764*FLEN/8, x4, x1, x2)

inst_9981:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000001fffffff; valaddr_reg:x3; val_offset:29943*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29943*0 + 3*765*FLEN/8, x4, x1, x2)

inst_9982:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000003fffffff; valaddr_reg:x3; val_offset:29946*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29946*0 + 3*766*FLEN/8, x4, x1, x2)

inst_9983:
// fs1 == 0 and fe1 == 0x5f7 and fm1 == 0x4e506558dabb7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00f and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f74e506558dabb7; op2val:0x0;
op3val:0xf000007fffffff; valaddr_reg:x3; val_offset:29949*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 29949*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828285345791,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828286394367,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828288491519,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828292685823,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828301074431,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828317851647,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828351406079,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828418514943,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828552732671,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828821168127,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954829358039039,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954830431780863,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954832579264511,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954836874231807,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954845464166399,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954862644035583,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954897003773951,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954965723250687,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326955103162204159,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326955378040111103,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326955927795924991,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326957027307552767,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326959226330808319,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326963624377319423,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326972420470341631,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326990012656386047,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9327025197028474879,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9327095565772652543,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9327236303261007871,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9327517778237718527,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9328080728191139839,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9329206628097982463,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9329206628097982464,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9330332528004825088,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9330895477958246400,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331176952934957056,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331317690423312384,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331388059167490048,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331423243539578880,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331440835725623296,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331449631818645504,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331454029865156608,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331456228888412160,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331457328400039936,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331457878155853824,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458153033760768,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458290472714240,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458359192190976,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458393551929344,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458410731798528,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458419321733120,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458423616700416,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458425764184064,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458426837925888,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427374796800,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427643232256,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427777449984,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427844558848,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427878113280,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427894890496,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427903279104,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427907473408,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427909570560,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427910619136,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911143424,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911405568,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911536640,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911602176,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911634944,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911651328,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911659520,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911663616,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911665664,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911666688,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667200,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667456,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667584,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667648,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667680,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667696,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667704,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667708,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667710,64,FLEN)
NAN_BOXED(6878051792692519031,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9331458427911667711,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926720,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926721,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926723,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926727,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926735,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926751,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926783,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926847,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656926975,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656927231,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656927743,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656928767,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656930815,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656934911,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656943103,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656959487,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228656992255,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228657057791,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228657188863,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228657451007,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228657975295,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228659023871,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228661121023,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228665315327,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228673703935,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228690481151,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228724035583,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228791144447,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451228925362175,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451229193797631,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451229730668543,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451230804410367,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451232951894015,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451237246861311,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451245836795903,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451263016665087,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451297376403455,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451366095880191,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451503534833663,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322451778412740607,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322452328168554495,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322453427680182271,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322455626703437823,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322460024749948927,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322468820842971135,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322486413029015551,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322521597401104383,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322591966145282047,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9322732703633637375,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9323014178610348031,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9323577128563769343,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9324703028470611967,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9324703028470611968,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9325828928377454592,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326391878330875904,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326673353307586560,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326814090795941888,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326884459540119552,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326919643912208384,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326937236098252800,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326946032191275008,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326950430237786112,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326952629261041664,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326953728772669440,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954278528483328,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954553406390272,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954690845343744,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954759564820480,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954793924558848,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954811104428032,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954819694362624,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954823989329920,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954826136813568,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954827210555392,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954827747426304,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828015861760,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828150079488,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828217188352,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828250742784,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828267520000,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828275908608,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828280102912,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828282200064,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828283248640,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828283772928,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284035072,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284166144,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284231680,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284264448,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284280832,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284289024,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284293120,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284295168,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284296192,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284296704,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284296960,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297088,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297152,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297184,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297200,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297208,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297212,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297214,64,FLEN)
NAN_BOXED(6878152329573938279,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9326954828284297215,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572449792,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572449793,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572449795,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572449799,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572449807,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572449823,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572449855,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572449919,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572450047,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572450303,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572450815,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572451839,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572453887,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572457983,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572466175,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572482559,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572515327,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572580863,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572711935,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854572974079,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854573498367,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854574546943,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854576644095,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854580838399,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854589227007,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854606004223,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854639558655,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854706667519,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836854840885247,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836855109320703,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836855646191615,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836856719933439,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836858867417087,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836863162384383,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836871752318975,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836888932188159,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836923291926527,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174836992011403263,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174837129450356735,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174837404328263679,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174837954084077567,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174839053595705343,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174841252618960895,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174845650665471999,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174854446758494207,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174872038944538623,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174907223316627455,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4174977592060805119,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4175118329549160447,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4175399804525871103,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4175962754479292415,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4177088654386135039,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4177088654386135040,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4178214554292977664,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4178777504246398976,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179058979223109632,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179199716711464960,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179270085455642624,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179305269827731456,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179322862013775872,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179331658106798080,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179336056153309184,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179338255176564736,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179339354688192512,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179339904444006400,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340179321913344,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340316760866816,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340385480343552,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340419840081920,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340437019951104,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340445609885696,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340449904852992,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340452052336640,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340453126078464,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340453662949376,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340453931384832,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454065602560,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454132711424,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454166265856,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454183043072,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454191431680,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454195625984,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454197723136,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454198771712,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199296000,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199558144,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199689216,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199754752,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199787520,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199803904,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199812096,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199816192,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199818240,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199819264,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199819776,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820032,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820160,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820224,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820256,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820272,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820280,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820284,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820286,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4179340454199820287,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6878190898371351567,64,FLEN)
NAN_BOXED(2335480306410880144,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5404319552844595,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5790342378047780,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6305039478318694,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6433713753386422,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6605279453476727,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6905519428634760,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711744,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711745,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711747,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711751,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711759,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711775,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711807,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711871,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151711999,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151712255,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151712767,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151713791,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151715839,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151719935,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151728127,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151744511,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151777279,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151842815,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376151973887,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376152236031,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376152760319,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376153808895,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376155906047,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376160100351,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376168488959,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376185266175,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376218820607,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376285929471,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376420147199,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230376688582655,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230377225453567,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230378299195391,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230380446679039,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230384741646335,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230393331580927,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230410511450111,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230444871188479,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230513590665215,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230651029618687,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288230925907525631,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288231475663339519,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288232575174967295,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288234774198222847,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288239172244733951,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288247968337756159,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288265560523800575,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288300744895889407,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288371113640067071,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288511851128422399,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(288793326105133055,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(289356276058554367,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(290482175965396991,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(290482175965396992,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(291608075872239616,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292171025825660928,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292452500802371584,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292593238290726912,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292663607034904576,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292698791406993408,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292716383593037824,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292725179686060032,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292729577732571136,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292731776755826688,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292732876267454464,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733426023268352,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733700901175296,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733838340128768,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733907059605504,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733941419343872,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733958599213056,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733967189147648,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733971484114944,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733973631598592,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733974705340416,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975242211328,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975510646784,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975644864512,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975711973376,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975745527808,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975762305024,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975770693632,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975774887936,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975776985088,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778033664,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778557952,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778820096,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975778951168,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779016704,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779049472,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779065856,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779074048,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779078144,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779080192,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081216,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081728,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779081984,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082112,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082176,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082208,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082224,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082232,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082236,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082238,64,FLEN)
NAN_BOXED(6878265993659218135,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(292733975779082239,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007232,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007233,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007235,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007239,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007247,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007263,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007295,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007359,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007487,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983007743,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983008255,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983009279,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983011327,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983015423,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983023615,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983039999,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983072767,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983138303,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983269375,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848983531519,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848984055807,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848985104383,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848987201535,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848991395839,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390848999784447,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390849016561663,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390849050116095,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390849117224959,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390849251442687,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390849519878143,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390850056749055,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390851130490879,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390853277974527,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390857572941823,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390866162876415,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390883342745599,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390917702483967,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242390986421960703,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242391123860914175,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242391398738821119,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242391948494635007,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242393048006262783,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242395247029518335,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242399645076029439,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242408441169051647,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242426033355096063,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242461217727184895,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242531586471362559,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242672323959717887,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4242953798936428543,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4243516748889849855,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4244642648796692479,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4244642648796692480,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4245768548703535104,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246331498656956416,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246612973633667072,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246753711122022400,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246824079866200064,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246859264238288896,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246876856424333312,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246885652517355520,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246890050563866624,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246892249587122176,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246893349098749952,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246893898854563840,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894173732470784,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894311171424256,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894379890900992,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894414250639360,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894431430508544,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894440020443136,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894444315410432,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894446462894080,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894447536635904,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448073506816,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448341942272,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448476160000,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448543268864,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448576823296,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448593600512,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448601989120,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448606183424,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448608280576,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448609329152,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448609853440,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610115584,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610246656,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610312192,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610344960,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610361344,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610369536,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610373632,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610375680,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610376704,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377216,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377472,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377600,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377664,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377696,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377712,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377720,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377724,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377726,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4246894448610377727,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6878309744231873663,64,FLEN)
NAN_BOXED(2335334846381676398,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146305,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146307,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146311,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146319,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146335,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146367,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9228776356407620403,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229162379232823588,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229677076333094502,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229805750608162230,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9229977316308252535,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230277556283410568,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9230577796258568601,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231092493358839515,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231478516184042700,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9231735864734178157,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516736,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516768,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516784,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516792,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516796,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9232379236109516798,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074240,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074241,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074243,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074247,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074255,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074271,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074303,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074367,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074495,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520074751,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520075263,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520076287,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520078335,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520082431,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520090623,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520107007,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520139775,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520205311,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520336383,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230520598527,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230521122815,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230522171391,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230524268543,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230528462847,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230536851455,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230553628671,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230587183103,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230654291967,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933230788509695,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933231056945151,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933231593816063,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933232667557887,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933234815041535,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933239110008831,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933247699943423,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933264879812607,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933299239550975,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933367959027711,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933505397981183,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299933780275888127,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299934330031702015,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299935429543329791,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299937628566585343,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299942026613096447,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299950822706118655,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9299968414892163071,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300003599264251903,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300073968008429567,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300214705496784895,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9300496180473495551,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9301059130426916863,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9302185030333759487,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9302185030333759488,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9303310930240602112,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9303873880194023424,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304155355170734080,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304296092659089408,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304366461403267072,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304401645775355904,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304419237961400320,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304428034054422528,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304432432100933632,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304434631124189184,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304435730635816960,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436280391630848,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436555269537792,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436692708491264,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436761427968000,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436795787706368,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436812967575552,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436821557510144,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436825852477440,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436827999961088,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829073702912,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829610573824,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436829879009280,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830013227008,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830080335872,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830113890304,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830130667520,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830139056128,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830143250432,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830145347584,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830146396160,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830146920448,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147182592,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147313664,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147379200,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147411968,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147428352,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147436544,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147440640,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147442688,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147443712,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444224,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444480,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444608,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444672,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444704,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444720,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444728,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444732,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444734,64,FLEN)
NAN_BOXED(6878364067643749487,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9304436830147444735,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557440,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557441,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557443,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557447,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557455,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557471,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557503,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557567,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557695,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410557951,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410558463,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410559487,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410561535,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410565631,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410573823,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410590207,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410622975,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410688511,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994410819583,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994411081727,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994411606015,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994412654591,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994414751743,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994418946047,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994427334655,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994444111871,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994477666303,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994544775167,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994678992895,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553994947428351,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553995484299263,64,FLEN)
NAN_BOXED(6878374346269502391,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(67553996558041087,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
