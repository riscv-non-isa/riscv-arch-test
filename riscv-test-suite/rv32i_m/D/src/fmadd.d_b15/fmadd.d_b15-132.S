
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_100608:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x10000000000001; valaddr_reg:x3; val_offset:301824*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301824*0 + 3*0*FLEN/8, x4, x1, x2)

inst_100609:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x10000000000003; valaddr_reg:x3; val_offset:301827*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301827*0 + 3*1*FLEN/8, x4, x1, x2)

inst_100610:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:301830*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301830*0 + 3*2*FLEN/8, x4, x1, x2)

inst_100611:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1000000000000f; valaddr_reg:x3; val_offset:301833*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301833*0 + 3*3*FLEN/8, x4, x1, x2)

inst_100612:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1000000000001f; valaddr_reg:x3; val_offset:301836*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301836*0 + 3*4*FLEN/8, x4, x1, x2)

inst_100613:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1000000000003f; valaddr_reg:x3; val_offset:301839*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301839*0 + 3*5*FLEN/8, x4, x1, x2)

inst_100614:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x13333333333333; valaddr_reg:x3; val_offset:301842*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301842*0 + 3*6*FLEN/8, x4, x1, x2)

inst_100615:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x14924924924924; valaddr_reg:x3; val_offset:301845*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301845*0 + 3*7*FLEN/8, x4, x1, x2)

inst_100616:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x16666666666666; valaddr_reg:x3; val_offset:301848*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301848*0 + 3*8*FLEN/8, x4, x1, x2)

inst_100617:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x16db6db6db6db6; valaddr_reg:x3; val_offset:301851*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301851*0 + 3*9*FLEN/8, x4, x1, x2)

inst_100618:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x17777777777777; valaddr_reg:x3; val_offset:301854*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301854*0 + 3*10*FLEN/8, x4, x1, x2)

inst_100619:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x18888888888888; valaddr_reg:x3; val_offset:301857*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301857*0 + 3*11*FLEN/8, x4, x1, x2)

inst_100620:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x19999999999999; valaddr_reg:x3; val_offset:301860*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301860*0 + 3*12*FLEN/8, x4, x1, x2)

inst_100621:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1b6db6db6db6db; valaddr_reg:x3; val_offset:301863*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301863*0 + 3*13*FLEN/8, x4, x1, x2)

inst_100622:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1ccccccccccccc; valaddr_reg:x3; val_offset:301866*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301866*0 + 3*14*FLEN/8, x4, x1, x2)

inst_100623:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1db6db6db6db6d; valaddr_reg:x3; val_offset:301869*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301869*0 + 3*15*FLEN/8, x4, x1, x2)

inst_100624:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1fffffffffffc0; valaddr_reg:x3; val_offset:301872*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301872*0 + 3*16*FLEN/8, x4, x1, x2)

inst_100625:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1fffffffffffe0; valaddr_reg:x3; val_offset:301875*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301875*0 + 3*17*FLEN/8, x4, x1, x2)

inst_100626:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1ffffffffffff0; valaddr_reg:x3; val_offset:301878*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301878*0 + 3*18*FLEN/8, x4, x1, x2)

inst_100627:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1ffffffffffff8; valaddr_reg:x3; val_offset:301881*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301881*0 + 3*19*FLEN/8, x4, x1, x2)

inst_100628:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1ffffffffffffc; valaddr_reg:x3; val_offset:301884*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301884*0 + 3*20*FLEN/8, x4, x1, x2)

inst_100629:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x001 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x1ffffffffffffe; valaddr_reg:x3; val_offset:301887*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301887*0 + 3*21*FLEN/8, x4, x1, x2)

inst_100630:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000000000; valaddr_reg:x3; val_offset:301890*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301890*0 + 3*22*FLEN/8, x4, x1, x2)

inst_100631:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000000001; valaddr_reg:x3; val_offset:301893*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301893*0 + 3*23*FLEN/8, x4, x1, x2)

inst_100632:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000000003; valaddr_reg:x3; val_offset:301896*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301896*0 + 3*24*FLEN/8, x4, x1, x2)

inst_100633:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000000007; valaddr_reg:x3; val_offset:301899*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301899*0 + 3*25*FLEN/8, x4, x1, x2)

inst_100634:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000000000f; valaddr_reg:x3; val_offset:301902*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301902*0 + 3*26*FLEN/8, x4, x1, x2)

inst_100635:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000000001f; valaddr_reg:x3; val_offset:301905*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301905*0 + 3*27*FLEN/8, x4, x1, x2)

inst_100636:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000000003f; valaddr_reg:x3; val_offset:301908*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301908*0 + 3*28*FLEN/8, x4, x1, x2)

inst_100637:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000000007f; valaddr_reg:x3; val_offset:301911*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301911*0 + 3*29*FLEN/8, x4, x1, x2)

inst_100638:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000000000ff; valaddr_reg:x3; val_offset:301914*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301914*0 + 3*30*FLEN/8, x4, x1, x2)

inst_100639:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000000001ff; valaddr_reg:x3; val_offset:301917*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301917*0 + 3*31*FLEN/8, x4, x1, x2)

inst_100640:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000000003ff; valaddr_reg:x3; val_offset:301920*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301920*0 + 3*32*FLEN/8, x4, x1, x2)

inst_100641:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000000007ff; valaddr_reg:x3; val_offset:301923*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301923*0 + 3*33*FLEN/8, x4, x1, x2)

inst_100642:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000000fff; valaddr_reg:x3; val_offset:301926*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301926*0 + 3*34*FLEN/8, x4, x1, x2)

inst_100643:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000001fff; valaddr_reg:x3; val_offset:301929*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301929*0 + 3*35*FLEN/8, x4, x1, x2)

inst_100644:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000003fff; valaddr_reg:x3; val_offset:301932*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301932*0 + 3*36*FLEN/8, x4, x1, x2)

inst_100645:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000007fff; valaddr_reg:x3; val_offset:301935*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301935*0 + 3*37*FLEN/8, x4, x1, x2)

inst_100646:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000000ffff; valaddr_reg:x3; val_offset:301938*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301938*0 + 3*38*FLEN/8, x4, x1, x2)

inst_100647:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000001ffff; valaddr_reg:x3; val_offset:301941*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301941*0 + 3*39*FLEN/8, x4, x1, x2)

inst_100648:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000003ffff; valaddr_reg:x3; val_offset:301944*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301944*0 + 3*40*FLEN/8, x4, x1, x2)

inst_100649:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000007ffff; valaddr_reg:x3; val_offset:301947*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301947*0 + 3*41*FLEN/8, x4, x1, x2)

inst_100650:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000000fffff; valaddr_reg:x3; val_offset:301950*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301950*0 + 3*42*FLEN/8, x4, x1, x2)

inst_100651:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000001fffff; valaddr_reg:x3; val_offset:301953*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301953*0 + 3*43*FLEN/8, x4, x1, x2)

inst_100652:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000003fffff; valaddr_reg:x3; val_offset:301956*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301956*0 + 3*44*FLEN/8, x4, x1, x2)

inst_100653:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000007fffff; valaddr_reg:x3; val_offset:301959*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301959*0 + 3*45*FLEN/8, x4, x1, x2)

inst_100654:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000000ffffff; valaddr_reg:x3; val_offset:301962*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301962*0 + 3*46*FLEN/8, x4, x1, x2)

inst_100655:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000001ffffff; valaddr_reg:x3; val_offset:301965*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301965*0 + 3*47*FLEN/8, x4, x1, x2)

inst_100656:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000003ffffff; valaddr_reg:x3; val_offset:301968*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301968*0 + 3*48*FLEN/8, x4, x1, x2)

inst_100657:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000007ffffff; valaddr_reg:x3; val_offset:301971*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301971*0 + 3*49*FLEN/8, x4, x1, x2)

inst_100658:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000000fffffff; valaddr_reg:x3; val_offset:301974*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301974*0 + 3*50*FLEN/8, x4, x1, x2)

inst_100659:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000001fffffff; valaddr_reg:x3; val_offset:301977*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301977*0 + 3*51*FLEN/8, x4, x1, x2)

inst_100660:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000003fffffff; valaddr_reg:x3; val_offset:301980*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301980*0 + 3*52*FLEN/8, x4, x1, x2)

inst_100661:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000007fffffff; valaddr_reg:x3; val_offset:301983*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301983*0 + 3*53*FLEN/8, x4, x1, x2)

inst_100662:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900000ffffffff; valaddr_reg:x3; val_offset:301986*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301986*0 + 3*54*FLEN/8, x4, x1, x2)

inst_100663:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900001ffffffff; valaddr_reg:x3; val_offset:301989*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301989*0 + 3*55*FLEN/8, x4, x1, x2)

inst_100664:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900003ffffffff; valaddr_reg:x3; val_offset:301992*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301992*0 + 3*56*FLEN/8, x4, x1, x2)

inst_100665:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900007ffffffff; valaddr_reg:x3; val_offset:301995*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301995*0 + 3*57*FLEN/8, x4, x1, x2)

inst_100666:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90000fffffffff; valaddr_reg:x3; val_offset:301998*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 301998*0 + 3*58*FLEN/8, x4, x1, x2)

inst_100667:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90001fffffffff; valaddr_reg:x3; val_offset:302001*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302001*0 + 3*59*FLEN/8, x4, x1, x2)

inst_100668:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90003fffffffff; valaddr_reg:x3; val_offset:302004*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302004*0 + 3*60*FLEN/8, x4, x1, x2)

inst_100669:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90007fffffffff; valaddr_reg:x3; val_offset:302007*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302007*0 + 3*61*FLEN/8, x4, x1, x2)

inst_100670:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9000ffffffffff; valaddr_reg:x3; val_offset:302010*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302010*0 + 3*62*FLEN/8, x4, x1, x2)

inst_100671:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9001ffffffffff; valaddr_reg:x3; val_offset:302013*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302013*0 + 3*63*FLEN/8, x4, x1, x2)

inst_100672:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9003ffffffffff; valaddr_reg:x3; val_offset:302016*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302016*0 + 3*64*FLEN/8, x4, x1, x2)

inst_100673:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9007ffffffffff; valaddr_reg:x3; val_offset:302019*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302019*0 + 3*65*FLEN/8, x4, x1, x2)

inst_100674:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x900fffffffffff; valaddr_reg:x3; val_offset:302022*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302022*0 + 3*66*FLEN/8, x4, x1, x2)

inst_100675:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x901fffffffffff; valaddr_reg:x3; val_offset:302025*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302025*0 + 3*67*FLEN/8, x4, x1, x2)

inst_100676:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x903fffffffffff; valaddr_reg:x3; val_offset:302028*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302028*0 + 3*68*FLEN/8, x4, x1, x2)

inst_100677:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x907fffffffffff; valaddr_reg:x3; val_offset:302031*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302031*0 + 3*69*FLEN/8, x4, x1, x2)

inst_100678:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x90ffffffffffff; valaddr_reg:x3; val_offset:302034*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302034*0 + 3*70*FLEN/8, x4, x1, x2)

inst_100679:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x91ffffffffffff; valaddr_reg:x3; val_offset:302037*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302037*0 + 3*71*FLEN/8, x4, x1, x2)

inst_100680:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x93ffffffffffff; valaddr_reg:x3; val_offset:302040*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302040*0 + 3*72*FLEN/8, x4, x1, x2)

inst_100681:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x97ffffffffffff; valaddr_reg:x3; val_offset:302043*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302043*0 + 3*73*FLEN/8, x4, x1, x2)

inst_100682:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x98000000000000; valaddr_reg:x3; val_offset:302046*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302046*0 + 3*74*FLEN/8, x4, x1, x2)

inst_100683:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9c000000000000; valaddr_reg:x3; val_offset:302049*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302049*0 + 3*75*FLEN/8, x4, x1, x2)

inst_100684:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9e000000000000; valaddr_reg:x3; val_offset:302052*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302052*0 + 3*76*FLEN/8, x4, x1, x2)

inst_100685:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9f000000000000; valaddr_reg:x3; val_offset:302055*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302055*0 + 3*77*FLEN/8, x4, x1, x2)

inst_100686:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9f800000000000; valaddr_reg:x3; val_offset:302058*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302058*0 + 3*78*FLEN/8, x4, x1, x2)

inst_100687:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fc00000000000; valaddr_reg:x3; val_offset:302061*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302061*0 + 3*79*FLEN/8, x4, x1, x2)

inst_100688:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fe00000000000; valaddr_reg:x3; val_offset:302064*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302064*0 + 3*80*FLEN/8, x4, x1, x2)

inst_100689:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ff00000000000; valaddr_reg:x3; val_offset:302067*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302067*0 + 3*81*FLEN/8, x4, x1, x2)

inst_100690:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ff80000000000; valaddr_reg:x3; val_offset:302070*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302070*0 + 3*82*FLEN/8, x4, x1, x2)

inst_100691:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffc0000000000; valaddr_reg:x3; val_offset:302073*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302073*0 + 3*83*FLEN/8, x4, x1, x2)

inst_100692:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffe0000000000; valaddr_reg:x3; val_offset:302076*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302076*0 + 3*84*FLEN/8, x4, x1, x2)

inst_100693:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fff0000000000; valaddr_reg:x3; val_offset:302079*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302079*0 + 3*85*FLEN/8, x4, x1, x2)

inst_100694:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fff8000000000; valaddr_reg:x3; val_offset:302082*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302082*0 + 3*86*FLEN/8, x4, x1, x2)

inst_100695:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffc000000000; valaddr_reg:x3; val_offset:302085*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302085*0 + 3*87*FLEN/8, x4, x1, x2)

inst_100696:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffe000000000; valaddr_reg:x3; val_offset:302088*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302088*0 + 3*88*FLEN/8, x4, x1, x2)

inst_100697:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffff000000000; valaddr_reg:x3; val_offset:302091*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302091*0 + 3*89*FLEN/8, x4, x1, x2)

inst_100698:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffff800000000; valaddr_reg:x3; val_offset:302094*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302094*0 + 3*90*FLEN/8, x4, x1, x2)

inst_100699:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffc00000000; valaddr_reg:x3; val_offset:302097*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302097*0 + 3*91*FLEN/8, x4, x1, x2)

inst_100700:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffe00000000; valaddr_reg:x3; val_offset:302100*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302100*0 + 3*92*FLEN/8, x4, x1, x2)

inst_100701:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffff00000000; valaddr_reg:x3; val_offset:302103*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302103*0 + 3*93*FLEN/8, x4, x1, x2)

inst_100702:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffff80000000; valaddr_reg:x3; val_offset:302106*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302106*0 + 3*94*FLEN/8, x4, x1, x2)

inst_100703:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffc0000000; valaddr_reg:x3; val_offset:302109*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302109*0 + 3*95*FLEN/8, x4, x1, x2)

inst_100704:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffe0000000; valaddr_reg:x3; val_offset:302112*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302112*0 + 3*96*FLEN/8, x4, x1, x2)

inst_100705:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffff0000000; valaddr_reg:x3; val_offset:302115*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302115*0 + 3*97*FLEN/8, x4, x1, x2)

inst_100706:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffff8000000; valaddr_reg:x3; val_offset:302118*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302118*0 + 3*98*FLEN/8, x4, x1, x2)

inst_100707:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffc000000; valaddr_reg:x3; val_offset:302121*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302121*0 + 3*99*FLEN/8, x4, x1, x2)

inst_100708:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffe000000; valaddr_reg:x3; val_offset:302124*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302124*0 + 3*100*FLEN/8, x4, x1, x2)

inst_100709:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffff000000; valaddr_reg:x3; val_offset:302127*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302127*0 + 3*101*FLEN/8, x4, x1, x2)

inst_100710:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffff800000; valaddr_reg:x3; val_offset:302130*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302130*0 + 3*102*FLEN/8, x4, x1, x2)

inst_100711:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffc00000; valaddr_reg:x3; val_offset:302133*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302133*0 + 3*103*FLEN/8, x4, x1, x2)

inst_100712:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffe00000; valaddr_reg:x3; val_offset:302136*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302136*0 + 3*104*FLEN/8, x4, x1, x2)

inst_100713:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffff00000; valaddr_reg:x3; val_offset:302139*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302139*0 + 3*105*FLEN/8, x4, x1, x2)

inst_100714:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffff80000; valaddr_reg:x3; val_offset:302142*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302142*0 + 3*106*FLEN/8, x4, x1, x2)

inst_100715:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffc0000; valaddr_reg:x3; val_offset:302145*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302145*0 + 3*107*FLEN/8, x4, x1, x2)

inst_100716:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffe0000; valaddr_reg:x3; val_offset:302148*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302148*0 + 3*108*FLEN/8, x4, x1, x2)

inst_100717:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffff0000; valaddr_reg:x3; val_offset:302151*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302151*0 + 3*109*FLEN/8, x4, x1, x2)

inst_100718:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffff8000; valaddr_reg:x3; val_offset:302154*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302154*0 + 3*110*FLEN/8, x4, x1, x2)

inst_100719:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffffc000; valaddr_reg:x3; val_offset:302157*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302157*0 + 3*111*FLEN/8, x4, x1, x2)

inst_100720:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffffe000; valaddr_reg:x3; val_offset:302160*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302160*0 + 3*112*FLEN/8, x4, x1, x2)

inst_100721:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffff000; valaddr_reg:x3; val_offset:302163*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302163*0 + 3*113*FLEN/8, x4, x1, x2)

inst_100722:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffff800; valaddr_reg:x3; val_offset:302166*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302166*0 + 3*114*FLEN/8, x4, x1, x2)

inst_100723:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffffc00; valaddr_reg:x3; val_offset:302169*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302169*0 + 3*115*FLEN/8, x4, x1, x2)

inst_100724:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffffe00; valaddr_reg:x3; val_offset:302172*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302172*0 + 3*116*FLEN/8, x4, x1, x2)

inst_100725:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffffff00; valaddr_reg:x3; val_offset:302175*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302175*0 + 3*117*FLEN/8, x4, x1, x2)

inst_100726:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffffff80; valaddr_reg:x3; val_offset:302178*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302178*0 + 3*118*FLEN/8, x4, x1, x2)

inst_100727:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffffffc0; valaddr_reg:x3; val_offset:302181*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302181*0 + 3*119*FLEN/8, x4, x1, x2)

inst_100728:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffffffe0; valaddr_reg:x3; val_offset:302184*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302184*0 + 3*120*FLEN/8, x4, x1, x2)

inst_100729:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffffff0; valaddr_reg:x3; val_offset:302187*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302187*0 + 3*121*FLEN/8, x4, x1, x2)

inst_100730:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffffff8; valaddr_reg:x3; val_offset:302190*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302190*0 + 3*122*FLEN/8, x4, x1, x2)

inst_100731:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffffffc; valaddr_reg:x3; val_offset:302193*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302193*0 + 3*123*FLEN/8, x4, x1, x2)

inst_100732:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9ffffffffffffe; valaddr_reg:x3; val_offset:302196*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302196*0 + 3*124*FLEN/8, x4, x1, x2)

inst_100733:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf78b3d18e3547 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x009 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf78b3d18e3547; op2val:0x0;
op3val:0x9fffffffffffff; valaddr_reg:x3; val_offset:302199*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302199*0 + 3*125*FLEN/8, x4, x1, x2)

inst_100734:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:302202*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302202*0 + 3*126*FLEN/8, x4, x1, x2)

inst_100735:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:302205*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302205*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_100736:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:302208*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302208*0 + 3*128*FLEN/8, x4, x1, x2)

inst_100737:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:302211*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302211*0 + 3*129*FLEN/8, x4, x1, x2)

inst_100738:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:302214*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302214*0 + 3*130*FLEN/8, x4, x1, x2)

inst_100739:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:302217*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302217*0 + 3*131*FLEN/8, x4, x1, x2)

inst_100740:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:302220*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302220*0 + 3*132*FLEN/8, x4, x1, x2)

inst_100741:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:302223*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302223*0 + 3*133*FLEN/8, x4, x1, x2)

inst_100742:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:302226*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302226*0 + 3*134*FLEN/8, x4, x1, x2)

inst_100743:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:302229*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302229*0 + 3*135*FLEN/8, x4, x1, x2)

inst_100744:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:302232*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302232*0 + 3*136*FLEN/8, x4, x1, x2)

inst_100745:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:302235*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302235*0 + 3*137*FLEN/8, x4, x1, x2)

inst_100746:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:302238*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302238*0 + 3*138*FLEN/8, x4, x1, x2)

inst_100747:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:302241*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302241*0 + 3*139*FLEN/8, x4, x1, x2)

inst_100748:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:302244*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302244*0 + 3*140*FLEN/8, x4, x1, x2)

inst_100749:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:302247*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302247*0 + 3*141*FLEN/8, x4, x1, x2)

inst_100750:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:302250*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302250*0 + 3*142*FLEN/8, x4, x1, x2)

inst_100751:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:302253*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302253*0 + 3*143*FLEN/8, x4, x1, x2)

inst_100752:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:302256*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302256*0 + 3*144*FLEN/8, x4, x1, x2)

inst_100753:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:302259*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302259*0 + 3*145*FLEN/8, x4, x1, x2)

inst_100754:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:302262*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302262*0 + 3*146*FLEN/8, x4, x1, x2)

inst_100755:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:302265*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302265*0 + 3*147*FLEN/8, x4, x1, x2)

inst_100756:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000000000; valaddr_reg:x3; val_offset:302268*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302268*0 + 3*148*FLEN/8, x4, x1, x2)

inst_100757:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000000001; valaddr_reg:x3; val_offset:302271*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302271*0 + 3*149*FLEN/8, x4, x1, x2)

inst_100758:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000000003; valaddr_reg:x3; val_offset:302274*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302274*0 + 3*150*FLEN/8, x4, x1, x2)

inst_100759:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000000007; valaddr_reg:x3; val_offset:302277*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302277*0 + 3*151*FLEN/8, x4, x1, x2)

inst_100760:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000000000f; valaddr_reg:x3; val_offset:302280*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302280*0 + 3*152*FLEN/8, x4, x1, x2)

inst_100761:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000000001f; valaddr_reg:x3; val_offset:302283*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302283*0 + 3*153*FLEN/8, x4, x1, x2)

inst_100762:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000000003f; valaddr_reg:x3; val_offset:302286*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302286*0 + 3*154*FLEN/8, x4, x1, x2)

inst_100763:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000000007f; valaddr_reg:x3; val_offset:302289*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302289*0 + 3*155*FLEN/8, x4, x1, x2)

inst_100764:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000000000ff; valaddr_reg:x3; val_offset:302292*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302292*0 + 3*156*FLEN/8, x4, x1, x2)

inst_100765:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000000001ff; valaddr_reg:x3; val_offset:302295*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302295*0 + 3*157*FLEN/8, x4, x1, x2)

inst_100766:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000000003ff; valaddr_reg:x3; val_offset:302298*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302298*0 + 3*158*FLEN/8, x4, x1, x2)

inst_100767:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000000007ff; valaddr_reg:x3; val_offset:302301*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302301*0 + 3*159*FLEN/8, x4, x1, x2)

inst_100768:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000000fff; valaddr_reg:x3; val_offset:302304*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302304*0 + 3*160*FLEN/8, x4, x1, x2)

inst_100769:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000001fff; valaddr_reg:x3; val_offset:302307*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302307*0 + 3*161*FLEN/8, x4, x1, x2)

inst_100770:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000003fff; valaddr_reg:x3; val_offset:302310*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302310*0 + 3*162*FLEN/8, x4, x1, x2)

inst_100771:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000007fff; valaddr_reg:x3; val_offset:302313*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302313*0 + 3*163*FLEN/8, x4, x1, x2)

inst_100772:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000000ffff; valaddr_reg:x3; val_offset:302316*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302316*0 + 3*164*FLEN/8, x4, x1, x2)

inst_100773:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000001ffff; valaddr_reg:x3; val_offset:302319*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302319*0 + 3*165*FLEN/8, x4, x1, x2)

inst_100774:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000003ffff; valaddr_reg:x3; val_offset:302322*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302322*0 + 3*166*FLEN/8, x4, x1, x2)

inst_100775:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000007ffff; valaddr_reg:x3; val_offset:302325*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302325*0 + 3*167*FLEN/8, x4, x1, x2)

inst_100776:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000000fffff; valaddr_reg:x3; val_offset:302328*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302328*0 + 3*168*FLEN/8, x4, x1, x2)

inst_100777:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000001fffff; valaddr_reg:x3; val_offset:302331*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302331*0 + 3*169*FLEN/8, x4, x1, x2)

inst_100778:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000003fffff; valaddr_reg:x3; val_offset:302334*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302334*0 + 3*170*FLEN/8, x4, x1, x2)

inst_100779:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000007fffff; valaddr_reg:x3; val_offset:302337*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302337*0 + 3*171*FLEN/8, x4, x1, x2)

inst_100780:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000000ffffff; valaddr_reg:x3; val_offset:302340*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302340*0 + 3*172*FLEN/8, x4, x1, x2)

inst_100781:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000001ffffff; valaddr_reg:x3; val_offset:302343*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302343*0 + 3*173*FLEN/8, x4, x1, x2)

inst_100782:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000003ffffff; valaddr_reg:x3; val_offset:302346*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302346*0 + 3*174*FLEN/8, x4, x1, x2)

inst_100783:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000007ffffff; valaddr_reg:x3; val_offset:302349*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302349*0 + 3*175*FLEN/8, x4, x1, x2)

inst_100784:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000000fffffff; valaddr_reg:x3; val_offset:302352*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302352*0 + 3*176*FLEN/8, x4, x1, x2)

inst_100785:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000001fffffff; valaddr_reg:x3; val_offset:302355*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302355*0 + 3*177*FLEN/8, x4, x1, x2)

inst_100786:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000003fffffff; valaddr_reg:x3; val_offset:302358*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302358*0 + 3*178*FLEN/8, x4, x1, x2)

inst_100787:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000007fffffff; valaddr_reg:x3; val_offset:302361*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302361*0 + 3*179*FLEN/8, x4, x1, x2)

inst_100788:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00000ffffffff; valaddr_reg:x3; val_offset:302364*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302364*0 + 3*180*FLEN/8, x4, x1, x2)

inst_100789:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00001ffffffff; valaddr_reg:x3; val_offset:302367*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302367*0 + 3*181*FLEN/8, x4, x1, x2)

inst_100790:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00003ffffffff; valaddr_reg:x3; val_offset:302370*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302370*0 + 3*182*FLEN/8, x4, x1, x2)

inst_100791:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00007ffffffff; valaddr_reg:x3; val_offset:302373*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302373*0 + 3*183*FLEN/8, x4, x1, x2)

inst_100792:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0000fffffffff; valaddr_reg:x3; val_offset:302376*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302376*0 + 3*184*FLEN/8, x4, x1, x2)

inst_100793:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0001fffffffff; valaddr_reg:x3; val_offset:302379*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302379*0 + 3*185*FLEN/8, x4, x1, x2)

inst_100794:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0003fffffffff; valaddr_reg:x3; val_offset:302382*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302382*0 + 3*186*FLEN/8, x4, x1, x2)

inst_100795:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0007fffffffff; valaddr_reg:x3; val_offset:302385*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302385*0 + 3*187*FLEN/8, x4, x1, x2)

inst_100796:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd000ffffffffff; valaddr_reg:x3; val_offset:302388*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302388*0 + 3*188*FLEN/8, x4, x1, x2)

inst_100797:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd001ffffffffff; valaddr_reg:x3; val_offset:302391*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302391*0 + 3*189*FLEN/8, x4, x1, x2)

inst_100798:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd003ffffffffff; valaddr_reg:x3; val_offset:302394*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302394*0 + 3*190*FLEN/8, x4, x1, x2)

inst_100799:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd007ffffffffff; valaddr_reg:x3; val_offset:302397*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302397*0 + 3*191*FLEN/8, x4, x1, x2)

inst_100800:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd00fffffffffff; valaddr_reg:x3; val_offset:302400*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302400*0 + 3*192*FLEN/8, x4, x1, x2)

inst_100801:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd01fffffffffff; valaddr_reg:x3; val_offset:302403*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302403*0 + 3*193*FLEN/8, x4, x1, x2)

inst_100802:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd03fffffffffff; valaddr_reg:x3; val_offset:302406*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302406*0 + 3*194*FLEN/8, x4, x1, x2)

inst_100803:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd07fffffffffff; valaddr_reg:x3; val_offset:302409*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302409*0 + 3*195*FLEN/8, x4, x1, x2)

inst_100804:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd0ffffffffffff; valaddr_reg:x3; val_offset:302412*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302412*0 + 3*196*FLEN/8, x4, x1, x2)

inst_100805:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd1ffffffffffff; valaddr_reg:x3; val_offset:302415*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302415*0 + 3*197*FLEN/8, x4, x1, x2)

inst_100806:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd3ffffffffffff; valaddr_reg:x3; val_offset:302418*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302418*0 + 3*198*FLEN/8, x4, x1, x2)

inst_100807:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd7ffffffffffff; valaddr_reg:x3; val_offset:302421*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302421*0 + 3*199*FLEN/8, x4, x1, x2)

inst_100808:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xd8000000000000; valaddr_reg:x3; val_offset:302424*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302424*0 + 3*200*FLEN/8, x4, x1, x2)

inst_100809:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdc000000000000; valaddr_reg:x3; val_offset:302427*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302427*0 + 3*201*FLEN/8, x4, x1, x2)

inst_100810:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xde000000000000; valaddr_reg:x3; val_offset:302430*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302430*0 + 3*202*FLEN/8, x4, x1, x2)

inst_100811:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdf000000000000; valaddr_reg:x3; val_offset:302433*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302433*0 + 3*203*FLEN/8, x4, x1, x2)

inst_100812:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdf800000000000; valaddr_reg:x3; val_offset:302436*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302436*0 + 3*204*FLEN/8, x4, x1, x2)

inst_100813:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfc00000000000; valaddr_reg:x3; val_offset:302439*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302439*0 + 3*205*FLEN/8, x4, x1, x2)

inst_100814:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfe00000000000; valaddr_reg:x3; val_offset:302442*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302442*0 + 3*206*FLEN/8, x4, x1, x2)

inst_100815:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdff00000000000; valaddr_reg:x3; val_offset:302445*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302445*0 + 3*207*FLEN/8, x4, x1, x2)

inst_100816:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdff80000000000; valaddr_reg:x3; val_offset:302448*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302448*0 + 3*208*FLEN/8, x4, x1, x2)

inst_100817:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffc0000000000; valaddr_reg:x3; val_offset:302451*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302451*0 + 3*209*FLEN/8, x4, x1, x2)

inst_100818:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffe0000000000; valaddr_reg:x3; val_offset:302454*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302454*0 + 3*210*FLEN/8, x4, x1, x2)

inst_100819:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfff0000000000; valaddr_reg:x3; val_offset:302457*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302457*0 + 3*211*FLEN/8, x4, x1, x2)

inst_100820:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfff8000000000; valaddr_reg:x3; val_offset:302460*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302460*0 + 3*212*FLEN/8, x4, x1, x2)

inst_100821:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffc000000000; valaddr_reg:x3; val_offset:302463*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302463*0 + 3*213*FLEN/8, x4, x1, x2)

inst_100822:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffe000000000; valaddr_reg:x3; val_offset:302466*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302466*0 + 3*214*FLEN/8, x4, x1, x2)

inst_100823:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffff000000000; valaddr_reg:x3; val_offset:302469*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302469*0 + 3*215*FLEN/8, x4, x1, x2)

inst_100824:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffff800000000; valaddr_reg:x3; val_offset:302472*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302472*0 + 3*216*FLEN/8, x4, x1, x2)

inst_100825:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffc00000000; valaddr_reg:x3; val_offset:302475*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302475*0 + 3*217*FLEN/8, x4, x1, x2)

inst_100826:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffe00000000; valaddr_reg:x3; val_offset:302478*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302478*0 + 3*218*FLEN/8, x4, x1, x2)

inst_100827:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffff00000000; valaddr_reg:x3; val_offset:302481*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302481*0 + 3*219*FLEN/8, x4, x1, x2)

inst_100828:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffff80000000; valaddr_reg:x3; val_offset:302484*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302484*0 + 3*220*FLEN/8, x4, x1, x2)

inst_100829:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffc0000000; valaddr_reg:x3; val_offset:302487*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302487*0 + 3*221*FLEN/8, x4, x1, x2)

inst_100830:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffe0000000; valaddr_reg:x3; val_offset:302490*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302490*0 + 3*222*FLEN/8, x4, x1, x2)

inst_100831:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffff0000000; valaddr_reg:x3; val_offset:302493*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302493*0 + 3*223*FLEN/8, x4, x1, x2)

inst_100832:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffff8000000; valaddr_reg:x3; val_offset:302496*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302496*0 + 3*224*FLEN/8, x4, x1, x2)

inst_100833:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffc000000; valaddr_reg:x3; val_offset:302499*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302499*0 + 3*225*FLEN/8, x4, x1, x2)

inst_100834:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffe000000; valaddr_reg:x3; val_offset:302502*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302502*0 + 3*226*FLEN/8, x4, x1, x2)

inst_100835:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffff000000; valaddr_reg:x3; val_offset:302505*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302505*0 + 3*227*FLEN/8, x4, x1, x2)

inst_100836:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffff800000; valaddr_reg:x3; val_offset:302508*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302508*0 + 3*228*FLEN/8, x4, x1, x2)

inst_100837:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffc00000; valaddr_reg:x3; val_offset:302511*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302511*0 + 3*229*FLEN/8, x4, x1, x2)

inst_100838:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffe00000; valaddr_reg:x3; val_offset:302514*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302514*0 + 3*230*FLEN/8, x4, x1, x2)

inst_100839:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffff00000; valaddr_reg:x3; val_offset:302517*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302517*0 + 3*231*FLEN/8, x4, x1, x2)

inst_100840:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffff80000; valaddr_reg:x3; val_offset:302520*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302520*0 + 3*232*FLEN/8, x4, x1, x2)

inst_100841:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffc0000; valaddr_reg:x3; val_offset:302523*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302523*0 + 3*233*FLEN/8, x4, x1, x2)

inst_100842:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffe0000; valaddr_reg:x3; val_offset:302526*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302526*0 + 3*234*FLEN/8, x4, x1, x2)

inst_100843:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffff0000; valaddr_reg:x3; val_offset:302529*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302529*0 + 3*235*FLEN/8, x4, x1, x2)

inst_100844:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffff8000; valaddr_reg:x3; val_offset:302532*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302532*0 + 3*236*FLEN/8, x4, x1, x2)

inst_100845:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffffc000; valaddr_reg:x3; val_offset:302535*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302535*0 + 3*237*FLEN/8, x4, x1, x2)

inst_100846:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffffe000; valaddr_reg:x3; val_offset:302538*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302538*0 + 3*238*FLEN/8, x4, x1, x2)

inst_100847:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffff000; valaddr_reg:x3; val_offset:302541*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302541*0 + 3*239*FLEN/8, x4, x1, x2)

inst_100848:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffff800; valaddr_reg:x3; val_offset:302544*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302544*0 + 3*240*FLEN/8, x4, x1, x2)

inst_100849:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffffc00; valaddr_reg:x3; val_offset:302547*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302547*0 + 3*241*FLEN/8, x4, x1, x2)

inst_100850:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffffe00; valaddr_reg:x3; val_offset:302550*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302550*0 + 3*242*FLEN/8, x4, x1, x2)

inst_100851:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffffff00; valaddr_reg:x3; val_offset:302553*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302553*0 + 3*243*FLEN/8, x4, x1, x2)

inst_100852:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffffff80; valaddr_reg:x3; val_offset:302556*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302556*0 + 3*244*FLEN/8, x4, x1, x2)

inst_100853:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffffffc0; valaddr_reg:x3; val_offset:302559*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302559*0 + 3*245*FLEN/8, x4, x1, x2)

inst_100854:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffffffe0; valaddr_reg:x3; val_offset:302562*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302562*0 + 3*246*FLEN/8, x4, x1, x2)

inst_100855:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffffff0; valaddr_reg:x3; val_offset:302565*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302565*0 + 3*247*FLEN/8, x4, x1, x2)

inst_100856:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffffff8; valaddr_reg:x3; val_offset:302568*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302568*0 + 3*248*FLEN/8, x4, x1, x2)

inst_100857:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffffffc; valaddr_reg:x3; val_offset:302571*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302571*0 + 3*249*FLEN/8, x4, x1, x2)

inst_100858:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdffffffffffffe; valaddr_reg:x3; val_offset:302574*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302574*0 + 3*250*FLEN/8, x4, x1, x2)

inst_100859:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xf97a09ba39484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x00d and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5faf97a09ba39484; op2val:0x0;
op3val:0xdfffffffffffff; valaddr_reg:x3; val_offset:302577*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302577*0 + 3*251*FLEN/8, x4, x1, x2)

inst_100860:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000000000; valaddr_reg:x3; val_offset:302580*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302580*0 + 3*252*FLEN/8, x4, x1, x2)

inst_100861:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000000001; valaddr_reg:x3; val_offset:302583*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302583*0 + 3*253*FLEN/8, x4, x1, x2)

inst_100862:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000000003; valaddr_reg:x3; val_offset:302586*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302586*0 + 3*254*FLEN/8, x4, x1, x2)

inst_100863:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000000007; valaddr_reg:x3; val_offset:302589*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302589*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_100864:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000000000f; valaddr_reg:x3; val_offset:302592*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302592*0 + 3*256*FLEN/8, x4, x1, x2)

inst_100865:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000000001f; valaddr_reg:x3; val_offset:302595*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302595*0 + 3*257*FLEN/8, x4, x1, x2)

inst_100866:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000000003f; valaddr_reg:x3; val_offset:302598*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302598*0 + 3*258*FLEN/8, x4, x1, x2)

inst_100867:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000000007f; valaddr_reg:x3; val_offset:302601*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302601*0 + 3*259*FLEN/8, x4, x1, x2)

inst_100868:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000000000ff; valaddr_reg:x3; val_offset:302604*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302604*0 + 3*260*FLEN/8, x4, x1, x2)

inst_100869:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000000001ff; valaddr_reg:x3; val_offset:302607*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302607*0 + 3*261*FLEN/8, x4, x1, x2)

inst_100870:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000000003ff; valaddr_reg:x3; val_offset:302610*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302610*0 + 3*262*FLEN/8, x4, x1, x2)

inst_100871:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000000007ff; valaddr_reg:x3; val_offset:302613*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302613*0 + 3*263*FLEN/8, x4, x1, x2)

inst_100872:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000000fff; valaddr_reg:x3; val_offset:302616*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302616*0 + 3*264*FLEN/8, x4, x1, x2)

inst_100873:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000001fff; valaddr_reg:x3; val_offset:302619*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302619*0 + 3*265*FLEN/8, x4, x1, x2)

inst_100874:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000003fff; valaddr_reg:x3; val_offset:302622*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302622*0 + 3*266*FLEN/8, x4, x1, x2)

inst_100875:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000007fff; valaddr_reg:x3; val_offset:302625*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302625*0 + 3*267*FLEN/8, x4, x1, x2)

inst_100876:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000000ffff; valaddr_reg:x3; val_offset:302628*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302628*0 + 3*268*FLEN/8, x4, x1, x2)

inst_100877:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000001ffff; valaddr_reg:x3; val_offset:302631*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302631*0 + 3*269*FLEN/8, x4, x1, x2)

inst_100878:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000003ffff; valaddr_reg:x3; val_offset:302634*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302634*0 + 3*270*FLEN/8, x4, x1, x2)

inst_100879:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000007ffff; valaddr_reg:x3; val_offset:302637*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302637*0 + 3*271*FLEN/8, x4, x1, x2)

inst_100880:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000000fffff; valaddr_reg:x3; val_offset:302640*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302640*0 + 3*272*FLEN/8, x4, x1, x2)

inst_100881:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000001fffff; valaddr_reg:x3; val_offset:302643*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302643*0 + 3*273*FLEN/8, x4, x1, x2)

inst_100882:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000003fffff; valaddr_reg:x3; val_offset:302646*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302646*0 + 3*274*FLEN/8, x4, x1, x2)

inst_100883:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000007fffff; valaddr_reg:x3; val_offset:302649*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302649*0 + 3*275*FLEN/8, x4, x1, x2)

inst_100884:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000000ffffff; valaddr_reg:x3; val_offset:302652*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302652*0 + 3*276*FLEN/8, x4, x1, x2)

inst_100885:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000001ffffff; valaddr_reg:x3; val_offset:302655*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302655*0 + 3*277*FLEN/8, x4, x1, x2)

inst_100886:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000003ffffff; valaddr_reg:x3; val_offset:302658*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302658*0 + 3*278*FLEN/8, x4, x1, x2)

inst_100887:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000007ffffff; valaddr_reg:x3; val_offset:302661*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302661*0 + 3*279*FLEN/8, x4, x1, x2)

inst_100888:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000000fffffff; valaddr_reg:x3; val_offset:302664*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302664*0 + 3*280*FLEN/8, x4, x1, x2)

inst_100889:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000001fffffff; valaddr_reg:x3; val_offset:302667*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302667*0 + 3*281*FLEN/8, x4, x1, x2)

inst_100890:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000003fffffff; valaddr_reg:x3; val_offset:302670*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302670*0 + 3*282*FLEN/8, x4, x1, x2)

inst_100891:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000007fffffff; valaddr_reg:x3; val_offset:302673*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302673*0 + 3*283*FLEN/8, x4, x1, x2)

inst_100892:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900000ffffffff; valaddr_reg:x3; val_offset:302676*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302676*0 + 3*284*FLEN/8, x4, x1, x2)

inst_100893:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900001ffffffff; valaddr_reg:x3; val_offset:302679*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302679*0 + 3*285*FLEN/8, x4, x1, x2)

inst_100894:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900003ffffffff; valaddr_reg:x3; val_offset:302682*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302682*0 + 3*286*FLEN/8, x4, x1, x2)

inst_100895:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900007ffffffff; valaddr_reg:x3; val_offset:302685*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302685*0 + 3*287*FLEN/8, x4, x1, x2)

inst_100896:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90000fffffffff; valaddr_reg:x3; val_offset:302688*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302688*0 + 3*288*FLEN/8, x4, x1, x2)

inst_100897:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90001fffffffff; valaddr_reg:x3; val_offset:302691*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302691*0 + 3*289*FLEN/8, x4, x1, x2)

inst_100898:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90003fffffffff; valaddr_reg:x3; val_offset:302694*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302694*0 + 3*290*FLEN/8, x4, x1, x2)

inst_100899:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90007fffffffff; valaddr_reg:x3; val_offset:302697*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302697*0 + 3*291*FLEN/8, x4, x1, x2)

inst_100900:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9000ffffffffff; valaddr_reg:x3; val_offset:302700*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302700*0 + 3*292*FLEN/8, x4, x1, x2)

inst_100901:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9001ffffffffff; valaddr_reg:x3; val_offset:302703*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302703*0 + 3*293*FLEN/8, x4, x1, x2)

inst_100902:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9003ffffffffff; valaddr_reg:x3; val_offset:302706*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302706*0 + 3*294*FLEN/8, x4, x1, x2)

inst_100903:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9007ffffffffff; valaddr_reg:x3; val_offset:302709*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302709*0 + 3*295*FLEN/8, x4, x1, x2)

inst_100904:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba900fffffffffff; valaddr_reg:x3; val_offset:302712*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302712*0 + 3*296*FLEN/8, x4, x1, x2)

inst_100905:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba901fffffffffff; valaddr_reg:x3; val_offset:302715*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302715*0 + 3*297*FLEN/8, x4, x1, x2)

inst_100906:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba903fffffffffff; valaddr_reg:x3; val_offset:302718*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302718*0 + 3*298*FLEN/8, x4, x1, x2)

inst_100907:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba907fffffffffff; valaddr_reg:x3; val_offset:302721*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302721*0 + 3*299*FLEN/8, x4, x1, x2)

inst_100908:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba90ffffffffffff; valaddr_reg:x3; val_offset:302724*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302724*0 + 3*300*FLEN/8, x4, x1, x2)

inst_100909:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba91ffffffffffff; valaddr_reg:x3; val_offset:302727*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302727*0 + 3*301*FLEN/8, x4, x1, x2)

inst_100910:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba93ffffffffffff; valaddr_reg:x3; val_offset:302730*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302730*0 + 3*302*FLEN/8, x4, x1, x2)

inst_100911:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba97ffffffffffff; valaddr_reg:x3; val_offset:302733*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302733*0 + 3*303*FLEN/8, x4, x1, x2)

inst_100912:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba98000000000000; valaddr_reg:x3; val_offset:302736*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302736*0 + 3*304*FLEN/8, x4, x1, x2)

inst_100913:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9c000000000000; valaddr_reg:x3; val_offset:302739*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302739*0 + 3*305*FLEN/8, x4, x1, x2)

inst_100914:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9e000000000000; valaddr_reg:x3; val_offset:302742*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302742*0 + 3*306*FLEN/8, x4, x1, x2)

inst_100915:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9f000000000000; valaddr_reg:x3; val_offset:302745*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302745*0 + 3*307*FLEN/8, x4, x1, x2)

inst_100916:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9f800000000000; valaddr_reg:x3; val_offset:302748*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302748*0 + 3*308*FLEN/8, x4, x1, x2)

inst_100917:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fc00000000000; valaddr_reg:x3; val_offset:302751*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302751*0 + 3*309*FLEN/8, x4, x1, x2)

inst_100918:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fe00000000000; valaddr_reg:x3; val_offset:302754*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302754*0 + 3*310*FLEN/8, x4, x1, x2)

inst_100919:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ff00000000000; valaddr_reg:x3; val_offset:302757*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302757*0 + 3*311*FLEN/8, x4, x1, x2)

inst_100920:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ff80000000000; valaddr_reg:x3; val_offset:302760*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302760*0 + 3*312*FLEN/8, x4, x1, x2)

inst_100921:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffc0000000000; valaddr_reg:x3; val_offset:302763*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302763*0 + 3*313*FLEN/8, x4, x1, x2)

inst_100922:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffe0000000000; valaddr_reg:x3; val_offset:302766*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302766*0 + 3*314*FLEN/8, x4, x1, x2)

inst_100923:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fff0000000000; valaddr_reg:x3; val_offset:302769*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302769*0 + 3*315*FLEN/8, x4, x1, x2)

inst_100924:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fff8000000000; valaddr_reg:x3; val_offset:302772*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302772*0 + 3*316*FLEN/8, x4, x1, x2)

inst_100925:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffc000000000; valaddr_reg:x3; val_offset:302775*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302775*0 + 3*317*FLEN/8, x4, x1, x2)

inst_100926:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffe000000000; valaddr_reg:x3; val_offset:302778*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302778*0 + 3*318*FLEN/8, x4, x1, x2)

inst_100927:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffff000000000; valaddr_reg:x3; val_offset:302781*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302781*0 + 3*319*FLEN/8, x4, x1, x2)

inst_100928:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffff800000000; valaddr_reg:x3; val_offset:302784*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302784*0 + 3*320*FLEN/8, x4, x1, x2)

inst_100929:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffc00000000; valaddr_reg:x3; val_offset:302787*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302787*0 + 3*321*FLEN/8, x4, x1, x2)

inst_100930:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffe00000000; valaddr_reg:x3; val_offset:302790*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302790*0 + 3*322*FLEN/8, x4, x1, x2)

inst_100931:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffff00000000; valaddr_reg:x3; val_offset:302793*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302793*0 + 3*323*FLEN/8, x4, x1, x2)

inst_100932:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffff80000000; valaddr_reg:x3; val_offset:302796*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302796*0 + 3*324*FLEN/8, x4, x1, x2)

inst_100933:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffc0000000; valaddr_reg:x3; val_offset:302799*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302799*0 + 3*325*FLEN/8, x4, x1, x2)

inst_100934:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffe0000000; valaddr_reg:x3; val_offset:302802*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302802*0 + 3*326*FLEN/8, x4, x1, x2)

inst_100935:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffff0000000; valaddr_reg:x3; val_offset:302805*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302805*0 + 3*327*FLEN/8, x4, x1, x2)

inst_100936:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffff8000000; valaddr_reg:x3; val_offset:302808*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302808*0 + 3*328*FLEN/8, x4, x1, x2)

inst_100937:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffc000000; valaddr_reg:x3; val_offset:302811*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302811*0 + 3*329*FLEN/8, x4, x1, x2)

inst_100938:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffe000000; valaddr_reg:x3; val_offset:302814*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302814*0 + 3*330*FLEN/8, x4, x1, x2)

inst_100939:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffff000000; valaddr_reg:x3; val_offset:302817*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302817*0 + 3*331*FLEN/8, x4, x1, x2)

inst_100940:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffff800000; valaddr_reg:x3; val_offset:302820*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302820*0 + 3*332*FLEN/8, x4, x1, x2)

inst_100941:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffc00000; valaddr_reg:x3; val_offset:302823*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302823*0 + 3*333*FLEN/8, x4, x1, x2)

inst_100942:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffe00000; valaddr_reg:x3; val_offset:302826*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302826*0 + 3*334*FLEN/8, x4, x1, x2)

inst_100943:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffff00000; valaddr_reg:x3; val_offset:302829*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302829*0 + 3*335*FLEN/8, x4, x1, x2)

inst_100944:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffff80000; valaddr_reg:x3; val_offset:302832*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302832*0 + 3*336*FLEN/8, x4, x1, x2)

inst_100945:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffc0000; valaddr_reg:x3; val_offset:302835*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302835*0 + 3*337*FLEN/8, x4, x1, x2)

inst_100946:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffe0000; valaddr_reg:x3; val_offset:302838*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302838*0 + 3*338*FLEN/8, x4, x1, x2)

inst_100947:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffff0000; valaddr_reg:x3; val_offset:302841*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302841*0 + 3*339*FLEN/8, x4, x1, x2)

inst_100948:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffff8000; valaddr_reg:x3; val_offset:302844*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302844*0 + 3*340*FLEN/8, x4, x1, x2)

inst_100949:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffffc000; valaddr_reg:x3; val_offset:302847*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302847*0 + 3*341*FLEN/8, x4, x1, x2)

inst_100950:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffffe000; valaddr_reg:x3; val_offset:302850*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302850*0 + 3*342*FLEN/8, x4, x1, x2)

inst_100951:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffff000; valaddr_reg:x3; val_offset:302853*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302853*0 + 3*343*FLEN/8, x4, x1, x2)

inst_100952:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffff800; valaddr_reg:x3; val_offset:302856*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302856*0 + 3*344*FLEN/8, x4, x1, x2)

inst_100953:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffffc00; valaddr_reg:x3; val_offset:302859*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302859*0 + 3*345*FLEN/8, x4, x1, x2)

inst_100954:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffffe00; valaddr_reg:x3; val_offset:302862*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302862*0 + 3*346*FLEN/8, x4, x1, x2)

inst_100955:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffffff00; valaddr_reg:x3; val_offset:302865*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302865*0 + 3*347*FLEN/8, x4, x1, x2)

inst_100956:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffffff80; valaddr_reg:x3; val_offset:302868*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302868*0 + 3*348*FLEN/8, x4, x1, x2)

inst_100957:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffffffc0; valaddr_reg:x3; val_offset:302871*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302871*0 + 3*349*FLEN/8, x4, x1, x2)

inst_100958:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffffffe0; valaddr_reg:x3; val_offset:302874*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302874*0 + 3*350*FLEN/8, x4, x1, x2)

inst_100959:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffffff0; valaddr_reg:x3; val_offset:302877*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302877*0 + 3*351*FLEN/8, x4, x1, x2)

inst_100960:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffffff8; valaddr_reg:x3; val_offset:302880*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302880*0 + 3*352*FLEN/8, x4, x1, x2)

inst_100961:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffffffc; valaddr_reg:x3; val_offset:302883*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302883*0 + 3*353*FLEN/8, x4, x1, x2)

inst_100962:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9ffffffffffffe; valaddr_reg:x3; val_offset:302886*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302886*0 + 3*354*FLEN/8, x4, x1, x2)

inst_100963:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3a9 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xba9fffffffffffff; valaddr_reg:x3; val_offset:302889*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302889*0 + 3*355*FLEN/8, x4, x1, x2)

inst_100964:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:302892*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302892*0 + 3*356*FLEN/8, x4, x1, x2)

inst_100965:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:302895*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302895*0 + 3*357*FLEN/8, x4, x1, x2)

inst_100966:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:302898*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302898*0 + 3*358*FLEN/8, x4, x1, x2)

inst_100967:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:302901*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302901*0 + 3*359*FLEN/8, x4, x1, x2)

inst_100968:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:302904*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302904*0 + 3*360*FLEN/8, x4, x1, x2)

inst_100969:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:302907*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302907*0 + 3*361*FLEN/8, x4, x1, x2)

inst_100970:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:302910*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302910*0 + 3*362*FLEN/8, x4, x1, x2)

inst_100971:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:302913*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302913*0 + 3*363*FLEN/8, x4, x1, x2)

inst_100972:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:302916*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302916*0 + 3*364*FLEN/8, x4, x1, x2)

inst_100973:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:302919*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302919*0 + 3*365*FLEN/8, x4, x1, x2)

inst_100974:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:302922*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302922*0 + 3*366*FLEN/8, x4, x1, x2)

inst_100975:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:302925*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302925*0 + 3*367*FLEN/8, x4, x1, x2)

inst_100976:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:302928*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302928*0 + 3*368*FLEN/8, x4, x1, x2)

inst_100977:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:302931*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302931*0 + 3*369*FLEN/8, x4, x1, x2)

inst_100978:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:302934*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302934*0 + 3*370*FLEN/8, x4, x1, x2)

inst_100979:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:302937*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302937*0 + 3*371*FLEN/8, x4, x1, x2)

inst_100980:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:302940*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302940*0 + 3*372*FLEN/8, x4, x1, x2)

inst_100981:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:302943*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302943*0 + 3*373*FLEN/8, x4, x1, x2)

inst_100982:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:302946*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302946*0 + 3*374*FLEN/8, x4, x1, x2)

inst_100983:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:302949*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302949*0 + 3*375*FLEN/8, x4, x1, x2)

inst_100984:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:302952*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302952*0 + 3*376*FLEN/8, x4, x1, x2)

inst_100985:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa174e3ff15ce and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02fd2d94467a7 and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa174e3ff15ce; op2val:0x9fc02fd2d94467a7;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:302955*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302955*0 + 3*377*FLEN/8, x4, x1, x2)

inst_100986:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000000000; valaddr_reg:x3; val_offset:302958*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302958*0 + 3*378*FLEN/8, x4, x1, x2)

inst_100987:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000000001; valaddr_reg:x3; val_offset:302961*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302961*0 + 3*379*FLEN/8, x4, x1, x2)

inst_100988:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000000003; valaddr_reg:x3; val_offset:302964*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302964*0 + 3*380*FLEN/8, x4, x1, x2)

inst_100989:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000000007; valaddr_reg:x3; val_offset:302967*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302967*0 + 3*381*FLEN/8, x4, x1, x2)

inst_100990:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000000000f; valaddr_reg:x3; val_offset:302970*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302970*0 + 3*382*FLEN/8, x4, x1, x2)

inst_100991:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000000001f; valaddr_reg:x3; val_offset:302973*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302973*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_100992:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000000003f; valaddr_reg:x3; val_offset:302976*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302976*0 + 3*384*FLEN/8, x4, x1, x2)

inst_100993:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000000007f; valaddr_reg:x3; val_offset:302979*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302979*0 + 3*385*FLEN/8, x4, x1, x2)

inst_100994:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000000000ff; valaddr_reg:x3; val_offset:302982*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302982*0 + 3*386*FLEN/8, x4, x1, x2)

inst_100995:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000000001ff; valaddr_reg:x3; val_offset:302985*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302985*0 + 3*387*FLEN/8, x4, x1, x2)

inst_100996:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000000003ff; valaddr_reg:x3; val_offset:302988*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302988*0 + 3*388*FLEN/8, x4, x1, x2)

inst_100997:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000000007ff; valaddr_reg:x3; val_offset:302991*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302991*0 + 3*389*FLEN/8, x4, x1, x2)

inst_100998:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000000fff; valaddr_reg:x3; val_offset:302994*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302994*0 + 3*390*FLEN/8, x4, x1, x2)

inst_100999:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000001fff; valaddr_reg:x3; val_offset:302997*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 302997*0 + 3*391*FLEN/8, x4, x1, x2)

inst_101000:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000003fff; valaddr_reg:x3; val_offset:303000*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303000*0 + 3*392*FLEN/8, x4, x1, x2)

inst_101001:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000007fff; valaddr_reg:x3; val_offset:303003*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303003*0 + 3*393*FLEN/8, x4, x1, x2)

inst_101002:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000000ffff; valaddr_reg:x3; val_offset:303006*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303006*0 + 3*394*FLEN/8, x4, x1, x2)

inst_101003:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000001ffff; valaddr_reg:x3; val_offset:303009*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303009*0 + 3*395*FLEN/8, x4, x1, x2)

inst_101004:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000003ffff; valaddr_reg:x3; val_offset:303012*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303012*0 + 3*396*FLEN/8, x4, x1, x2)

inst_101005:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000007ffff; valaddr_reg:x3; val_offset:303015*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303015*0 + 3*397*FLEN/8, x4, x1, x2)

inst_101006:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000000fffff; valaddr_reg:x3; val_offset:303018*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303018*0 + 3*398*FLEN/8, x4, x1, x2)

inst_101007:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000001fffff; valaddr_reg:x3; val_offset:303021*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303021*0 + 3*399*FLEN/8, x4, x1, x2)

inst_101008:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000003fffff; valaddr_reg:x3; val_offset:303024*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303024*0 + 3*400*FLEN/8, x4, x1, x2)

inst_101009:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000007fffff; valaddr_reg:x3; val_offset:303027*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303027*0 + 3*401*FLEN/8, x4, x1, x2)

inst_101010:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000000ffffff; valaddr_reg:x3; val_offset:303030*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303030*0 + 3*402*FLEN/8, x4, x1, x2)

inst_101011:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000001ffffff; valaddr_reg:x3; val_offset:303033*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303033*0 + 3*403*FLEN/8, x4, x1, x2)

inst_101012:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000003ffffff; valaddr_reg:x3; val_offset:303036*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303036*0 + 3*404*FLEN/8, x4, x1, x2)

inst_101013:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000007ffffff; valaddr_reg:x3; val_offset:303039*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303039*0 + 3*405*FLEN/8, x4, x1, x2)

inst_101014:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000000fffffff; valaddr_reg:x3; val_offset:303042*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303042*0 + 3*406*FLEN/8, x4, x1, x2)

inst_101015:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000001fffffff; valaddr_reg:x3; val_offset:303045*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303045*0 + 3*407*FLEN/8, x4, x1, x2)

inst_101016:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000003fffffff; valaddr_reg:x3; val_offset:303048*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303048*0 + 3*408*FLEN/8, x4, x1, x2)

inst_101017:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000007fffffff; valaddr_reg:x3; val_offset:303051*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303051*0 + 3*409*FLEN/8, x4, x1, x2)

inst_101018:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00000ffffffff; valaddr_reg:x3; val_offset:303054*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303054*0 + 3*410*FLEN/8, x4, x1, x2)

inst_101019:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00001ffffffff; valaddr_reg:x3; val_offset:303057*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303057*0 + 3*411*FLEN/8, x4, x1, x2)

inst_101020:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00003ffffffff; valaddr_reg:x3; val_offset:303060*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303060*0 + 3*412*FLEN/8, x4, x1, x2)

inst_101021:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00007ffffffff; valaddr_reg:x3; val_offset:303063*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303063*0 + 3*413*FLEN/8, x4, x1, x2)

inst_101022:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0000fffffffff; valaddr_reg:x3; val_offset:303066*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303066*0 + 3*414*FLEN/8, x4, x1, x2)

inst_101023:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0001fffffffff; valaddr_reg:x3; val_offset:303069*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303069*0 + 3*415*FLEN/8, x4, x1, x2)

inst_101024:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0003fffffffff; valaddr_reg:x3; val_offset:303072*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303072*0 + 3*416*FLEN/8, x4, x1, x2)

inst_101025:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0007fffffffff; valaddr_reg:x3; val_offset:303075*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303075*0 + 3*417*FLEN/8, x4, x1, x2)

inst_101026:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf000ffffffffff; valaddr_reg:x3; val_offset:303078*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303078*0 + 3*418*FLEN/8, x4, x1, x2)

inst_101027:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf001ffffffffff; valaddr_reg:x3; val_offset:303081*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303081*0 + 3*419*FLEN/8, x4, x1, x2)

inst_101028:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf003ffffffffff; valaddr_reg:x3; val_offset:303084*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303084*0 + 3*420*FLEN/8, x4, x1, x2)

inst_101029:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf007ffffffffff; valaddr_reg:x3; val_offset:303087*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303087*0 + 3*421*FLEN/8, x4, x1, x2)

inst_101030:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf00fffffffffff; valaddr_reg:x3; val_offset:303090*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303090*0 + 3*422*FLEN/8, x4, x1, x2)

inst_101031:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf01fffffffffff; valaddr_reg:x3; val_offset:303093*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303093*0 + 3*423*FLEN/8, x4, x1, x2)

inst_101032:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf03fffffffffff; valaddr_reg:x3; val_offset:303096*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303096*0 + 3*424*FLEN/8, x4, x1, x2)

inst_101033:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf07fffffffffff; valaddr_reg:x3; val_offset:303099*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303099*0 + 3*425*FLEN/8, x4, x1, x2)

inst_101034:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf0ffffffffffff; valaddr_reg:x3; val_offset:303102*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303102*0 + 3*426*FLEN/8, x4, x1, x2)

inst_101035:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf1ffffffffffff; valaddr_reg:x3; val_offset:303105*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303105*0 + 3*427*FLEN/8, x4, x1, x2)

inst_101036:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf3ffffffffffff; valaddr_reg:x3; val_offset:303108*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303108*0 + 3*428*FLEN/8, x4, x1, x2)

inst_101037:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf7ffffffffffff; valaddr_reg:x3; val_offset:303111*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303111*0 + 3*429*FLEN/8, x4, x1, x2)

inst_101038:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbf8000000000000; valaddr_reg:x3; val_offset:303114*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303114*0 + 3*430*FLEN/8, x4, x1, x2)

inst_101039:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfc000000000000; valaddr_reg:x3; val_offset:303117*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303117*0 + 3*431*FLEN/8, x4, x1, x2)

inst_101040:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfe000000000000; valaddr_reg:x3; val_offset:303120*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303120*0 + 3*432*FLEN/8, x4, x1, x2)

inst_101041:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbff000000000000; valaddr_reg:x3; val_offset:303123*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303123*0 + 3*433*FLEN/8, x4, x1, x2)

inst_101042:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbff800000000000; valaddr_reg:x3; val_offset:303126*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303126*0 + 3*434*FLEN/8, x4, x1, x2)

inst_101043:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffc00000000000; valaddr_reg:x3; val_offset:303129*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303129*0 + 3*435*FLEN/8, x4, x1, x2)

inst_101044:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffe00000000000; valaddr_reg:x3; val_offset:303132*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303132*0 + 3*436*FLEN/8, x4, x1, x2)

inst_101045:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfff00000000000; valaddr_reg:x3; val_offset:303135*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303135*0 + 3*437*FLEN/8, x4, x1, x2)

inst_101046:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfff80000000000; valaddr_reg:x3; val_offset:303138*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303138*0 + 3*438*FLEN/8, x4, x1, x2)

inst_101047:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffc0000000000; valaddr_reg:x3; val_offset:303141*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303141*0 + 3*439*FLEN/8, x4, x1, x2)

inst_101048:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffe0000000000; valaddr_reg:x3; val_offset:303144*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303144*0 + 3*440*FLEN/8, x4, x1, x2)

inst_101049:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffff0000000000; valaddr_reg:x3; val_offset:303147*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303147*0 + 3*441*FLEN/8, x4, x1, x2)

inst_101050:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffff8000000000; valaddr_reg:x3; val_offset:303150*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303150*0 + 3*442*FLEN/8, x4, x1, x2)

inst_101051:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffc000000000; valaddr_reg:x3; val_offset:303153*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303153*0 + 3*443*FLEN/8, x4, x1, x2)

inst_101052:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffe000000000; valaddr_reg:x3; val_offset:303156*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303156*0 + 3*444*FLEN/8, x4, x1, x2)

inst_101053:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffff000000000; valaddr_reg:x3; val_offset:303159*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303159*0 + 3*445*FLEN/8, x4, x1, x2)

inst_101054:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffff800000000; valaddr_reg:x3; val_offset:303162*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303162*0 + 3*446*FLEN/8, x4, x1, x2)

inst_101055:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffc00000000; valaddr_reg:x3; val_offset:303165*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303165*0 + 3*447*FLEN/8, x4, x1, x2)

inst_101056:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffe00000000; valaddr_reg:x3; val_offset:303168*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303168*0 + 3*448*FLEN/8, x4, x1, x2)

inst_101057:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffff00000000; valaddr_reg:x3; val_offset:303171*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303171*0 + 3*449*FLEN/8, x4, x1, x2)

inst_101058:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffff80000000; valaddr_reg:x3; val_offset:303174*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303174*0 + 3*450*FLEN/8, x4, x1, x2)

inst_101059:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffc0000000; valaddr_reg:x3; val_offset:303177*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303177*0 + 3*451*FLEN/8, x4, x1, x2)

inst_101060:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffe0000000; valaddr_reg:x3; val_offset:303180*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303180*0 + 3*452*FLEN/8, x4, x1, x2)

inst_101061:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffff0000000; valaddr_reg:x3; val_offset:303183*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303183*0 + 3*453*FLEN/8, x4, x1, x2)

inst_101062:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffff8000000; valaddr_reg:x3; val_offset:303186*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303186*0 + 3*454*FLEN/8, x4, x1, x2)

inst_101063:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffc000000; valaddr_reg:x3; val_offset:303189*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303189*0 + 3*455*FLEN/8, x4, x1, x2)

inst_101064:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffe000000; valaddr_reg:x3; val_offset:303192*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303192*0 + 3*456*FLEN/8, x4, x1, x2)

inst_101065:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffff000000; valaddr_reg:x3; val_offset:303195*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303195*0 + 3*457*FLEN/8, x4, x1, x2)

inst_101066:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffff800000; valaddr_reg:x3; val_offset:303198*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303198*0 + 3*458*FLEN/8, x4, x1, x2)

inst_101067:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffc00000; valaddr_reg:x3; val_offset:303201*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303201*0 + 3*459*FLEN/8, x4, x1, x2)

inst_101068:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffe00000; valaddr_reg:x3; val_offset:303204*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303204*0 + 3*460*FLEN/8, x4, x1, x2)

inst_101069:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffff00000; valaddr_reg:x3; val_offset:303207*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303207*0 + 3*461*FLEN/8, x4, x1, x2)

inst_101070:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffff80000; valaddr_reg:x3; val_offset:303210*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303210*0 + 3*462*FLEN/8, x4, x1, x2)

inst_101071:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffc0000; valaddr_reg:x3; val_offset:303213*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303213*0 + 3*463*FLEN/8, x4, x1, x2)

inst_101072:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffe0000; valaddr_reg:x3; val_offset:303216*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303216*0 + 3*464*FLEN/8, x4, x1, x2)

inst_101073:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffff0000; valaddr_reg:x3; val_offset:303219*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303219*0 + 3*465*FLEN/8, x4, x1, x2)

inst_101074:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffff8000; valaddr_reg:x3; val_offset:303222*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303222*0 + 3*466*FLEN/8, x4, x1, x2)

inst_101075:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffffc000; valaddr_reg:x3; val_offset:303225*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303225*0 + 3*467*FLEN/8, x4, x1, x2)

inst_101076:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffffe000; valaddr_reg:x3; val_offset:303228*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303228*0 + 3*468*FLEN/8, x4, x1, x2)

inst_101077:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffff000; valaddr_reg:x3; val_offset:303231*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303231*0 + 3*469*FLEN/8, x4, x1, x2)

inst_101078:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffff800; valaddr_reg:x3; val_offset:303234*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303234*0 + 3*470*FLEN/8, x4, x1, x2)

inst_101079:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffffc00; valaddr_reg:x3; val_offset:303237*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303237*0 + 3*471*FLEN/8, x4, x1, x2)

inst_101080:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffffe00; valaddr_reg:x3; val_offset:303240*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303240*0 + 3*472*FLEN/8, x4, x1, x2)

inst_101081:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffffff00; valaddr_reg:x3; val_offset:303243*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303243*0 + 3*473*FLEN/8, x4, x1, x2)

inst_101082:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffffff80; valaddr_reg:x3; val_offset:303246*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303246*0 + 3*474*FLEN/8, x4, x1, x2)

inst_101083:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffffffc0; valaddr_reg:x3; val_offset:303249*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303249*0 + 3*475*FLEN/8, x4, x1, x2)

inst_101084:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffffffe0; valaddr_reg:x3; val_offset:303252*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303252*0 + 3*476*FLEN/8, x4, x1, x2)

inst_101085:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffffff0; valaddr_reg:x3; val_offset:303255*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303255*0 + 3*477*FLEN/8, x4, x1, x2)

inst_101086:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffffff8; valaddr_reg:x3; val_offset:303258*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303258*0 + 3*478*FLEN/8, x4, x1, x2)

inst_101087:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffffffc; valaddr_reg:x3; val_offset:303261*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303261*0 + 3*479*FLEN/8, x4, x1, x2)

inst_101088:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbfffffffffffffe; valaddr_reg:x3; val_offset:303264*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303264*0 + 3*480*FLEN/8, x4, x1, x2)

inst_101089:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3bf and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbbffffffffffffff; valaddr_reg:x3; val_offset:303267*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303267*0 + 3*481*FLEN/8, x4, x1, x2)

inst_101090:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:303270*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303270*0 + 3*482*FLEN/8, x4, x1, x2)

inst_101091:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:303273*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303273*0 + 3*483*FLEN/8, x4, x1, x2)

inst_101092:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:303276*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303276*0 + 3*484*FLEN/8, x4, x1, x2)

inst_101093:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:303279*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303279*0 + 3*485*FLEN/8, x4, x1, x2)

inst_101094:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:303282*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303282*0 + 3*486*FLEN/8, x4, x1, x2)

inst_101095:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:303285*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303285*0 + 3*487*FLEN/8, x4, x1, x2)

inst_101096:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:303288*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303288*0 + 3*488*FLEN/8, x4, x1, x2)

inst_101097:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:303291*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303291*0 + 3*489*FLEN/8, x4, x1, x2)

inst_101098:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:303294*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303294*0 + 3*490*FLEN/8, x4, x1, x2)

inst_101099:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:303297*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303297*0 + 3*491*FLEN/8, x4, x1, x2)

inst_101100:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:303300*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303300*0 + 3*492*FLEN/8, x4, x1, x2)

inst_101101:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:303303*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303303*0 + 3*493*FLEN/8, x4, x1, x2)

inst_101102:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:303306*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303306*0 + 3*494*FLEN/8, x4, x1, x2)

inst_101103:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:303309*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303309*0 + 3*495*FLEN/8, x4, x1, x2)

inst_101104:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:303312*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303312*0 + 3*496*FLEN/8, x4, x1, x2)

inst_101105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:303315*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303315*0 + 3*497*FLEN/8, x4, x1, x2)

inst_101106:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:303318*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303318*0 + 3*498*FLEN/8, x4, x1, x2)

inst_101107:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:303321*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303321*0 + 3*499*FLEN/8, x4, x1, x2)

inst_101108:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:303324*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303324*0 + 3*500*FLEN/8, x4, x1, x2)

inst_101109:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:303327*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303327*0 + 3*501*FLEN/8, x4, x1, x2)

inst_101110:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:303330*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303330*0 + 3*502*FLEN/8, x4, x1, x2)

inst_101111:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfa358fa628cdb and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02edb2d819c7c and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafa358fa628cdb; op2val:0x9fc02edb2d819c7c;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:303333*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303333*0 + 3*503*FLEN/8, x4, x1, x2)

inst_101112:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000000000; valaddr_reg:x3; val_offset:303336*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303336*0 + 3*504*FLEN/8, x4, x1, x2)

inst_101113:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000000001; valaddr_reg:x3; val_offset:303339*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303339*0 + 3*505*FLEN/8, x4, x1, x2)

inst_101114:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000000003; valaddr_reg:x3; val_offset:303342*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303342*0 + 3*506*FLEN/8, x4, x1, x2)

inst_101115:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000000007; valaddr_reg:x3; val_offset:303345*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303345*0 + 3*507*FLEN/8, x4, x1, x2)

inst_101116:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000000000f; valaddr_reg:x3; val_offset:303348*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303348*0 + 3*508*FLEN/8, x4, x1, x2)

inst_101117:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000000001f; valaddr_reg:x3; val_offset:303351*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303351*0 + 3*509*FLEN/8, x4, x1, x2)

inst_101118:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000000003f; valaddr_reg:x3; val_offset:303354*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303354*0 + 3*510*FLEN/8, x4, x1, x2)

inst_101119:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000000007f; valaddr_reg:x3; val_offset:303357*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303357*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_101120:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000000000ff; valaddr_reg:x3; val_offset:303360*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303360*0 + 3*512*FLEN/8, x4, x1, x2)

inst_101121:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000000001ff; valaddr_reg:x3; val_offset:303363*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303363*0 + 3*513*FLEN/8, x4, x1, x2)

inst_101122:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000000003ff; valaddr_reg:x3; val_offset:303366*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303366*0 + 3*514*FLEN/8, x4, x1, x2)

inst_101123:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000000007ff; valaddr_reg:x3; val_offset:303369*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303369*0 + 3*515*FLEN/8, x4, x1, x2)

inst_101124:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000000fff; valaddr_reg:x3; val_offset:303372*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303372*0 + 3*516*FLEN/8, x4, x1, x2)

inst_101125:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000001fff; valaddr_reg:x3; val_offset:303375*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303375*0 + 3*517*FLEN/8, x4, x1, x2)

inst_101126:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000003fff; valaddr_reg:x3; val_offset:303378*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303378*0 + 3*518*FLEN/8, x4, x1, x2)

inst_101127:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000007fff; valaddr_reg:x3; val_offset:303381*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303381*0 + 3*519*FLEN/8, x4, x1, x2)

inst_101128:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000000ffff; valaddr_reg:x3; val_offset:303384*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303384*0 + 3*520*FLEN/8, x4, x1, x2)

inst_101129:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000001ffff; valaddr_reg:x3; val_offset:303387*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303387*0 + 3*521*FLEN/8, x4, x1, x2)

inst_101130:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000003ffff; valaddr_reg:x3; val_offset:303390*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303390*0 + 3*522*FLEN/8, x4, x1, x2)

inst_101131:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000007ffff; valaddr_reg:x3; val_offset:303393*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303393*0 + 3*523*FLEN/8, x4, x1, x2)

inst_101132:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000000fffff; valaddr_reg:x3; val_offset:303396*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303396*0 + 3*524*FLEN/8, x4, x1, x2)

inst_101133:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000001fffff; valaddr_reg:x3; val_offset:303399*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303399*0 + 3*525*FLEN/8, x4, x1, x2)

inst_101134:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000003fffff; valaddr_reg:x3; val_offset:303402*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303402*0 + 3*526*FLEN/8, x4, x1, x2)

inst_101135:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000007fffff; valaddr_reg:x3; val_offset:303405*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303405*0 + 3*527*FLEN/8, x4, x1, x2)

inst_101136:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000000ffffff; valaddr_reg:x3; val_offset:303408*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303408*0 + 3*528*FLEN/8, x4, x1, x2)

inst_101137:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000001ffffff; valaddr_reg:x3; val_offset:303411*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303411*0 + 3*529*FLEN/8, x4, x1, x2)

inst_101138:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000003ffffff; valaddr_reg:x3; val_offset:303414*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303414*0 + 3*530*FLEN/8, x4, x1, x2)

inst_101139:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000007ffffff; valaddr_reg:x3; val_offset:303417*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303417*0 + 3*531*FLEN/8, x4, x1, x2)

inst_101140:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000000fffffff; valaddr_reg:x3; val_offset:303420*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303420*0 + 3*532*FLEN/8, x4, x1, x2)

inst_101141:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000001fffffff; valaddr_reg:x3; val_offset:303423*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303423*0 + 3*533*FLEN/8, x4, x1, x2)

inst_101142:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000003fffffff; valaddr_reg:x3; val_offset:303426*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303426*0 + 3*534*FLEN/8, x4, x1, x2)

inst_101143:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000007fffffff; valaddr_reg:x3; val_offset:303429*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303429*0 + 3*535*FLEN/8, x4, x1, x2)

inst_101144:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00000ffffffff; valaddr_reg:x3; val_offset:303432*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303432*0 + 3*536*FLEN/8, x4, x1, x2)

inst_101145:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00001ffffffff; valaddr_reg:x3; val_offset:303435*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303435*0 + 3*537*FLEN/8, x4, x1, x2)

inst_101146:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00003ffffffff; valaddr_reg:x3; val_offset:303438*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303438*0 + 3*538*FLEN/8, x4, x1, x2)

inst_101147:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00007ffffffff; valaddr_reg:x3; val_offset:303441*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303441*0 + 3*539*FLEN/8, x4, x1, x2)

inst_101148:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0000fffffffff; valaddr_reg:x3; val_offset:303444*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303444*0 + 3*540*FLEN/8, x4, x1, x2)

inst_101149:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0001fffffffff; valaddr_reg:x3; val_offset:303447*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303447*0 + 3*541*FLEN/8, x4, x1, x2)

inst_101150:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0003fffffffff; valaddr_reg:x3; val_offset:303450*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303450*0 + 3*542*FLEN/8, x4, x1, x2)

inst_101151:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0007fffffffff; valaddr_reg:x3; val_offset:303453*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303453*0 + 3*543*FLEN/8, x4, x1, x2)

inst_101152:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee000ffffffffff; valaddr_reg:x3; val_offset:303456*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303456*0 + 3*544*FLEN/8, x4, x1, x2)

inst_101153:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee001ffffffffff; valaddr_reg:x3; val_offset:303459*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303459*0 + 3*545*FLEN/8, x4, x1, x2)

inst_101154:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee003ffffffffff; valaddr_reg:x3; val_offset:303462*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303462*0 + 3*546*FLEN/8, x4, x1, x2)

inst_101155:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee007ffffffffff; valaddr_reg:x3; val_offset:303465*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303465*0 + 3*547*FLEN/8, x4, x1, x2)

inst_101156:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee00fffffffffff; valaddr_reg:x3; val_offset:303468*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303468*0 + 3*548*FLEN/8, x4, x1, x2)

inst_101157:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee01fffffffffff; valaddr_reg:x3; val_offset:303471*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303471*0 + 3*549*FLEN/8, x4, x1, x2)

inst_101158:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee03fffffffffff; valaddr_reg:x3; val_offset:303474*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303474*0 + 3*550*FLEN/8, x4, x1, x2)

inst_101159:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee07fffffffffff; valaddr_reg:x3; val_offset:303477*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303477*0 + 3*551*FLEN/8, x4, x1, x2)

inst_101160:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee0ffffffffffff; valaddr_reg:x3; val_offset:303480*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303480*0 + 3*552*FLEN/8, x4, x1, x2)

inst_101161:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee1ffffffffffff; valaddr_reg:x3; val_offset:303483*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303483*0 + 3*553*FLEN/8, x4, x1, x2)

inst_101162:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee3ffffffffffff; valaddr_reg:x3; val_offset:303486*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303486*0 + 3*554*FLEN/8, x4, x1, x2)

inst_101163:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee7ffffffffffff; valaddr_reg:x3; val_offset:303489*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303489*0 + 3*555*FLEN/8, x4, x1, x2)

inst_101164:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbee8000000000000; valaddr_reg:x3; val_offset:303492*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303492*0 + 3*556*FLEN/8, x4, x1, x2)

inst_101165:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeec000000000000; valaddr_reg:x3; val_offset:303495*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303495*0 + 3*557*FLEN/8, x4, x1, x2)

inst_101166:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeee000000000000; valaddr_reg:x3; val_offset:303498*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303498*0 + 3*558*FLEN/8, x4, x1, x2)

inst_101167:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeef000000000000; valaddr_reg:x3; val_offset:303501*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303501*0 + 3*559*FLEN/8, x4, x1, x2)

inst_101168:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeef800000000000; valaddr_reg:x3; val_offset:303504*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303504*0 + 3*560*FLEN/8, x4, x1, x2)

inst_101169:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefc00000000000; valaddr_reg:x3; val_offset:303507*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303507*0 + 3*561*FLEN/8, x4, x1, x2)

inst_101170:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefe00000000000; valaddr_reg:x3; val_offset:303510*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303510*0 + 3*562*FLEN/8, x4, x1, x2)

inst_101171:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeff00000000000; valaddr_reg:x3; val_offset:303513*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303513*0 + 3*563*FLEN/8, x4, x1, x2)

inst_101172:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeff80000000000; valaddr_reg:x3; val_offset:303516*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303516*0 + 3*564*FLEN/8, x4, x1, x2)

inst_101173:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffc0000000000; valaddr_reg:x3; val_offset:303519*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303519*0 + 3*565*FLEN/8, x4, x1, x2)

inst_101174:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffe0000000000; valaddr_reg:x3; val_offset:303522*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303522*0 + 3*566*FLEN/8, x4, x1, x2)

inst_101175:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefff0000000000; valaddr_reg:x3; val_offset:303525*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303525*0 + 3*567*FLEN/8, x4, x1, x2)

inst_101176:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefff8000000000; valaddr_reg:x3; val_offset:303528*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303528*0 + 3*568*FLEN/8, x4, x1, x2)

inst_101177:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffc000000000; valaddr_reg:x3; val_offset:303531*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303531*0 + 3*569*FLEN/8, x4, x1, x2)

inst_101178:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffe000000000; valaddr_reg:x3; val_offset:303534*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303534*0 + 3*570*FLEN/8, x4, x1, x2)

inst_101179:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffff000000000; valaddr_reg:x3; val_offset:303537*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303537*0 + 3*571*FLEN/8, x4, x1, x2)

inst_101180:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffff800000000; valaddr_reg:x3; val_offset:303540*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303540*0 + 3*572*FLEN/8, x4, x1, x2)

inst_101181:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffc00000000; valaddr_reg:x3; val_offset:303543*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303543*0 + 3*573*FLEN/8, x4, x1, x2)

inst_101182:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffe00000000; valaddr_reg:x3; val_offset:303546*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303546*0 + 3*574*FLEN/8, x4, x1, x2)

inst_101183:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffff00000000; valaddr_reg:x3; val_offset:303549*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303549*0 + 3*575*FLEN/8, x4, x1, x2)

inst_101184:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffff80000000; valaddr_reg:x3; val_offset:303552*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303552*0 + 3*576*FLEN/8, x4, x1, x2)

inst_101185:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffc0000000; valaddr_reg:x3; val_offset:303555*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303555*0 + 3*577*FLEN/8, x4, x1, x2)

inst_101186:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffe0000000; valaddr_reg:x3; val_offset:303558*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303558*0 + 3*578*FLEN/8, x4, x1, x2)

inst_101187:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffff0000000; valaddr_reg:x3; val_offset:303561*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303561*0 + 3*579*FLEN/8, x4, x1, x2)

inst_101188:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffff8000000; valaddr_reg:x3; val_offset:303564*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303564*0 + 3*580*FLEN/8, x4, x1, x2)

inst_101189:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffc000000; valaddr_reg:x3; val_offset:303567*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303567*0 + 3*581*FLEN/8, x4, x1, x2)

inst_101190:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffe000000; valaddr_reg:x3; val_offset:303570*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303570*0 + 3*582*FLEN/8, x4, x1, x2)

inst_101191:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffff000000; valaddr_reg:x3; val_offset:303573*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303573*0 + 3*583*FLEN/8, x4, x1, x2)

inst_101192:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffff800000; valaddr_reg:x3; val_offset:303576*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303576*0 + 3*584*FLEN/8, x4, x1, x2)

inst_101193:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffc00000; valaddr_reg:x3; val_offset:303579*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303579*0 + 3*585*FLEN/8, x4, x1, x2)

inst_101194:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffe00000; valaddr_reg:x3; val_offset:303582*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303582*0 + 3*586*FLEN/8, x4, x1, x2)

inst_101195:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffff00000; valaddr_reg:x3; val_offset:303585*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303585*0 + 3*587*FLEN/8, x4, x1, x2)

inst_101196:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffff80000; valaddr_reg:x3; val_offset:303588*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303588*0 + 3*588*FLEN/8, x4, x1, x2)

inst_101197:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffc0000; valaddr_reg:x3; val_offset:303591*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303591*0 + 3*589*FLEN/8, x4, x1, x2)

inst_101198:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffe0000; valaddr_reg:x3; val_offset:303594*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303594*0 + 3*590*FLEN/8, x4, x1, x2)

inst_101199:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffff0000; valaddr_reg:x3; val_offset:303597*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303597*0 + 3*591*FLEN/8, x4, x1, x2)

inst_101200:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffff8000; valaddr_reg:x3; val_offset:303600*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303600*0 + 3*592*FLEN/8, x4, x1, x2)

inst_101201:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffffc000; valaddr_reg:x3; val_offset:303603*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303603*0 + 3*593*FLEN/8, x4, x1, x2)

inst_101202:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffffe000; valaddr_reg:x3; val_offset:303606*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303606*0 + 3*594*FLEN/8, x4, x1, x2)

inst_101203:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffff000; valaddr_reg:x3; val_offset:303609*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303609*0 + 3*595*FLEN/8, x4, x1, x2)

inst_101204:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffff800; valaddr_reg:x3; val_offset:303612*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303612*0 + 3*596*FLEN/8, x4, x1, x2)

inst_101205:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffffc00; valaddr_reg:x3; val_offset:303615*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303615*0 + 3*597*FLEN/8, x4, x1, x2)

inst_101206:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffffe00; valaddr_reg:x3; val_offset:303618*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303618*0 + 3*598*FLEN/8, x4, x1, x2)

inst_101207:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffffff00; valaddr_reg:x3; val_offset:303621*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303621*0 + 3*599*FLEN/8, x4, x1, x2)

inst_101208:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffffff80; valaddr_reg:x3; val_offset:303624*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303624*0 + 3*600*FLEN/8, x4, x1, x2)

inst_101209:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffffffc0; valaddr_reg:x3; val_offset:303627*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303627*0 + 3*601*FLEN/8, x4, x1, x2)

inst_101210:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffffffe0; valaddr_reg:x3; val_offset:303630*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303630*0 + 3*602*FLEN/8, x4, x1, x2)

inst_101211:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffffff0; valaddr_reg:x3; val_offset:303633*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303633*0 + 3*603*FLEN/8, x4, x1, x2)

inst_101212:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffffff8; valaddr_reg:x3; val_offset:303636*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303636*0 + 3*604*FLEN/8, x4, x1, x2)

inst_101213:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffffffc; valaddr_reg:x3; val_offset:303639*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303639*0 + 3*605*FLEN/8, x4, x1, x2)

inst_101214:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeeffffffffffffe; valaddr_reg:x3; val_offset:303642*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303642*0 + 3*606*FLEN/8, x4, x1, x2)

inst_101215:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3ee and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbeefffffffffffff; valaddr_reg:x3; val_offset:303645*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303645*0 + 3*607*FLEN/8, x4, x1, x2)

inst_101216:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf80000000000001; valaddr_reg:x3; val_offset:303648*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303648*0 + 3*608*FLEN/8, x4, x1, x2)

inst_101217:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf80000000000003; valaddr_reg:x3; val_offset:303651*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303651*0 + 3*609*FLEN/8, x4, x1, x2)

inst_101218:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf80000000000007; valaddr_reg:x3; val_offset:303654*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303654*0 + 3*610*FLEN/8, x4, x1, x2)

inst_101219:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8000000000000f; valaddr_reg:x3; val_offset:303657*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303657*0 + 3*611*FLEN/8, x4, x1, x2)

inst_101220:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8000000000001f; valaddr_reg:x3; val_offset:303660*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303660*0 + 3*612*FLEN/8, x4, x1, x2)

inst_101221:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8000000000003f; valaddr_reg:x3; val_offset:303663*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303663*0 + 3*613*FLEN/8, x4, x1, x2)

inst_101222:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf83333333333333; valaddr_reg:x3; val_offset:303666*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303666*0 + 3*614*FLEN/8, x4, x1, x2)

inst_101223:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf84924924924924; valaddr_reg:x3; val_offset:303669*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303669*0 + 3*615*FLEN/8, x4, x1, x2)

inst_101224:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf86666666666666; valaddr_reg:x3; val_offset:303672*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303672*0 + 3*616*FLEN/8, x4, x1, x2)

inst_101225:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf86db6db6db6db6; valaddr_reg:x3; val_offset:303675*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303675*0 + 3*617*FLEN/8, x4, x1, x2)

inst_101226:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf87777777777777; valaddr_reg:x3; val_offset:303678*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303678*0 + 3*618*FLEN/8, x4, x1, x2)

inst_101227:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf88888888888888; valaddr_reg:x3; val_offset:303681*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303681*0 + 3*619*FLEN/8, x4, x1, x2)

inst_101228:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf89999999999999; valaddr_reg:x3; val_offset:303684*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303684*0 + 3*620*FLEN/8, x4, x1, x2)

inst_101229:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8b6db6db6db6db; valaddr_reg:x3; val_offset:303687*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303687*0 + 3*621*FLEN/8, x4, x1, x2)

inst_101230:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8ccccccccccccc; valaddr_reg:x3; val_offset:303690*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303690*0 + 3*622*FLEN/8, x4, x1, x2)

inst_101231:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8db6db6db6db6d; valaddr_reg:x3; val_offset:303693*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303693*0 + 3*623*FLEN/8, x4, x1, x2)

inst_101232:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8fffffffffffc0; valaddr_reg:x3; val_offset:303696*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303696*0 + 3*624*FLEN/8, x4, x1, x2)

inst_101233:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8fffffffffffe0; valaddr_reg:x3; val_offset:303699*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303699*0 + 3*625*FLEN/8, x4, x1, x2)

inst_101234:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8ffffffffffff0; valaddr_reg:x3; val_offset:303702*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303702*0 + 3*626*FLEN/8, x4, x1, x2)

inst_101235:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8ffffffffffff8; valaddr_reg:x3; val_offset:303705*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303705*0 + 3*627*FLEN/8, x4, x1, x2)

inst_101236:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8ffffffffffffc; valaddr_reg:x3; val_offset:303708*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303708*0 + 3*628*FLEN/8, x4, x1, x2)

inst_101237:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfb271584e30d0 and fs2 == 1 and fe2 == 0x1fc and fm2 == 0x02726365257bd and fs3 == 1 and fe3 == 0x3f8 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafb271584e30d0; op2val:0x9fc02726365257bd;
op3val:0xbf8ffffffffffffe; valaddr_reg:x3; val_offset:303711*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303711*0 + 3*629*FLEN/8, x4, x1, x2)

inst_101238:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:303714*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303714*0 + 3*630*FLEN/8, x4, x1, x2)

inst_101239:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:303717*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303717*0 + 3*631*FLEN/8, x4, x1, x2)

inst_101240:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:303720*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303720*0 + 3*632*FLEN/8, x4, x1, x2)

inst_101241:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:303723*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303723*0 + 3*633*FLEN/8, x4, x1, x2)

inst_101242:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:303726*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303726*0 + 3*634*FLEN/8, x4, x1, x2)

inst_101243:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:303729*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303729*0 + 3*635*FLEN/8, x4, x1, x2)

inst_101244:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:303732*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303732*0 + 3*636*FLEN/8, x4, x1, x2)

inst_101245:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:303735*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303735*0 + 3*637*FLEN/8, x4, x1, x2)

inst_101246:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:303738*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303738*0 + 3*638*FLEN/8, x4, x1, x2)

inst_101247:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:303741*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303741*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_101248:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:303744*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303744*0 + 3*640*FLEN/8, x4, x1, x2)

inst_101249:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:303747*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303747*0 + 3*641*FLEN/8, x4, x1, x2)

inst_101250:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:303750*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303750*0 + 3*642*FLEN/8, x4, x1, x2)

inst_101251:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:303753*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303753*0 + 3*643*FLEN/8, x4, x1, x2)

inst_101252:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:303756*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303756*0 + 3*644*FLEN/8, x4, x1, x2)

inst_101253:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:303759*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303759*0 + 3*645*FLEN/8, x4, x1, x2)

inst_101254:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:303762*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303762*0 + 3*646*FLEN/8, x4, x1, x2)

inst_101255:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:303765*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303765*0 + 3*647*FLEN/8, x4, x1, x2)

inst_101256:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:303768*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303768*0 + 3*648*FLEN/8, x4, x1, x2)

inst_101257:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:303771*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303771*0 + 3*649*FLEN/8, x4, x1, x2)

inst_101258:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:303774*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303774*0 + 3*650*FLEN/8, x4, x1, x2)

inst_101259:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:303777*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303777*0 + 3*651*FLEN/8, x4, x1, x2)

inst_101260:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000000000; valaddr_reg:x3; val_offset:303780*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303780*0 + 3*652*FLEN/8, x4, x1, x2)

inst_101261:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000000001; valaddr_reg:x3; val_offset:303783*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303783*0 + 3*653*FLEN/8, x4, x1, x2)

inst_101262:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000000003; valaddr_reg:x3; val_offset:303786*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303786*0 + 3*654*FLEN/8, x4, x1, x2)

inst_101263:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000000007; valaddr_reg:x3; val_offset:303789*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303789*0 + 3*655*FLEN/8, x4, x1, x2)

inst_101264:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000000000f; valaddr_reg:x3; val_offset:303792*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303792*0 + 3*656*FLEN/8, x4, x1, x2)

inst_101265:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000000001f; valaddr_reg:x3; val_offset:303795*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303795*0 + 3*657*FLEN/8, x4, x1, x2)

inst_101266:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000000003f; valaddr_reg:x3; val_offset:303798*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303798*0 + 3*658*FLEN/8, x4, x1, x2)

inst_101267:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000000007f; valaddr_reg:x3; val_offset:303801*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303801*0 + 3*659*FLEN/8, x4, x1, x2)

inst_101268:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000000000ff; valaddr_reg:x3; val_offset:303804*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303804*0 + 3*660*FLEN/8, x4, x1, x2)

inst_101269:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000000001ff; valaddr_reg:x3; val_offset:303807*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303807*0 + 3*661*FLEN/8, x4, x1, x2)

inst_101270:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000000003ff; valaddr_reg:x3; val_offset:303810*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303810*0 + 3*662*FLEN/8, x4, x1, x2)

inst_101271:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000000007ff; valaddr_reg:x3; val_offset:303813*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303813*0 + 3*663*FLEN/8, x4, x1, x2)

inst_101272:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000000fff; valaddr_reg:x3; val_offset:303816*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303816*0 + 3*664*FLEN/8, x4, x1, x2)

inst_101273:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000001fff; valaddr_reg:x3; val_offset:303819*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303819*0 + 3*665*FLEN/8, x4, x1, x2)

inst_101274:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000003fff; valaddr_reg:x3; val_offset:303822*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303822*0 + 3*666*FLEN/8, x4, x1, x2)

inst_101275:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000007fff; valaddr_reg:x3; val_offset:303825*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303825*0 + 3*667*FLEN/8, x4, x1, x2)

inst_101276:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000000ffff; valaddr_reg:x3; val_offset:303828*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303828*0 + 3*668*FLEN/8, x4, x1, x2)

inst_101277:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000001ffff; valaddr_reg:x3; val_offset:303831*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303831*0 + 3*669*FLEN/8, x4, x1, x2)

inst_101278:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000003ffff; valaddr_reg:x3; val_offset:303834*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303834*0 + 3*670*FLEN/8, x4, x1, x2)

inst_101279:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000007ffff; valaddr_reg:x3; val_offset:303837*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303837*0 + 3*671*FLEN/8, x4, x1, x2)

inst_101280:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000000fffff; valaddr_reg:x3; val_offset:303840*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303840*0 + 3*672*FLEN/8, x4, x1, x2)

inst_101281:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000001fffff; valaddr_reg:x3; val_offset:303843*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303843*0 + 3*673*FLEN/8, x4, x1, x2)

inst_101282:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000003fffff; valaddr_reg:x3; val_offset:303846*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303846*0 + 3*674*FLEN/8, x4, x1, x2)

inst_101283:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000007fffff; valaddr_reg:x3; val_offset:303849*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303849*0 + 3*675*FLEN/8, x4, x1, x2)

inst_101284:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000000ffffff; valaddr_reg:x3; val_offset:303852*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303852*0 + 3*676*FLEN/8, x4, x1, x2)

inst_101285:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000001ffffff; valaddr_reg:x3; val_offset:303855*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303855*0 + 3*677*FLEN/8, x4, x1, x2)

inst_101286:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000003ffffff; valaddr_reg:x3; val_offset:303858*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303858*0 + 3*678*FLEN/8, x4, x1, x2)

inst_101287:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000007ffffff; valaddr_reg:x3; val_offset:303861*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303861*0 + 3*679*FLEN/8, x4, x1, x2)

inst_101288:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000000fffffff; valaddr_reg:x3; val_offset:303864*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303864*0 + 3*680*FLEN/8, x4, x1, x2)

inst_101289:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000001fffffff; valaddr_reg:x3; val_offset:303867*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303867*0 + 3*681*FLEN/8, x4, x1, x2)

inst_101290:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000003fffffff; valaddr_reg:x3; val_offset:303870*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303870*0 + 3*682*FLEN/8, x4, x1, x2)

inst_101291:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000007fffffff; valaddr_reg:x3; val_offset:303873*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303873*0 + 3*683*FLEN/8, x4, x1, x2)

inst_101292:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700000ffffffff; valaddr_reg:x3; val_offset:303876*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303876*0 + 3*684*FLEN/8, x4, x1, x2)

inst_101293:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700001ffffffff; valaddr_reg:x3; val_offset:303879*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303879*0 + 3*685*FLEN/8, x4, x1, x2)

inst_101294:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700003ffffffff; valaddr_reg:x3; val_offset:303882*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303882*0 + 3*686*FLEN/8, x4, x1, x2)

inst_101295:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700007ffffffff; valaddr_reg:x3; val_offset:303885*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303885*0 + 3*687*FLEN/8, x4, x1, x2)

inst_101296:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370000fffffffff; valaddr_reg:x3; val_offset:303888*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303888*0 + 3*688*FLEN/8, x4, x1, x2)

inst_101297:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370001fffffffff; valaddr_reg:x3; val_offset:303891*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303891*0 + 3*689*FLEN/8, x4, x1, x2)

inst_101298:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370003fffffffff; valaddr_reg:x3; val_offset:303894*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303894*0 + 3*690*FLEN/8, x4, x1, x2)

inst_101299:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370007fffffffff; valaddr_reg:x3; val_offset:303897*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303897*0 + 3*691*FLEN/8, x4, x1, x2)

inst_101300:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837000ffffffffff; valaddr_reg:x3; val_offset:303900*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303900*0 + 3*692*FLEN/8, x4, x1, x2)

inst_101301:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837001ffffffffff; valaddr_reg:x3; val_offset:303903*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303903*0 + 3*693*FLEN/8, x4, x1, x2)

inst_101302:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837003ffffffffff; valaddr_reg:x3; val_offset:303906*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303906*0 + 3*694*FLEN/8, x4, x1, x2)

inst_101303:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837007ffffffffff; valaddr_reg:x3; val_offset:303909*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303909*0 + 3*695*FLEN/8, x4, x1, x2)

inst_101304:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83700fffffffffff; valaddr_reg:x3; val_offset:303912*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303912*0 + 3*696*FLEN/8, x4, x1, x2)

inst_101305:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83701fffffffffff; valaddr_reg:x3; val_offset:303915*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303915*0 + 3*697*FLEN/8, x4, x1, x2)

inst_101306:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83703fffffffffff; valaddr_reg:x3; val_offset:303918*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303918*0 + 3*698*FLEN/8, x4, x1, x2)

inst_101307:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x83707fffffffffff; valaddr_reg:x3; val_offset:303921*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303921*0 + 3*699*FLEN/8, x4, x1, x2)

inst_101308:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8370ffffffffffff; valaddr_reg:x3; val_offset:303924*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303924*0 + 3*700*FLEN/8, x4, x1, x2)

inst_101309:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8371ffffffffffff; valaddr_reg:x3; val_offset:303927*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303927*0 + 3*701*FLEN/8, x4, x1, x2)

inst_101310:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8373ffffffffffff; valaddr_reg:x3; val_offset:303930*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303930*0 + 3*702*FLEN/8, x4, x1, x2)

inst_101311:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8377ffffffffffff; valaddr_reg:x3; val_offset:303933*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303933*0 + 3*703*FLEN/8, x4, x1, x2)

inst_101312:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x8378000000000000; valaddr_reg:x3; val_offset:303936*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303936*0 + 3*704*FLEN/8, x4, x1, x2)

inst_101313:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837c000000000000; valaddr_reg:x3; val_offset:303939*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303939*0 + 3*705*FLEN/8, x4, x1, x2)

inst_101314:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837e000000000000; valaddr_reg:x3; val_offset:303942*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303942*0 + 3*706*FLEN/8, x4, x1, x2)

inst_101315:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837f000000000000; valaddr_reg:x3; val_offset:303945*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303945*0 + 3*707*FLEN/8, x4, x1, x2)

inst_101316:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837f800000000000; valaddr_reg:x3; val_offset:303948*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303948*0 + 3*708*FLEN/8, x4, x1, x2)

inst_101317:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fc00000000000; valaddr_reg:x3; val_offset:303951*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303951*0 + 3*709*FLEN/8, x4, x1, x2)

inst_101318:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fe00000000000; valaddr_reg:x3; val_offset:303954*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303954*0 + 3*710*FLEN/8, x4, x1, x2)

inst_101319:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ff00000000000; valaddr_reg:x3; val_offset:303957*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303957*0 + 3*711*FLEN/8, x4, x1, x2)

inst_101320:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ff80000000000; valaddr_reg:x3; val_offset:303960*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303960*0 + 3*712*FLEN/8, x4, x1, x2)

inst_101321:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffc0000000000; valaddr_reg:x3; val_offset:303963*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303963*0 + 3*713*FLEN/8, x4, x1, x2)

inst_101322:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffe0000000000; valaddr_reg:x3; val_offset:303966*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303966*0 + 3*714*FLEN/8, x4, x1, x2)

inst_101323:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fff0000000000; valaddr_reg:x3; val_offset:303969*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303969*0 + 3*715*FLEN/8, x4, x1, x2)

inst_101324:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fff8000000000; valaddr_reg:x3; val_offset:303972*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303972*0 + 3*716*FLEN/8, x4, x1, x2)

inst_101325:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffc000000000; valaddr_reg:x3; val_offset:303975*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303975*0 + 3*717*FLEN/8, x4, x1, x2)

inst_101326:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffe000000000; valaddr_reg:x3; val_offset:303978*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303978*0 + 3*718*FLEN/8, x4, x1, x2)

inst_101327:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffff000000000; valaddr_reg:x3; val_offset:303981*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303981*0 + 3*719*FLEN/8, x4, x1, x2)

inst_101328:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffff800000000; valaddr_reg:x3; val_offset:303984*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303984*0 + 3*720*FLEN/8, x4, x1, x2)

inst_101329:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffc00000000; valaddr_reg:x3; val_offset:303987*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303987*0 + 3*721*FLEN/8, x4, x1, x2)

inst_101330:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffe00000000; valaddr_reg:x3; val_offset:303990*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303990*0 + 3*722*FLEN/8, x4, x1, x2)

inst_101331:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffff00000000; valaddr_reg:x3; val_offset:303993*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303993*0 + 3*723*FLEN/8, x4, x1, x2)

inst_101332:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffff80000000; valaddr_reg:x3; val_offset:303996*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303996*0 + 3*724*FLEN/8, x4, x1, x2)

inst_101333:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffc0000000; valaddr_reg:x3; val_offset:303999*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 303999*0 + 3*725*FLEN/8, x4, x1, x2)

inst_101334:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffe0000000; valaddr_reg:x3; val_offset:304002*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304002*0 + 3*726*FLEN/8, x4, x1, x2)

inst_101335:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffff0000000; valaddr_reg:x3; val_offset:304005*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304005*0 + 3*727*FLEN/8, x4, x1, x2)

inst_101336:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffff8000000; valaddr_reg:x3; val_offset:304008*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304008*0 + 3*728*FLEN/8, x4, x1, x2)

inst_101337:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffc000000; valaddr_reg:x3; val_offset:304011*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304011*0 + 3*729*FLEN/8, x4, x1, x2)

inst_101338:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffe000000; valaddr_reg:x3; val_offset:304014*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304014*0 + 3*730*FLEN/8, x4, x1, x2)

inst_101339:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffff000000; valaddr_reg:x3; val_offset:304017*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304017*0 + 3*731*FLEN/8, x4, x1, x2)

inst_101340:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffff800000; valaddr_reg:x3; val_offset:304020*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304020*0 + 3*732*FLEN/8, x4, x1, x2)

inst_101341:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffc00000; valaddr_reg:x3; val_offset:304023*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304023*0 + 3*733*FLEN/8, x4, x1, x2)

inst_101342:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffe00000; valaddr_reg:x3; val_offset:304026*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304026*0 + 3*734*FLEN/8, x4, x1, x2)

inst_101343:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffff00000; valaddr_reg:x3; val_offset:304029*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304029*0 + 3*735*FLEN/8, x4, x1, x2)

inst_101344:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffff80000; valaddr_reg:x3; val_offset:304032*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304032*0 + 3*736*FLEN/8, x4, x1, x2)

inst_101345:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffc0000; valaddr_reg:x3; val_offset:304035*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304035*0 + 3*737*FLEN/8, x4, x1, x2)

inst_101346:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffe0000; valaddr_reg:x3; val_offset:304038*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304038*0 + 3*738*FLEN/8, x4, x1, x2)

inst_101347:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffff0000; valaddr_reg:x3; val_offset:304041*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304041*0 + 3*739*FLEN/8, x4, x1, x2)

inst_101348:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffff8000; valaddr_reg:x3; val_offset:304044*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304044*0 + 3*740*FLEN/8, x4, x1, x2)

inst_101349:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffffc000; valaddr_reg:x3; val_offset:304047*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304047*0 + 3*741*FLEN/8, x4, x1, x2)

inst_101350:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffffe000; valaddr_reg:x3; val_offset:304050*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304050*0 + 3*742*FLEN/8, x4, x1, x2)

inst_101351:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffff000; valaddr_reg:x3; val_offset:304053*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304053*0 + 3*743*FLEN/8, x4, x1, x2)

inst_101352:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffff800; valaddr_reg:x3; val_offset:304056*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304056*0 + 3*744*FLEN/8, x4, x1, x2)

inst_101353:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffffc00; valaddr_reg:x3; val_offset:304059*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304059*0 + 3*745*FLEN/8, x4, x1, x2)

inst_101354:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffffe00; valaddr_reg:x3; val_offset:304062*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304062*0 + 3*746*FLEN/8, x4, x1, x2)

inst_101355:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffffff00; valaddr_reg:x3; val_offset:304065*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304065*0 + 3*747*FLEN/8, x4, x1, x2)

inst_101356:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffffff80; valaddr_reg:x3; val_offset:304068*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304068*0 + 3*748*FLEN/8, x4, x1, x2)

inst_101357:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffffffc0; valaddr_reg:x3; val_offset:304071*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304071*0 + 3*749*FLEN/8, x4, x1, x2)

inst_101358:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffffffe0; valaddr_reg:x3; val_offset:304074*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304074*0 + 3*750*FLEN/8, x4, x1, x2)

inst_101359:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffffff0; valaddr_reg:x3; val_offset:304077*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304077*0 + 3*751*FLEN/8, x4, x1, x2)

inst_101360:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffffff8; valaddr_reg:x3; val_offset:304080*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304080*0 + 3*752*FLEN/8, x4, x1, x2)

inst_101361:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffffffc; valaddr_reg:x3; val_offset:304083*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304083*0 + 3*753*FLEN/8, x4, x1, x2)

inst_101362:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837ffffffffffffe; valaddr_reg:x3; val_offset:304086*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304086*0 + 3*754*FLEN/8, x4, x1, x2)

inst_101363:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc642d452bf98 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x037 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc642d452bf98; op2val:0x8000;
op3val:0x837fffffffffffff; valaddr_reg:x3; val_offset:304089*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304089*0 + 3*755*FLEN/8, x4, x1, x2)

inst_101364:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:304092*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304092*0 + 3*756*FLEN/8, x4, x1, x2)

inst_101365:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:304095*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304095*0 + 3*757*FLEN/8, x4, x1, x2)

inst_101366:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:304098*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304098*0 + 3*758*FLEN/8, x4, x1, x2)

inst_101367:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:304101*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304101*0 + 3*759*FLEN/8, x4, x1, x2)

inst_101368:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:304104*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304104*0 + 3*760*FLEN/8, x4, x1, x2)

inst_101369:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:304107*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304107*0 + 3*761*FLEN/8, x4, x1, x2)

inst_101370:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:304110*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304110*0 + 3*762*FLEN/8, x4, x1, x2)

inst_101371:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:304113*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304113*0 + 3*763*FLEN/8, x4, x1, x2)

inst_101372:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:304116*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304116*0 + 3*764*FLEN/8, x4, x1, x2)

inst_101373:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:304119*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304119*0 + 3*765*FLEN/8, x4, x1, x2)

inst_101374:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:304122*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304122*0 + 3*766*FLEN/8, x4, x1, x2)

inst_101375:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0xfc8789147bc63 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5fafc8789147bc63; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:304125*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 304125*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370497,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370499,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370503,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370511,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370527,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370559,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5404319552844595,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(5790342378047780,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6305039478318694,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6433713753386422,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6605279453476727,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(6905519428634760,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7205759403792793,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7720456504063707,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8106479329266892,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(8363827879402349,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740928,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740960,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740976,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740984,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740988,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(9007199254740990,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334464,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334465,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334467,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334471,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334479,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334495,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334527,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334591,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334719,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646334975,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646335487,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646336511,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646338559,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646342655,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646350847,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646367231,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646399999,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646465535,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646596607,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396646858751,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396647383039,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396648431615,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396650528767,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396654723071,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396663111679,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396679888895,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396713443327,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396780552191,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532396914769919,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532397183205375,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532397720076287,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532398793818111,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532400941301759,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532405236269055,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532413826203647,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532431006072831,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532465365811199,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532534085287935,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532671524241407,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40532946402148351,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40533496157962239,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40534595669590015,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40536794692845567,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40541192739356671,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40549988832378879,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40567581018423295,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40602765390512127,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40673134134689791,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(40813871623045119,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(41095346599755775,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(41658296553177087,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(42784196460019711,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(42784196460019712,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(43910096366862336,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(44473046320283648,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(44754521296994304,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(44895258785349632,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(44965627529527296,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45000811901616128,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45018404087660544,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45027200180682752,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45031598227193856,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45033797250449408,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45034896762077184,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035446517891072,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035721395798016,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035858834751488,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035927554228224,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035961913966592,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035979093835776,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035987683770368,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035991978737664,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035994126221312,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035995199963136,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035995736834048,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996005269504,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996139487232,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996206596096,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996240150528,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996256927744,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996265316352,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996269510656,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996271607808,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996272656384,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273180672,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273442816,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273573888,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273639424,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273672192,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273688576,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273696768,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273700864,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273702912,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273703936,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704448,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704704,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704832,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704896,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704928,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704944,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704952,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704956,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704958,64,FLEN)
NAN_BOXED(6894862268237755719,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(45035996273704959,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816448,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816449,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816451,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816455,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816463,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816479,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816511,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816575,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816703,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155816959,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155817471,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155818495,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155820543,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155824639,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155832831,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155849215,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155881983,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795155947519,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795156078591,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795156340735,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795156865023,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795157913599,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795160010751,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795164205055,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795172593663,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795189370879,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795222925311,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795290034175,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795424251903,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546795692687359,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546796229558271,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546797303300095,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546799450783743,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546803745751039,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546812335685631,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546829515554815,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546863875293183,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58546932594769919,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58547070033723391,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58547344911630335,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58547894667444223,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58548994179071999,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58551193202327551,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58555591248838655,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58564387341860863,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58581979527905279,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58617163899994111,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58687532644171775,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(58828270132527103,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(59109745109237759,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(59672695062659071,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(60798594969501695,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(60798594969501696,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(61924494876344320,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(62487444829765632,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(62768919806476288,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(62909657294831616,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(62980026039009280,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63015210411098112,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63032802597142528,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63041598690164736,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63045996736675840,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63048195759931392,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63049295271559168,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63049845027373056,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050119905280000,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050257344233472,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050326063710208,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050360423448576,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050377603317760,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050386193252352,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050390488219648,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050392635703296,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050393709445120,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394246316032,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394514751488,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394648969216,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394716078080,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394749632512,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394766409728,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394774798336,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394778992640,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394781089792,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394782138368,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394782662656,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394782924800,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783055872,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783121408,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783154176,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783170560,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783178752,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783182848,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783184896,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783185920,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186432,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186688,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186816,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186880,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186912,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186928,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186936,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186940,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186942,64,FLEN)
NAN_BOXED(6894896270589269124,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63050394783186943,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930560,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930561,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930563,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930567,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930575,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930591,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930623,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930687,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700930815,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700931071,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700931583,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700932607,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700934655,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700938751,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700946943,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700963327,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887700996095,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887701061631,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887701192703,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887701454847,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887701979135,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887703027711,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887705124863,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887709319167,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887717707775,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887734484991,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887768039423,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887835148287,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244887969366015,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244888237801471,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244888774672383,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244889848414207,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244891995897855,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244896290865151,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244904880799743,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244922060668927,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443244956420407295,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443245025139884031,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443245162578837503,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443245437456744447,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443245987212558335,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443247086724186111,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443249285747441663,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443253683793952767,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443262479886974975,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443280072073019391,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443315256445108223,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443385625189285887,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443526362677641215,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13443807837654351871,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13444370787607773183,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13445496687514615807,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13445496687514615808,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13446622587421458432,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447185537374879744,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447467012351590400,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447607749839945728,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447678118584123392,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447713302956212224,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447730895142256640,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447739691235278848,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447744089281789952,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447746288305045504,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447747387816673280,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447747937572487168,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748212450394112,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748349889347584,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748418608824320,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748452968562688,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748470148431872,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748478738366464,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748483033333760,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748485180817408,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748486254559232,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748486791430144,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487059865600,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487194083328,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487261192192,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487294746624,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487311523840,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487319912448,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487324106752,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487326203904,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487327252480,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487327776768,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328038912,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328169984,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328235520,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328268288,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328284672,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328292864,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328296960,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328299008,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328300032,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328300544,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328300800,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328300928,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328300992,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328301024,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328301040,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328301048,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328301052,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328301054,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13447748487328301055,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6894907077940942286,64,FLEN)
NAN_BOXED(11511253230193764263,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081472,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081473,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081475,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081479,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081487,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081503,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081535,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081599,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081727,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503081983,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503082495,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503083519,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503085567,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503089663,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503097855,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503114239,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503147007,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503212543,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503343615,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079503605759,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079504130047,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079505178623,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079507275775,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079511470079,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079519858687,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079536635903,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079570190335,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079637299199,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324079771516927,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324080039952383,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324080576823295,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324081650565119,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324083798048767,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324088093016063,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324096682950655,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324113862819839,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324148222558207,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324216942034943,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324354380988415,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542324629258895359,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542325179014709247,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542326278526337023,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542328477549592575,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542332875596103679,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542341671689125887,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542359263875170303,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542394448247259135,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542464816991436799,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542605554479792127,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13542887029456502783,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13543449979409924095,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13544575879316766719,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13544575879316766720,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13545701779223609344,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546264729177030656,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546546204153741312,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546686941642096640,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546757310386274304,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546792494758363136,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546810086944407552,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546818883037429760,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546823281083940864,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546825480107196416,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546826579618824192,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827129374638080,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827404252545024,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827541691498496,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827610410975232,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827644770713600,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827661950582784,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827670540517376,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827674835484672,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827676982968320,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827678056710144,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827678593581056,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827678862016512,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827678996234240,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679063343104,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679096897536,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679113674752,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679122063360,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679126257664,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679128354816,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679129403392,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679129927680,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130189824,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130320896,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130386432,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130419200,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130435584,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130443776,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130447872,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130449920,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130450944,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451456,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451712,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451840,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451904,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451936,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451952,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451960,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451964,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451966,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13546827679130451967,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6894909157080730843,64,FLEN)
NAN_BOXED(11511252166455172220,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989494784,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989494785,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989494787,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989494791,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989494799,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989494815,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989494847,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989494911,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989495039,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989495295,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989495807,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989496831,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989498879,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989502975,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989511167,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989527551,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989560319,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989625855,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261989756927,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261990019071,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261990543359,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261991591935,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261993689087,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993261997883391,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993262006271999,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993262023049215,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993262056603647,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993262123712511,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993262257930239,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993262526365695,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993263063236607,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993264136978431,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993266284462079,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993270579429375,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993279169363967,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993296349233151,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993330708971519,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993399428448255,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993536867401727,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753993811745308671,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753994361501122559,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753995461012750335,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13753997660036005887,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13754002058082516991,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13754010854175539199,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13754028446361583615,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13754063630733672447,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13754133999477850111,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13754274736966205439,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13754556211942916095,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13755119161896337407,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13756245061803180031,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13756245061803180032,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13757370961710022656,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13757933911663443968,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758215386640154624,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758356124128509952,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758426492872687616,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758461677244776448,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758479269430820864,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758488065523843072,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758492463570354176,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758494662593609728,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758495762105237504,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496311861051392,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496586738958336,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496724177911808,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496792897388544,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496827257126912,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496844436996096,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496853026930688,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496857321897984,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496859469381632,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496860543123456,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861079994368,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861348429824,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861482647552,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861549756416,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861583310848,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861600088064,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861608476672,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861612670976,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861614768128,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861615816704,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616340992,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616603136,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616734208,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616799744,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616832512,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616848896,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616857088,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616861184,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616863232,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616864256,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616864768,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865024,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865152,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865216,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865248,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865264,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865272,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865276,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865278,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13758496861616865279,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13799029258263199745,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13799029258263199747,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13799029258263199751,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13799029258263199759,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13799029258263199775,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13799029258263199807,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13799929978188673843,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13800316001013877028,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13800830698114147942,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13800959372389215670,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13801130938089305975,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13801431178064464008,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13801731418039622041,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13802246115139892955,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13802632137965096140,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13802889486515231597,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13803532857890570176,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13803532857890570208,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13803532857890570224,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13803532857890570232,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13803532857890570236,64,FLEN)
NAN_BOXED(6894925754410086608,64,FLEN)
NAN_BOXED(11511243692632594365,64,FLEN)
NAN_BOXED(13803532857890570238,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153088,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153089,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153091,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153095,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153103,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153119,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153151,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153215,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153343,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360153599,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360154111,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360155135,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360157183,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360161279,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360169471,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360185855,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360218623,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360284159,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360415231,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016360677375,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016361201663,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016362250239,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016364347391,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016368541695,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016376930303,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016393707519,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016427261951,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016494370815,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016628588543,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070016897023999,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070017433894911,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070018507636735,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070020655120383,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070024950087679,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070033540022271,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070050719891455,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070085079629823,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070153799106559,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070291238060031,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471070566115966975,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471071115871780863,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471072215383408639,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471074414406664191,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471078812453175295,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471087608546197503,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471105200732241919,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471140385104330751,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471210753848508415,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471351491336863743,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9471632966313574399,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9472195916266995711,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9473321816173838335,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9473321816173838336,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9474447716080680960,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475010666034102272,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475292141010812928,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475432878499168256,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475503247243345920,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475538431615434752,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475556023801479168,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475564819894501376,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475569217941012480,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475571416964268032,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475572516475895808,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573066231709696,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573341109616640,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573478548570112,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573547268046848,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573581627785216,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573598807654400,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573607397588992,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573611692556288,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573613840039936,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573614913781760,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615450652672,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615719088128,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615853305856,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615920414720,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615953969152,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615970746368,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615979134976,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615983329280,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615985426432,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615986475008,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615986999296,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987261440,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987392512,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987458048,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987490816,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987507200,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987515392,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987519488,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987521536,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987522560,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523072,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523328,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523456,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523520,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523552,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523568,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523576,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523580,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523582,64,FLEN)
NAN_BOXED(6894947544859852696,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9475573615987523583,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6894949974686547043,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
