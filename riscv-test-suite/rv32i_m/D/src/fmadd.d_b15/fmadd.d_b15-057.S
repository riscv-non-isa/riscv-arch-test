
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:29:07 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fmadd.d_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr,RV32EFD_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*D.*);def TEST_CASE_1=True;",fmadd.d_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_43008:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:129024*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129024*0 + 3*0*FLEN/8, x4, x1, x2)

inst_43009:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:129027*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129027*0 + 3*1*FLEN/8, x4, x1, x2)

inst_43010:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:129030*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129030*0 + 3*2*FLEN/8, x4, x1, x2)

inst_43011:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:129033*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129033*0 + 3*3*FLEN/8, x4, x1, x2)

inst_43012:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:129036*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129036*0 + 3*4*FLEN/8, x4, x1, x2)

inst_43013:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:129039*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129039*0 + 3*5*FLEN/8, x4, x1, x2)

inst_43014:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:129042*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129042*0 + 3*6*FLEN/8, x4, x1, x2)

inst_43015:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:129045*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129045*0 + 3*7*FLEN/8, x4, x1, x2)

inst_43016:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:129048*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129048*0 + 3*8*FLEN/8, x4, x1, x2)

inst_43017:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:129051*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129051*0 + 3*9*FLEN/8, x4, x1, x2)

inst_43018:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:129054*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129054*0 + 3*10*FLEN/8, x4, x1, x2)

inst_43019:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:129057*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129057*0 + 3*11*FLEN/8, x4, x1, x2)

inst_43020:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:129060*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129060*0 + 3*12*FLEN/8, x4, x1, x2)

inst_43021:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:129063*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129063*0 + 3*13*FLEN/8, x4, x1, x2)

inst_43022:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:129066*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129066*0 + 3*14*FLEN/8, x4, x1, x2)

inst_43023:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:129069*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129069*0 + 3*15*FLEN/8, x4, x1, x2)

inst_43024:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:129072*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129072*0 + 3*16*FLEN/8, x4, x1, x2)

inst_43025:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:129075*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129075*0 + 3*17*FLEN/8, x4, x1, x2)

inst_43026:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:129078*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129078*0 + 3*18*FLEN/8, x4, x1, x2)

inst_43027:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:129081*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129081*0 + 3*19*FLEN/8, x4, x1, x2)

inst_43028:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:129084*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129084*0 + 3*20*FLEN/8, x4, x1, x2)

inst_43029:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:129087*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129087*0 + 3*21*FLEN/8, x4, x1, x2)

inst_43030:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000000000; valaddr_reg:x3; val_offset:129090*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129090*0 + 3*22*FLEN/8, x4, x1, x2)

inst_43031:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000000001; valaddr_reg:x3; val_offset:129093*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129093*0 + 3*23*FLEN/8, x4, x1, x2)

inst_43032:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000000003; valaddr_reg:x3; val_offset:129096*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129096*0 + 3*24*FLEN/8, x4, x1, x2)

inst_43033:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000000007; valaddr_reg:x3; val_offset:129099*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129099*0 + 3*25*FLEN/8, x4, x1, x2)

inst_43034:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000000000f; valaddr_reg:x3; val_offset:129102*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129102*0 + 3*26*FLEN/8, x4, x1, x2)

inst_43035:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000000001f; valaddr_reg:x3; val_offset:129105*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129105*0 + 3*27*FLEN/8, x4, x1, x2)

inst_43036:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000000003f; valaddr_reg:x3; val_offset:129108*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129108*0 + 3*28*FLEN/8, x4, x1, x2)

inst_43037:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000000007f; valaddr_reg:x3; val_offset:129111*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129111*0 + 3*29*FLEN/8, x4, x1, x2)

inst_43038:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000000000ff; valaddr_reg:x3; val_offset:129114*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129114*0 + 3*30*FLEN/8, x4, x1, x2)

inst_43039:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000000001ff; valaddr_reg:x3; val_offset:129117*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129117*0 + 3*31*FLEN/8, x4, x1, x2)

inst_43040:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000000003ff; valaddr_reg:x3; val_offset:129120*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129120*0 + 3*32*FLEN/8, x4, x1, x2)

inst_43041:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000000007ff; valaddr_reg:x3; val_offset:129123*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129123*0 + 3*33*FLEN/8, x4, x1, x2)

inst_43042:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000000fff; valaddr_reg:x3; val_offset:129126*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129126*0 + 3*34*FLEN/8, x4, x1, x2)

inst_43043:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000001fff; valaddr_reg:x3; val_offset:129129*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129129*0 + 3*35*FLEN/8, x4, x1, x2)

inst_43044:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000003fff; valaddr_reg:x3; val_offset:129132*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129132*0 + 3*36*FLEN/8, x4, x1, x2)

inst_43045:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000007fff; valaddr_reg:x3; val_offset:129135*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129135*0 + 3*37*FLEN/8, x4, x1, x2)

inst_43046:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000000ffff; valaddr_reg:x3; val_offset:129138*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129138*0 + 3*38*FLEN/8, x4, x1, x2)

inst_43047:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000001ffff; valaddr_reg:x3; val_offset:129141*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129141*0 + 3*39*FLEN/8, x4, x1, x2)

inst_43048:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000003ffff; valaddr_reg:x3; val_offset:129144*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129144*0 + 3*40*FLEN/8, x4, x1, x2)

inst_43049:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000007ffff; valaddr_reg:x3; val_offset:129147*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129147*0 + 3*41*FLEN/8, x4, x1, x2)

inst_43050:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000000fffff; valaddr_reg:x3; val_offset:129150*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129150*0 + 3*42*FLEN/8, x4, x1, x2)

inst_43051:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000001fffff; valaddr_reg:x3; val_offset:129153*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129153*0 + 3*43*FLEN/8, x4, x1, x2)

inst_43052:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000003fffff; valaddr_reg:x3; val_offset:129156*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129156*0 + 3*44*FLEN/8, x4, x1, x2)

inst_43053:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000007fffff; valaddr_reg:x3; val_offset:129159*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129159*0 + 3*45*FLEN/8, x4, x1, x2)

inst_43054:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000000ffffff; valaddr_reg:x3; val_offset:129162*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129162*0 + 3*46*FLEN/8, x4, x1, x2)

inst_43055:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000001ffffff; valaddr_reg:x3; val_offset:129165*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129165*0 + 3*47*FLEN/8, x4, x1, x2)

inst_43056:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000003ffffff; valaddr_reg:x3; val_offset:129168*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129168*0 + 3*48*FLEN/8, x4, x1, x2)

inst_43057:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000007ffffff; valaddr_reg:x3; val_offset:129171*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129171*0 + 3*49*FLEN/8, x4, x1, x2)

inst_43058:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000000fffffff; valaddr_reg:x3; val_offset:129174*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129174*0 + 3*50*FLEN/8, x4, x1, x2)

inst_43059:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000001fffffff; valaddr_reg:x3; val_offset:129177*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129177*0 + 3*51*FLEN/8, x4, x1, x2)

inst_43060:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000003fffffff; valaddr_reg:x3; val_offset:129180*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129180*0 + 3*52*FLEN/8, x4, x1, x2)

inst_43061:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000007fffffff; valaddr_reg:x3; val_offset:129183*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129183*0 + 3*53*FLEN/8, x4, x1, x2)

inst_43062:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100000ffffffff; valaddr_reg:x3; val_offset:129186*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129186*0 + 3*54*FLEN/8, x4, x1, x2)

inst_43063:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100001ffffffff; valaddr_reg:x3; val_offset:129189*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129189*0 + 3*55*FLEN/8, x4, x1, x2)

inst_43064:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100003ffffffff; valaddr_reg:x3; val_offset:129192*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129192*0 + 3*56*FLEN/8, x4, x1, x2)

inst_43065:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100007ffffffff; valaddr_reg:x3; val_offset:129195*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129195*0 + 3*57*FLEN/8, x4, x1, x2)

inst_43066:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210000fffffffff; valaddr_reg:x3; val_offset:129198*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129198*0 + 3*58*FLEN/8, x4, x1, x2)

inst_43067:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210001fffffffff; valaddr_reg:x3; val_offset:129201*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129201*0 + 3*59*FLEN/8, x4, x1, x2)

inst_43068:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210003fffffffff; valaddr_reg:x3; val_offset:129204*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129204*0 + 3*60*FLEN/8, x4, x1, x2)

inst_43069:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210007fffffffff; valaddr_reg:x3; val_offset:129207*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129207*0 + 3*61*FLEN/8, x4, x1, x2)

inst_43070:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821000ffffffffff; valaddr_reg:x3; val_offset:129210*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129210*0 + 3*62*FLEN/8, x4, x1, x2)

inst_43071:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821001ffffffffff; valaddr_reg:x3; val_offset:129213*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129213*0 + 3*63*FLEN/8, x4, x1, x2)

inst_43072:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821003ffffffffff; valaddr_reg:x3; val_offset:129216*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129216*0 + 3*64*FLEN/8, x4, x1, x2)

inst_43073:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821007ffffffffff; valaddr_reg:x3; val_offset:129219*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129219*0 + 3*65*FLEN/8, x4, x1, x2)

inst_43074:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82100fffffffffff; valaddr_reg:x3; val_offset:129222*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129222*0 + 3*66*FLEN/8, x4, x1, x2)

inst_43075:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82101fffffffffff; valaddr_reg:x3; val_offset:129225*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129225*0 + 3*67*FLEN/8, x4, x1, x2)

inst_43076:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82103fffffffffff; valaddr_reg:x3; val_offset:129228*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129228*0 + 3*68*FLEN/8, x4, x1, x2)

inst_43077:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x82107fffffffffff; valaddr_reg:x3; val_offset:129231*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129231*0 + 3*69*FLEN/8, x4, x1, x2)

inst_43078:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8210ffffffffffff; valaddr_reg:x3; val_offset:129234*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129234*0 + 3*70*FLEN/8, x4, x1, x2)

inst_43079:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8211ffffffffffff; valaddr_reg:x3; val_offset:129237*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129237*0 + 3*71*FLEN/8, x4, x1, x2)

inst_43080:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8213ffffffffffff; valaddr_reg:x3; val_offset:129240*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129240*0 + 3*72*FLEN/8, x4, x1, x2)

inst_43081:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8217ffffffffffff; valaddr_reg:x3; val_offset:129243*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129243*0 + 3*73*FLEN/8, x4, x1, x2)

inst_43082:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x8218000000000000; valaddr_reg:x3; val_offset:129246*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129246*0 + 3*74*FLEN/8, x4, x1, x2)

inst_43083:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821c000000000000; valaddr_reg:x3; val_offset:129249*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129249*0 + 3*75*FLEN/8, x4, x1, x2)

inst_43084:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821e000000000000; valaddr_reg:x3; val_offset:129252*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129252*0 + 3*76*FLEN/8, x4, x1, x2)

inst_43085:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821f000000000000; valaddr_reg:x3; val_offset:129255*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129255*0 + 3*77*FLEN/8, x4, x1, x2)

inst_43086:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821f800000000000; valaddr_reg:x3; val_offset:129258*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129258*0 + 3*78*FLEN/8, x4, x1, x2)

inst_43087:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fc00000000000; valaddr_reg:x3; val_offset:129261*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129261*0 + 3*79*FLEN/8, x4, x1, x2)

inst_43088:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fe00000000000; valaddr_reg:x3; val_offset:129264*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129264*0 + 3*80*FLEN/8, x4, x1, x2)

inst_43089:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ff00000000000; valaddr_reg:x3; val_offset:129267*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129267*0 + 3*81*FLEN/8, x4, x1, x2)

inst_43090:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ff80000000000; valaddr_reg:x3; val_offset:129270*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129270*0 + 3*82*FLEN/8, x4, x1, x2)

inst_43091:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffc0000000000; valaddr_reg:x3; val_offset:129273*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129273*0 + 3*83*FLEN/8, x4, x1, x2)

inst_43092:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffe0000000000; valaddr_reg:x3; val_offset:129276*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129276*0 + 3*84*FLEN/8, x4, x1, x2)

inst_43093:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fff0000000000; valaddr_reg:x3; val_offset:129279*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129279*0 + 3*85*FLEN/8, x4, x1, x2)

inst_43094:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fff8000000000; valaddr_reg:x3; val_offset:129282*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129282*0 + 3*86*FLEN/8, x4, x1, x2)

inst_43095:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffc000000000; valaddr_reg:x3; val_offset:129285*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129285*0 + 3*87*FLEN/8, x4, x1, x2)

inst_43096:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffe000000000; valaddr_reg:x3; val_offset:129288*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129288*0 + 3*88*FLEN/8, x4, x1, x2)

inst_43097:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffff000000000; valaddr_reg:x3; val_offset:129291*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129291*0 + 3*89*FLEN/8, x4, x1, x2)

inst_43098:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffff800000000; valaddr_reg:x3; val_offset:129294*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129294*0 + 3*90*FLEN/8, x4, x1, x2)

inst_43099:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffc00000000; valaddr_reg:x3; val_offset:129297*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129297*0 + 3*91*FLEN/8, x4, x1, x2)

inst_43100:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffe00000000; valaddr_reg:x3; val_offset:129300*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129300*0 + 3*92*FLEN/8, x4, x1, x2)

inst_43101:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffff00000000; valaddr_reg:x3; val_offset:129303*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129303*0 + 3*93*FLEN/8, x4, x1, x2)

inst_43102:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffff80000000; valaddr_reg:x3; val_offset:129306*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129306*0 + 3*94*FLEN/8, x4, x1, x2)

inst_43103:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffc0000000; valaddr_reg:x3; val_offset:129309*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129309*0 + 3*95*FLEN/8, x4, x1, x2)

inst_43104:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffe0000000; valaddr_reg:x3; val_offset:129312*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129312*0 + 3*96*FLEN/8, x4, x1, x2)

inst_43105:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffff0000000; valaddr_reg:x3; val_offset:129315*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129315*0 + 3*97*FLEN/8, x4, x1, x2)

inst_43106:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffff8000000; valaddr_reg:x3; val_offset:129318*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129318*0 + 3*98*FLEN/8, x4, x1, x2)

inst_43107:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffc000000; valaddr_reg:x3; val_offset:129321*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129321*0 + 3*99*FLEN/8, x4, x1, x2)

inst_43108:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffe000000; valaddr_reg:x3; val_offset:129324*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129324*0 + 3*100*FLEN/8, x4, x1, x2)

inst_43109:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffff000000; valaddr_reg:x3; val_offset:129327*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129327*0 + 3*101*FLEN/8, x4, x1, x2)

inst_43110:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffff800000; valaddr_reg:x3; val_offset:129330*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129330*0 + 3*102*FLEN/8, x4, x1, x2)

inst_43111:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffc00000; valaddr_reg:x3; val_offset:129333*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129333*0 + 3*103*FLEN/8, x4, x1, x2)

inst_43112:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffe00000; valaddr_reg:x3; val_offset:129336*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129336*0 + 3*104*FLEN/8, x4, x1, x2)

inst_43113:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffff00000; valaddr_reg:x3; val_offset:129339*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129339*0 + 3*105*FLEN/8, x4, x1, x2)

inst_43114:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffff80000; valaddr_reg:x3; val_offset:129342*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129342*0 + 3*106*FLEN/8, x4, x1, x2)

inst_43115:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffc0000; valaddr_reg:x3; val_offset:129345*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129345*0 + 3*107*FLEN/8, x4, x1, x2)

inst_43116:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffe0000; valaddr_reg:x3; val_offset:129348*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129348*0 + 3*108*FLEN/8, x4, x1, x2)

inst_43117:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffff0000; valaddr_reg:x3; val_offset:129351*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129351*0 + 3*109*FLEN/8, x4, x1, x2)

inst_43118:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffff8000; valaddr_reg:x3; val_offset:129354*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129354*0 + 3*110*FLEN/8, x4, x1, x2)

inst_43119:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffffc000; valaddr_reg:x3; val_offset:129357*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129357*0 + 3*111*FLEN/8, x4, x1, x2)

inst_43120:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffffe000; valaddr_reg:x3; val_offset:129360*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129360*0 + 3*112*FLEN/8, x4, x1, x2)

inst_43121:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffff000; valaddr_reg:x3; val_offset:129363*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129363*0 + 3*113*FLEN/8, x4, x1, x2)

inst_43122:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffff800; valaddr_reg:x3; val_offset:129366*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129366*0 + 3*114*FLEN/8, x4, x1, x2)

inst_43123:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffffc00; valaddr_reg:x3; val_offset:129369*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129369*0 + 3*115*FLEN/8, x4, x1, x2)

inst_43124:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffffe00; valaddr_reg:x3; val_offset:129372*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129372*0 + 3*116*FLEN/8, x4, x1, x2)

inst_43125:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffffff00; valaddr_reg:x3; val_offset:129375*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129375*0 + 3*117*FLEN/8, x4, x1, x2)

inst_43126:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffffff80; valaddr_reg:x3; val_offset:129378*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129378*0 + 3*118*FLEN/8, x4, x1, x2)

inst_43127:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffffffc0; valaddr_reg:x3; val_offset:129381*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129381*0 + 3*119*FLEN/8, x4, x1, x2)

inst_43128:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffffffe0; valaddr_reg:x3; val_offset:129384*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129384*0 + 3*120*FLEN/8, x4, x1, x2)

inst_43129:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffffff0; valaddr_reg:x3; val_offset:129387*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129387*0 + 3*121*FLEN/8, x4, x1, x2)

inst_43130:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffffff8; valaddr_reg:x3; val_offset:129390*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129390*0 + 3*122*FLEN/8, x4, x1, x2)

inst_43131:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffffffc; valaddr_reg:x3; val_offset:129393*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129393*0 + 3*123*FLEN/8, x4, x1, x2)

inst_43132:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821ffffffffffffe; valaddr_reg:x3; val_offset:129396*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129396*0 + 3*124*FLEN/8, x4, x1, x2)

inst_43133:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa911ea1be7bff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x021 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a911ea1be7bff; op2val:0x8000;
op3val:0x821fffffffffffff; valaddr_reg:x3; val_offset:129399*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129399*0 + 3*125*FLEN/8, x4, x1, x2)

inst_43134:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000000000; valaddr_reg:x3; val_offset:129402*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129402*0 + 3*126*FLEN/8, x4, x1, x2)

inst_43135:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000000001; valaddr_reg:x3; val_offset:129405*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129405*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_43136:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000000003; valaddr_reg:x3; val_offset:129408*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129408*0 + 3*128*FLEN/8, x4, x1, x2)

inst_43137:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000000007; valaddr_reg:x3; val_offset:129411*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129411*0 + 3*129*FLEN/8, x4, x1, x2)

inst_43138:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000000000f; valaddr_reg:x3; val_offset:129414*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129414*0 + 3*130*FLEN/8, x4, x1, x2)

inst_43139:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000000001f; valaddr_reg:x3; val_offset:129417*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129417*0 + 3*131*FLEN/8, x4, x1, x2)

inst_43140:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000000003f; valaddr_reg:x3; val_offset:129420*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129420*0 + 3*132*FLEN/8, x4, x1, x2)

inst_43141:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000000007f; valaddr_reg:x3; val_offset:129423*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129423*0 + 3*133*FLEN/8, x4, x1, x2)

inst_43142:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000000000ff; valaddr_reg:x3; val_offset:129426*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129426*0 + 3*134*FLEN/8, x4, x1, x2)

inst_43143:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000000001ff; valaddr_reg:x3; val_offset:129429*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129429*0 + 3*135*FLEN/8, x4, x1, x2)

inst_43144:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000000003ff; valaddr_reg:x3; val_offset:129432*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129432*0 + 3*136*FLEN/8, x4, x1, x2)

inst_43145:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000000007ff; valaddr_reg:x3; val_offset:129435*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129435*0 + 3*137*FLEN/8, x4, x1, x2)

inst_43146:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000000fff; valaddr_reg:x3; val_offset:129438*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129438*0 + 3*138*FLEN/8, x4, x1, x2)

inst_43147:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000001fff; valaddr_reg:x3; val_offset:129441*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129441*0 + 3*139*FLEN/8, x4, x1, x2)

inst_43148:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000003fff; valaddr_reg:x3; val_offset:129444*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129444*0 + 3*140*FLEN/8, x4, x1, x2)

inst_43149:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000007fff; valaddr_reg:x3; val_offset:129447*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129447*0 + 3*141*FLEN/8, x4, x1, x2)

inst_43150:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000000ffff; valaddr_reg:x3; val_offset:129450*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129450*0 + 3*142*FLEN/8, x4, x1, x2)

inst_43151:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000001ffff; valaddr_reg:x3; val_offset:129453*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129453*0 + 3*143*FLEN/8, x4, x1, x2)

inst_43152:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000003ffff; valaddr_reg:x3; val_offset:129456*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129456*0 + 3*144*FLEN/8, x4, x1, x2)

inst_43153:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000007ffff; valaddr_reg:x3; val_offset:129459*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129459*0 + 3*145*FLEN/8, x4, x1, x2)

inst_43154:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000000fffff; valaddr_reg:x3; val_offset:129462*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129462*0 + 3*146*FLEN/8, x4, x1, x2)

inst_43155:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000001fffff; valaddr_reg:x3; val_offset:129465*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129465*0 + 3*147*FLEN/8, x4, x1, x2)

inst_43156:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000003fffff; valaddr_reg:x3; val_offset:129468*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129468*0 + 3*148*FLEN/8, x4, x1, x2)

inst_43157:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000007fffff; valaddr_reg:x3; val_offset:129471*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129471*0 + 3*149*FLEN/8, x4, x1, x2)

inst_43158:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000000ffffff; valaddr_reg:x3; val_offset:129474*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129474*0 + 3*150*FLEN/8, x4, x1, x2)

inst_43159:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000001ffffff; valaddr_reg:x3; val_offset:129477*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129477*0 + 3*151*FLEN/8, x4, x1, x2)

inst_43160:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000003ffffff; valaddr_reg:x3; val_offset:129480*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129480*0 + 3*152*FLEN/8, x4, x1, x2)

inst_43161:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000007ffffff; valaddr_reg:x3; val_offset:129483*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129483*0 + 3*153*FLEN/8, x4, x1, x2)

inst_43162:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000000fffffff; valaddr_reg:x3; val_offset:129486*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129486*0 + 3*154*FLEN/8, x4, x1, x2)

inst_43163:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000001fffffff; valaddr_reg:x3; val_offset:129489*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129489*0 + 3*155*FLEN/8, x4, x1, x2)

inst_43164:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000003fffffff; valaddr_reg:x3; val_offset:129492*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129492*0 + 3*156*FLEN/8, x4, x1, x2)

inst_43165:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000007fffffff; valaddr_reg:x3; val_offset:129495*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129495*0 + 3*157*FLEN/8, x4, x1, x2)

inst_43166:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00000ffffffff; valaddr_reg:x3; val_offset:129498*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129498*0 + 3*158*FLEN/8, x4, x1, x2)

inst_43167:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00001ffffffff; valaddr_reg:x3; val_offset:129501*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129501*0 + 3*159*FLEN/8, x4, x1, x2)

inst_43168:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00003ffffffff; valaddr_reg:x3; val_offset:129504*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129504*0 + 3*160*FLEN/8, x4, x1, x2)

inst_43169:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00007ffffffff; valaddr_reg:x3; val_offset:129507*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129507*0 + 3*161*FLEN/8, x4, x1, x2)

inst_43170:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0000fffffffff; valaddr_reg:x3; val_offset:129510*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129510*0 + 3*162*FLEN/8, x4, x1, x2)

inst_43171:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0001fffffffff; valaddr_reg:x3; val_offset:129513*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129513*0 + 3*163*FLEN/8, x4, x1, x2)

inst_43172:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0003fffffffff; valaddr_reg:x3; val_offset:129516*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129516*0 + 3*164*FLEN/8, x4, x1, x2)

inst_43173:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0007fffffffff; valaddr_reg:x3; val_offset:129519*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129519*0 + 3*165*FLEN/8, x4, x1, x2)

inst_43174:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca000ffffffffff; valaddr_reg:x3; val_offset:129522*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129522*0 + 3*166*FLEN/8, x4, x1, x2)

inst_43175:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca001ffffffffff; valaddr_reg:x3; val_offset:129525*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129525*0 + 3*167*FLEN/8, x4, x1, x2)

inst_43176:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca003ffffffffff; valaddr_reg:x3; val_offset:129528*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129528*0 + 3*168*FLEN/8, x4, x1, x2)

inst_43177:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca007ffffffffff; valaddr_reg:x3; val_offset:129531*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129531*0 + 3*169*FLEN/8, x4, x1, x2)

inst_43178:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca00fffffffffff; valaddr_reg:x3; val_offset:129534*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129534*0 + 3*170*FLEN/8, x4, x1, x2)

inst_43179:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca01fffffffffff; valaddr_reg:x3; val_offset:129537*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129537*0 + 3*171*FLEN/8, x4, x1, x2)

inst_43180:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca03fffffffffff; valaddr_reg:x3; val_offset:129540*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129540*0 + 3*172*FLEN/8, x4, x1, x2)

inst_43181:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca07fffffffffff; valaddr_reg:x3; val_offset:129543*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129543*0 + 3*173*FLEN/8, x4, x1, x2)

inst_43182:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca0ffffffffffff; valaddr_reg:x3; val_offset:129546*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129546*0 + 3*174*FLEN/8, x4, x1, x2)

inst_43183:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca1ffffffffffff; valaddr_reg:x3; val_offset:129549*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129549*0 + 3*175*FLEN/8, x4, x1, x2)

inst_43184:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca3ffffffffffff; valaddr_reg:x3; val_offset:129552*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129552*0 + 3*176*FLEN/8, x4, x1, x2)

inst_43185:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca7ffffffffffff; valaddr_reg:x3; val_offset:129555*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129555*0 + 3*177*FLEN/8, x4, x1, x2)

inst_43186:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ca8000000000000; valaddr_reg:x3; val_offset:129558*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129558*0 + 3*178*FLEN/8, x4, x1, x2)

inst_43187:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cac000000000000; valaddr_reg:x3; val_offset:129561*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129561*0 + 3*179*FLEN/8, x4, x1, x2)

inst_43188:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cae000000000000; valaddr_reg:x3; val_offset:129564*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129564*0 + 3*180*FLEN/8, x4, x1, x2)

inst_43189:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caf000000000000; valaddr_reg:x3; val_offset:129567*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129567*0 + 3*181*FLEN/8, x4, x1, x2)

inst_43190:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caf800000000000; valaddr_reg:x3; val_offset:129570*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129570*0 + 3*182*FLEN/8, x4, x1, x2)

inst_43191:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafc00000000000; valaddr_reg:x3; val_offset:129573*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129573*0 + 3*183*FLEN/8, x4, x1, x2)

inst_43192:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafe00000000000; valaddr_reg:x3; val_offset:129576*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129576*0 + 3*184*FLEN/8, x4, x1, x2)

inst_43193:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caff00000000000; valaddr_reg:x3; val_offset:129579*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129579*0 + 3*185*FLEN/8, x4, x1, x2)

inst_43194:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caff80000000000; valaddr_reg:x3; val_offset:129582*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129582*0 + 3*186*FLEN/8, x4, x1, x2)

inst_43195:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffc0000000000; valaddr_reg:x3; val_offset:129585*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129585*0 + 3*187*FLEN/8, x4, x1, x2)

inst_43196:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffe0000000000; valaddr_reg:x3; val_offset:129588*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129588*0 + 3*188*FLEN/8, x4, x1, x2)

inst_43197:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafff0000000000; valaddr_reg:x3; val_offset:129591*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129591*0 + 3*189*FLEN/8, x4, x1, x2)

inst_43198:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafff8000000000; valaddr_reg:x3; val_offset:129594*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129594*0 + 3*190*FLEN/8, x4, x1, x2)

inst_43199:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffc000000000; valaddr_reg:x3; val_offset:129597*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129597*0 + 3*191*FLEN/8, x4, x1, x2)

inst_43200:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffe000000000; valaddr_reg:x3; val_offset:129600*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129600*0 + 3*192*FLEN/8, x4, x1, x2)

inst_43201:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffff000000000; valaddr_reg:x3; val_offset:129603*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129603*0 + 3*193*FLEN/8, x4, x1, x2)

inst_43202:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffff800000000; valaddr_reg:x3; val_offset:129606*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129606*0 + 3*194*FLEN/8, x4, x1, x2)

inst_43203:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffc00000000; valaddr_reg:x3; val_offset:129609*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129609*0 + 3*195*FLEN/8, x4, x1, x2)

inst_43204:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffe00000000; valaddr_reg:x3; val_offset:129612*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129612*0 + 3*196*FLEN/8, x4, x1, x2)

inst_43205:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffff00000000; valaddr_reg:x3; val_offset:129615*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129615*0 + 3*197*FLEN/8, x4, x1, x2)

inst_43206:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffff80000000; valaddr_reg:x3; val_offset:129618*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129618*0 + 3*198*FLEN/8, x4, x1, x2)

inst_43207:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffc0000000; valaddr_reg:x3; val_offset:129621*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129621*0 + 3*199*FLEN/8, x4, x1, x2)

inst_43208:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffe0000000; valaddr_reg:x3; val_offset:129624*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129624*0 + 3*200*FLEN/8, x4, x1, x2)

inst_43209:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffff0000000; valaddr_reg:x3; val_offset:129627*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129627*0 + 3*201*FLEN/8, x4, x1, x2)

inst_43210:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffff8000000; valaddr_reg:x3; val_offset:129630*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129630*0 + 3*202*FLEN/8, x4, x1, x2)

inst_43211:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffc000000; valaddr_reg:x3; val_offset:129633*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129633*0 + 3*203*FLEN/8, x4, x1, x2)

inst_43212:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffe000000; valaddr_reg:x3; val_offset:129636*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129636*0 + 3*204*FLEN/8, x4, x1, x2)

inst_43213:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffff000000; valaddr_reg:x3; val_offset:129639*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129639*0 + 3*205*FLEN/8, x4, x1, x2)

inst_43214:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffff800000; valaddr_reg:x3; val_offset:129642*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129642*0 + 3*206*FLEN/8, x4, x1, x2)

inst_43215:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffc00000; valaddr_reg:x3; val_offset:129645*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129645*0 + 3*207*FLEN/8, x4, x1, x2)

inst_43216:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffe00000; valaddr_reg:x3; val_offset:129648*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129648*0 + 3*208*FLEN/8, x4, x1, x2)

inst_43217:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffff00000; valaddr_reg:x3; val_offset:129651*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129651*0 + 3*209*FLEN/8, x4, x1, x2)

inst_43218:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffff80000; valaddr_reg:x3; val_offset:129654*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129654*0 + 3*210*FLEN/8, x4, x1, x2)

inst_43219:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffc0000; valaddr_reg:x3; val_offset:129657*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129657*0 + 3*211*FLEN/8, x4, x1, x2)

inst_43220:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffe0000; valaddr_reg:x3; val_offset:129660*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129660*0 + 3*212*FLEN/8, x4, x1, x2)

inst_43221:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffff0000; valaddr_reg:x3; val_offset:129663*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129663*0 + 3*213*FLEN/8, x4, x1, x2)

inst_43222:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffff8000; valaddr_reg:x3; val_offset:129666*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129666*0 + 3*214*FLEN/8, x4, x1, x2)

inst_43223:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffffc000; valaddr_reg:x3; val_offset:129669*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129669*0 + 3*215*FLEN/8, x4, x1, x2)

inst_43224:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffffe000; valaddr_reg:x3; val_offset:129672*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129672*0 + 3*216*FLEN/8, x4, x1, x2)

inst_43225:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffff000; valaddr_reg:x3; val_offset:129675*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129675*0 + 3*217*FLEN/8, x4, x1, x2)

inst_43226:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffff800; valaddr_reg:x3; val_offset:129678*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129678*0 + 3*218*FLEN/8, x4, x1, x2)

inst_43227:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffffc00; valaddr_reg:x3; val_offset:129681*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129681*0 + 3*219*FLEN/8, x4, x1, x2)

inst_43228:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffffe00; valaddr_reg:x3; val_offset:129684*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129684*0 + 3*220*FLEN/8, x4, x1, x2)

inst_43229:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffffff00; valaddr_reg:x3; val_offset:129687*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129687*0 + 3*221*FLEN/8, x4, x1, x2)

inst_43230:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffffff80; valaddr_reg:x3; val_offset:129690*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129690*0 + 3*222*FLEN/8, x4, x1, x2)

inst_43231:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffffffc0; valaddr_reg:x3; val_offset:129693*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129693*0 + 3*223*FLEN/8, x4, x1, x2)

inst_43232:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffffffe0; valaddr_reg:x3; val_offset:129696*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129696*0 + 3*224*FLEN/8, x4, x1, x2)

inst_43233:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffffff0; valaddr_reg:x3; val_offset:129699*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129699*0 + 3*225*FLEN/8, x4, x1, x2)

inst_43234:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffffff8; valaddr_reg:x3; val_offset:129702*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129702*0 + 3*226*FLEN/8, x4, x1, x2)

inst_43235:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffffffc; valaddr_reg:x3; val_offset:129705*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129705*0 + 3*227*FLEN/8, x4, x1, x2)

inst_43236:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3caffffffffffffe; valaddr_reg:x3; val_offset:129708*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129708*0 + 3*228*FLEN/8, x4, x1, x2)

inst_43237:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ca and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3cafffffffffffff; valaddr_reg:x3; val_offset:129711*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129711*0 + 3*229*FLEN/8, x4, x1, x2)

inst_43238:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:129714*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129714*0 + 3*230*FLEN/8, x4, x1, x2)

inst_43239:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:129717*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129717*0 + 3*231*FLEN/8, x4, x1, x2)

inst_43240:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:129720*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129720*0 + 3*232*FLEN/8, x4, x1, x2)

inst_43241:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:129723*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129723*0 + 3*233*FLEN/8, x4, x1, x2)

inst_43242:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:129726*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129726*0 + 3*234*FLEN/8, x4, x1, x2)

inst_43243:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:129729*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129729*0 + 3*235*FLEN/8, x4, x1, x2)

inst_43244:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:129732*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129732*0 + 3*236*FLEN/8, x4, x1, x2)

inst_43245:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:129735*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129735*0 + 3*237*FLEN/8, x4, x1, x2)

inst_43246:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:129738*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129738*0 + 3*238*FLEN/8, x4, x1, x2)

inst_43247:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:129741*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129741*0 + 3*239*FLEN/8, x4, x1, x2)

inst_43248:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:129744*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129744*0 + 3*240*FLEN/8, x4, x1, x2)

inst_43249:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:129747*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129747*0 + 3*241*FLEN/8, x4, x1, x2)

inst_43250:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:129750*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129750*0 + 3*242*FLEN/8, x4, x1, x2)

inst_43251:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:129753*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129753*0 + 3*243*FLEN/8, x4, x1, x2)

inst_43252:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:129756*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129756*0 + 3*244*FLEN/8, x4, x1, x2)

inst_43253:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:129759*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129759*0 + 3*245*FLEN/8, x4, x1, x2)

inst_43254:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:129762*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129762*0 + 3*246*FLEN/8, x4, x1, x2)

inst_43255:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:129765*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129765*0 + 3*247*FLEN/8, x4, x1, x2)

inst_43256:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:129768*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129768*0 + 3*248*FLEN/8, x4, x1, x2)

inst_43257:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:129771*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129771*0 + 3*249*FLEN/8, x4, x1, x2)

inst_43258:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:129774*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129774*0 + 3*250*FLEN/8, x4, x1, x2)

inst_43259:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa919c818106d1 and fs2 == 0 and fe2 == 0x204 and fm2 == 0x3454e687086a4 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a919c818106d1; op2val:0x2043454e687086a4;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:129777*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129777*0 + 3*251*FLEN/8, x4, x1, x2)

inst_43260:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:129780*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129780*0 + 3*252*FLEN/8, x4, x1, x2)

inst_43261:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:129783*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129783*0 + 3*253*FLEN/8, x4, x1, x2)

inst_43262:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:129786*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129786*0 + 3*254*FLEN/8, x4, x1, x2)

inst_43263:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:129789*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129789*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_43264:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:129792*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129792*0 + 3*256*FLEN/8, x4, x1, x2)

inst_43265:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:129795*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129795*0 + 3*257*FLEN/8, x4, x1, x2)

inst_43266:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:129798*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129798*0 + 3*258*FLEN/8, x4, x1, x2)

inst_43267:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:129801*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129801*0 + 3*259*FLEN/8, x4, x1, x2)

inst_43268:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:129804*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129804*0 + 3*260*FLEN/8, x4, x1, x2)

inst_43269:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:129807*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129807*0 + 3*261*FLEN/8, x4, x1, x2)

inst_43270:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:129810*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129810*0 + 3*262*FLEN/8, x4, x1, x2)

inst_43271:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:129813*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129813*0 + 3*263*FLEN/8, x4, x1, x2)

inst_43272:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:129816*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129816*0 + 3*264*FLEN/8, x4, x1, x2)

inst_43273:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:129819*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129819*0 + 3*265*FLEN/8, x4, x1, x2)

inst_43274:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:129822*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129822*0 + 3*266*FLEN/8, x4, x1, x2)

inst_43275:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:129825*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129825*0 + 3*267*FLEN/8, x4, x1, x2)

inst_43276:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:129828*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129828*0 + 3*268*FLEN/8, x4, x1, x2)

inst_43277:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:129831*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129831*0 + 3*269*FLEN/8, x4, x1, x2)

inst_43278:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:129834*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129834*0 + 3*270*FLEN/8, x4, x1, x2)

inst_43279:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:129837*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129837*0 + 3*271*FLEN/8, x4, x1, x2)

inst_43280:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:129840*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129840*0 + 3*272*FLEN/8, x4, x1, x2)

inst_43281:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:129843*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129843*0 + 3*273*FLEN/8, x4, x1, x2)

inst_43282:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000000000; valaddr_reg:x3; val_offset:129846*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129846*0 + 3*274*FLEN/8, x4, x1, x2)

inst_43283:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000000001; valaddr_reg:x3; val_offset:129849*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129849*0 + 3*275*FLEN/8, x4, x1, x2)

inst_43284:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000000003; valaddr_reg:x3; val_offset:129852*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129852*0 + 3*276*FLEN/8, x4, x1, x2)

inst_43285:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000000007; valaddr_reg:x3; val_offset:129855*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129855*0 + 3*277*FLEN/8, x4, x1, x2)

inst_43286:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000000000f; valaddr_reg:x3; val_offset:129858*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129858*0 + 3*278*FLEN/8, x4, x1, x2)

inst_43287:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000000001f; valaddr_reg:x3; val_offset:129861*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129861*0 + 3*279*FLEN/8, x4, x1, x2)

inst_43288:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000000003f; valaddr_reg:x3; val_offset:129864*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129864*0 + 3*280*FLEN/8, x4, x1, x2)

inst_43289:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000000007f; valaddr_reg:x3; val_offset:129867*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129867*0 + 3*281*FLEN/8, x4, x1, x2)

inst_43290:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000000000ff; valaddr_reg:x3; val_offset:129870*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129870*0 + 3*282*FLEN/8, x4, x1, x2)

inst_43291:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000000001ff; valaddr_reg:x3; val_offset:129873*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129873*0 + 3*283*FLEN/8, x4, x1, x2)

inst_43292:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000000003ff; valaddr_reg:x3; val_offset:129876*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129876*0 + 3*284*FLEN/8, x4, x1, x2)

inst_43293:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000000007ff; valaddr_reg:x3; val_offset:129879*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129879*0 + 3*285*FLEN/8, x4, x1, x2)

inst_43294:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000000fff; valaddr_reg:x3; val_offset:129882*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129882*0 + 3*286*FLEN/8, x4, x1, x2)

inst_43295:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000001fff; valaddr_reg:x3; val_offset:129885*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129885*0 + 3*287*FLEN/8, x4, x1, x2)

inst_43296:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000003fff; valaddr_reg:x3; val_offset:129888*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129888*0 + 3*288*FLEN/8, x4, x1, x2)

inst_43297:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000007fff; valaddr_reg:x3; val_offset:129891*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129891*0 + 3*289*FLEN/8, x4, x1, x2)

inst_43298:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000000ffff; valaddr_reg:x3; val_offset:129894*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129894*0 + 3*290*FLEN/8, x4, x1, x2)

inst_43299:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000001ffff; valaddr_reg:x3; val_offset:129897*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129897*0 + 3*291*FLEN/8, x4, x1, x2)

inst_43300:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000003ffff; valaddr_reg:x3; val_offset:129900*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129900*0 + 3*292*FLEN/8, x4, x1, x2)

inst_43301:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000007ffff; valaddr_reg:x3; val_offset:129903*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129903*0 + 3*293*FLEN/8, x4, x1, x2)

inst_43302:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000000fffff; valaddr_reg:x3; val_offset:129906*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129906*0 + 3*294*FLEN/8, x4, x1, x2)

inst_43303:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000001fffff; valaddr_reg:x3; val_offset:129909*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129909*0 + 3*295*FLEN/8, x4, x1, x2)

inst_43304:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000003fffff; valaddr_reg:x3; val_offset:129912*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129912*0 + 3*296*FLEN/8, x4, x1, x2)

inst_43305:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000007fffff; valaddr_reg:x3; val_offset:129915*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129915*0 + 3*297*FLEN/8, x4, x1, x2)

inst_43306:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000000ffffff; valaddr_reg:x3; val_offset:129918*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129918*0 + 3*298*FLEN/8, x4, x1, x2)

inst_43307:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000001ffffff; valaddr_reg:x3; val_offset:129921*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129921*0 + 3*299*FLEN/8, x4, x1, x2)

inst_43308:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000003ffffff; valaddr_reg:x3; val_offset:129924*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129924*0 + 3*300*FLEN/8, x4, x1, x2)

inst_43309:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000007ffffff; valaddr_reg:x3; val_offset:129927*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129927*0 + 3*301*FLEN/8, x4, x1, x2)

inst_43310:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000000fffffff; valaddr_reg:x3; val_offset:129930*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129930*0 + 3*302*FLEN/8, x4, x1, x2)

inst_43311:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000001fffffff; valaddr_reg:x3; val_offset:129933*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129933*0 + 3*303*FLEN/8, x4, x1, x2)

inst_43312:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000003fffffff; valaddr_reg:x3; val_offset:129936*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129936*0 + 3*304*FLEN/8, x4, x1, x2)

inst_43313:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000007fffffff; valaddr_reg:x3; val_offset:129939*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129939*0 + 3*305*FLEN/8, x4, x1, x2)

inst_43314:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00000ffffffff; valaddr_reg:x3; val_offset:129942*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129942*0 + 3*306*FLEN/8, x4, x1, x2)

inst_43315:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00001ffffffff; valaddr_reg:x3; val_offset:129945*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129945*0 + 3*307*FLEN/8, x4, x1, x2)

inst_43316:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00003ffffffff; valaddr_reg:x3; val_offset:129948*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129948*0 + 3*308*FLEN/8, x4, x1, x2)

inst_43317:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00007ffffffff; valaddr_reg:x3; val_offset:129951*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129951*0 + 3*309*FLEN/8, x4, x1, x2)

inst_43318:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0000fffffffff; valaddr_reg:x3; val_offset:129954*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129954*0 + 3*310*FLEN/8, x4, x1, x2)

inst_43319:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0001fffffffff; valaddr_reg:x3; val_offset:129957*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129957*0 + 3*311*FLEN/8, x4, x1, x2)

inst_43320:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0003fffffffff; valaddr_reg:x3; val_offset:129960*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129960*0 + 3*312*FLEN/8, x4, x1, x2)

inst_43321:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0007fffffffff; valaddr_reg:x3; val_offset:129963*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129963*0 + 3*313*FLEN/8, x4, x1, x2)

inst_43322:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b000ffffffffff; valaddr_reg:x3; val_offset:129966*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129966*0 + 3*314*FLEN/8, x4, x1, x2)

inst_43323:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b001ffffffffff; valaddr_reg:x3; val_offset:129969*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129969*0 + 3*315*FLEN/8, x4, x1, x2)

inst_43324:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b003ffffffffff; valaddr_reg:x3; val_offset:129972*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129972*0 + 3*316*FLEN/8, x4, x1, x2)

inst_43325:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b007ffffffffff; valaddr_reg:x3; val_offset:129975*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129975*0 + 3*317*FLEN/8, x4, x1, x2)

inst_43326:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b00fffffffffff; valaddr_reg:x3; val_offset:129978*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129978*0 + 3*318*FLEN/8, x4, x1, x2)

inst_43327:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b01fffffffffff; valaddr_reg:x3; val_offset:129981*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129981*0 + 3*319*FLEN/8, x4, x1, x2)

inst_43328:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b03fffffffffff; valaddr_reg:x3; val_offset:129984*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129984*0 + 3*320*FLEN/8, x4, x1, x2)

inst_43329:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b07fffffffffff; valaddr_reg:x3; val_offset:129987*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129987*0 + 3*321*FLEN/8, x4, x1, x2)

inst_43330:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b0ffffffffffff; valaddr_reg:x3; val_offset:129990*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129990*0 + 3*322*FLEN/8, x4, x1, x2)

inst_43331:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b1ffffffffffff; valaddr_reg:x3; val_offset:129993*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129993*0 + 3*323*FLEN/8, x4, x1, x2)

inst_43332:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b3ffffffffffff; valaddr_reg:x3; val_offset:129996*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129996*0 + 3*324*FLEN/8, x4, x1, x2)

inst_43333:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b7ffffffffffff; valaddr_reg:x3; val_offset:129999*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 129999*0 + 3*325*FLEN/8, x4, x1, x2)

inst_43334:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80b8000000000000; valaddr_reg:x3; val_offset:130002*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130002*0 + 3*326*FLEN/8, x4, x1, x2)

inst_43335:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bc000000000000; valaddr_reg:x3; val_offset:130005*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130005*0 + 3*327*FLEN/8, x4, x1, x2)

inst_43336:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80be000000000000; valaddr_reg:x3; val_offset:130008*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130008*0 + 3*328*FLEN/8, x4, x1, x2)

inst_43337:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bf000000000000; valaddr_reg:x3; val_offset:130011*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130011*0 + 3*329*FLEN/8, x4, x1, x2)

inst_43338:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bf800000000000; valaddr_reg:x3; val_offset:130014*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130014*0 + 3*330*FLEN/8, x4, x1, x2)

inst_43339:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfc00000000000; valaddr_reg:x3; val_offset:130017*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130017*0 + 3*331*FLEN/8, x4, x1, x2)

inst_43340:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfe00000000000; valaddr_reg:x3; val_offset:130020*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130020*0 + 3*332*FLEN/8, x4, x1, x2)

inst_43341:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bff00000000000; valaddr_reg:x3; val_offset:130023*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130023*0 + 3*333*FLEN/8, x4, x1, x2)

inst_43342:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bff80000000000; valaddr_reg:x3; val_offset:130026*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130026*0 + 3*334*FLEN/8, x4, x1, x2)

inst_43343:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffc0000000000; valaddr_reg:x3; val_offset:130029*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130029*0 + 3*335*FLEN/8, x4, x1, x2)

inst_43344:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffe0000000000; valaddr_reg:x3; val_offset:130032*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130032*0 + 3*336*FLEN/8, x4, x1, x2)

inst_43345:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfff0000000000; valaddr_reg:x3; val_offset:130035*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130035*0 + 3*337*FLEN/8, x4, x1, x2)

inst_43346:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfff8000000000; valaddr_reg:x3; val_offset:130038*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130038*0 + 3*338*FLEN/8, x4, x1, x2)

inst_43347:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffc000000000; valaddr_reg:x3; val_offset:130041*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130041*0 + 3*339*FLEN/8, x4, x1, x2)

inst_43348:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffe000000000; valaddr_reg:x3; val_offset:130044*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130044*0 + 3*340*FLEN/8, x4, x1, x2)

inst_43349:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffff000000000; valaddr_reg:x3; val_offset:130047*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130047*0 + 3*341*FLEN/8, x4, x1, x2)

inst_43350:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffff800000000; valaddr_reg:x3; val_offset:130050*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130050*0 + 3*342*FLEN/8, x4, x1, x2)

inst_43351:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffc00000000; valaddr_reg:x3; val_offset:130053*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130053*0 + 3*343*FLEN/8, x4, x1, x2)

inst_43352:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffe00000000; valaddr_reg:x3; val_offset:130056*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130056*0 + 3*344*FLEN/8, x4, x1, x2)

inst_43353:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffff00000000; valaddr_reg:x3; val_offset:130059*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130059*0 + 3*345*FLEN/8, x4, x1, x2)

inst_43354:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffff80000000; valaddr_reg:x3; val_offset:130062*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130062*0 + 3*346*FLEN/8, x4, x1, x2)

inst_43355:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffc0000000; valaddr_reg:x3; val_offset:130065*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130065*0 + 3*347*FLEN/8, x4, x1, x2)

inst_43356:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffe0000000; valaddr_reg:x3; val_offset:130068*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130068*0 + 3*348*FLEN/8, x4, x1, x2)

inst_43357:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffff0000000; valaddr_reg:x3; val_offset:130071*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130071*0 + 3*349*FLEN/8, x4, x1, x2)

inst_43358:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffff8000000; valaddr_reg:x3; val_offset:130074*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130074*0 + 3*350*FLEN/8, x4, x1, x2)

inst_43359:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffc000000; valaddr_reg:x3; val_offset:130077*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130077*0 + 3*351*FLEN/8, x4, x1, x2)

inst_43360:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffe000000; valaddr_reg:x3; val_offset:130080*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130080*0 + 3*352*FLEN/8, x4, x1, x2)

inst_43361:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffff000000; valaddr_reg:x3; val_offset:130083*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130083*0 + 3*353*FLEN/8, x4, x1, x2)

inst_43362:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffff800000; valaddr_reg:x3; val_offset:130086*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130086*0 + 3*354*FLEN/8, x4, x1, x2)

inst_43363:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffc00000; valaddr_reg:x3; val_offset:130089*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130089*0 + 3*355*FLEN/8, x4, x1, x2)

inst_43364:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffe00000; valaddr_reg:x3; val_offset:130092*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130092*0 + 3*356*FLEN/8, x4, x1, x2)

inst_43365:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffff00000; valaddr_reg:x3; val_offset:130095*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130095*0 + 3*357*FLEN/8, x4, x1, x2)

inst_43366:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffff80000; valaddr_reg:x3; val_offset:130098*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130098*0 + 3*358*FLEN/8, x4, x1, x2)

inst_43367:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffc0000; valaddr_reg:x3; val_offset:130101*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130101*0 + 3*359*FLEN/8, x4, x1, x2)

inst_43368:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffe0000; valaddr_reg:x3; val_offset:130104*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130104*0 + 3*360*FLEN/8, x4, x1, x2)

inst_43369:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffff0000; valaddr_reg:x3; val_offset:130107*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130107*0 + 3*361*FLEN/8, x4, x1, x2)

inst_43370:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffff8000; valaddr_reg:x3; val_offset:130110*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130110*0 + 3*362*FLEN/8, x4, x1, x2)

inst_43371:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffffc000; valaddr_reg:x3; val_offset:130113*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130113*0 + 3*363*FLEN/8, x4, x1, x2)

inst_43372:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffffe000; valaddr_reg:x3; val_offset:130116*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130116*0 + 3*364*FLEN/8, x4, x1, x2)

inst_43373:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffff000; valaddr_reg:x3; val_offset:130119*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130119*0 + 3*365*FLEN/8, x4, x1, x2)

inst_43374:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffff800; valaddr_reg:x3; val_offset:130122*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130122*0 + 3*366*FLEN/8, x4, x1, x2)

inst_43375:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffffc00; valaddr_reg:x3; val_offset:130125*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130125*0 + 3*367*FLEN/8, x4, x1, x2)

inst_43376:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffffe00; valaddr_reg:x3; val_offset:130128*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130128*0 + 3*368*FLEN/8, x4, x1, x2)

inst_43377:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffffff00; valaddr_reg:x3; val_offset:130131*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130131*0 + 3*369*FLEN/8, x4, x1, x2)

inst_43378:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffffff80; valaddr_reg:x3; val_offset:130134*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130134*0 + 3*370*FLEN/8, x4, x1, x2)

inst_43379:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffffffc0; valaddr_reg:x3; val_offset:130137*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130137*0 + 3*371*FLEN/8, x4, x1, x2)

inst_43380:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffffffe0; valaddr_reg:x3; val_offset:130140*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130140*0 + 3*372*FLEN/8, x4, x1, x2)

inst_43381:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffffff0; valaddr_reg:x3; val_offset:130143*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130143*0 + 3*373*FLEN/8, x4, x1, x2)

inst_43382:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffffff8; valaddr_reg:x3; val_offset:130146*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130146*0 + 3*374*FLEN/8, x4, x1, x2)

inst_43383:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffffffc; valaddr_reg:x3; val_offset:130149*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130149*0 + 3*375*FLEN/8, x4, x1, x2)

inst_43384:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bffffffffffffe; valaddr_reg:x3; val_offset:130152*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130152*0 + 3*376*FLEN/8, x4, x1, x2)

inst_43385:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xa99dd8880ddad and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x00b and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9a99dd8880ddad; op2val:0x8000;
op3val:0x80bfffffffffffff; valaddr_reg:x3; val_offset:130155*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130155*0 + 3*377*FLEN/8, x4, x1, x2)

inst_43386:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:130158*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130158*0 + 3*378*FLEN/8, x4, x1, x2)

inst_43387:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:130161*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130161*0 + 3*379*FLEN/8, x4, x1, x2)

inst_43388:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:130164*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130164*0 + 3*380*FLEN/8, x4, x1, x2)

inst_43389:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:130167*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130167*0 + 3*381*FLEN/8, x4, x1, x2)

inst_43390:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:130170*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130170*0 + 3*382*FLEN/8, x4, x1, x2)

inst_43391:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:130173*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130173*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_43392:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:130176*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130176*0 + 3*384*FLEN/8, x4, x1, x2)

inst_43393:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:130179*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130179*0 + 3*385*FLEN/8, x4, x1, x2)

inst_43394:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:130182*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130182*0 + 3*386*FLEN/8, x4, x1, x2)

inst_43395:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:130185*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130185*0 + 3*387*FLEN/8, x4, x1, x2)

inst_43396:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:130188*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130188*0 + 3*388*FLEN/8, x4, x1, x2)

inst_43397:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:130191*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130191*0 + 3*389*FLEN/8, x4, x1, x2)

inst_43398:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x9999999999999; valaddr_reg:x3; val_offset:130194*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130194*0 + 3*390*FLEN/8, x4, x1, x2)

inst_43399:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xb6db6db6db6db; valaddr_reg:x3; val_offset:130197*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130197*0 + 3*391*FLEN/8, x4, x1, x2)

inst_43400:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xccccccccccccc; valaddr_reg:x3; val_offset:130200*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130200*0 + 3*392*FLEN/8, x4, x1, x2)

inst_43401:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xdb6db6db6db6d; valaddr_reg:x3; val_offset:130203*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130203*0 + 3*393*FLEN/8, x4, x1, x2)

inst_43402:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xfffffffffffc0; valaddr_reg:x3; val_offset:130206*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130206*0 + 3*394*FLEN/8, x4, x1, x2)

inst_43403:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xfffffffffffe0; valaddr_reg:x3; val_offset:130209*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130209*0 + 3*395*FLEN/8, x4, x1, x2)

inst_43404:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xffffffffffff0; valaddr_reg:x3; val_offset:130212*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130212*0 + 3*396*FLEN/8, x4, x1, x2)

inst_43405:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xffffffffffff8; valaddr_reg:x3; val_offset:130215*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130215*0 + 3*397*FLEN/8, x4, x1, x2)

inst_43406:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xffffffffffffc; valaddr_reg:x3; val_offset:130218*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130218*0 + 3*398*FLEN/8, x4, x1, x2)

inst_43407:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0xffffffffffffe; valaddr_reg:x3; val_offset:130221*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130221*0 + 3*399*FLEN/8, x4, x1, x2)

inst_43408:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000000000; valaddr_reg:x3; val_offset:130224*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130224*0 + 3*400*FLEN/8, x4, x1, x2)

inst_43409:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000000001; valaddr_reg:x3; val_offset:130227*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130227*0 + 3*401*FLEN/8, x4, x1, x2)

inst_43410:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000000003; valaddr_reg:x3; val_offset:130230*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130230*0 + 3*402*FLEN/8, x4, x1, x2)

inst_43411:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000000007; valaddr_reg:x3; val_offset:130233*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130233*0 + 3*403*FLEN/8, x4, x1, x2)

inst_43412:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000000000f; valaddr_reg:x3; val_offset:130236*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130236*0 + 3*404*FLEN/8, x4, x1, x2)

inst_43413:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000000001f; valaddr_reg:x3; val_offset:130239*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130239*0 + 3*405*FLEN/8, x4, x1, x2)

inst_43414:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000000003f; valaddr_reg:x3; val_offset:130242*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130242*0 + 3*406*FLEN/8, x4, x1, x2)

inst_43415:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000000007f; valaddr_reg:x3; val_offset:130245*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130245*0 + 3*407*FLEN/8, x4, x1, x2)

inst_43416:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000000000ff; valaddr_reg:x3; val_offset:130248*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130248*0 + 3*408*FLEN/8, x4, x1, x2)

inst_43417:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000000001ff; valaddr_reg:x3; val_offset:130251*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130251*0 + 3*409*FLEN/8, x4, x1, x2)

inst_43418:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000000003ff; valaddr_reg:x3; val_offset:130254*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130254*0 + 3*410*FLEN/8, x4, x1, x2)

inst_43419:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000000007ff; valaddr_reg:x3; val_offset:130257*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130257*0 + 3*411*FLEN/8, x4, x1, x2)

inst_43420:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000000fff; valaddr_reg:x3; val_offset:130260*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130260*0 + 3*412*FLEN/8, x4, x1, x2)

inst_43421:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000001fff; valaddr_reg:x3; val_offset:130263*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130263*0 + 3*413*FLEN/8, x4, x1, x2)

inst_43422:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000003fff; valaddr_reg:x3; val_offset:130266*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130266*0 + 3*414*FLEN/8, x4, x1, x2)

inst_43423:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000007fff; valaddr_reg:x3; val_offset:130269*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130269*0 + 3*415*FLEN/8, x4, x1, x2)

inst_43424:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000000ffff; valaddr_reg:x3; val_offset:130272*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130272*0 + 3*416*FLEN/8, x4, x1, x2)

inst_43425:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000001ffff; valaddr_reg:x3; val_offset:130275*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130275*0 + 3*417*FLEN/8, x4, x1, x2)

inst_43426:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000003ffff; valaddr_reg:x3; val_offset:130278*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130278*0 + 3*418*FLEN/8, x4, x1, x2)

inst_43427:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000007ffff; valaddr_reg:x3; val_offset:130281*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130281*0 + 3*419*FLEN/8, x4, x1, x2)

inst_43428:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000000fffff; valaddr_reg:x3; val_offset:130284*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130284*0 + 3*420*FLEN/8, x4, x1, x2)

inst_43429:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000001fffff; valaddr_reg:x3; val_offset:130287*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130287*0 + 3*421*FLEN/8, x4, x1, x2)

inst_43430:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000003fffff; valaddr_reg:x3; val_offset:130290*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130290*0 + 3*422*FLEN/8, x4, x1, x2)

inst_43431:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000007fffff; valaddr_reg:x3; val_offset:130293*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130293*0 + 3*423*FLEN/8, x4, x1, x2)

inst_43432:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000000ffffff; valaddr_reg:x3; val_offset:130296*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130296*0 + 3*424*FLEN/8, x4, x1, x2)

inst_43433:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000001ffffff; valaddr_reg:x3; val_offset:130299*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130299*0 + 3*425*FLEN/8, x4, x1, x2)

inst_43434:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000003ffffff; valaddr_reg:x3; val_offset:130302*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130302*0 + 3*426*FLEN/8, x4, x1, x2)

inst_43435:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000007ffffff; valaddr_reg:x3; val_offset:130305*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130305*0 + 3*427*FLEN/8, x4, x1, x2)

inst_43436:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000000fffffff; valaddr_reg:x3; val_offset:130308*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130308*0 + 3*428*FLEN/8, x4, x1, x2)

inst_43437:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000001fffffff; valaddr_reg:x3; val_offset:130311*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130311*0 + 3*429*FLEN/8, x4, x1, x2)

inst_43438:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000003fffffff; valaddr_reg:x3; val_offset:130314*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130314*0 + 3*430*FLEN/8, x4, x1, x2)

inst_43439:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000007fffffff; valaddr_reg:x3; val_offset:130317*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130317*0 + 3*431*FLEN/8, x4, x1, x2)

inst_43440:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600000ffffffff; valaddr_reg:x3; val_offset:130320*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130320*0 + 3*432*FLEN/8, x4, x1, x2)

inst_43441:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600001ffffffff; valaddr_reg:x3; val_offset:130323*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130323*0 + 3*433*FLEN/8, x4, x1, x2)

inst_43442:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600003ffffffff; valaddr_reg:x3; val_offset:130326*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130326*0 + 3*434*FLEN/8, x4, x1, x2)

inst_43443:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600007ffffffff; valaddr_reg:x3; val_offset:130329*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130329*0 + 3*435*FLEN/8, x4, x1, x2)

inst_43444:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60000fffffffff; valaddr_reg:x3; val_offset:130332*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130332*0 + 3*436*FLEN/8, x4, x1, x2)

inst_43445:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60001fffffffff; valaddr_reg:x3; val_offset:130335*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130335*0 + 3*437*FLEN/8, x4, x1, x2)

inst_43446:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60003fffffffff; valaddr_reg:x3; val_offset:130338*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130338*0 + 3*438*FLEN/8, x4, x1, x2)

inst_43447:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60007fffffffff; valaddr_reg:x3; val_offset:130341*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130341*0 + 3*439*FLEN/8, x4, x1, x2)

inst_43448:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6000ffffffffff; valaddr_reg:x3; val_offset:130344*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130344*0 + 3*440*FLEN/8, x4, x1, x2)

inst_43449:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6001ffffffffff; valaddr_reg:x3; val_offset:130347*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130347*0 + 3*441*FLEN/8, x4, x1, x2)

inst_43450:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6003ffffffffff; valaddr_reg:x3; val_offset:130350*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130350*0 + 3*442*FLEN/8, x4, x1, x2)

inst_43451:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6007ffffffffff; valaddr_reg:x3; val_offset:130353*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130353*0 + 3*443*FLEN/8, x4, x1, x2)

inst_43452:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x600fffffffffff; valaddr_reg:x3; val_offset:130356*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130356*0 + 3*444*FLEN/8, x4, x1, x2)

inst_43453:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x601fffffffffff; valaddr_reg:x3; val_offset:130359*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130359*0 + 3*445*FLEN/8, x4, x1, x2)

inst_43454:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x603fffffffffff; valaddr_reg:x3; val_offset:130362*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130362*0 + 3*446*FLEN/8, x4, x1, x2)

inst_43455:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x607fffffffffff; valaddr_reg:x3; val_offset:130365*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130365*0 + 3*447*FLEN/8, x4, x1, x2)

inst_43456:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x60ffffffffffff; valaddr_reg:x3; val_offset:130368*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130368*0 + 3*448*FLEN/8, x4, x1, x2)

inst_43457:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x61ffffffffffff; valaddr_reg:x3; val_offset:130371*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130371*0 + 3*449*FLEN/8, x4, x1, x2)

inst_43458:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x63ffffffffffff; valaddr_reg:x3; val_offset:130374*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130374*0 + 3*450*FLEN/8, x4, x1, x2)

inst_43459:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x67ffffffffffff; valaddr_reg:x3; val_offset:130377*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130377*0 + 3*451*FLEN/8, x4, x1, x2)

inst_43460:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x68000000000000; valaddr_reg:x3; val_offset:130380*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130380*0 + 3*452*FLEN/8, x4, x1, x2)

inst_43461:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6c000000000000; valaddr_reg:x3; val_offset:130383*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130383*0 + 3*453*FLEN/8, x4, x1, x2)

inst_43462:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6e000000000000; valaddr_reg:x3; val_offset:130386*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130386*0 + 3*454*FLEN/8, x4, x1, x2)

inst_43463:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6f000000000000; valaddr_reg:x3; val_offset:130389*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130389*0 + 3*455*FLEN/8, x4, x1, x2)

inst_43464:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6f800000000000; valaddr_reg:x3; val_offset:130392*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130392*0 + 3*456*FLEN/8, x4, x1, x2)

inst_43465:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fc00000000000; valaddr_reg:x3; val_offset:130395*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130395*0 + 3*457*FLEN/8, x4, x1, x2)

inst_43466:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fe00000000000; valaddr_reg:x3; val_offset:130398*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130398*0 + 3*458*FLEN/8, x4, x1, x2)

inst_43467:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ff00000000000; valaddr_reg:x3; val_offset:130401*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130401*0 + 3*459*FLEN/8, x4, x1, x2)

inst_43468:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ff80000000000; valaddr_reg:x3; val_offset:130404*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130404*0 + 3*460*FLEN/8, x4, x1, x2)

inst_43469:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffc0000000000; valaddr_reg:x3; val_offset:130407*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130407*0 + 3*461*FLEN/8, x4, x1, x2)

inst_43470:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffe0000000000; valaddr_reg:x3; val_offset:130410*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130410*0 + 3*462*FLEN/8, x4, x1, x2)

inst_43471:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fff0000000000; valaddr_reg:x3; val_offset:130413*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130413*0 + 3*463*FLEN/8, x4, x1, x2)

inst_43472:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fff8000000000; valaddr_reg:x3; val_offset:130416*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130416*0 + 3*464*FLEN/8, x4, x1, x2)

inst_43473:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffc000000000; valaddr_reg:x3; val_offset:130419*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130419*0 + 3*465*FLEN/8, x4, x1, x2)

inst_43474:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffe000000000; valaddr_reg:x3; val_offset:130422*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130422*0 + 3*466*FLEN/8, x4, x1, x2)

inst_43475:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffff000000000; valaddr_reg:x3; val_offset:130425*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130425*0 + 3*467*FLEN/8, x4, x1, x2)

inst_43476:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffff800000000; valaddr_reg:x3; val_offset:130428*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130428*0 + 3*468*FLEN/8, x4, x1, x2)

inst_43477:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffc00000000; valaddr_reg:x3; val_offset:130431*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130431*0 + 3*469*FLEN/8, x4, x1, x2)

inst_43478:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffe00000000; valaddr_reg:x3; val_offset:130434*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130434*0 + 3*470*FLEN/8, x4, x1, x2)

inst_43479:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffff00000000; valaddr_reg:x3; val_offset:130437*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130437*0 + 3*471*FLEN/8, x4, x1, x2)

inst_43480:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffff80000000; valaddr_reg:x3; val_offset:130440*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130440*0 + 3*472*FLEN/8, x4, x1, x2)

inst_43481:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffc0000000; valaddr_reg:x3; val_offset:130443*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130443*0 + 3*473*FLEN/8, x4, x1, x2)

inst_43482:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffe0000000; valaddr_reg:x3; val_offset:130446*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130446*0 + 3*474*FLEN/8, x4, x1, x2)

inst_43483:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffff0000000; valaddr_reg:x3; val_offset:130449*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130449*0 + 3*475*FLEN/8, x4, x1, x2)

inst_43484:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffff8000000; valaddr_reg:x3; val_offset:130452*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130452*0 + 3*476*FLEN/8, x4, x1, x2)

inst_43485:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffc000000; valaddr_reg:x3; val_offset:130455*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130455*0 + 3*477*FLEN/8, x4, x1, x2)

inst_43486:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffe000000; valaddr_reg:x3; val_offset:130458*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130458*0 + 3*478*FLEN/8, x4, x1, x2)

inst_43487:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffff000000; valaddr_reg:x3; val_offset:130461*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130461*0 + 3*479*FLEN/8, x4, x1, x2)

inst_43488:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffff800000; valaddr_reg:x3; val_offset:130464*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130464*0 + 3*480*FLEN/8, x4, x1, x2)

inst_43489:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffc00000; valaddr_reg:x3; val_offset:130467*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130467*0 + 3*481*FLEN/8, x4, x1, x2)

inst_43490:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffe00000; valaddr_reg:x3; val_offset:130470*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130470*0 + 3*482*FLEN/8, x4, x1, x2)

inst_43491:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffff00000; valaddr_reg:x3; val_offset:130473*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130473*0 + 3*483*FLEN/8, x4, x1, x2)

inst_43492:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffff80000; valaddr_reg:x3; val_offset:130476*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130476*0 + 3*484*FLEN/8, x4, x1, x2)

inst_43493:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffc0000; valaddr_reg:x3; val_offset:130479*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130479*0 + 3*485*FLEN/8, x4, x1, x2)

inst_43494:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffe0000; valaddr_reg:x3; val_offset:130482*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130482*0 + 3*486*FLEN/8, x4, x1, x2)

inst_43495:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffff0000; valaddr_reg:x3; val_offset:130485*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130485*0 + 3*487*FLEN/8, x4, x1, x2)

inst_43496:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffff8000; valaddr_reg:x3; val_offset:130488*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130488*0 + 3*488*FLEN/8, x4, x1, x2)

inst_43497:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffffc000; valaddr_reg:x3; val_offset:130491*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130491*0 + 3*489*FLEN/8, x4, x1, x2)

inst_43498:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffffe000; valaddr_reg:x3; val_offset:130494*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130494*0 + 3*490*FLEN/8, x4, x1, x2)

inst_43499:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffff000; valaddr_reg:x3; val_offset:130497*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130497*0 + 3*491*FLEN/8, x4, x1, x2)

inst_43500:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffff800; valaddr_reg:x3; val_offset:130500*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130500*0 + 3*492*FLEN/8, x4, x1, x2)

inst_43501:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffffc00; valaddr_reg:x3; val_offset:130503*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130503*0 + 3*493*FLEN/8, x4, x1, x2)

inst_43502:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffffe00; valaddr_reg:x3; val_offset:130506*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130506*0 + 3*494*FLEN/8, x4, x1, x2)

inst_43503:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffffff00; valaddr_reg:x3; val_offset:130509*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130509*0 + 3*495*FLEN/8, x4, x1, x2)

inst_43504:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffffff80; valaddr_reg:x3; val_offset:130512*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130512*0 + 3*496*FLEN/8, x4, x1, x2)

inst_43505:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffffffc0; valaddr_reg:x3; val_offset:130515*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130515*0 + 3*497*FLEN/8, x4, x1, x2)

inst_43506:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffffffe0; valaddr_reg:x3; val_offset:130518*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130518*0 + 3*498*FLEN/8, x4, x1, x2)

inst_43507:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffffff0; valaddr_reg:x3; val_offset:130521*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130521*0 + 3*499*FLEN/8, x4, x1, x2)

inst_43508:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffffff8; valaddr_reg:x3; val_offset:130524*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130524*0 + 3*500*FLEN/8, x4, x1, x2)

inst_43509:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffffffc; valaddr_reg:x3; val_offset:130527*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130527*0 + 3*501*FLEN/8, x4, x1, x2)

inst_43510:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6ffffffffffffe; valaddr_reg:x3; val_offset:130530*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130530*0 + 3*502*FLEN/8, x4, x1, x2)

inst_43511:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xaac055ded51dd and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x006 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9aac055ded51dd; op2val:0x0;
op3val:0x6fffffffffffff; valaddr_reg:x3; val_offset:130533*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130533*0 + 3*503*FLEN/8, x4, x1, x2)

inst_43512:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000000000; valaddr_reg:x3; val_offset:130536*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130536*0 + 3*504*FLEN/8, x4, x1, x2)

inst_43513:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000000001; valaddr_reg:x3; val_offset:130539*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130539*0 + 3*505*FLEN/8, x4, x1, x2)

inst_43514:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000000003; valaddr_reg:x3; val_offset:130542*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130542*0 + 3*506*FLEN/8, x4, x1, x2)

inst_43515:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000000007; valaddr_reg:x3; val_offset:130545*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130545*0 + 3*507*FLEN/8, x4, x1, x2)

inst_43516:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000000000f; valaddr_reg:x3; val_offset:130548*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130548*0 + 3*508*FLEN/8, x4, x1, x2)

inst_43517:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000000001f; valaddr_reg:x3; val_offset:130551*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130551*0 + 3*509*FLEN/8, x4, x1, x2)

inst_43518:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000000003f; valaddr_reg:x3; val_offset:130554*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130554*0 + 3*510*FLEN/8, x4, x1, x2)

inst_43519:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000000007f; valaddr_reg:x3; val_offset:130557*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130557*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_43520:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000000000ff; valaddr_reg:x3; val_offset:130560*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130560*0 + 3*512*FLEN/8, x4, x1, x2)

inst_43521:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000000001ff; valaddr_reg:x3; val_offset:130563*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130563*0 + 3*513*FLEN/8, x4, x1, x2)

inst_43522:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000000003ff; valaddr_reg:x3; val_offset:130566*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130566*0 + 3*514*FLEN/8, x4, x1, x2)

inst_43523:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000000007ff; valaddr_reg:x3; val_offset:130569*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130569*0 + 3*515*FLEN/8, x4, x1, x2)

inst_43524:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000000fff; valaddr_reg:x3; val_offset:130572*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130572*0 + 3*516*FLEN/8, x4, x1, x2)

inst_43525:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000001fff; valaddr_reg:x3; val_offset:130575*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130575*0 + 3*517*FLEN/8, x4, x1, x2)

inst_43526:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000003fff; valaddr_reg:x3; val_offset:130578*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130578*0 + 3*518*FLEN/8, x4, x1, x2)

inst_43527:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000007fff; valaddr_reg:x3; val_offset:130581*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130581*0 + 3*519*FLEN/8, x4, x1, x2)

inst_43528:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000000ffff; valaddr_reg:x3; val_offset:130584*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130584*0 + 3*520*FLEN/8, x4, x1, x2)

inst_43529:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000001ffff; valaddr_reg:x3; val_offset:130587*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130587*0 + 3*521*FLEN/8, x4, x1, x2)

inst_43530:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000003ffff; valaddr_reg:x3; val_offset:130590*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130590*0 + 3*522*FLEN/8, x4, x1, x2)

inst_43531:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000007ffff; valaddr_reg:x3; val_offset:130593*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130593*0 + 3*523*FLEN/8, x4, x1, x2)

inst_43532:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000000fffff; valaddr_reg:x3; val_offset:130596*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130596*0 + 3*524*FLEN/8, x4, x1, x2)

inst_43533:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000001fffff; valaddr_reg:x3; val_offset:130599*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130599*0 + 3*525*FLEN/8, x4, x1, x2)

inst_43534:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000003fffff; valaddr_reg:x3; val_offset:130602*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130602*0 + 3*526*FLEN/8, x4, x1, x2)

inst_43535:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000007fffff; valaddr_reg:x3; val_offset:130605*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130605*0 + 3*527*FLEN/8, x4, x1, x2)

inst_43536:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000000ffffff; valaddr_reg:x3; val_offset:130608*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130608*0 + 3*528*FLEN/8, x4, x1, x2)

inst_43537:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000001ffffff; valaddr_reg:x3; val_offset:130611*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130611*0 + 3*529*FLEN/8, x4, x1, x2)

inst_43538:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000003ffffff; valaddr_reg:x3; val_offset:130614*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130614*0 + 3*530*FLEN/8, x4, x1, x2)

inst_43539:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000007ffffff; valaddr_reg:x3; val_offset:130617*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130617*0 + 3*531*FLEN/8, x4, x1, x2)

inst_43540:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000000fffffff; valaddr_reg:x3; val_offset:130620*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130620*0 + 3*532*FLEN/8, x4, x1, x2)

inst_43541:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000001fffffff; valaddr_reg:x3; val_offset:130623*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130623*0 + 3*533*FLEN/8, x4, x1, x2)

inst_43542:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000003fffffff; valaddr_reg:x3; val_offset:130626*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130626*0 + 3*534*FLEN/8, x4, x1, x2)

inst_43543:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000007fffffff; valaddr_reg:x3; val_offset:130629*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130629*0 + 3*535*FLEN/8, x4, x1, x2)

inst_43544:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200000ffffffff; valaddr_reg:x3; val_offset:130632*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130632*0 + 3*536*FLEN/8, x4, x1, x2)

inst_43545:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200001ffffffff; valaddr_reg:x3; val_offset:130635*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130635*0 + 3*537*FLEN/8, x4, x1, x2)

inst_43546:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200003ffffffff; valaddr_reg:x3; val_offset:130638*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130638*0 + 3*538*FLEN/8, x4, x1, x2)

inst_43547:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200007ffffffff; valaddr_reg:x3; val_offset:130641*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130641*0 + 3*539*FLEN/8, x4, x1, x2)

inst_43548:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20000fffffffff; valaddr_reg:x3; val_offset:130644*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130644*0 + 3*540*FLEN/8, x4, x1, x2)

inst_43549:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20001fffffffff; valaddr_reg:x3; val_offset:130647*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130647*0 + 3*541*FLEN/8, x4, x1, x2)

inst_43550:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20003fffffffff; valaddr_reg:x3; val_offset:130650*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130650*0 + 3*542*FLEN/8, x4, x1, x2)

inst_43551:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20007fffffffff; valaddr_reg:x3; val_offset:130653*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130653*0 + 3*543*FLEN/8, x4, x1, x2)

inst_43552:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2000ffffffffff; valaddr_reg:x3; val_offset:130656*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130656*0 + 3*544*FLEN/8, x4, x1, x2)

inst_43553:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2001ffffffffff; valaddr_reg:x3; val_offset:130659*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130659*0 + 3*545*FLEN/8, x4, x1, x2)

inst_43554:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2003ffffffffff; valaddr_reg:x3; val_offset:130662*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130662*0 + 3*546*FLEN/8, x4, x1, x2)

inst_43555:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2007ffffffffff; valaddr_reg:x3; val_offset:130665*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130665*0 + 3*547*FLEN/8, x4, x1, x2)

inst_43556:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d200fffffffffff; valaddr_reg:x3; val_offset:130668*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130668*0 + 3*548*FLEN/8, x4, x1, x2)

inst_43557:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d201fffffffffff; valaddr_reg:x3; val_offset:130671*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130671*0 + 3*549*FLEN/8, x4, x1, x2)

inst_43558:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d203fffffffffff; valaddr_reg:x3; val_offset:130674*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130674*0 + 3*550*FLEN/8, x4, x1, x2)

inst_43559:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d207fffffffffff; valaddr_reg:x3; val_offset:130677*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130677*0 + 3*551*FLEN/8, x4, x1, x2)

inst_43560:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d20ffffffffffff; valaddr_reg:x3; val_offset:130680*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130680*0 + 3*552*FLEN/8, x4, x1, x2)

inst_43561:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d21ffffffffffff; valaddr_reg:x3; val_offset:130683*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130683*0 + 3*553*FLEN/8, x4, x1, x2)

inst_43562:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d23ffffffffffff; valaddr_reg:x3; val_offset:130686*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130686*0 + 3*554*FLEN/8, x4, x1, x2)

inst_43563:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d27ffffffffffff; valaddr_reg:x3; val_offset:130689*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130689*0 + 3*555*FLEN/8, x4, x1, x2)

inst_43564:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d28000000000000; valaddr_reg:x3; val_offset:130692*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130692*0 + 3*556*FLEN/8, x4, x1, x2)

inst_43565:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2c000000000000; valaddr_reg:x3; val_offset:130695*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130695*0 + 3*557*FLEN/8, x4, x1, x2)

inst_43566:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2e000000000000; valaddr_reg:x3; val_offset:130698*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130698*0 + 3*558*FLEN/8, x4, x1, x2)

inst_43567:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2f000000000000; valaddr_reg:x3; val_offset:130701*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130701*0 + 3*559*FLEN/8, x4, x1, x2)

inst_43568:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2f800000000000; valaddr_reg:x3; val_offset:130704*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130704*0 + 3*560*FLEN/8, x4, x1, x2)

inst_43569:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fc00000000000; valaddr_reg:x3; val_offset:130707*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130707*0 + 3*561*FLEN/8, x4, x1, x2)

inst_43570:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fe00000000000; valaddr_reg:x3; val_offset:130710*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130710*0 + 3*562*FLEN/8, x4, x1, x2)

inst_43571:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ff00000000000; valaddr_reg:x3; val_offset:130713*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130713*0 + 3*563*FLEN/8, x4, x1, x2)

inst_43572:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ff80000000000; valaddr_reg:x3; val_offset:130716*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130716*0 + 3*564*FLEN/8, x4, x1, x2)

inst_43573:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffc0000000000; valaddr_reg:x3; val_offset:130719*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130719*0 + 3*565*FLEN/8, x4, x1, x2)

inst_43574:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffe0000000000; valaddr_reg:x3; val_offset:130722*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130722*0 + 3*566*FLEN/8, x4, x1, x2)

inst_43575:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fff0000000000; valaddr_reg:x3; val_offset:130725*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130725*0 + 3*567*FLEN/8, x4, x1, x2)

inst_43576:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fff8000000000; valaddr_reg:x3; val_offset:130728*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130728*0 + 3*568*FLEN/8, x4, x1, x2)

inst_43577:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffc000000000; valaddr_reg:x3; val_offset:130731*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130731*0 + 3*569*FLEN/8, x4, x1, x2)

inst_43578:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffe000000000; valaddr_reg:x3; val_offset:130734*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130734*0 + 3*570*FLEN/8, x4, x1, x2)

inst_43579:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffff000000000; valaddr_reg:x3; val_offset:130737*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130737*0 + 3*571*FLEN/8, x4, x1, x2)

inst_43580:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffff800000000; valaddr_reg:x3; val_offset:130740*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130740*0 + 3*572*FLEN/8, x4, x1, x2)

inst_43581:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffc00000000; valaddr_reg:x3; val_offset:130743*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130743*0 + 3*573*FLEN/8, x4, x1, x2)

inst_43582:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffe00000000; valaddr_reg:x3; val_offset:130746*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130746*0 + 3*574*FLEN/8, x4, x1, x2)

inst_43583:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffff00000000; valaddr_reg:x3; val_offset:130749*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130749*0 + 3*575*FLEN/8, x4, x1, x2)

inst_43584:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffff80000000; valaddr_reg:x3; val_offset:130752*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130752*0 + 3*576*FLEN/8, x4, x1, x2)

inst_43585:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffc0000000; valaddr_reg:x3; val_offset:130755*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130755*0 + 3*577*FLEN/8, x4, x1, x2)

inst_43586:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffe0000000; valaddr_reg:x3; val_offset:130758*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130758*0 + 3*578*FLEN/8, x4, x1, x2)

inst_43587:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffff0000000; valaddr_reg:x3; val_offset:130761*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130761*0 + 3*579*FLEN/8, x4, x1, x2)

inst_43588:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffff8000000; valaddr_reg:x3; val_offset:130764*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130764*0 + 3*580*FLEN/8, x4, x1, x2)

inst_43589:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffc000000; valaddr_reg:x3; val_offset:130767*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130767*0 + 3*581*FLEN/8, x4, x1, x2)

inst_43590:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffe000000; valaddr_reg:x3; val_offset:130770*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130770*0 + 3*582*FLEN/8, x4, x1, x2)

inst_43591:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffff000000; valaddr_reg:x3; val_offset:130773*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130773*0 + 3*583*FLEN/8, x4, x1, x2)

inst_43592:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffff800000; valaddr_reg:x3; val_offset:130776*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130776*0 + 3*584*FLEN/8, x4, x1, x2)

inst_43593:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffc00000; valaddr_reg:x3; val_offset:130779*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130779*0 + 3*585*FLEN/8, x4, x1, x2)

inst_43594:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffe00000; valaddr_reg:x3; val_offset:130782*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130782*0 + 3*586*FLEN/8, x4, x1, x2)

inst_43595:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffff00000; valaddr_reg:x3; val_offset:130785*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130785*0 + 3*587*FLEN/8, x4, x1, x2)

inst_43596:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffff80000; valaddr_reg:x3; val_offset:130788*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130788*0 + 3*588*FLEN/8, x4, x1, x2)

inst_43597:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffc0000; valaddr_reg:x3; val_offset:130791*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130791*0 + 3*589*FLEN/8, x4, x1, x2)

inst_43598:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffe0000; valaddr_reg:x3; val_offset:130794*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130794*0 + 3*590*FLEN/8, x4, x1, x2)

inst_43599:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffff0000; valaddr_reg:x3; val_offset:130797*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130797*0 + 3*591*FLEN/8, x4, x1, x2)

inst_43600:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffff8000; valaddr_reg:x3; val_offset:130800*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130800*0 + 3*592*FLEN/8, x4, x1, x2)

inst_43601:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffffc000; valaddr_reg:x3; val_offset:130803*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130803*0 + 3*593*FLEN/8, x4, x1, x2)

inst_43602:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffffe000; valaddr_reg:x3; val_offset:130806*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130806*0 + 3*594*FLEN/8, x4, x1, x2)

inst_43603:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffff000; valaddr_reg:x3; val_offset:130809*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130809*0 + 3*595*FLEN/8, x4, x1, x2)

inst_43604:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffff800; valaddr_reg:x3; val_offset:130812*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130812*0 + 3*596*FLEN/8, x4, x1, x2)

inst_43605:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffffc00; valaddr_reg:x3; val_offset:130815*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130815*0 + 3*597*FLEN/8, x4, x1, x2)

inst_43606:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffffe00; valaddr_reg:x3; val_offset:130818*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130818*0 + 3*598*FLEN/8, x4, x1, x2)

inst_43607:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffffff00; valaddr_reg:x3; val_offset:130821*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130821*0 + 3*599*FLEN/8, x4, x1, x2)

inst_43608:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffffff80; valaddr_reg:x3; val_offset:130824*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130824*0 + 3*600*FLEN/8, x4, x1, x2)

inst_43609:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffffffc0; valaddr_reg:x3; val_offset:130827*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130827*0 + 3*601*FLEN/8, x4, x1, x2)

inst_43610:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffffffe0; valaddr_reg:x3; val_offset:130830*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130830*0 + 3*602*FLEN/8, x4, x1, x2)

inst_43611:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffffff0; valaddr_reg:x3; val_offset:130833*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130833*0 + 3*603*FLEN/8, x4, x1, x2)

inst_43612:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffffff8; valaddr_reg:x3; val_offset:130836*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130836*0 + 3*604*FLEN/8, x4, x1, x2)

inst_43613:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffffffc; valaddr_reg:x3; val_offset:130839*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130839*0 + 3*605*FLEN/8, x4, x1, x2)

inst_43614:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2ffffffffffffe; valaddr_reg:x3; val_offset:130842*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130842*0 + 3*606*FLEN/8, x4, x1, x2)

inst_43615:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3d2 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3d2fffffffffffff; valaddr_reg:x3; val_offset:130845*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130845*0 + 3*607*FLEN/8, x4, x1, x2)

inst_43616:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff0000000000001; valaddr_reg:x3; val_offset:130848*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130848*0 + 3*608*FLEN/8, x4, x1, x2)

inst_43617:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff0000000000003; valaddr_reg:x3; val_offset:130851*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130851*0 + 3*609*FLEN/8, x4, x1, x2)

inst_43618:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff0000000000007; valaddr_reg:x3; val_offset:130854*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130854*0 + 3*610*FLEN/8, x4, x1, x2)

inst_43619:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff000000000000f; valaddr_reg:x3; val_offset:130857*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130857*0 + 3*611*FLEN/8, x4, x1, x2)

inst_43620:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff000000000001f; valaddr_reg:x3; val_offset:130860*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130860*0 + 3*612*FLEN/8, x4, x1, x2)

inst_43621:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:130863*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130863*0 + 3*613*FLEN/8, x4, x1, x2)

inst_43622:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff3333333333333; valaddr_reg:x3; val_offset:130866*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130866*0 + 3*614*FLEN/8, x4, x1, x2)

inst_43623:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff4924924924924; valaddr_reg:x3; val_offset:130869*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130869*0 + 3*615*FLEN/8, x4, x1, x2)

inst_43624:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff6666666666666; valaddr_reg:x3; val_offset:130872*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130872*0 + 3*616*FLEN/8, x4, x1, x2)

inst_43625:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff6db6db6db6db6; valaddr_reg:x3; val_offset:130875*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130875*0 + 3*617*FLEN/8, x4, x1, x2)

inst_43626:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff7777777777777; valaddr_reg:x3; val_offset:130878*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130878*0 + 3*618*FLEN/8, x4, x1, x2)

inst_43627:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff8888888888888; valaddr_reg:x3; val_offset:130881*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130881*0 + 3*619*FLEN/8, x4, x1, x2)

inst_43628:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ff9999999999999; valaddr_reg:x3; val_offset:130884*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130884*0 + 3*620*FLEN/8, x4, x1, x2)

inst_43629:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ffb6db6db6db6db; valaddr_reg:x3; val_offset:130887*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130887*0 + 3*621*FLEN/8, x4, x1, x2)

inst_43630:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ffccccccccccccc; valaddr_reg:x3; val_offset:130890*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130890*0 + 3*622*FLEN/8, x4, x1, x2)

inst_43631:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ffdb6db6db6db6d; valaddr_reg:x3; val_offset:130893*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130893*0 + 3*623*FLEN/8, x4, x1, x2)

inst_43632:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3fffffffffffffc0; valaddr_reg:x3; val_offset:130896*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130896*0 + 3*624*FLEN/8, x4, x1, x2)

inst_43633:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3fffffffffffffe0; valaddr_reg:x3; val_offset:130899*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130899*0 + 3*625*FLEN/8, x4, x1, x2)

inst_43634:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ffffffffffffff0; valaddr_reg:x3; val_offset:130902*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130902*0 + 3*626*FLEN/8, x4, x1, x2)

inst_43635:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ffffffffffffff8; valaddr_reg:x3; val_offset:130905*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130905*0 + 3*627*FLEN/8, x4, x1, x2)

inst_43636:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ffffffffffffffc; valaddr_reg:x3; val_offset:130908*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130908*0 + 3*628*FLEN/8, x4, x1, x2)

inst_43637:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xab813528787df and fs2 == 0 and fe2 == 0x204 and fm2 == 0x32990886a02e8 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ab813528787df; op2val:0x20432990886a02e8;
op3val:0x3ffffffffffffffe; valaddr_reg:x3; val_offset:130911*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130911*0 + 3*629*FLEN/8, x4, x1, x2)

inst_43638:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8000000000000001; valaddr_reg:x3; val_offset:130914*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130914*0 + 3*630*FLEN/8, x4, x1, x2)

inst_43639:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8000000000000003; valaddr_reg:x3; val_offset:130917*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130917*0 + 3*631*FLEN/8, x4, x1, x2)

inst_43640:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8000000000000007; valaddr_reg:x3; val_offset:130920*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130920*0 + 3*632*FLEN/8, x4, x1, x2)

inst_43641:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800000000000000f; valaddr_reg:x3; val_offset:130923*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130923*0 + 3*633*FLEN/8, x4, x1, x2)

inst_43642:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800000000000001f; valaddr_reg:x3; val_offset:130926*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130926*0 + 3*634*FLEN/8, x4, x1, x2)

inst_43643:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800000000000003f; valaddr_reg:x3; val_offset:130929*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130929*0 + 3*635*FLEN/8, x4, x1, x2)

inst_43644:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8003333333333333; valaddr_reg:x3; val_offset:130932*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130932*0 + 3*636*FLEN/8, x4, x1, x2)

inst_43645:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8004924924924924; valaddr_reg:x3; val_offset:130935*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130935*0 + 3*637*FLEN/8, x4, x1, x2)

inst_43646:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8006666666666666; valaddr_reg:x3; val_offset:130938*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130938*0 + 3*638*FLEN/8, x4, x1, x2)

inst_43647:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8006db6db6db6db6; valaddr_reg:x3; val_offset:130941*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130941*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_43648:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8007777777777777; valaddr_reg:x3; val_offset:130944*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130944*0 + 3*640*FLEN/8, x4, x1, x2)

inst_43649:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8008888888888888; valaddr_reg:x3; val_offset:130947*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130947*0 + 3*641*FLEN/8, x4, x1, x2)

inst_43650:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0x9999999999999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8009999999999999; valaddr_reg:x3; val_offset:130950*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130950*0 + 3*642*FLEN/8, x4, x1, x2)

inst_43651:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xb6db6db6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800b6db6db6db6db; valaddr_reg:x3; val_offset:130953*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130953*0 + 3*643*FLEN/8, x4, x1, x2)

inst_43652:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xccccccccccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800ccccccccccccc; valaddr_reg:x3; val_offset:130956*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130956*0 + 3*644*FLEN/8, x4, x1, x2)

inst_43653:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xdb6db6db6db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800db6db6db6db6d; valaddr_reg:x3; val_offset:130959*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130959*0 + 3*645*FLEN/8, x4, x1, x2)

inst_43654:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800fffffffffffc0; valaddr_reg:x3; val_offset:130962*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130962*0 + 3*646*FLEN/8, x4, x1, x2)

inst_43655:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800fffffffffffe0; valaddr_reg:x3; val_offset:130965*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130965*0 + 3*647*FLEN/8, x4, x1, x2)

inst_43656:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800ffffffffffff0; valaddr_reg:x3; val_offset:130968*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130968*0 + 3*648*FLEN/8, x4, x1, x2)

inst_43657:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800ffffffffffff8; valaddr_reg:x3; val_offset:130971*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130971*0 + 3*649*FLEN/8, x4, x1, x2)

inst_43658:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800ffffffffffffc; valaddr_reg:x3; val_offset:130974*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130974*0 + 3*650*FLEN/8, x4, x1, x2)

inst_43659:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x000 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x800ffffffffffffe; valaddr_reg:x3; val_offset:130977*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130977*0 + 3*651*FLEN/8, x4, x1, x2)

inst_43660:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000000000; valaddr_reg:x3; val_offset:130980*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130980*0 + 3*652*FLEN/8, x4, x1, x2)

inst_43661:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000000001; valaddr_reg:x3; val_offset:130983*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130983*0 + 3*653*FLEN/8, x4, x1, x2)

inst_43662:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000000003; valaddr_reg:x3; val_offset:130986*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130986*0 + 3*654*FLEN/8, x4, x1, x2)

inst_43663:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000000007; valaddr_reg:x3; val_offset:130989*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130989*0 + 3*655*FLEN/8, x4, x1, x2)

inst_43664:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000000000f; valaddr_reg:x3; val_offset:130992*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130992*0 + 3*656*FLEN/8, x4, x1, x2)

inst_43665:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000000001f; valaddr_reg:x3; val_offset:130995*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130995*0 + 3*657*FLEN/8, x4, x1, x2)

inst_43666:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000000003f; valaddr_reg:x3; val_offset:130998*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 130998*0 + 3*658*FLEN/8, x4, x1, x2)

inst_43667:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000000007f; valaddr_reg:x3; val_offset:131001*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131001*0 + 3*659*FLEN/8, x4, x1, x2)

inst_43668:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000000000ff; valaddr_reg:x3; val_offset:131004*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131004*0 + 3*660*FLEN/8, x4, x1, x2)

inst_43669:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000000001ff; valaddr_reg:x3; val_offset:131007*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131007*0 + 3*661*FLEN/8, x4, x1, x2)

inst_43670:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000000003ff; valaddr_reg:x3; val_offset:131010*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131010*0 + 3*662*FLEN/8, x4, x1, x2)

inst_43671:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000000007ff; valaddr_reg:x3; val_offset:131013*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131013*0 + 3*663*FLEN/8, x4, x1, x2)

inst_43672:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000000fff; valaddr_reg:x3; val_offset:131016*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131016*0 + 3*664*FLEN/8, x4, x1, x2)

inst_43673:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000001fff; valaddr_reg:x3; val_offset:131019*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131019*0 + 3*665*FLEN/8, x4, x1, x2)

inst_43674:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000003fff; valaddr_reg:x3; val_offset:131022*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131022*0 + 3*666*FLEN/8, x4, x1, x2)

inst_43675:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000007fff; valaddr_reg:x3; val_offset:131025*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131025*0 + 3*667*FLEN/8, x4, x1, x2)

inst_43676:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000000ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000000ffff; valaddr_reg:x3; val_offset:131028*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131028*0 + 3*668*FLEN/8, x4, x1, x2)

inst_43677:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000001ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000001ffff; valaddr_reg:x3; val_offset:131031*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131031*0 + 3*669*FLEN/8, x4, x1, x2)

inst_43678:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000003ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000003ffff; valaddr_reg:x3; val_offset:131034*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131034*0 + 3*670*FLEN/8, x4, x1, x2)

inst_43679:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000007ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000007ffff; valaddr_reg:x3; val_offset:131037*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131037*0 + 3*671*FLEN/8, x4, x1, x2)

inst_43680:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000000fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000000fffff; valaddr_reg:x3; val_offset:131040*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131040*0 + 3*672*FLEN/8, x4, x1, x2)

inst_43681:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000001fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000001fffff; valaddr_reg:x3; val_offset:131043*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131043*0 + 3*673*FLEN/8, x4, x1, x2)

inst_43682:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000003fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000003fffff; valaddr_reg:x3; val_offset:131046*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131046*0 + 3*674*FLEN/8, x4, x1, x2)

inst_43683:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000007fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000007fffff; valaddr_reg:x3; val_offset:131049*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131049*0 + 3*675*FLEN/8, x4, x1, x2)

inst_43684:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000000ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000000ffffff; valaddr_reg:x3; val_offset:131052*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131052*0 + 3*676*FLEN/8, x4, x1, x2)

inst_43685:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000001ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000001ffffff; valaddr_reg:x3; val_offset:131055*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131055*0 + 3*677*FLEN/8, x4, x1, x2)

inst_43686:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000003ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000003ffffff; valaddr_reg:x3; val_offset:131058*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131058*0 + 3*678*FLEN/8, x4, x1, x2)

inst_43687:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000007ffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000007ffffff; valaddr_reg:x3; val_offset:131061*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131061*0 + 3*679*FLEN/8, x4, x1, x2)

inst_43688:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000000fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000000fffffff; valaddr_reg:x3; val_offset:131064*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131064*0 + 3*680*FLEN/8, x4, x1, x2)

inst_43689:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000001fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000001fffffff; valaddr_reg:x3; val_offset:131067*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131067*0 + 3*681*FLEN/8, x4, x1, x2)

inst_43690:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000003fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000003fffffff; valaddr_reg:x3; val_offset:131070*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131070*0 + 3*682*FLEN/8, x4, x1, x2)

inst_43691:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000007fffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000007fffffff; valaddr_reg:x3; val_offset:131073*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131073*0 + 3*683*FLEN/8, x4, x1, x2)

inst_43692:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00000ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400000ffffffff; valaddr_reg:x3; val_offset:131076*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131076*0 + 3*684*FLEN/8, x4, x1, x2)

inst_43693:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00001ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400001ffffffff; valaddr_reg:x3; val_offset:131079*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131079*0 + 3*685*FLEN/8, x4, x1, x2)

inst_43694:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00003ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400003ffffffff; valaddr_reg:x3; val_offset:131082*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131082*0 + 3*686*FLEN/8, x4, x1, x2)

inst_43695:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00007ffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400007ffffffff; valaddr_reg:x3; val_offset:131085*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131085*0 + 3*687*FLEN/8, x4, x1, x2)

inst_43696:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0000fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040000fffffffff; valaddr_reg:x3; val_offset:131088*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131088*0 + 3*688*FLEN/8, x4, x1, x2)

inst_43697:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0001fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040001fffffffff; valaddr_reg:x3; val_offset:131091*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131091*0 + 3*689*FLEN/8, x4, x1, x2)

inst_43698:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0003fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040003fffffffff; valaddr_reg:x3; val_offset:131094*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131094*0 + 3*690*FLEN/8, x4, x1, x2)

inst_43699:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0007fffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040007fffffffff; valaddr_reg:x3; val_offset:131097*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131097*0 + 3*691*FLEN/8, x4, x1, x2)

inst_43700:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x000ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804000ffffffffff; valaddr_reg:x3; val_offset:131100*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131100*0 + 3*692*FLEN/8, x4, x1, x2)

inst_43701:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x001ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804001ffffffffff; valaddr_reg:x3; val_offset:131103*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131103*0 + 3*693*FLEN/8, x4, x1, x2)

inst_43702:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x003ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804003ffffffffff; valaddr_reg:x3; val_offset:131106*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131106*0 + 3*694*FLEN/8, x4, x1, x2)

inst_43703:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x007ffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804007ffffffffff; valaddr_reg:x3; val_offset:131109*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131109*0 + 3*695*FLEN/8, x4, x1, x2)

inst_43704:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x00fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80400fffffffffff; valaddr_reg:x3; val_offset:131112*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131112*0 + 3*696*FLEN/8, x4, x1, x2)

inst_43705:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x01fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80401fffffffffff; valaddr_reg:x3; val_offset:131115*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131115*0 + 3*697*FLEN/8, x4, x1, x2)

inst_43706:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x03fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80403fffffffffff; valaddr_reg:x3; val_offset:131118*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131118*0 + 3*698*FLEN/8, x4, x1, x2)

inst_43707:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x07fffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x80407fffffffffff; valaddr_reg:x3; val_offset:131121*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131121*0 + 3*699*FLEN/8, x4, x1, x2)

inst_43708:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x0ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8040ffffffffffff; valaddr_reg:x3; val_offset:131124*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131124*0 + 3*700*FLEN/8, x4, x1, x2)

inst_43709:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x1ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8041ffffffffffff; valaddr_reg:x3; val_offset:131127*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131127*0 + 3*701*FLEN/8, x4, x1, x2)

inst_43710:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x3ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8043ffffffffffff; valaddr_reg:x3; val_offset:131130*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131130*0 + 3*702*FLEN/8, x4, x1, x2)

inst_43711:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x7ffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8047ffffffffffff; valaddr_reg:x3; val_offset:131133*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131133*0 + 3*703*FLEN/8, x4, x1, x2)

inst_43712:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0x8000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x8048000000000000; valaddr_reg:x3; val_offset:131136*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131136*0 + 3*704*FLEN/8, x4, x1, x2)

inst_43713:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xc000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804c000000000000; valaddr_reg:x3; val_offset:131139*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131139*0 + 3*705*FLEN/8, x4, x1, x2)

inst_43714:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xe000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804e000000000000; valaddr_reg:x3; val_offset:131142*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131142*0 + 3*706*FLEN/8, x4, x1, x2)

inst_43715:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xf000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804f000000000000; valaddr_reg:x3; val_offset:131145*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131145*0 + 3*707*FLEN/8, x4, x1, x2)

inst_43716:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xf800000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804f800000000000; valaddr_reg:x3; val_offset:131148*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131148*0 + 3*708*FLEN/8, x4, x1, x2)

inst_43717:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfc00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fc00000000000; valaddr_reg:x3; val_offset:131151*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131151*0 + 3*709*FLEN/8, x4, x1, x2)

inst_43718:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfe00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fe00000000000; valaddr_reg:x3; val_offset:131154*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131154*0 + 3*710*FLEN/8, x4, x1, x2)

inst_43719:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xff00000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ff00000000000; valaddr_reg:x3; val_offset:131157*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131157*0 + 3*711*FLEN/8, x4, x1, x2)

inst_43720:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xff80000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ff80000000000; valaddr_reg:x3; val_offset:131160*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131160*0 + 3*712*FLEN/8, x4, x1, x2)

inst_43721:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffc0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffc0000000000; valaddr_reg:x3; val_offset:131163*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131163*0 + 3*713*FLEN/8, x4, x1, x2)

inst_43722:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffe0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffe0000000000; valaddr_reg:x3; val_offset:131166*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131166*0 + 3*714*FLEN/8, x4, x1, x2)

inst_43723:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfff0000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fff0000000000; valaddr_reg:x3; val_offset:131169*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131169*0 + 3*715*FLEN/8, x4, x1, x2)

inst_43724:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfff8000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fff8000000000; valaddr_reg:x3; val_offset:131172*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131172*0 + 3*716*FLEN/8, x4, x1, x2)

inst_43725:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffc000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffc000000000; valaddr_reg:x3; val_offset:131175*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131175*0 + 3*717*FLEN/8, x4, x1, x2)

inst_43726:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffe000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffe000000000; valaddr_reg:x3; val_offset:131178*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131178*0 + 3*718*FLEN/8, x4, x1, x2)

inst_43727:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffff000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffff000000000; valaddr_reg:x3; val_offset:131181*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131181*0 + 3*719*FLEN/8, x4, x1, x2)

inst_43728:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffff800000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffff800000000; valaddr_reg:x3; val_offset:131184*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131184*0 + 3*720*FLEN/8, x4, x1, x2)

inst_43729:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffc00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffc00000000; valaddr_reg:x3; val_offset:131187*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131187*0 + 3*721*FLEN/8, x4, x1, x2)

inst_43730:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffe00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffe00000000; valaddr_reg:x3; val_offset:131190*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131190*0 + 3*722*FLEN/8, x4, x1, x2)

inst_43731:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffff00000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffff00000000; valaddr_reg:x3; val_offset:131193*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131193*0 + 3*723*FLEN/8, x4, x1, x2)

inst_43732:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffff80000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffff80000000; valaddr_reg:x3; val_offset:131196*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131196*0 + 3*724*FLEN/8, x4, x1, x2)

inst_43733:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffc0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffc0000000; valaddr_reg:x3; val_offset:131199*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131199*0 + 3*725*FLEN/8, x4, x1, x2)

inst_43734:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffe0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffe0000000; valaddr_reg:x3; val_offset:131202*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131202*0 + 3*726*FLEN/8, x4, x1, x2)

inst_43735:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffff0000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffff0000000; valaddr_reg:x3; val_offset:131205*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131205*0 + 3*727*FLEN/8, x4, x1, x2)

inst_43736:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffff8000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffff8000000; valaddr_reg:x3; val_offset:131208*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131208*0 + 3*728*FLEN/8, x4, x1, x2)

inst_43737:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffc000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffc000000; valaddr_reg:x3; val_offset:131211*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131211*0 + 3*729*FLEN/8, x4, x1, x2)

inst_43738:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffe000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffe000000; valaddr_reg:x3; val_offset:131214*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131214*0 + 3*730*FLEN/8, x4, x1, x2)

inst_43739:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffff000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffff000000; valaddr_reg:x3; val_offset:131217*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131217*0 + 3*731*FLEN/8, x4, x1, x2)

inst_43740:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffff800000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffff800000; valaddr_reg:x3; val_offset:131220*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131220*0 + 3*732*FLEN/8, x4, x1, x2)

inst_43741:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffc00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffc00000; valaddr_reg:x3; val_offset:131223*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131223*0 + 3*733*FLEN/8, x4, x1, x2)

inst_43742:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffe00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffe00000; valaddr_reg:x3; val_offset:131226*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131226*0 + 3*734*FLEN/8, x4, x1, x2)

inst_43743:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffff00000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffff00000; valaddr_reg:x3; val_offset:131229*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131229*0 + 3*735*FLEN/8, x4, x1, x2)

inst_43744:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffff80000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffff80000; valaddr_reg:x3; val_offset:131232*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131232*0 + 3*736*FLEN/8, x4, x1, x2)

inst_43745:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffc0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffc0000; valaddr_reg:x3; val_offset:131235*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131235*0 + 3*737*FLEN/8, x4, x1, x2)

inst_43746:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffe0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffe0000; valaddr_reg:x3; val_offset:131238*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131238*0 + 3*738*FLEN/8, x4, x1, x2)

inst_43747:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffff0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffff0000; valaddr_reg:x3; val_offset:131241*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131241*0 + 3*739*FLEN/8, x4, x1, x2)

inst_43748:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffff8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffff8000; valaddr_reg:x3; val_offset:131244*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131244*0 + 3*740*FLEN/8, x4, x1, x2)

inst_43749:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffffc000; valaddr_reg:x3; val_offset:131247*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131247*0 + 3*741*FLEN/8, x4, x1, x2)

inst_43750:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffffe000; valaddr_reg:x3; val_offset:131250*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131250*0 + 3*742*FLEN/8, x4, x1, x2)

inst_43751:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffff000; valaddr_reg:x3; val_offset:131253*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131253*0 + 3*743*FLEN/8, x4, x1, x2)

inst_43752:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffff800; valaddr_reg:x3; val_offset:131256*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131256*0 + 3*744*FLEN/8, x4, x1, x2)

inst_43753:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffffc00; valaddr_reg:x3; val_offset:131259*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131259*0 + 3*745*FLEN/8, x4, x1, x2)

inst_43754:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffffe00; valaddr_reg:x3; val_offset:131262*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131262*0 + 3*746*FLEN/8, x4, x1, x2)

inst_43755:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffffff00; valaddr_reg:x3; val_offset:131265*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131265*0 + 3*747*FLEN/8, x4, x1, x2)

inst_43756:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffffff80; valaddr_reg:x3; val_offset:131268*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131268*0 + 3*748*FLEN/8, x4, x1, x2)

inst_43757:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffffffc0; valaddr_reg:x3; val_offset:131271*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131271*0 + 3*749*FLEN/8, x4, x1, x2)

inst_43758:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffffffe0; valaddr_reg:x3; val_offset:131274*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131274*0 + 3*750*FLEN/8, x4, x1, x2)

inst_43759:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffffff0; valaddr_reg:x3; val_offset:131277*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131277*0 + 3*751*FLEN/8, x4, x1, x2)

inst_43760:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffffff8; valaddr_reg:x3; val_offset:131280*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131280*0 + 3*752*FLEN/8, x4, x1, x2)

inst_43761:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffffffc; valaddr_reg:x3; val_offset:131283*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131283*0 + 3*753*FLEN/8, x4, x1, x2)

inst_43762:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xffffffffffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804ffffffffffffe; valaddr_reg:x3; val_offset:131286*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131286*0 + 3*754*FLEN/8, x4, x1, x2)

inst_43763:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xae319bc0e8df7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000008000 and fs3 == 1 and fe3 == 0x004 and fm3 == 0xfffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9ae319bc0e8df7; op2val:0x8000;
op3val:0x804fffffffffffff; valaddr_reg:x3; val_offset:131289*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131289*0 + 3*755*FLEN/8, x4, x1, x2)

inst_43764:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:131292*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131292*0 + 3*756*FLEN/8, x4, x1, x2)

inst_43765:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:131295*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131295*0 + 3*757*FLEN/8, x4, x1, x2)

inst_43766:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:131298*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131298*0 + 3*758*FLEN/8, x4, x1, x2)

inst_43767:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:131301*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131301*0 + 3*759*FLEN/8, x4, x1, x2)

inst_43768:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:131304*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131304*0 + 3*760*FLEN/8, x4, x1, x2)

inst_43769:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:131307*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131307*0 + 3*761*FLEN/8, x4, x1, x2)

inst_43770:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x3333333333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x3333333333333; valaddr_reg:x3; val_offset:131310*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131310*0 + 3*762*FLEN/8, x4, x1, x2)

inst_43771:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x4924924924924 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x4924924924924; valaddr_reg:x3; val_offset:131313*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131313*0 + 3*763*FLEN/8, x4, x1, x2)

inst_43772:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6666666666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x6666666666666; valaddr_reg:x3; val_offset:131316*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131316*0 + 3*764*FLEN/8, x4, x1, x2)

inst_43773:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x6db6db6db6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x6db6db6db6db6; valaddr_reg:x3; val_offset:131319*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131319*0 + 3*765*FLEN/8, x4, x1, x2)

inst_43774:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x7777777777777 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x7777777777777; valaddr_reg:x3; val_offset:131322*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131322*0 + 3*766*FLEN/8, x4, x1, x2)

inst_43775:
// fs1 == 0 and fe1 == 0x5f9 and fm1 == 0xafd34137427c5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x8888888888888 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.d ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x5f9afd34137427c5; op2val:0x0;
op3val:0x8888888888888; valaddr_reg:x3; val_offset:131325*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.d, f31, f30, f29, f28, dyn, 0, 0, x3, 131325*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002176,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002177,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002179,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002183,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002191,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002207,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002239,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002303,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002431,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558002687,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558003199,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558004223,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558006271,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558010367,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558018559,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558034943,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558067711,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558133247,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558264319,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824558526463,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824559050751,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824560099327,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824562196479,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824566390783,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824574779391,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824591556607,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824625111039,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824692219903,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990824826437631,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990825094873087,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990825631743999,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990826705485823,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990828852969471,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990833147936767,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990841737871359,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990858917740543,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990893277478911,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371990961996955647,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371991099435909119,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371991374313816063,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371991924069629951,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371993023581257727,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371995222604513279,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9371999620651024383,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9372008416744046591,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9372026008930091007,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9372061193302179839,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9372131562046357503,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9372272299534712831,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9372553774511423487,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9373116724464844799,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9374242624371687423,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9374242624371687424,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9375368524278530048,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9375931474231951360,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376212949208662016,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376353686697017344,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376424055441195008,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376459239813283840,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376476831999328256,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376485628092350464,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376490026138861568,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376492225162117120,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376493324673744896,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376493874429558784,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494149307465728,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494286746419200,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494355465895936,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494389825634304,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494407005503488,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494415595438080,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494419890405376,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494422037889024,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494423111630848,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494423648501760,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494423916937216,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424051154944,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424118263808,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424151818240,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424168595456,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424176984064,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424181178368,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424183275520,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424184324096,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424184848384,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185110528,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185241600,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185307136,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185339904,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185356288,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185364480,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185368576,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185370624,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185371648,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372160,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372416,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372544,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372608,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372640,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372656,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372664,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372668,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372670,64,FLEN)
NAN_BOXED(6888978140765256703,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9376494424185372671,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381120,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381121,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381123,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381127,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381135,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381151,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381183,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381247,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381375,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549381631,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549382143,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549383167,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549385215,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549389311,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549397503,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549413887,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549446655,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549512191,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549643263,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638549905407,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638550429695,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638551478271,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638553575423,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638557769727,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638566158335,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638582935551,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638616489983,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638683598847,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491638817816575,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491639086252031,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491639623122943,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491640696864767,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491642844348415,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491647139315711,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491655729250303,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491672909119487,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491707268857855,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491775988334591,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368491913427288063,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368492188305195007,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368492738061008895,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368493837572636671,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368496036595892223,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368500434642403327,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368509230735425535,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368526822921469951,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368562007293558783,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368632376037736447,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4368773113526091775,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4369054588502802431,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4369617538456223743,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4370743438363066367,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4370743438363066368,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4371869338269908992,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372432288223330304,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372713763200040960,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372854500688396288,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372924869432573952,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372960053804662784,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372977645990707200,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372986442083729408,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372990840130240512,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372993039153496064,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372994138665123840,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372994688420937728,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372994963298844672,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995100737798144,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995169457274880,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995203817013248,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995220996882432,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995229586817024,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995233881784320,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995236029267968,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995237103009792,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995237639880704,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995237908316160,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238042533888,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238109642752,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238143197184,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238159974400,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238168363008,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238172557312,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238174654464,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238175703040,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176227328,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176489472,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176620544,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176686080,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176718848,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176735232,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176743424,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176747520,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176749568,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176750592,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751104,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751360,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751488,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751552,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751584,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751600,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751608,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751612,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751614,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4372995238176751615,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6888978681390237393,64,FLEN)
NAN_BOXED(2324778035715278500,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851264,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851265,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851267,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851271,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851279,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851295,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851327,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851391,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851519,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755851775,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755852287,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755853311,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755855359,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755859455,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755867647,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755884031,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755916799,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632755982335,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632756113407,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632756375551,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632756899839,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632757948415,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632760045567,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632764239871,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632772628479,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632789405695,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632822960127,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911632890068991,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911633024286719,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911633292722175,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911633829593087,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911634903334911,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911637050818559,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911641345785855,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911649935720447,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911667115589631,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911701475327999,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911770194804735,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272911907633758207,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272912182511665151,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272912732267479039,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272913831779106815,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272916030802362367,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272920428848873471,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272929224941895679,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272946817127940095,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9272982001500028927,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9273052370244206591,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9273193107732561919,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9273474582709272575,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9274037532662693887,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9275163432569536511,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9275163432569536512,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9276289332476379136,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9276852282429800448,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277133757406511104,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277274494894866432,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277344863639044096,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277380048011132928,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277397640197177344,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277406436290199552,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277410834336710656,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277413033359966208,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277414132871593984,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277414682627407872,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277414957505314816,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415094944268288,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415163663745024,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415198023483392,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415215203352576,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415223793287168,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415228088254464,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415230235738112,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415231309479936,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415231846350848,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232114786304,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232249004032,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232316112896,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232349667328,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232366444544,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232374833152,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232379027456,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232381124608,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232382173184,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232382697472,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232382959616,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383090688,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383156224,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383188992,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383205376,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383213568,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383217664,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383219712,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383220736,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221248,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221504,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221632,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221696,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221728,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221744,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221752,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221756,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221758,64,FLEN)
NAN_BOXED(6888987756773563821,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9277415232383221759,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2702159776422297,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3216856876693211,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3602879701896396,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3860228252031853,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370432,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370464,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370480,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370488,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370492,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(4503599627370494,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764222976,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764222977,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764222979,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764222983,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764222991,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764223007,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764223039,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764223103,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764223231,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764223487,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764223999,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764225023,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764227071,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764231167,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764239359,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764255743,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764288511,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764354047,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764485119,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597764747263,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597765271551,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597766320127,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597768417279,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597772611583,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597781000191,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597797777407,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597831331839,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021597898440703,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021598032658431,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021598301093887,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021598837964799,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021599911706623,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021602059190271,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021606354157567,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021614944092159,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021632123961343,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021666483699711,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021735203176447,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27021872642129919,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27022147520036863,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27022697275850751,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27023796787478527,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27025995810734079,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27030393857245183,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27039189950267391,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27056782136311807,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27091966508400639,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27162335252578303,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27303072740933631,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(27584547717644287,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(28147497671065599,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(29273397577908223,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(29273397577908224,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(30399297484750848,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(30962247438172160,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31243722414882816,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31384459903238144,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31454828647415808,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31490013019504640,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31507605205549056,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31516401298571264,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31520799345082368,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31522998368337920,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31524097879965696,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31524647635779584,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31524922513686528,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525059952640000,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525128672116736,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525163031855104,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525180211724288,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525188801658880,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525193096626176,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525195244109824,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525196317851648,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525196854722560,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197123158016,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197257375744,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197324484608,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197358039040,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197374816256,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197383204864,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197387399168,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197389496320,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197390544896,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391069184,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391331328,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391462400,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391527936,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391560704,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391577088,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391585280,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391589376,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391591424,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391592448,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391592960,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593216,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593344,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593408,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593440,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593456,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593464,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593468,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593470,64,FLEN)
NAN_BOXED(6889007719067242973,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31525197391593471,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345088,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345089,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345091,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345095,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345103,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345119,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345151,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345215,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345343,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568345599,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568346111,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568347135,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568349183,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568353279,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568361471,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568377855,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568410623,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568476159,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568607231,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435568869375,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435569393663,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435570442239,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435572539391,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435576733695,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435585122303,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435601899519,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435635453951,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435702562815,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520435836780543,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520436105215999,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520436642086911,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520437715828735,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520439863312383,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520444158279679,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520452748214271,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520469928083455,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520504287821823,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520573007298559,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520710446252031,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404520985324158975,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404521535079972863,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404522634591600639,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404524833614856191,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404529231661367295,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404538027754389503,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404555619940433919,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404590804312522751,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404661173056700415,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4404801910545055743,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4405083385521766399,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4405646335475187711,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4406772235382030335,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4406772235382030336,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4407898135288872960,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4408461085242294272,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4408742560219004928,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4408883297707360256,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4408953666451537920,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4408988850823626752,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409006443009671168,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409015239102693376,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409019637149204480,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409021836172460032,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409022935684087808,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409023485439901696,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409023760317808640,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409023897756762112,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409023966476238848,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024000835977216,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024018015846400,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024026605780992,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024030900748288,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024033048231936,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024034121973760,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024034658844672,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024034927280128,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035061497856,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035128606720,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035162161152,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035178938368,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035187326976,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035191521280,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035193618432,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035194667008,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195191296,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195453440,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195584512,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195650048,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195682816,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195699200,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195707392,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195711488,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195713536,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195714560,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715072,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715328,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715456,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715520,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715552,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715568,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715576,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715580,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715582,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4409024035195715583,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4607182418800017409,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4607182418800017411,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4607182418800017415,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4607182418800017423,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4607182418800017439,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4607182418800017471,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4608083138725491507,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4608469161550694692,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4608983858650965606,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4609112532926033334,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4609284098626123639,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4609584338601281672,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4609884578576439705,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4610399275676710619,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4610785298501913804,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4611042647052049261,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4611686018427387840,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4611686018427387872,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4611686018427387888,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4611686018427387896,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4611686018427387900,64,FLEN)
NAN_BOXED(6889020973145098207,64,FLEN)
NAN_BOXED(2324747533393986280,64,FLEN)
NAN_BOXED(4611686018427387902,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775809,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775811,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775815,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775823,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775839,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9223372036854775871,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224272756780249907,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9224658779605453092,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225173476705724006,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225302150980791734,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225473716680882039,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9225773956656040072,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226074196631198105,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226588893731469019,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9226974916556672204,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227232265106807661,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146240,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146272,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146288,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146296,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146300,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9227875636482146302,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257792,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257793,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257795,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257799,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257807,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257823,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257855,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364257919,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364258047,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364258303,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364258815,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364259839,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364261887,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364265983,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364274175,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364290559,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364323327,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364388863,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364519935,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435364782079,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435365306367,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435366354943,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435368452095,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435372646399,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435381035007,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435397812223,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435431366655,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435498475519,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435632693247,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386435901128703,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386436437999615,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386437511741439,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386439659225087,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386443954192383,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386452544126975,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386469723996159,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386504083734527,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386572803211263,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386710242164735,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241386985120071679,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241387534875885567,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241388634387513343,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241390833410768895,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241395231457279999,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241404027550302207,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241421619736346623,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241456804108435455,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241527172852613119,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241667910340968447,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9241949385317679103,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9242512335271100415,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9243638235177943039,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9243638235177943040,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9244764135084785664,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245327085038206976,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245608560014917632,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245749297503272960,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245819666247450624,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245854850619539456,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245872442805583872,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245881238898606080,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245885636945117184,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245887835968372736,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245888935480000512,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889485235814400,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889760113721344,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889897552674816,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245889966272151552,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890000631889920,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890017811759104,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890026401693696,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890030696660992,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890032844144640,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890033917886464,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034454757376,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034723192832,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034857410560,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034924519424,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034958073856,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034974851072,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034983239680,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034987433984,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034989531136,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034990579712,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991104000,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991366144,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991497216,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991562752,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991595520,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991611904,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991620096,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991624192,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991626240,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991627264,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991627776,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628032,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628160,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628224,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628256,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628272,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628280,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628284,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628286,64,FLEN)
NAN_BOXED(6889068279685352951,64,FLEN)
NAN_BOXED(32768,64,FLEN)
NAN_BOXED(9245890034991628287,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(3,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(7,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(15,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(31,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(63,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(900719925474099,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1286742750677284,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1801439850948198,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(1930114126015926,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2101679826106231,64,FLEN)
NAN_BOXED(6889096980123101125,64,FLEN)
NAN_BOXED(0,64,FLEN)
NAN_BOXED(2401919801264264,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
